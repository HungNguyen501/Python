var ASPx = ASPx || {};
var dx = dx || {};
(function module(ASPx, dx) {
ASPx.modules = { Utils: module };
if(!ASPx.attachToReady)
 ASPx.attachToReady = function (callback) { ASPx.Evt.AttachEventToElement(window, "load", callback); };
if(!ASPx.attachToLoad)
 ASPx.attachToLoad = function(callback) { ASPx.Evt.AttachEventToDocumentCore("DOMContentLoaded", callback); };
ASPx.EmptyObject = { };
ASPx.FalseFunction = function() { return false; };
ASPx.SSLSecureBlankUrl = '/DXR.axd?r=1_85-OugLk';
ASPx.EmptyImageUrl = '/DXR.axd?r=1_86-OugLk';
ASPx.VersionInfo = 'Version=\'19.2.3.0\', File Version=\'19.2.3.0\', Date Modified=\'5/12/2020 7:07:53 AM\'';
ASPx.Platform = 'ASP';
ASPx.InvalidDimension = -10000;
ASPx.InvalidPosition = -10000;
ASPx.AbsoluteLeftPosition = -10000;
ASPx.EmptyGuid = "00000000-0000-0000-0000-000000000000";
ASPx.CallbackSeparator = ":";
ASPx.ItemIndexSeparator = "i";
ASPx.CallbackResultPrefix = "/*DX*/";
ASPx.StyleValueEncodedSemicolon = "DXsmcln";
ASPx.AccessibilityEmptyUrl = "javascript:;";
ASPx.AccessibilityPronounceTimeout = 500;
ASPx.MaxMobileWindowWidth = 576;
ASPx.PossibleNumberDecimalSeparators = [",", "."];
ASPx.CultureInfo = {
 twoDigitYearMax: 2029,
 ts: ":",
 ds: "/",
 am: "AM",
 pm: "PM",
 monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
 genMonthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
 abbrMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
 abbrDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
 dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
 invariantCultureDecimalPoint: ".",
 numDecimalPoint: ".",
 numPrec: 2,
 numGroupSeparator: ",", 
 numGroups: [ 3 ],
 numNegPattern: 1,
 numPosInf: "Infinity", 
 numNegInf: "-Infinity", 
 numNan: "NaN",
 currency: "$",
 currDecimalPoint: ".",
 currPrec: 2,
 currGroupSeparator: ",",
 currGroups: [ 3 ],
 currPosPattern: 0,
 currNegPattern: 0,
 percentPattern: 0,
 shortTime: "h:mm tt",
 longTime: "h:mm:ss tt",
 shortDate: "M/d/yyyy",
 longDate: "dddd, MMMM d, yyyy",
 monthDay: "MMMM d",
 yearMonth: "MMMM yyyy"
};
ASPx.CultureInfo.genMonthNames = ASPx.CultureInfo.monthNames;
ASPx.Position = {
 Left: "Left",
 Right: "Right",
 Top: "Top",
 Bottom: "Bottom"
};
function setInnerHtmlInternal(el, trustedHtmlString) { 
 el.innerHTML = trustedHtmlString;
}
var DateUtils = { };
DateUtils.GetInvariantDateString = function(date) {
 if(!date)
  return "01/01/0001";
 var day = date.getDate();
 var month = date.getMonth() + 1;
 var year = date.getFullYear();
 var result = "";
 if(month < 10)
  result += "0";
 result += month.toString() + "/";
 if(day < 10)
  result += "0";
 result += day.toString() + "/";
 if(year < 1000)
  result += "0";
 result += year.toString();
 return result;
};
DateUtils.GetInvariantDateTimeString = function(date) {
 var dateTimeString = DateUtils.GetInvariantDateString(date);
 var time = {
  h: date.getHours(),
  m: date.getMinutes(),
  s: date.getSeconds()
 };
 for(var key in time) {
  if(time.hasOwnProperty(key)) {
   var str = time[key].toString();
   if(str.length < 2)
    str = "0" + str;
   time[key] = str;
  }
 }
 dateTimeString += " " + time.h + ":" + time.m + ":" + time.s;
 var msec = date.getMilliseconds();
 if(msec > 0)
  dateTimeString += "." + ("000" + msec.toString()).substr(-3);
 return dateTimeString;
};
DateUtils.ExpandTwoDigitYear = function(value) {
 value += 1900;
 if(value + 99 < ASPx.CultureInfo.twoDigitYearMax)
  value += 100;
 return value;  
};
DateUtils.GetTimeZoneOffsetDifference = function(firstDate, secondDate) {
 if(!secondDate)
  secondDate = DateUtils.GetUtcDate(firstDate);
 return 60000 * (firstDate.getTimezoneOffset() - secondDate.getTimezoneOffset());
};
DateUtils.GetTimeZoneOffset = function(date) {
 var isECMA262Support = ASPx.Browser.Chrome && ASPx.Browser.Version >= 67;
 if(!isECMA262Support)
  return date.getTimezoneOffset() * 60000;
 var utcDate = DateUtils.GetUtcDate(date);
 var utcTimezoneOffsetDifference = DateUtils.GetTimeZoneOffsetDifference(date);
 if(utcTimezoneOffsetDifference !== 0)
  utcDate.setTime(utcDate.valueOf() + utcTimezoneOffsetDifference);
 return utcDate - date;
};
DateUtils.GetUtcDate = function(date) {
 var utcFullYear = date.getUTCFullYear();
 var result = new Date(utcFullYear, date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
 if(utcFullYear < 100)
  result.setFullYear(utcFullYear);
 return result;
};
DateUtils.ToUtcTime = function(date) {
 var result = new Date();
 result.setTime(date.valueOf() + ASPx.DateUtils.GetTimeZoneOffset(date));
 return result;
};
DateUtils.ToLocalTime = function(date) {
 var result = new Date();
 result.setTime(date.valueOf() - ASPx.DateUtils.GetTimeZoneOffset(date));
 return result; 
};
DateUtils.AreDatesEqualExact = function(date1, date2) {
 if(date1 == null && date2 == null)
  return true;
 if(date1 == null || date2 == null)
  return false;
 return date1.getTime() == date2.getTime(); 
};
DateUtils.FixTimezoneGap = function(oldDate, newDate) {
 var diff = newDate.getHours() - oldDate.getHours();
 if(diff == 0)
  return;
 var sign = (diff == 1 || diff == -23) ? -1 : 1;
 var trial = new Date(newDate.getTime() + sign * 3600000);
 var isDateChangedAsExpected = newDate.getHours() - trial.getHours() === diff;
 if(isDateChangedAsExpected && (sign > 0 || trial.getDate() == newDate.getDate()))
  newDate.setTime(trial.getTime());
};
DateUtils.GetDecadeStartYear = function(year) {
 return 10 * Math.floor(year / 10);
};
DateUtils.GetCenturyStartYear = function(year) {
 return 100 * Math.floor(year / 100);
};
DateUtils.GetCorrectedYear = function(date, pickerType) {
 var year = date.getFullYear();
 return pickerType != ASPx.DatePickerType.Decades ? year : DateUtils.GetDecadeStartYear(year);
};
DateUtils.GetCorrectedMonth = function(date, pickerType) {
 return pickerType < ASPx.DatePickerType.Years ? date.getMonth() : 0;
};
DateUtils.GetCorrectedDay = function(date, pickerType) {
 return pickerType == ASPx.DatePickerType.Days ? date.getDate() : 1;
};
DateUtils.CorrectDateByPickerType = function(date, pickerType) {
 if(!ASPx.IsExists(pickerType))
  pickerType = ASPx.DatePickerType.Days;
 if(!date || pickerType == ASPx.DatePickerType.Days)
  return date;
 var correctedYear = DateUtils.GetCorrectedYear(date, pickerType);
 var result = new Date(
  correctedYear,
  DateUtils.GetCorrectedMonth(date, pickerType),
  DateUtils.GetCorrectedDay(date, pickerType),
  date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()
 );
 result.setFullYear(correctedYear);
 return result;
};
DateUtils.GetYearRangeFormatString = function(startYear, rangeLength) {
 return startYear + " - " + (startYear + rangeLength - 1);
};
ASPx.DateUtils = DateUtils;
var Timer = { };
Timer.ClearTimer = function(timerID){
 if(timerID > -1)
  window.clearTimeout(timerID);
 return -1;
};
Timer.ClearInterval = function(timerID){
 if(timerID > -1)
  window.clearInterval(timerID);
 return -1;
};
var setControlBoundTimer = function(handler, control, setTimerFunction, clearTimerFunction, delay) {
 var timerId;
 var getTimerId = function() { return timerId; };
 var controlMainElement = control.GetMainElement();
 var boundHandler = function() {
  var controlExists = control && ASPx.GetControlCollection().Get(control.name) === control && control.GetMainElement() === controlMainElement;
  if(controlExists)
   handler.aspxBind(control)();
  else {
   clearTimerFunction(getTimerId());
   controlMainElement = null;
  }
 };
 timerId = setTimerFunction(boundHandler, delay);
 return timerId;
};
Timer.SetControlBoundTimeout = function(handler, control, delay) {
 return setControlBoundTimer(handler, control, window.setTimeout, Timer.ClearTimer, delay);
};
Timer.SetControlBoundInterval = function(handler, control, delay) {
 return setControlBoundTimer(handler, control, window.setInterval, Timer.ClearInterval, delay);
};
Timer.Throttle = function(func, delay) {
 var isThrottled = false,
   savedArgs,
   savedThis = this;
 function wrapper() {
  if(isThrottled) {
   savedArgs = arguments;
   savedThis = this;
   return;
  }
  func.apply(this, arguments);
  isThrottled = true;
  setTimeout(function() {
   isThrottled = false;
   if(savedArgs) {
    wrapper.apply(savedThis, savedArgs);
    savedArgs = null;
   }
  }, delay);
 }
 wrapper.cancel = function() {
  clearTimeout(delay);
  delay = savedArgs = savedThis = null;
 };
 return wrapper;
};
ASPx.Timer = Timer;
var Browser = { };
Browser.UserAgent = navigator.userAgent.toLowerCase();
Browser.Mozilla = false;
Browser.IE = false;
Browser.Firefox = false;
Browser.Netscape = false;
Browser.Safari = false;
Browser.Chrome = false;
Browser.Opera = false;
Browser.Edge = false;
Browser.Version = undefined; 
Browser.MajorVersion = undefined; 
Browser.WindowsPlatform = false;
Browser.MacOSPlatform = false;
Browser.MacOSMobilePlatform = false;
Browser.AndroidMobilePlatform = false;
Browser.PlaformMajorVersion = false;
Browser.WindowsPhonePlatform = false;
Browser.AndroidDefaultBrowser = false;
Browser.AndroidChromeBrowser = false;
Browser.SamsungAndroidDevice = false;
Browser.WebKitTouchUI = false;
Browser.MSTouchUI = false;
Browser.TouchUI = false;
Browser.WebKitFamily = false; 
Browser.NetscapeFamily = false; 
Browser.HardwareAcceleration = false;
Browser.VirtualKeyboardSupported = false;
Browser.Info = "";
Browser.IsQuirksMode = document.compatMode === "BackCompat";
function indentPlatformMajorVersion(userAgent) {
 var regex = /(?:(?:windows nt|macintosh|mac os|cpu os|cpu iphone os|android|windows phone|linux) )(\d+)(?:[-0-9_.])*/;
 var matches = regex.exec(userAgent);
 if(matches)
  Browser.PlaformMajorVersion = matches[1];
}
function getIECompatibleVersionString() {
 if(document.compatible) {
  for(var i = 0; i < document.compatible.length; i++)
   if(document.compatible[i].userAgent === "IE" && document.compatible[i].version)
    return document.compatible[i].version.toLowerCase();
 }
 return "";
}
Browser.IdentUserAgent = function(userAgent, ignoreDocumentMode) {
 var browserTypesOrderedList = [ "Mozilla", "IE", "Firefox", "Netscape", "Safari", "Chrome", "Opera", "Opera10", "Edge" ];
 var defaultBrowserType = "IE";
 var defaultPlatform = "Win";
 var defaultVersions = { Safari: 2, Chrome: 0.1, Mozilla: 1.9, Netscape: 8, Firefox: 2, Opera: 9, IE: 6, Edge: 12 };
 if(!userAgent || userAgent.length == 0) {
  fillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
  return;
 }
 userAgent = userAgent.toLowerCase();
 indentPlatformMajorVersion(userAgent);
 try {
  var platformIdentStrings = {
   "Windows": "Win",
   "Macintosh": "Mac",
   "Mac OS": "Mac",
   "Mac_PowerPC": "Mac",
   "cpu os": "MacMobile",
   "cpu iphone os": "MacMobile",
   "Android": "Android",
   "!Windows Phone": "WinPhone",
   "!WPDesktop": "WinPhone",
   "!ZuneWP": "WinPhone"
  };
  var optSlashOrSpace = "(?:/|\\s*)?";
  var version = "(\\d+)(?:\\.((?:\\d+?[1-9])|\\d)0*?)?";
  var optVersion = "(?:" + version + ")?";
  var patterns = {
   Safari: "applewebkit(?:.*?(?:version/" + version + "[\\.\\w\\d]*?(?:\\s+mobile\/\\S*)?\\s+safari))?",
   Chrome: "(?:chrome|crios)(?!frame)" + optSlashOrSpace + optVersion,
   Mozilla: "mozilla(?:.*rv:" + optVersion + ".*Gecko)?",
   Netscape: "(?:netscape|navigator)\\d*/?\\s*" + optVersion,
   Firefox: "firefox" + optSlashOrSpace + optVersion,
   Opera: "(?:opera|\sopr)" + optSlashOrSpace + optVersion,
   Opera10: "opera.*\\s*version" + optSlashOrSpace + optVersion,
   IE: "msie\\s*" + optVersion,
   Edge: "edge" + optSlashOrSpace + optVersion
  };
  var browserType;
  var version = -1;
  for(var i = 0; i < browserTypesOrderedList.length; i++) {
   var browserTypeCandidate = browserTypesOrderedList[i];
   var regExp = new RegExp(patterns[browserTypeCandidate], "i");
   if(regExp.compile)
    regExp.compile(patterns[browserTypeCandidate], "i");
   var matches = regExp.exec(userAgent);
   if(matches && matches.index >= 0) {
    if(browserType == "IE" && version >= 11 && browserTypeCandidate == "Safari") 
     continue;
    browserType = browserTypeCandidate;
    if(browserType == "Opera10")
     browserType = "Opera";
    var tridentPattern = "trident" + optSlashOrSpace + optVersion;
    version = Browser.GetBrowserVersion(userAgent, matches, tridentPattern, getIECompatibleVersionString());
    if(browserType == "Mozilla" && version >= 11)
     browserType = "IE";
   }
  }
  if(!browserType)
   browserType = defaultBrowserType;
  var browserVersionDetected = version != -1;
  if(!browserVersionDetected)
   version = defaultVersions[browserType];
  var platform;
  var minOccurenceIndex = Number.MAX_VALUE;
  for(var identStr in platformIdentStrings) {
   if(!platformIdentStrings.hasOwnProperty(identStr)) continue;
   var importantIdent = identStr.substr(0,1) == "!";
   var occurenceIndex = userAgent.indexOf((importantIdent ? identStr.substr(1) : identStr).toLowerCase());
   if(occurenceIndex >= 0 && (occurenceIndex < minOccurenceIndex || importantIdent)) {
    minOccurenceIndex = importantIdent ? 0 : occurenceIndex;
    platform = platformIdentStrings[identStr];
   }
  }
  var samsungPattern = "SM-[A-Z]";
  var matches = userAgent.toUpperCase().match(samsungPattern);
  var isSamsungAndroidDevice = matches && matches.length > 0;
  if(platform == "WinPhone" && version < 9)
   version = Math.floor(getVersionFromTrident(userAgent, "trident" + optSlashOrSpace + optVersion));
  if(!ignoreDocumentMode && browserType == "IE" && version > 7 && document.documentMode < version)
   version = document.documentMode;
  if(platform == "WinPhone")
   version = Math.max(9, version);
  if(!platform)
   platform = defaultPlatform;
  if(platform == platformIdentStrings["cpu os"] && !browserVersionDetected) 
   version = 4;
  fillUserAgentInfo(browserTypesOrderedList, browserType, version, platform, isSamsungAndroidDevice);
 } catch(e) {
  fillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
 }
};
function getVersionFromMatches(matches) {
 var result = -1;
 var versionStr = "";
 if(matches[1]) {
  versionStr += matches[1];
  if(matches[2])
   versionStr += "." + matches[2];
 }
 if(versionStr != "") {
  result = parseFloat(versionStr);
  if(isNaN(result))
   result = -1;
 }
 return result;
}
function getVersionFromTrident(userAgent, tridentPattern) {
 var tridentDiffFromVersion = 4;
 var matches = new RegExp(tridentPattern, "i").exec(userAgent);
 return getVersionFromMatches(matches) + tridentDiffFromVersion;
}
Browser.GetBrowserVersion = function(userAgent, matches, tridentPattern, ieCompatibleVersionString) {
 var version = getVersionFromMatches(matches);
 if(ieCompatibleVersionString) {
  var versionFromTrident = getVersionFromTrident(userAgent, tridentPattern);
  if(ieCompatibleVersionString === "edge" || parseInt(ieCompatibleVersionString) === versionFromTrident)
   return versionFromTrident;
 }
 return version;
};
function fillUserAgentInfo(browserTypesOrderedList, browserType, version, platform, isSamsungAndroidDevice) {
 for(var i = 0; i < browserTypesOrderedList.length; i++) {
  var type = browserTypesOrderedList[i];
  Browser[type] = type == browserType;
 }
 Browser.Version = Math.floor(10.0 * version) / 10.0;
 Browser.MajorVersion = Math.floor(Browser.Version);
 Browser.WindowsPlatform = platform == "Win" || platform == "WinPhone";
 Browser.MacOSPlatform = platform == "Mac";
 Browser.MacOSMobilePlatform = platform == "MacMobile";
 Browser.AndroidMobilePlatform = platform == "Android";
 Browser.WindowsPhonePlatform = platform == "WinPhone";
 Browser.WebKitFamily = Browser.Safari || Browser.Chrome || Browser.Opera && Browser.MajorVersion >= 15;
 Browser.NetscapeFamily = Browser.Netscape || Browser.Mozilla || Browser.Firefox;
 Browser.HardwareAcceleration = (Browser.IE && Browser.MajorVersion >= 9) || (Browser.Firefox && Browser.MajorVersion >= 4) || 
  (Browser.AndroidMobilePlatform && Browser.Chrome) || (Browser.Chrome && Browser.MajorVersion >= 37) || 
  (Browser.Safari && !Browser.WindowsPlatform) || Browser.Edge || (Browser.Opera && Browser.MajorVersion >= 46);
 Browser.WebKitTouchUI = Browser.MacOSMobilePlatform || Browser.AndroidMobilePlatform;
 var isIETouchUI = Browser.IE && Browser.MajorVersion > 9 && Browser.WindowsPlatform && Browser.UserAgent.toLowerCase().indexOf("touch") >= 0;
 Browser.MSTouchUI = isIETouchUI || (Browser.Edge && !!window.navigator.maxTouchPoints);
 Browser.TouchUI = Browser.WebKitTouchUI || Browser.MSTouchUI;
 Browser.MobileUI = Browser.WebKitTouchUI || Browser.WindowsPhonePlatform;
 Browser.AndroidDefaultBrowser = Browser.AndroidMobilePlatform && !Browser.Chrome;
 Browser.AndroidChromeBrowser = Browser.AndroidMobilePlatform && Browser.Chrome;
 if(isSamsungAndroidDevice)
  Browser.SamsungAndroidDevice = isSamsungAndroidDevice;
 if(Browser.MSTouchUI) {
  var isARMArchitecture = Browser.UserAgent.toLowerCase().indexOf("arm;") > -1;    
  Browser.VirtualKeyboardSupported = isARMArchitecture || Browser.WindowsPhonePlatform;   
 } else {
  Browser.VirtualKeyboardSupported = Browser.MobileUI || (Browser.Chrome && !!window.navigator.maxTouchPoints);
 }
 fillDocumentElementBrowserTypeClassNames(browserTypesOrderedList);
}
function fillDocumentElementBrowserTypeClassNames(browserTypesOrderedList) {
 var documentElementClassName = "";
 var browserTypeslist = browserTypesOrderedList.concat(["WindowsPlatform", "MacOSPlatform", "MacOSMobilePlatform", "AndroidMobilePlatform",
   "WindowsPhonePlatform", "WebKitFamily", "WebKitTouchUI", "MSTouchUI", "TouchUI", "AndroidDefaultBrowser", "MobileUI"]);
 for(var i = 0; i < browserTypeslist.length; i++) {
  var type = browserTypeslist[i];
  if(Browser[type])
   documentElementClassName += "dx" + type + " ";
 }
 documentElementClassName += "dxBrowserVersion-" + Browser.MajorVersion;
 if(document && document.documentElement) {
  if(document.documentElement.className != "")
   documentElementClassName = " " + documentElementClassName;
  document.documentElement.className += documentElementClassName;
  Browser.Info = documentElementClassName;
 }
}
Browser.SupportsStickyPositioning = function() {
 return this.Chrome && this.MajorVersion >= 56
  || this.Firefox && this.MajorVersion >= 32
  || this.Safari && this.MajorVersion >= 6 && this.Version !== "6"
  || this.Opera && this.MajorVersion >= 42;
};
Browser.IdentUserAgent(Browser.UserAgent);
ASPx.Browser = Browser;
ASPx.BlankUrl = Browser.IE ? ASPx.SSLSecureBlankUrl : (Browser.Opera ? "about:blank" : "");
var Data = { };
Data.ArrayInsert = function(array, element, position){
 if(0 <= position && position < array.length){
  for(var i = array.length; i > position; i --)
   array[i] = array[i - 1];
  array[position] = element;
 }
 else
  array.push(element);
};
Data.ArrayRemove = function(array, element){
 var index = Data.ArrayIndexOf(array, element);
 if(index > -1) Data.ArrayRemoveAt(array, index);
};
Data.ArrayRemoveAt = function(array, index){
 if(index >= 0  && index < array.length){
  for(var i = index; i < array.length - 1; i++)
   array[i] = array[i + 1];
  array.pop();
 }
};
Data.ArrayClear = function(array){
 while(array.length > 0)
  array.pop();
};
Data.ArrayIndexOf = function(array, element, comparer) {
 if(!comparer) {
  for(var i = 0; i < array.length; i++) {
   if(array[i] == element)
    return i;
  }
 } else {
  for(var i = 0; i < array.length; i++) {
   if(comparer(array[i], element))
    return i;
  }
 }
 return -1;
};
Data.ArrayContains = function(array, element) { 
 return Data.ArrayIndexOf(array, element) >= 0;
};
Data.ArrayEqual = function(array1, array2) {
 var count1 = array1.length;
 var count2 = array2.length;
 if(count1 != count2)
  return false;
 for(var i = 0; i < count1; i++)
  if(array1[i] != array2[i])
   return false;
 return true;
};
Data.ArraySame = function(array1, array2) {
 if(array1.length !== array2.length)
  return false;
 return array1.every(function(elem) { return Data.ArrayContains(array2, elem); });
};
Data.ArrayGetIntegerEdgeValues = function(array) {
 var arrayToSort = Data.CollectionToArray(array);
 Data.ArrayIntegerAscendingSort(arrayToSort);
 return {
  start: arrayToSort[0],
  end: arrayToSort[arrayToSort.length - 1]
 };
};
Data.ArrayIntegerAscendingSort = function(array){
 Data.ArrayIntegerSort(array);
};
Data.ArrayIntegerSort = function(array, desc) {
 array.sort(function(i1, i2) {
  var res = 0;
  if(i1 > i2)
   res = 1;
  else if(i1 < i2)
   res = -1;
  if(desc)
   res *= -1;
  return res;
 });
};
Data.CollectionsUnionToArray = function(firstCollection, secondCollection) {
 var result = [];
 var firstCollectionLength = firstCollection.length;
 var secondCollectionLength = secondCollection.length;
 for(var i = 0; i < firstCollectionLength + secondCollectionLength; i++) {
  if(i < firstCollectionLength)
   result.push(firstCollection[i]);
  else
   result.push(secondCollection[i - firstCollectionLength]);
 }
 return result;
};
Data.CollectionToArray = function(collection) {
 var array = [];
 for(var i = 0; i < collection.length; i++)
  array.push(collection[i]);
 return array;
};
Data.CreateHashTableFromArray = function(array) {
 var hash = [];
 for(var i = 0; i < array.length; i++)
  hash[array[i]] = 1;
 return hash;
};
Data.CreateIndexHashTableFromArray = function(array) {
 var hash = [];
 for(var i = 0; i < array.length; i++)
  hash[array[i]] = i;
 return hash;
};
Data.ArrayToHash = function(array, getKeyFunc, getValueFunc) {
 if(!(array instanceof Array)) 
  return { };
 return array.reduce(function(map, element, index) { 
  var key = getKeyFunc(element, index);
  var value = getValueFunc(element, index);
  map[key] = value;
  return map; 
 }, { });
};
Data.Sum = function(array, getValueFunc) {
 if(!(array instanceof Array)) 
  return 0;
 return array.reduce(function(prevValue, item) {
  var value = getValueFunc ? getValueFunc(item) : item;
  if(!ASPx.IsNumber(value))
   value = 0;
  return prevValue + value;
 }, 0);
};
Data.Min = function(array, getValueFunc) { return CalculateArrayMinMax(array, getValueFunc, false); };
Data.Max = function(array, getValueFunc) { return CalculateArrayMinMax(array, getValueFunc, true); };
var CalculateArrayMinMax = function(array, getValueFunc, isMax) {
 if(!(array instanceof Array)) 
  return 0;
 var startValue = isMax ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
 return array.reduce(function(prevValue, item) {
  var value = getValueFunc ? getValueFunc(item) : item;
  if(!ASPx.IsNumber(value))
   value = startValue;
  var func = isMax ? Math.max : Math.min;
  return func(value, prevValue);
 }, startValue);
};
var defaultBinarySearchComparer = function(array, index, value) {
 var arrayElement = array[index];
 if(arrayElement == value)
  return 0;
 else
  return arrayElement < value ? -1 : 1;
};
Data.NearestLeftBinarySearchComparer = function(array, index, value) { 
 var arrayElement = array[index];
 var leftPoint = arrayElement < value;
 var lastLeftPoint = leftPoint && index == array.length - 1;
 var nearestLeftPoint = lastLeftPoint || (leftPoint && array[index + 1] >= value);
 if(nearestLeftPoint)
  return 0;
 else
  return arrayElement < value ? -1 : 1;
};
Data.ArrayBinarySearch = function(array, value, binarySearchComparer, startIndex, length) {
 if(!binarySearchComparer)
  binarySearchComparer = defaultBinarySearchComparer;
 if(!ASPx.IsExists(startIndex))
  startIndex = 0;
 if(!ASPx.IsExists(length))
  length = array.length - startIndex;
 var endIndex = (startIndex + length) - 1;
 while(startIndex <= endIndex) {
  var middle = (startIndex + ((endIndex - startIndex) >> 1));
  var compareResult = binarySearchComparer(array, middle, value);
  if(compareResult == 0)
   return middle;
  if(compareResult < 0)
   startIndex = middle + 1;
  else
   endIndex = middle - 1;
 }
 return -(startIndex + 1);
};
Data.ArrayFlatten = function(arrayOfArrays) {
 return [].concat.apply([], arrayOfArrays);
};
Data.GetDistinctArray = function(array) {
 var resultArray = [];
 for(var i = 0; i < array.length; i++) {
  var currentEntry = array[i];
  if(Data.ArrayIndexOf(resultArray, currentEntry) == -1) {
   resultArray.push(currentEntry);
  }
 }
 return resultArray;
};
Data.ForEach = function(arr, callback) {
 if(Array.prototype.forEach) {
  Array.prototype.forEach.call(arr, callback);
 } else {
  for(var i = 0, len = arr.length; i < len; i++) {
   callback(arr[i], i, arr);
  }
 }
};
Data.MergeHashTables = function(target, object) {
 if(!object || typeof (object) == "string")
  return target;
 if(!target)
  target = {};
 for(var key in object)
  if(key && !(key in target))
   target[key] = object[key];
 return target;
};
Data.Range = function(count, start) {
 count = parseInt(count) || 0;
 start = parseInt(start) || 0;
 if(count < 0) count = 0;
 if(start < 0) start = 0;
 return Array.apply(null, Array(count)).map(function(val, i) { return start + i; });
};
ASPx.Data = Data;
var Cookie = { };
Cookie.DelCookie = function(name){
 setCookieInternal(name, "", new Date(1970, 1, 1));
};
Cookie.GetCookie = function(name) {
 name = escape(name);
 var cookies = document.cookie.split(';');
 for(var i = 0; i < cookies.length; i++) {
  var cookie = Str.Trim(cookies[i]);
  if(cookie.indexOf(name + "=") == 0)
   return unescape(cookie.substring(name.length + 1, cookie.length));
  else if(cookie.indexOf(name + ";") == 0 || cookie === name)
   return "";
 }
 return null;
};
Cookie.SetCookie = function(name, value, expirationDate){
 if(!ASPx.IsExists(value)) {
  Cookie.DelCookie(name);
  return;
 }
 if(!ASPx.Ident.IsDate(expirationDate)) {
  expirationDate = new Date();
  expirationDate.setFullYear(expirationDate.getFullYear() + 1);
 }
 setCookieInternal(name, value, expirationDate);
};
function setCookieInternal(name, value, date){
 document.cookie = escape(name) + "=" + escape(value.toString()) + "; expires=" + date.toGMTString() + "; path=/";
}
ASPx.Cookie = Cookie;
ASPx.ImageUtils = {
 GetImageSrc: function (image){
  return image.src;
 },
 SetImageSrc: function(image, src){
  if(isSourceResetRequired())
   image.src = "";
  image.src = src;
 },
 SetSize: function(image, width, height){
  image.style.width = width + "px";
  image.style.height = height + "px";
 },
 GetSize: function(image, isWidth) {
  return (isWidth ? ASPx.GetElementOffsetWidth(image) : ASPx.GetElementOffsetHeight(image));
 }
};
var Str = { };
Str.ApplyReplacement = function(text, replecementTable) {
 if(typeof(text) != "string")
  text = text.toString();
 for(var i = 0; i < replecementTable.length; i++) {
  var replacement = replecementTable[i];
  text = text.replace(replacement[0], replacement[1]);
 }
 return text;
};
Str.CompleteReplace = function(text, regexp, newSubStr) {
 if(typeof(text) != "string")
  text = text.toString();
 var textPrev;
 do {
  textPrev = text;
  text = text.replace(regexp, newSubStr);
 } while(text != textPrev);
 return text;
};
Str.EncodeHtml = function(html) {
 return Str.ApplyReplacement(html, [
  [ /&amp;/g,  '&ampx;'  ], [ /&/g, '&amp;'  ],
  [ /&quot;/g, '&quotx;' ], [ /"/g, '&quot;' ],
  [ /&lt;/g,   '&ltx;'   ], [ /</g, '&lt;'   ],
  [ /&gt;/g,   '&gtx;'   ], [ />/g, '&gt;'   ]
 ]);
};
Str.DecodeHtml = function(html) {
 return Str.ApplyReplacement(html, [
  [ /&gt;/g,   '>' ], [ /&gtx;/g,  '&gt;'   ],
  [ /&lt;/g,   '<' ], [ /&ltx;/g,  '&lt;'   ],
  [ /&quot;/g, '"' ], [ /&quotx;/g,'&quot;' ],
  [ /&amp;/g,  '&' ], [ /&ampx;/g, '&amp;'  ]
 ]);
};
Str.DecodeHtmlViaTextArea = function(html) {
 var textArea = document.createElement("TEXTAREA");
 setInnerHtmlInternal(textArea, html);
 return textArea.value;
};
Str.TrimStart = function(str) { 
 return trimInternal(str, true);
};
Str.TrimEnd = function(str) { 
 return trimInternal(str, false, true);
};
Str.Trim = function(str) { 
 return trimInternal(str, true, true); 
};
Str.EscapeForRegEx = function(str) {
 return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
};
var whiteSpaces = { 
 0x0009: 1, 0x000a: 1, 0x000b: 1, 0x000c: 1, 0x000d: 1, 0x0020: 1, 0x0085: 1, 
 0x00a0: 1, 0x1680: 1, 0x180e: 1, 0x2000: 1, 0x2001: 1, 0x2002: 1, 0x2003: 1, 
 0x2004: 1, 0x2005: 1, 0x2006: 1, 0x2007: 1, 0x2008: 1, 0x2009: 1, 0x200a: 1, 
 0x200b: 1, 0x2028: 1, 0x2029: 1, 0x202f: 1, 0x205f: 1, 0x3000: 1
};
var caretWidth = 1;
function trimInternal(source, trimStart, trimEnd) {
 var len = source.length;
 if(!len)
  return source;
 var result = "";
 if(len < 0xBABA1) 
  result = trimSource(source, trimStart, trimEnd);
 else
  result = trimLargeSource(source, len, trimStart, trimEnd);
 return Str.ClearString(result);
}
function trimSource(source, trimStart, trimEnd) {
 var result = source;
 if(trimStart)
  result = result.replace(/^\s+/, "");
 if(trimEnd)
  result = result.replace(/\s+$/, "");
 return result;
}
function trimLargeSource(source, len, trimStart, trimEnd) {
 var start = 0;
 if(trimEnd) {
  while(len > 0 && whiteSpaces[source.charCodeAt(len - 1)]) {
   len--;
  }
 }
 if(trimStart && len > 0) {
  while(start < len && whiteSpaces[source.charCodeAt(start)]) {
   start++;
  }
 }
 return source.substring(start, len);
}
var inlineStringLength = 12;
Str.ClearString = function(str) { 
 if(!ASPx.Browser.Chrome)
  return str;
 return str.length < inlineStringLength ? str : JSON.parse(JSON.stringify(str));
};
Str.Insert = function(str, subStr, index) { 
 var leftText = str.slice(0, index);
 var rightText = str.slice(index);
 return leftText + subStr + rightText;
};
Str.InsertEx = function(str, subStr, startIndex, endIndex) { 
 var leftText = str.slice(0, startIndex);
 var rightText = str.slice(endIndex);
 return leftText + subStr + rightText;
};
var greekSLFSigmaChar = String.fromCharCode(962);
var greekSLSigmaChar = String.fromCharCode(963);
Str.PrepareStringForFilter = function(s){
 s = s.toLowerCase();
 if(ASPx.Browser.WebKitFamily) {
  return s.replace(new RegExp(greekSLFSigmaChar, "g"), greekSLSigmaChar);
 }
 return s;
};
Str.GetCoincideCharCount = function(text, filter, textMatchingDelegate) {
 var coincideText = ASPx.Str.PrepareStringForFilter(filter);
 var originText = ASPx.Str.PrepareStringForFilter(text);
 while(coincideText != "" && !textMatchingDelegate(originText, coincideText)) {
  coincideText = coincideText.slice(0, -1);
 }
 return coincideText.length;
};
ASPx.Str = Str;
var Xml = { };
Xml.Parse = function(xmlStr) {
 if(window.DOMParser) {
  var parser = new DOMParser();
  return parser.parseFromString(xmlStr, "text/xml");
 }
 else if(window.ActiveXObject) {
  var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
  if(xmlDoc) {
   xmlDoc.async = false;
   xmlDoc.loadXML(xmlStr);
   return xmlDoc;
  }
 }
 return null;
};
ASPx.Xml = Xml;
ASPx.Key = {
 F1     : 112,
 F2     : 113,
 F3     : 114,
 F4     : 115,
 F5     : 116,
 F6     : 117,
 F7     : 118,
 F8     : 119,
 F9     : 120,
 F10    : 121,
 F11    : 122,
 F12    : 123,
 Ctrl   : 17,
 Shift  : 16,
 Alt    : 18,
 Enter  : 13,
 Home   : 36,
 End    : 35,
 Left   : 37,
 Right  : 39,
 Up     : 38,
 Down   : 40,
 PageUp    : 33,
 PageDown  : 34,
 Esc    : 27,
 Space  : 32,
 Tab    : 9,
 Backspace : 8,
 Delete    : 46,
 Insert    : 45,
 ContextMenu  : 93,
 Windows   : 91,
 Decimal   : 110
};
ASPx.ModifierKey = {
 None: 0,
 Ctrl: 1 << (0 + 16),
 Shift: 1 << (2 + 16),
 Alt: 1 << (4 + 16),
 Meta: 1 << (8 + 16)
};
ASPx.KeyCode = {
 Backspace : 8,
 Tab    : 9,
 Enter  : 13,
 Pause  : 19,
 CapsLock  : 20,
 Esc    : 27,
 Space  : 32,
 PageUp    : 33,
 PageDown  : 34,
 End    : 35,
 Home   : 36,
 Left   : 37,
 Up     : 38,
 Right  : 39,
 Down   : 40,
 Insert    : 45,
 Delete    : 46,
 Key_0  : 48,
 Key_1  : 49,
 Key_2  : 50,
 Key_3  : 51,
 Key_4  : 52,
 Key_5  : 53,
 Key_6  : 54,
 Key_7  : 55,
 Key_8  : 56,
 Key_9  : 57,
 Key_a  : 65,
 Key_b  : 66,
 Key_c  : 67,
 Key_d  : 68,
 Key_e  : 69,
 Key_f  : 70,
 Key_g  : 71,
 Key_h  : 72,
 Key_i  : 73,
 Key_j  : 74,
 Key_k  : 75,
 Key_l  : 76,
 Key_m  : 77,
 Key_n  : 78,
 Key_o  : 79,
 Key_p  : 80,
 Key_q  : 81,
 Key_r  : 82,
 Key_s  : 83,
 Key_t  : 84,
 Key_u  : 85,
 Key_v  : 86,
 Key_w  : 87,
 Key_x  : 88,
 Key_y  : 89,
 Key_z  : 90,
 Windows   : 91,
 ContextMenu  : 93,
 Numpad_0  : 96,
 Numpad_1  : 97,
 Numpad_2  : 98,
 Numpad_3  : 99,
 Numpad_4  : 100,
 Numpad_5  : 101,
 Numpad_6  : 102,
 Numpad_7  : 103,
 Numpad_8  : 104,
 Numpad_9  : 105,
 Multiply  : 106,
 Add    : 107,
 Subtract  : 109,
 Decimal   : 110,
 Divide    : 111,
 F1     : 112,
 F2     : 113,
 F3     : 114,
 F4     : 115,
 F5     : 116,
 F6     : 117,
 F7     : 118,
 F8     : 119,
 F9     : 120,
 F10    : 121,
 F11    : 122,
 F12    : 123,
 NumLock   : 144,
 ScrollLock   : 145,
 Semicolon : 186,
 Equals    : 187,
 Comma  : 188,
 Dash   : 189,
 Period    : 190,
 ForwardSlash : 191,
 GraveAccent  : 192,
 OpenBracket  : 219,
 BackSlash : 220,
 CloseBracket : 221,
 SingleQuote  : 222
};
ASPx.ScrollBarMode = { Hidden: 0, Visible: 1, Auto: 2 };
ASPx.ColumnResizeMode = { None: 0, Control: 1, NextColumn: 2 };
var Selection = { };
Selection.Set = function(input, startPos, endPos, scrollToSelection, isApi) {
 if(!ASPx.IsExistsElement(input))
  return;
 var isInputFocused = ASPx.GetActiveElement() === input;
 var isInputNativeFocusLocked = ASPx.VirtualKeyboardUI.getInputNativeFocusLocked();
 if(!isApi && Browser.VirtualKeyboardSupported && (!isInputFocused || isInputNativeFocusLocked))
  return;
 var textLen = input.value.length;
 startPos = ASPx.GetDefinedValue(startPos, 0);
 endPos = ASPx.GetDefinedValue(endPos, textLen);
 if(startPos < 0)
  startPos = 0;
 if(endPos < 0 || endPos > textLen)
  endPos = textLen;
 if(startPos > endPos)
  startPos = endPos;
 var makeReadOnly = false;
 if(Browser.WebKitFamily && input.readOnly) {
  input.readOnly = false;
  makeReadOnly = true;
 }
 try {
  if(Browser.Firefox && Browser.Version >= 8) 
   input.setSelectionRange(startPos, endPos, "backward");
  else if(Browser.IE && input.createTextRange) {
   var range = input.createTextRange();
   range.collapse(true);
   range.moveStart("character", startPos);
   range.moveEnd("character", endPos - startPos);
   range.select();
  } else {
   forceScrollToSelectionRange(input, startPos, endPos);
   input.setSelectionRange(startPos, endPos);
  }
  if(Browser.Opera || Browser.Firefox || Browser.Chrome || Browser.Edge) 
   input.focus();
 } catch(e) { }
 if(scrollToSelection && input.tagName == 'TEXTAREA') {
  var scrollHeight = input.scrollHeight;
  var approxCaretPos = startPos;
  var scrollTop = Math.max(Math.round(approxCaretPos * scrollHeight / textLen  - input.clientHeight / 2), 0);
  input.scrollTop = scrollTop;
 }
 if(makeReadOnly)
  input.readOnly = true;
};
var getTextWidthBeforePos = function(input, pos) {
 return ASPx.GetSizeOfText(input.value.toString().substr(0, pos), ASPx.GetCurrentStyle(input)).width;
};
var forceScrollToSelectionRange = function(input, startPos, endPos) {
 if(endPos === input.value.length)
  input.scrollLeft = input.scrollWidth;
 else if(startPos === 0 && endPos === 0)
  input.scrollLeft = 0;
 else {
  var inputRawWidth = ASPx.GetElementOffsetWidth(input) - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(input);
  if(inputRawWidth < input.scrollWidth) {
   var widthBeforeEndPos = getTextWidthBeforePos(input, endPos) + caretWidth;
   if(input.scrollLeft < widthBeforeEndPos - inputRawWidth)
    input.scrollLeft = widthBeforeEndPos - inputRawWidth;
   else {
    var widthBeforeStartPos = getTextWidthBeforePos(input, startPos) - caretWidth;
    if(input.scrollLeft > widthBeforeStartPos)
     input.scrollLeft = widthBeforeStartPos;
   }
  }
 }
};
Selection.GetInfo = function(input) {
 var start, end;
 if(Browser.IE && Browser.Version < 9) {
  var range = document.selection.createRange();
  var rangeCopy = range.duplicate();
  range.move('character', -input.value.length);
  range.setEndPoint('EndToStart', rangeCopy);
  start = range.text.length;
  end = start + rangeCopy.text.length;
 } else {
  try {
   start = input.selectionStart;
   end = input.selectionEnd;
  } catch (e) {
  }
 }
 return { startPos: start, endPos: end };
};
Selection.GetExtInfo = function(input) {
 var start = 0, end = 0, textLen = 0;
 if(Browser.IE && Browser.Version < 9) {
  var normalizedValue;
  var range, textInputRange, textInputEndRange;
  range = document.selection.createRange();
  if(range && range.parentElement() == input) {
   textLen = input.value.length;
   normalizedValue = input.value.replace(/\r\n/g, "\n");
   textInputRange = input.createTextRange();
   textInputRange.moveToBookmark(range.getBookmark());
   textInputEndRange = input.createTextRange();
   textInputEndRange.collapse(false);
   if(textInputRange.compareEndPoints("StartToEnd", textInputEndRange) > -1) {
    start = textLen;
    end = textLen;
   } else {
    start = normalizedValue.slice(0, start).split("\n").length - textInputRange.moveStart("character", -textLen) -1;
    if(textInputRange.compareEndPoints("EndToEnd", textInputEndRange) > -1)
     end = textLen;
    else
     end = normalizedValue.slice(0, end).split("\n").length - textInputRange.moveEnd("character", -textLen) - 1;    
   }
  }
  return {startPos: start, endPos: end};
 }
 try {
  start = input.selectionStart;
  end = input.selectionEnd;
 } catch (e) {
 }
 return {startPos: start, endPos: end}; 
};
Selection.SetCaretPosition = function(input, caretPos) {
 if(typeof caretPos === "undefined" || caretPos < 0)
  caretPos = input.value.length;
 Selection.Set(input, caretPos, caretPos, true);
};
Selection.GetCaretPosition = function(element, isDialogMode) {
 var pos = 0;
 if("selectionStart" in element) {
  pos = element.selectionStart;
 } else if("selection" in document) {
  element.focus();
  var sel = document.selection.createRange(),
   selLength = document.selection.createRange().text.length;
  sel.moveStart("character", -element.value.length);
  pos = sel.text.length - selLength;
 }
 if(isDialogMode && !pos) {
  pos = element.value.length - 1;
 }
 return pos;
};
Selection.Clear = function() {
 try {
  if(window.getSelection) {
   window.getSelection().removeAllRanges();
  }
  else if(document.selection) {
   if(document.selection.empty)
    document.selection.empty();
   else if(document.selection.clear)
    document.selection.clear();
  }
 } catch(e) {
 }
};
Selection.ClearOnMouseMove = function(evt) {
 if(!Browser.IE || (evt.button != 0)) 
  Selection.Clear();
};
Selection.SetElementSelectionEnabled = function(element, value) {
 var userSelectValue = value ? "" : "none";
 var func = value ? Evt.DetachEventFromElement : Evt.AttachEventToElement;
 if(Browser.Firefox)
  element.style.MozUserSelect = userSelectValue;
 else if(Browser.WebKitFamily)
  element.style.webkitUserSelect = userSelectValue;
 else if(Browser.IE && Browser.Version > 10 || Browser.Edge)
  element.style.msUserSelect = userSelectValue;
 else if(Browser.Opera)
  func(element, "mousemove", Selection.Clear);
 else {
  func(element, "selectstart", ASPx.FalseFunction);
  func(element, "mousemove", Selection.Clear);
 }
};
Selection.SetElementAsUnselectable = function(element, isWithChild, recursive) {
 if(element && element.nodeType == 1) {
  element.unselectable = "on";
  if(Browser.NetscapeFamily)
   element.onmousedown = ASPx.FalseFunction;
  if((Browser.IE && Browser.Version >= 9) || Browser.WebKitFamily)
   Evt.AttachEventToElement(element, "mousedown", Evt.PreventEventAndBubble);
  if(isWithChild === true){
   for(var j = 0; j < element.childNodes.length; j ++)
    Selection.SetElementAsUnselectable(element.childNodes[j], (!!recursive ? true : false), (!!recursive));
  }
 }
};
Selection.AreEqual = function(selection1, selection2) {
 return selection1.startPos === selection2.startPos && selection1.endPos === selection2.endPos;
};
ASPx.Selection = Selection;
var MouseScroller = { };
MouseScroller.MinimumOffset = 10;
MouseScroller.Create = function(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp, onMouseUpMissed) {
 var element = getElement();
 if(!element) 
  return;
 if(!element.dxMouseScroller)
  element.dxMouseScroller = new MouseScroller.Extender(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp, onMouseUpMissed);
 return element.dxMouseScroller;
};
MouseScroller.Extender = function(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp, onMouseUpMissed) {
 this.getElement = getElement;
 this.getScrollXElement = getScrollXElement;
 this.getScrollYElement = getScrollYElement;
 this.needPreventScrolling = needPreventScrolling;
 this.vertRecursive = !!vertRecursive;
 this.createHandlers(onMouseDown || function() { }, onMouseMove || function() { }, onMouseUp || function() { }, onMouseUpMissed || function() { });
 this.update();
};
MouseScroller.Extender.prototype = {
 update: function() {
  if(this.element)
   Evt.DetachEventFromElement(this.element, ASPx.TouchUIHelper.touchMouseDownEventName, this.mouseDownHandler);
  this.element = this.getElement();
  Evt.AttachEventToElement(this.element, ASPx.TouchUIHelper.touchMouseDownEventName, this.mouseDownHandler);  
  Evt.AttachEventToElement(this.element, "click", this.mouseClickHandler);   
  if(Browser.MSTouchUI && this.element.className.indexOf(ASPx.TouchUIHelper.msTouchDraggableClassName) < 0)
   this.element.className += " " + ASPx.TouchUIHelper.msTouchDraggableClassName;
  this.scrollXElement = this.getScrollXElement();
  this.scrollYElement = this.getScrollYElement();
 },
 createHandlers: function(onMouseDown, onMouseMove, onMouseUp, onMouseUpMissed) {
  var mouseDownCounter = 0;
  this.onMouseDown = onMouseDown;
  this.onMouseMove = onMouseMove;
  this.onMouseUp = onMouseUp;  
  this.mouseDownHandler = function(e) {
   if(mouseDownCounter++ > 0) {
    this.finishScrolling();
    onMouseUpMissed();
   }
   var eventSource = Evt.GetEventSource(e);
   var requirePreventCustonScroll = ASPx.IsExists(ASPx.TouchUIHelper.RequirePreventCustomScroll) && ASPx.TouchUIHelper.RequirePreventCustomScroll(eventSource, this.element);
   this.requirePreventScroll = requirePreventCustonScroll || this.needPreventScrolling && this.needPreventScrolling(eventSource);
   if(this.requirePreventScroll)
    return;
   this.scrollableTreeLine = this.GetScrollableElements();
   this.firstX = this.prevX = Evt.GetEventX(e);
   this.firstY = this.prevY = Evt.GetEventY(e);
   Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, this.mouseMoveHandler);
   Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, this.mouseUpHandler);
   this.onMouseDown(e);
  }.aspxBind(this);
  this.mouseMoveHandler = function(e) {
   if(ASPx.TouchUIHelper.isGesture)
    return;
   var x = Evt.GetEventX(e);
   var y = Evt.GetEventY(e);
   var xDiff = this.prevX - x;
   var yDiff = this.prevY - y;
   if(this.vertRecursive) {
    var isTopDirection = yDiff < 0;
    this.scrollYElement = this.GetElementForVertScrolling(isTopDirection, this.prevIsTopDirection, this.scrollYElement);
    this.prevIsTopDirection = isTopDirection;
   }
   if(this.scrollXElement && xDiff != 0)
    this.scrollXElement.scrollLeft += xDiff;
   if(this.scrollYElement && yDiff != 0) {
    this.scrollYElement.scrollTop += yDiff;
    var isOuterScrollableElement = this.scrollableTreeLine[this.scrollableTreeLine.length - 1] == this.scrollYElement;
    if(isOuterScrollableElement)
     y += yDiff;
   }
   this.prevX = x;
   this.prevY = y;
   Evt.PreventEvent(e);
   this.onMouseMove(e);
  }.aspxBind(this);
  this.mouseUpHandler = function(e) {
   this.finishScrolling();
   this.onMouseUp(e);
  }.aspxBind(this);
  this.mouseClickHandler = function(e){
   if(this.requirePreventScroll)
    return;
   var xDiff = this.firstX - Evt.GetEventX(e);
   var yDiff = this.firstY - Evt.GetEventY(e);
   if(xDiff > MouseScroller.MinimumOffset || yDiff > MouseScroller.MinimumOffset)
    return Evt.PreventEventAndBubble(e);
  }.aspxBind(this);
  this.finishScrolling = function() {
   Evt.DetachEventFromDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, this.mouseMoveHandler);
   Evt.DetachEventFromDocument(ASPx.TouchUIHelper.touchMouseUpEventName, this.mouseUpHandler);
   this.scrollableTreeLine = [];
   this.prevIsTopDirection = null;
   mouseDownCounter--;
  };
 },
 GetScrollableElements: function() {
  if(!this.vertRecursive) return [ ];
  var isHtmlScrollableElement = !ASPx.Browser.IsQuirksMode && !ASPx.Browser.Safari;
  var outerScrollableElementTag = isHtmlScrollableElement ? "HTML" : "BODY";
  return ASPx.GetElementTreeLine(this.element, null, function(el) { return el == document; })
   .filter(function(el) {
    var tagName = el.tagName;
    if(isHtmlScrollableElement && tagName == "BODY")
     return false;
    return ASPx.IsScrollableElement(el, false, true) || tagName == outerScrollableElementTag || el.dxScrollable;
   }.bind(this));
 },
 GetElementForVertScrolling: function(currentIsTop, prevIsTop, prevElement) {
  if(prevElement && currentIsTop === prevIsTop && this.GetVertScrollExcess(prevElement, currentIsTop) > 0)
   return prevElement;
  for(var i = 0; i < this.scrollableTreeLine.length; i++) {
   var element = this.scrollableTreeLine[i];
   var excess = this.GetVertScrollExcess(element, currentIsTop);
   if(excess > 0)
    return element;
  }
  return null;
 },
 GetVertScrollExcess: function(element, isTop) {
  if(isTop)
   return element.scrollTop;
  var isDocument = element.tagName == "HTML" || ASPx.Browser.Safari && !ASPx.Browser.IsQuirksMode && element.tagName == "BODY";
  var clientHeight = isDocument ? ASPx.GetDocumentClientHeight() : element.clientHeight;
  return element.scrollHeight - clientHeight - element.scrollTop;
 }
};
ASPx.MouseScroller = MouseScroller;
var Evt = { };
Evt.GetEvent = function(evt){
 return (typeof(event) != "undefined" && event != null && Browser.IE) ? event : evt; 
};
Evt.IsEventPrevented = function(evt) {
 return evt.defaultPrevented || evt.returnValue === false;
};
Evt.PreventEvent = function(evt){
 if(evt.preventDefault) {
  if(evt.cancelable)
   evt.preventDefault();
 }
 else
  evt.returnValue = false;
 return false;
};
Evt.PreventEventAndBubble = function(evt){
 Evt.PreventEvent(evt);
 if(evt.stopPropagation)
  evt.stopPropagation();
 evt.cancelBubble = true;
 return false;
};
Evt.CancelBubble = function(evt){
 evt.stopPropagation();
 return false;
};
Evt.PreventImageDragging = function(image) {
 if(image)
  image.ondragstart = function() { return false; };
};
Evt.PreventDragStart = function(evt) {
 evt = Evt.GetEvent(evt);
 var element = Evt.GetEventSource(evt);
 if(element.releaseCapture)
  element.releaseCapture(); 
 return false;
};
Evt.PreventElementDrag = function(element) {
 if(Browser.IE)
  Evt.AttachEventToElement(element, "dragstart", Evt.PreventEvent);
 else
  Evt.AttachEventToElement(element, "mousedown", Evt.PreventEvent);
};
Evt.PreventElementDragAndSelect = function(element, skipMouseMove, skipIESelect){
 if(Browser.WebKitFamily)
  Evt.AttachEventToElement(element, "selectstart", Evt.PreventEventAndBubble);
 if(Browser.IE){
  if(!skipIESelect)
   Evt.AttachEventToElement(element, "selectstart", ASPx.FalseFunction);
  if(!skipMouseMove)
   Evt.AttachEventToElement(element, "mousemove", Selection.ClearOnMouseMove);
  Evt.AttachEventToElement(element, "dragstart", Evt.PreventDragStart);
 }
};
Evt.GetEventSource = function(evt){
 if(!ASPx.IsExists(evt)) return null; 
 return evt.srcElement ? evt.srcElement : evt.target;
};
Evt.GetKeyCode = function(srcEvt) {
 return Browser.NetscapeFamily || Browser.Opera ? srcEvt.which : srcEvt.keyCode;
};
function clientEventRequiresDocScrollCorrection() {
 var isSafariVerLess3 = Browser.Safari && Browser.Version < 3,
  isMacOSMobileVerLess51 = Browser.MacOSMobilePlatform && Browser.Version < 5.1;
 return Browser.AndroidDefaultBrowser || Browser.AndroidChromeBrowser || !(isSafariVerLess3 || isMacOSMobileVerLess51);
}
Evt.GetEventX = function(evt){
 if(ASPx.TouchUIHelper.isTouchEvent(evt))
  return ASPx.TouchUIHelper.getEventX(evt);
 return evt.clientX + (clientEventRequiresDocScrollCorrection() ? ASPx.GetDocumentScrollLeft() : 0);
};
Evt.GetEventY = function(evt){
 if(ASPx.TouchUIHelper.isTouchEvent(evt))
  return ASPx.TouchUIHelper.getEventY(evt);
 return evt.clientY + (clientEventRequiresDocScrollCorrection() ? ASPx.GetDocumentScrollTop() : 0 );
};
Evt.IsLeftButtonPressed = function(evt) {
 if(ASPx.TouchUIHelper.isTouchEvent(evt))
  return true;
 evt = Evt.GetEvent(evt);
 if(!evt) return false;
 if(Browser.IE && Browser.Version < 11) {
  if(Browser.MSTouchUI)
   return true;
  return evt.button % 2 == 1; 
 } else if(Browser.WebKitFamily) {
  if(evt.type === "pointermove")
   return evt.buttons === 1;
  return evt.which == 1;
 } else if(Browser.NetscapeFamily || Browser.Edge || (Browser.IE && Browser.Version >= 11)) {
  if(evt.type === ASPx.TouchUIHelper.touchMouseMoveEventName)
   return evt.buttons === 1;
  return evt.which == 1;
 } else if(Browser.Opera)
  return evt.button == 0;
 return true;
};
Evt.IsRightButtonPressed = function(evt){
 evt = Evt.GetEvent(evt);
 if(!ASPx.IsExists(evt)) return false;
 if(Browser.IE || Browser.Edge) {
  if(evt.type === "pointermove")
   return evt.buttons === 2;
  return evt.button == 2;
 }
 else if(Browser.NetscapeFamily || Browser.WebKitFamily)
  return evt.which == 3;
 else if (Browser.Opera)
  return evt.button == 1;
 return true;
};
Evt.GetWheelDelta = function(evt) {
 var ret;
 if(Browser.NetscapeFamily && Browser.MajorVersion < 17)
  ret = -evt.detail;
 else if(Browser.Safari)
  ret = evt.wheelDelta;
 else
  ret = -evt.deltaY;
 if(Browser.Opera && Browser.Version < 9)
  ret = -ret;
 return ret;
};
Evt.IsWheelEventWithDirection = function(evt) {
 return ASPx.Data.ArrayContains(["wheel", "mousewheel"], evt.type);
};
Evt.GetWheelDeltaX = function(evt) {
 if(evt.type === "wheel")
  return -evt.deltaX;
 if(evt.type === "mousewheel")
  return evt.wheelDeltaX;
};
Evt.GetWheelDeltaY = function(evt) {
 if(evt.type === "wheel")
  return -evt.deltaY;
 if(evt.type === "mousewheel")
  return evt.wheelDeltaY;
};
Evt.IsPassiveListenersSupported = function() {
 if(Browser.Chrome && Browser.MajorVersion > 69 || Browser.Edge && Browser.MajorVersion > 15 || Browser.Firefox && Browser.MajorVersion > 62)
  return true;
 if(Evt.isPassiveListenersSupported === undefined) {
  Evt.isPassiveListenersSupported = false;
  try {
   var options = Object.defineProperty({}, "passive", { get: function() { Evt.isPassiveListenersSupported = true; } });
   window.addEventListener("test", options, options);
   window.removeEventListener("test", options, options);
  }
  catch(err) { Evt.isPassiveListenersSupported = false; }
 }
 return !!Evt.isPassiveListenersSupported;
};
Evt.AttachEventToElement = function(element, eventName, func, onlyBubbling, passive) {
 if(element.addEventListener)
  element.addEventListener(eventName, func, Evt.IsPassiveListenersSupported() ? { capture: !onlyBubbling, passive: !!passive } : !onlyBubbling);
 else
  element.attachEvent("on" + eventName, func);
};
Evt.DetachEventFromElement = function(element, eventName, func, onlyBubbling) {
 if(element.removeEventListener)
  element.removeEventListener(eventName, func, Evt.IsPassiveListenersSupported() ? { capture: !onlyBubbling } : !onlyBubbling);
 else
  element.detachEvent("on" + eventName, func);
};
Evt.AttachEventToDocument = function(eventName, func) {
 var attachingAllowed = ASPx.TouchUIHelper.onEventAttachingToDocument(eventName, func);
 if(attachingAllowed)
  Evt.AttachEventToDocumentCore(eventName, func);
};
Evt.AttachEventToDocumentCore = function(eventName, func) {
 Evt.AttachEventToElement(document, eventName, func);
};
Evt.DetachEventFromDocument = function(eventName, func) {
 Evt.DetachEventFromDocumentCore(eventName, func);
 ASPx.TouchUIHelper.onEventDettachedFromDocument(eventName, func);
};
Evt.DetachEventFromDocumentCore = function(eventName, func){
 Evt.DetachEventFromElement(document, eventName, func);
};
Evt.GetMouseWheelEventName = function() {
 if(Browser.Safari)
  return "mousewheel";
 if(Browser.NetscapeFamily && Browser.MajorVersion < 17)
  return "DOMMouseScroll";
 return "wheel";
};
Evt.AttachMouseEnterToElement = function (element, onMouseOverHandler, onMouseOutHandler) {
 Evt.AttachEventToElement(element, ASPx.TouchUIHelper.pointerEnabled ? ASPx.TouchUIHelper.pointerOverEventName : "mouseover", function (evt) { mouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
 Evt.AttachEventToElement(element, ASPx.TouchUIHelper.pointerEnabled ? ASPx.TouchUIHelper.pointerOutEventName : "mouseout", function (evt) { mouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
};
Evt.GetEventRelatedTarget = function(evt, isMouseOverEvent) {
 return evt.relatedTarget || (isMouseOverEvent ? evt.srcElement : evt.toElement);
};
function mouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler) {
 var isMouseOverExecuted = !!element.dxMouseOverExecuted;
 var isMouseOverEvent = (evt.type == "mouseover" || evt.type == ASPx.TouchUIHelper.pointerOverEventName);
 if(isMouseOverEvent && isMouseOverExecuted || !isMouseOverEvent && !isMouseOverExecuted)
  return;
 var source = Evt.GetEventRelatedTarget(evt, isMouseOverEvent);
 if(!ASPx.GetIsParent(element, source)) {
  element.dxMouseOverExecuted = isMouseOverEvent;
  if(isMouseOverEvent)
   onMouseOverHandler(element);
  else
   onMouseOutHandler(element);
 }
 else if(isMouseOverEvent && !isMouseOverExecuted) {
  element.dxMouseOverExecuted = true;
  onMouseOverHandler(element);
 }
}
Evt.DispatchEvent = function(target, eventName, canBubble, cancellable) {
 var event;
 if(Browser.IE && Browser.Version < 9) {
  eventName = "on" + eventName;
  if(eventName in target) {
   event = document.createEventObject();
   target.fireEvent("on" + eventName, event);
  }
 } else {
  event = document.createEvent("Event");
  event.initEvent(eventName, canBubble || false, cancellable || false);
  target.dispatchEvent(event);
 }
};
Evt.EmulateDocumentOnMouseDown = function(evt) {
 Evt.EmulateOnMouseDown(document, evt);
};
Evt.EmulateOnMouseDown = function(element, evt) {
 if(Browser.IE && Browser.Version < 9)
  element.fireEvent("onmousedown", evt);
 else if(!Browser.WebKitFamily){
  var emulatedEvt = document.createEvent("MouseEvents");
  emulatedEvt.initMouseEvent("mousedown", true, true, window, 0, evt.screenX, evt.screenY, 
   evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, false, 0, null);
  element.dispatchEvent(emulatedEvt);
 }
};
Evt.EmulateOnMouseEvent = function (type, element, evt) {
 evt.type = type;
 var emulatedEvt = document.createEvent("MouseEvents");
 emulatedEvt.initMouseEvent(type, true, true, window, 0, evt.screenX, evt.screenY,
  evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, false, 0, null);
 emulatedEvt.target = element;
 element.dispatchEvent(emulatedEvt);
};
Evt.EmulateMouseClick = function (element, evt) {
 var x = ASPx.GetElementOffsetWidth(element) / 2;
 var y = ASPx.GetElementOffsetHeight(element) / 2;
 if (!evt)
  evt = {
   bubbles: true,
   cancelable: true,
   view: window,
   detail: 1,
   screenX: 0,
   screenY: 0,
   clientX: x,
   clientY: y,
   ctrlKey: false,
   altKey: false,
   shiftKey: false,
   metaKey: false,
   button: 0,
   relatedTarget: null
  };
 Evt.EmulateOnMouseEvent("mousedown", element, evt);
 Evt.EmulateOnMouseEvent("mouseup", element, evt);
 Evt.EmulateOnMouseEvent("click", element, evt);
};
Evt.DoElementClick = function(element) {
 try{
  element.click();
 }
 catch(e){ 
 }
};
Evt.IsActionKeyPressed = function(evt) {
 return evt.keyCode === ASPx.Key.Space ||
     evt.keyCode === ASPx.Key.Enter ||
    (evt.keyCode === ASPx.Key.Down && evt.altKey);
};
Evt.InvokeMouseClickByKeyDown = function(evt, handler) {
 if(Evt.IsActionKeyPressed(evt)) {
  ASPx.Evt.PreventEvent(evt); 
  if(!handler)
   ASPx.Evt.GetEventSource(evt).onclick();
  else
   handler(evt);
 }
};
Evt.AttachContextMenuToElement = function (element, handler, onlyBubbling) {
 if (ASPx.TouchUIHelper.useLongTapHelper())
  element.detachContextMenuEventHandler = ASPx.TouchUIHelper.attachLongTapHandler(element, handler, onlyBubbling);
 else
  Evt.AttachEventToElement(element, "contextmenu", handler, onlyBubbling);
};
Evt.DetachContextMenuFromElement = function (element, handler) {
 if (element.detachContextMenuEventHandler)
  element.detachContextMenuEventHandler();
 else
  Evt.DetachEventFromElement(element, "contextmenu", handler);
};
Evt.PreventContextMenuOnElement = function(element) {
 Evt.AttachContextMenuToElement(element, function(evt) {
  Evt.PreventEvent(evt);
 });
};
ASPx.Evt = Evt;
var Attr = { };
Attr.GetAttribute = function(obj, attrName){
 if(obj.getAttribute)
  return obj.getAttribute(attrName);
 else if(obj.getPropertyValue) {
  if(Browser.Firefox) { 
   try {
    return obj.getPropertyValue(attrName);
   } catch(e) {
    return obj[attrName];
   }
  }
  return obj.getPropertyValue(attrName);
 }
 return null;
};
Attr.SetAttribute = function(obj, attrName, value){
 if(obj.setAttribute) {
  if(isSourceResetRequired() && attrName.toLowerCase() === "src") 
   obj.setAttribute(attrName, "");
  obj.setAttribute(attrName, value);
 } else if(obj.setProperty)
  obj.setProperty(attrName, value, "");
};
Attr.ToggleAttribute = function(obj, attrName, value, condition) {
 if(condition)
  Attr.SetAttribute(obj, attrName, value);
 else
  Attr.RemoveAttribute(obj, attrName);
};
Attr.RemoveAttribute = function(obj, attrName){
 if(obj.removeAttribute)
  obj.removeAttribute(attrName);
 else if(obj.removeProperty)
  obj.removeProperty(attrName);
};
Attr.IsExistsAttribute = function(obj, attrName){
 var value = Attr.GetAttribute(obj, attrName);
 return (value != null) && (value !== "");
};
Attr.SetOrRemoveAttribute = function(obj, attrName, value) {
 if(!value)
  Attr.RemoveAttribute(obj, attrName);
 else
  Attr.SetAttribute(obj, attrName, value);
};
Attr.SaveAttribute = function(obj, attrName, savedObj, savedAttrName){
 if(!Attr.IsExistsAttribute(savedObj, savedAttrName)){
  var oldValue = Attr.IsExistsAttribute(obj, attrName) ? Attr.GetAttribute(obj, attrName) : ASPx.EmptyObject;
  Attr.SetAttribute(savedObj, savedAttrName, oldValue);
 }
};
Attr.SaveStyleAttribute = function(obj, attrName){
 Attr.SaveAttribute(obj.style, attrName, obj, "saved" + attrName);
};
Attr.ChangeAttributeExtended = function(obj, attrName, savedObj, savedAttrName, newValue){
 Attr.SaveAttribute(obj, attrName, savedObj, savedAttrName);
 Attr.SetAttribute(obj, attrName, newValue);
};
Attr.ChangeAttribute = function(obj, attrName, newValue){
 Attr.ChangeAttributeExtended(obj, attrName, obj, "saved" + attrName, newValue);
};
Attr.ChangeStyleAttribute = function(obj, attrName, newValue){
 Attr.ChangeAttributeExtended(obj.style, attrName, obj, "saved" + attrName, newValue);
};
Attr.ResetAttributeExtended = function(obj, attrName, savedObj, savedAttrName){
 Attr.SaveAttribute(obj, attrName, savedObj, savedAttrName);
 Attr.SetAttribute(obj, attrName, "");
 Attr.RemoveAttribute(obj, attrName);
};
Attr.ResetAttribute = function(obj, attrName){
 Attr.ResetAttributeExtended(obj, attrName, obj, "saved" + attrName);
};
Attr.ResetStyleAttribute = function(obj, attrName){
 Attr.ResetAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
};
Attr.RestoreAttributeExtended = function(obj, attrName, savedObj, savedAttrName){
 if(Attr.IsExistsAttribute(savedObj, savedAttrName)){
  var oldValue = Attr.GetAttribute(savedObj, savedAttrName);
  if(oldValue != ASPx.EmptyObject)
   Attr.SetAttribute(obj, attrName, oldValue);
  else
   Attr.RemoveAttribute(obj, attrName);
  Attr.RemoveAttribute(savedObj, savedAttrName);
  return true;
 }
 return false;
};
Attr.RestoreAttribute = function(obj, attrName){
 return Attr.RestoreAttributeExtended(obj, attrName, obj, "saved" + attrName);
};
Attr.RestoreStyleAttribute = function(obj, attrName){
 return Attr.RestoreAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
};
Attr.CopyAllAttributes = function(sourceElem, destElement) {
 var attrs = sourceElem.attributes;
 for(var n = 0; n < attrs.length; n++) {
  var attr = attrs[n];
  if(attr.specified) {
   var attrName = attr.nodeName;
   var attrValue = sourceElem.getAttribute(attrName, 2);
   if(attrValue == null)
    attrValue = attr.nodeValue;
   destElement.setAttribute(attrName, attrValue, 0); 
  }
 }
 if(sourceElem.style.cssText !== '')
  destElement.style.cssText = sourceElem.style.cssText;
};
Attr.RemoveAllAttributes = function(element, excludedAttributes) {
 var excludedAttributesHashTable = {};
 if(excludedAttributes)
  excludedAttributesHashTable = Data.CreateHashTableFromArray(excludedAttributes);
 if(element.attributes) {
  var attrArray = element.attributes;
  for(var i = 0; i < attrArray.length; i++) {
   var attrName = attrArray[i].name;
   if(!ASPx.IsExists(excludedAttributesHashTable[attrName.toLowerCase()])) {
    try {
     attrArray.removeNamedItem(attrName);
    } catch (e) { }
   }
  }
 }
};
Attr.RemoveStyleAttribute = function(element, attrName) {
 if(element.style) {
  if(Browser.Firefox && element.style[attrName]) 
   element.style[attrName] = "";
  if(element.style.removeAttribute && element.style.removeAttribute != "")
   element.style.removeAttribute(attrName);
  else if(element.style.removeProperty && element.style.removeProperty != "")
   element.style.removeProperty(attrName);
 }
};
Attr.RemoveAllStyles = function(element) {
 if(element.style) {
  for(var key in element.style)
   Attr.RemoveStyleAttribute(element, key);
    Attr.RemoveAttribute(element, "style");
 }
};
Attr.GetTabIndexAttributeName = function(){
 return Browser.IE  ? "tabIndex" : "tabindex";
};
Attr.ChangeTabIndexAttribute = function(element){
 var attribute = Attr.GetTabIndexAttributeName(); 
 if(Attr.GetAttribute(element, attribute) != -1)
    Attr.ChangeAttribute(element, attribute, -1);
};
Attr.SaveTabIndexAttributeAndReset = function(element) {
 var attribute = Attr.GetTabIndexAttributeName();
 Attr.SaveAttribute(element, attribute, element, "saved" + attribute);
 Attr.SetAttribute(element, attribute, -1);
};
Attr.RestoreTabIndexAttribute = function(element){
 var attribute = Attr.GetTabIndexAttributeName();
 if(Attr.IsExistsAttribute(element, attribute)) {
  if(Attr.GetAttribute(element, attribute) == -1) {
   if(Attr.IsExistsAttribute(element, "saved" + attribute)){
    var oldValue = Attr.GetAttribute(element, "saved" + attribute);
    if(oldValue != ASPx.EmptyObject)
     Attr.SetAttribute(element, attribute, oldValue);
    else {
     if(Browser.WebKitFamily) 
      Attr.SetAttribute(element, attribute, 0); 
     Attr.RemoveAttribute(element, attribute);   
    }
    Attr.RemoveAttribute(element, "saved" + attribute); 
   }
  }
 }
};
Attr.ChangeAttributesMethod = function(enabled){
 return enabled ? Attr.RestoreAttribute : Attr.ResetAttribute;
};
Attr.InitiallyChangeAttributesMethod = function(enabled){
 return enabled ? Attr.ChangeAttribute : Attr.ResetAttribute;
};
Attr.ChangeStyleAttributesMethod = function(enabled){
 return enabled ? Attr.RestoreStyleAttribute : Attr.ResetStyleAttribute;
};
Attr.InitiallyChangeStyleAttributesMethod = function(enabled){
 return enabled ? Attr.ChangeStyleAttribute : Attr.ResetStyleAttribute;
};
Attr.ChangeEventsMethod = function(enabled){
 return enabled ? Evt.AttachEventToElement : Evt.DetachEventFromElement;
};
Attr.ChangeDocumentEventsMethod = function(enabled){
 return enabled ? Evt.AttachEventToDocument : Evt.DetachEventFromDocument;
};
Attr.ChangeCellSpanCount = function(cell, value, isColumnSpan) {
 if(!cell) return;
 var propertyKey = isColumnSpan ? "colSpan" : "rowSpan";
 var prevValue = cell[propertyKey];
 if(value > 1)
  cell[propertyKey] = value;
 else if(prevValue !== 1)
  Attr.RemoveAttribute(cell, propertyKey);
};
function isSourceResetRequired() {
 return Browser.IE && Browser.MajorVersion >= 11;
}
ASPx.Attr = Attr;
var Aria = {
 atomic: "aria-atomic",
 checked: "aria-checked",
 descendant: "aria-activedescendant",
 described: "aria-describedby",
 disabled: "aria-disabled",
 expanded: "aria-expanded",
 haspopup: "aria-haspopup",
 invalid: "aria-invalid",
 label: "aria-label",
 labelled: "aria-labelledby",
 level: "aria-level",
 owns: "aria-owns",
 posinset: "aria-posinset",
 role: "role",
 selected: "aria-selected",
 setsize: "aria-setsize",
 valuemax: "aria-valuemax",
 valuemin: "aria-valuemin",
 valuenow: "aria-valuenow"
};
Aria.SetOrRemoveDescendant = function(obj, value) {
 ASPx.Attr.SetOrRemoveAttribute(obj, Aria.descendant, value);
};
Aria.SetOrRemoveLabel = function(obj, value) {
 ASPx.Attr.SetOrRemoveAttribute(obj, Aria.label, value);
};
Aria.AppendLabel = function(obj, value, checkExists) {
 var currentValue = ASPx.Attr.GetAttribute(obj, Aria.label) || "";
 var resultParts = [ ];
 if(currentValue)
  resultParts.push(currentValue);
 var needAppendValue = value && (!checkExists || currentValue.indexOf(value) == -1);
 if(needAppendValue)
  resultParts.push(value);
 ASPx.Attr.SetAttribute(obj, Aria.label, resultParts.join(" "));
};
Aria.SetOrRemoveLabelled = function(obj, value) {
 ASPx.Attr.SetOrRemoveAttribute(obj, Aria.labelled, value);
};
Aria.SetApplicationRole = function(obj) {
  ASPx.Attr.SetAttribute(obj, Aria.role, "application");
};
Aria.SetSilence = function(obj) {
 ASPx.Attr.SetAttribute(obj, Aria.label, ";");
};
Aria.SetExpanded = function(obj, expanded) {
 if(!obj || !ASPx.Attr.GetAttribute(obj, Aria.expanded)) return;
 Aria.SetBoolAttribute(obj, Aria.expanded, expanded);
};
Aria.SetAtomic = function(obj, value) {
 Aria.SetBoolAttribute(obj, Aria.atomic, value);
};
Aria.SetBoolAttribute = function(obj, attribute, value) {
 if(value)
  ASPx.Attr.SetAttribute(obj, attribute, true);
 else 
  ASPx.Attr.SetAttribute(obj, attribute, false);
};
ASPx.Attr.Aria = Aria;
var Color = { };
function _aspxToHex(d) {
 return (d < 16) ? ("0" + d.toString(16)) : d.toString(16);
}
Color.RGBRegexp = /rgb\s*\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/;
Color.RGBARegexp = /rgba?\s*\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,?\s*([0-9]*\.?[0-9]*)\s*\)/;
Color.ColorToHexadecimal = function(colorValue, isRGBA) {
 if(typeof(colorValue) == "number") {
  var r = colorValue & 0xFF;
  var g = (colorValue >> 8) & 0xFF;
  var b = (colorValue >> 16) & 0xFF;
  return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
 }
 if(colorValue && (colorValue.substr(0, 3).toLowerCase() == "rgb")) {
  var regResult = colorValue.toLowerCase().match(isRGBA ? Color.RGBARegexp : Color.RGBRegexp);
  if(regResult) {
   var r = parseInt(regResult[1]);
   var g = parseInt(regResult[2]);
   var b = parseInt(regResult[3]);
   if (isRGBA)
    return { r: r, g: g, b: b, a: regResult[4] !== undefined ? parseFloat(regResult[4]) : 1 };
   return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
  }
  return null;
 } 
 if(colorValue && (colorValue.charAt(0) == "#"))
  return colorValue;
 return null;
};
Color.Names = {
 AddColorNames: function(stringResourcesObj) {
  if(stringResourcesObj) {
   for(var key in stringResourcesObj)
    if(stringResourcesObj.hasOwnProperty(key))
     this[key] = stringResourcesObj[key];
  }
 }
};
ASPx.Color = Color;
var Url = { };
Url.Navigate = function(url, target) {
 var javascriptPrefix = "javascript:";
 if(!url || url === "")
  return;
 else if(url.indexOf(javascriptPrefix) != -1) 
  eval(url.substr(javascriptPrefix.length));
 else {
  try{
   if(target != "")
    navigateTo(url, target);
   else
    location.href = url;
  }
  catch(e){
  }
 }
};
Url.NavigateByLink = function(linkElement) {
 Url.Navigate(Attr.GetAttribute(linkElement, "href"), linkElement.target);
};
Url.GetAbsoluteUrl = function(url) {
 if(url)
  url = Url.getURLObject(url).href;
 return url;
};
Url.Redirect = function(url) {
 if(!ASPx.Browser.IE)
  window.location.href = url;
 else { 
  var fakeLink = document.createElement("a");
  fakeLink.href = url;
  document.body.appendChild(fakeLink);
  try { fakeLink.click(); } catch(e) { } 
 }
};
var absolutePathPrefixes = 
 [ "about:", "file:///", "ftp://", "gopher://", "http://", "https://", "javascript:", "mailto:", "news:", "res://", "telnet://", "view-source:" ];
Url.isAbsoluteUrl = function(url) {
 if (url) {
  for (var i = 0; i < absolutePathPrefixes.length; i++) {
   if(url.indexOf(absolutePathPrefixes[i]) == 0)
    return true;
  }
 }
 return false;
};
Url.getURLObject = function(url) {
 var link = document.createElement('A');
 link.href = url || "";
 return { 
  href: link.href,
  protocol: link.protocol,
  host: link.host,
  port: link.port,
  pathname: link.pathname,
  search: link.search,
  hash: link.hash
 }; 
};
Url.getRootRelativeUrl = function(url) {
 return getRelativeUrl(url, !Url.isRootRelativeUrl(url), true); 
};
Url.getPathRelativeUrl = function(url) {
 return getRelativeUrl(url, !Url.isPathRelativeUrl(url), false);
};
function getRelativeUrl(url, isValid, isRootRelative) {
 if(url && !(/data:([^;]+\/?[^;]*)(;charset=[^;]*)?(;base64,)/.test(url)) && isValid) {
  var urlObject = Url.getURLObject(url);
  var baseUrlObject = Url.getURLObject();
  if(!Url.isAbsoluteUrl(url) || urlObject.host === baseUrlObject.host && urlObject.protocol === baseUrlObject.protocol) {
   url = urlObject.pathname;
   if(!isRootRelative)
    url = getPathRelativeUrl(baseUrlObject.pathname, url);
   url = url + urlObject.search + urlObject.hash;
  }
 }
 return url;   
}
function getPathRelativeUrl(baseUrl, url) {
 var requestSegments = getSegments(baseUrl, false);
 var urlSegments = getSegments(url, true);
 return buildPathRelativeUrl(requestSegments, urlSegments, 0, 0, "");
}
function getSegments(url, addTail) {
 var segments = [];
 var startIndex = 0;
 var endIndex = -1;
 while ((endIndex = url.indexOf("/", startIndex)) != -1) {
  segments.push(url.substring(startIndex, ++endIndex));
  startIndex = endIndex;
 }
 if(addTail && startIndex < url.length)
  segments.push(url.substring(startIndex, url.length)); 
 return segments;
}
function buildPathRelativeUrl(requestSegments, urlSegments, reqIndex, urlIndex, buffer) {
 if(urlIndex >= urlSegments.length)
  return buffer;
 if(reqIndex >= requestSegments.length)
  return buildPathRelativeUrl(requestSegments, urlSegments, reqIndex, urlIndex + 1, buffer + urlSegments[urlIndex]);
 if(requestSegments[reqIndex] === urlSegments[urlIndex] && urlIndex === reqIndex)
  return buildPathRelativeUrl(requestSegments, urlSegments, reqIndex + 1, urlIndex + 1, buffer);
 return buildPathRelativeUrl(requestSegments, urlSegments, reqIndex + 1, urlIndex, buffer + "../");
}
Url.isPathRelativeUrl = function(url) {
 return !!url && !Url.isAbsoluteUrl(url) && url.indexOf("/") != 0;  
};
Url.isRootRelativeUrl = function(url) {
 return !!url && !Url.isAbsoluteUrl(url) && url.indexOf("/") == 0 && url.indexOf("//") != 0;
};
function navigateTo(url, target) {
 var lowerCaseTarget = target.toLowerCase();
 if("_top" == lowerCaseTarget)
  top.location.href = url;
 else if("_self" == lowerCaseTarget)
  location.href = url;
 else if("_search" == lowerCaseTarget)
  openInNewWindow(url);
 else if("_media" == lowerCaseTarget)
  openInNewWindow(url);
 else if("_parent" == lowerCaseTarget)
  window.parent.location.href = url;
 else if("_blank" == lowerCaseTarget)
  openInNewWindow(url);
 else {
  var frame = getFrame(top.frames, target);
  if(frame != null)
   frame.location.href = url;
  else
   openInNewWindow(url);
 }
}
function openInNewWindow(url) {
 if(ASPx.Browser.Safari)
  openInNewWindowViaIframe(url);
 else {
  var newWindow = window.open();
  newWindow.opener = null;
  newWindow.location = url;
 }
}
function openInNewWindowViaIframe(url) {
 var iframe = document.createElement('iframe');
 iframe.style.display = 'none';
 document.body.appendChild(iframe);
 var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
 var openArgs = '"' + url + '"';
 var script = iframeDoc.createElement('script');
 script.type = 'text/javascript';
 script.text = 'window.parent = null; ' +
  'window.top = null;' +
  'window.frameElement = null;' +
  'var child = window.open(' + openArgs + ');' +
  'child.opener = null';
 iframeDoc.body.appendChild(script);
 document.body.removeChild(iframe);
}
ASPx.Url = Url;
var Json = { };
function isValid(JsonString) {
 return !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(JsonString.replace(/"(\\.|[^"\\])*"/g, '')));
}
Json.Eval = function(jsonString, controlName) {
 if(isValid(jsonString))
  return eval("(" + jsonString + ")");
 else
  throw new Error(controlName + " received incorrect JSON-data: " + jsonString);
};
Json.ToJson = function(param, skipEncodeHtml){
 var paramType = typeof(param);
 if((paramType == "undefined") || (param == null))
  return null;
 if((paramType == "object") && (typeof(param.__toJson) == "function"))
  return param.__toJson();
 if((paramType == "number") || (paramType == "boolean"))
  return param;
 if(param.constructor == Date)
  return dateToJson(param);
 if(paramType == "string") {
  var result = param.replace(/\\/g, "\\\\");
  result = result.replace(/"/g, "\\\"");
  result = result.replace(/\n/g, "\\n");
  result = result.replace(/\r/g, "\\r");
  if(!skipEncodeHtml) {
   result = result.replace(/</g, "\\u003c");
   result = result.replace(/>/g, "\\u003e");
  }
  return "\"" + result + "\"";
 }
 if(param.constructor == Array){
  var values = [];
  for(var i = 0; i < param.length; i++) {
   var jsonValue = Json.ToJson(param[i], skipEncodeHtml);
   if(jsonValue === null)
    jsonValue = "null";
   values.push(jsonValue);
  }
  return "[" + values.join(",") + "]";
 }
 var exceptKeys = {};
 if(ASPx.Ident.IsArray(param.__toJsonExceptKeys))
  exceptKeys = Data.CreateHashTableFromArray(param.__toJsonExceptKeys);
 exceptKeys["__toJsonExceptKeys"] = 1;
 var values = [];
 for(var key in param) {
  if(param.hasOwnProperty(key)) {
   if(ASPx.IsFunction(param[key]))
    continue;
   if(exceptKeys[key] == 1)
    continue;
   values.push(Json.ToJson(key) + ":" + Json.ToJson(param[key], skipEncodeHtml));
  }
 }
 return "{" + values.join(",") + "}";
};
function dateToJson(date) {
 var result = [ 
  date.getFullYear(),
  date.getMonth(),
  date.getDate()
 ];
 var time = {
  h: date.getHours(),
  m: date.getMinutes(),
  s: date.getSeconds(),
  ms: date.getMilliseconds()
 };
 if(time.h || time.m || time.s || time.ms)
  result.push(time.h);
 if(time.m || time.s || time.ms)
  result.push(time.m);
 if(time.s || time.ms)
  result.push(time.s);
 if(time.ms)
  result.push(time.ms);
 return "new Date(" + result.join() + ")";
}
ASPx.Json = Json;
ASPx.CreateClass = function(parentClass, properties) {
 if(arguments.length == 1) {
  properties = parentClass;
  parentClass = null;
 }
 var ret = function() {
  if(ret.preparing) 
   return delete(ret.preparing);
  if(ret.constr) {
   this.constructor = ret;
   ret.constr.apply(this, arguments);
  }
 };
 ret.prototype = {};
 if(parentClass) {
  parentClass.preparing = true;
  for(var name in parentClass) {
   if(parentClass.hasOwnProperty(name) && name != 'constr' && ASPx.IsFunction(parentClass[name]) && !ret[name])
    ret[name] = parentClass[name].aspxBind(parentClass);
  }
  ret.prototype = new parentClass;
  ret.prototype.constructor = parentClass;
  ret.constr = parentClass;
 }
 if(properties) {
  var constructorName = "constructor";
  for(var name in properties) {
   if(!properties.hasOwnProperty(name)) 
    continue;
   var getter = Object.getOwnPropertyDescriptor(properties, name).get;
   var setter = Object.getOwnPropertyDescriptor(properties, name).set;
   if(getter || setter)
    Object.defineProperty(ret.prototype, name, {
     set: setter,
     get: getter,
     enumerable: true,
     configurable: true
    });
   if(name != constructorName && !getter && !setter)
    ret.prototype[name] = properties[name];
  }
  if(properties[constructorName] && properties[constructorName] != Object)
   ret.constr = properties[constructorName];
 }
 return ret;
};
var registeredMixins = {};
ASPx.GetMixin = function (name, baseClass) {
 var mixinCache = baseClass._mixins || (baseClass._mixins = {});
 var resultClass = mixinCache[name];
 if (!resultClass) {
  var mixinCodeBuilder = registeredMixins[name];
  if (!mixinCodeBuilder)
   throw new Error("mixin with the '" + name + "' is not registered");
  var mixinCode = mixinCodeBuilder(baseClass);
  mixinCode.mixinName = name;
  resultClass = ASPx.CreateClass(baseClass, mixinCode);
  mixinCache[name] = resultClass;
 }
 return resultClass;
};
ASPx.RegisterMixin = function() {
 var name = arguments.length == 1 ? "mixin_" + ASPx.CreateGuid() : arguments[0];
 var mixinCodeBuilder = arguments[arguments.length - 1];
 if (registeredMixins[name])
  throw new Error("mixin with the '" + name + "' name is already defined");
 registeredMixins[name] = mixinCodeBuilder;
 return function(baseClass) { return ASPx.GetMixin(name, baseClass); };
};
ASPx.FormatCallbackArg = function(prefix, arg) {
 if(prefix == null && arg == null)
  return ""; 
 if(prefix == null) prefix = "";
 if(arg == null) arg = "";
 if(arg != null && !ASPx.IsExists(arg.length) && ASPx.IsExists(arg.value))
  arg = arg.value;
 arg = arg.toString();
 return [prefix, '|', arg.length, '|' , arg].join('');
};
ASPx.FormatCallbackArgs = function(callbackData) {
 var sb = [ ];
 for(var i = 0; i < callbackData.length; i++)
  sb.push(ASPx.FormatCallbackArg(callbackData[i][0], callbackData[i][1]));
 return sb.join("");
};
ASPx.ParseShortcutString = function(shortcutString) {
 if(!shortcutString)
  return 0;
 var isCtrlKey = false;
 var isShiftKey = false;
 var isAltKey = false;
 var isMetaKey = false;
 var keyCode = null;
 var shcKeys = shortcutString.toString().split("+");
 if(shcKeys.length > 0) {
  for(var i = 0; i < shcKeys.length; i++) {
   var key = Str.Trim(shcKeys[i].toUpperCase());
   switch (key) {
    case "CONTROL":
    case "CONTROLKEY":
    case "CTRL":
     isCtrlKey = true;
     break;
    case "SHIFT":
    case "SHIFTKEY":
     isShiftKey = true;
     break;
    case "ALT":
     isAltKey = true;
     break;
    case "CMD":
     isMetaKey = true;
     break;
    case "F1": keyCode = ASPx.Key.F1; break;
    case "F2": keyCode = ASPx.Key.F2; break;
    case "F3": keyCode = ASPx.Key.F3; break;
    case "F4": keyCode = ASPx.Key.F4; break;
    case "F5": keyCode = ASPx.Key.F5; break;
    case "F6": keyCode = ASPx.Key.F6; break;
    case "F7": keyCode = ASPx.Key.F7; break;
    case "F8": keyCode = ASPx.Key.F8; break;
    case "F9": keyCode = ASPx.Key.F9; break;
    case "F10":   keyCode = ASPx.Key.F10; break;
    case "F11":   keyCode = ASPx.Key.F11; break;
    case "F12":   keyCode = ASPx.Key.F12; break;
    case "RETURN":
    case "ENTER": keyCode = ASPx.Key.Enter; break;
    case "HOME":  keyCode = ASPx.Key.Home; break;
    case "END":   keyCode = ASPx.Key.End; break;
    case "LEFT":  keyCode = ASPx.Key.Left; break;
    case "RIGHT": keyCode = ASPx.Key.Right; break;
    case "UP": keyCode = ASPx.Key.Up; break;
    case "DOWN":  keyCode = ASPx.Key.Down; break;
    case "PAGEUP": keyCode = ASPx.Key.PageUp; break;
    case "PAGEDOWN": keyCode = ASPx.Key.PageDown; break;
    case "SPACE": keyCode = ASPx.Key.Space; break;
    case "TAB":   keyCode = ASPx.Key.Tab; break;
    case "BACKSPACE": 
    case "BACK": keyCode = ASPx.Key.Backspace; break;
    case "CONTEXT": keyCode = ASPx.Key.ContextMenu; break;
    case "ESCAPE":
    case "ESC":
     keyCode = ASPx.Key.Esc;
     break;
    case "DELETE":
    case "DEL":
     keyCode = ASPx.Key.Delete;
     break;
    case "INSERT":
    case "INS":
     keyCode = ASPx.Key.Insert;
     break;
    case "PLUS":
     keyCode = "+".charCodeAt(0);
     break;
    default:
     keyCode = key.charCodeAt(0);
     break;
   }
  }
 } else
  ASPx.ShowErrorAlert("Invalid shortcut");
 return ASPx.GetShortcutCode(keyCode, isCtrlKey, isShiftKey, isAltKey, isMetaKey);
};
ASPx.GetShortcutCode = function(keyCode, isCtrlKey, isShiftKey, isAltKey, isMetaKey) {
 var value = keyCode;
 value |= isCtrlKey ? ASPx.ModifierKey.Ctrl : 0;
 value |= isShiftKey ? ASPx.ModifierKey.Shift : 0;
 value |= isAltKey ? ASPx.ModifierKey.Alt : 0;
 value |= isMetaKey ? ASPx.ModifierKey.Meta : 0;
 return value;
};
ASPx.GetShortcutCodeByEvent = function(evt) {
 return ASPx.GetShortcutCode(Evt.GetKeyCode(evt), evt.ctrlKey, evt.shiftKey, evt.altKey, ASPx.Browser.MacOSPlatform ? evt.metaKey : false);
};
ASPx.IsPasteShortcut = function(evt) {
 if(evt.type === "paste")
  return true;
 var keyCode = Evt.GetKeyCode(evt);
 if(Browser.NetscapeFamily && evt.which == 0)  
  keyCode = evt.keyCode;
 return (evt.ctrlKey && (keyCode == 118  || (keyCode == 86))) ||
     (evt.shiftKey && !evt.ctrlKey && !evt.altKey &&
     (keyCode == ASPx.Key.Insert)) ;
};
var NotPrintableKeyCodes = null;
ASPx.IsPrintableKey = function(keyCode) {
 if (!NotPrintableKeyCodes)
  NotPrintableKeyCodes = Object.keys(ASPx.Key).map(function(key) { return ASPx.Key[key]; });
 return !ASPx.Data.ArrayContains(NotPrintableKeyCodes, keyCode);
};
ASPx.SetFocus = function(element, selectAction) {
 function focusCore(element, selectAction){
  try {
    element.focus();
    if(Browser.IE && document.activeElement != element)
     element.focus();
    if(selectAction) {
     var currentSelection = Selection.GetInfo(element);
     if(currentSelection.startPos == currentSelection.endPos) {
      switch(selectAction) {
       case "start":
        Selection.SetCaretPosition(element, 0);
        break;
       case "all":
        Selection.Set(element);
        break;
      }
     }
    }
   } catch (e) {
  }
 }
 if(ASPxClientUtils.iOSPlatform) 
  focusCore(element, selectAction);
 else {
  window.setTimeout(function() { 
   focusCore(element, selectAction);
  }, 100);
 }
};
ASPx.IsFocusableCore = function(element, skipContainerVisibilityCheck) {
 var current = element;
 while(current && current.nodeType == 1) {
  if(current == element || !skipContainerVisibilityCheck(current)) {
   var tagName = current.tagName.toUpperCase();
   if(tagName == "BODY")
    return true;
   var disabledElementTags = ["INPUT", "BUTTON", "TEXTAREA", "SELECT", "OPTION"];
   if(disabledElementTags.indexOf(tagName) !== -1 && current.disabled || !ASPx.GetElementDisplay(current) || !ASPx.GetElementVisibility(current))
    return false;
  }
  current = current.parentNode;
 }
 return true;
};
ASPx.IsFocusable = function(element) {
 return ASPx.IsFocusableCore(element, ASPx.FalseFunction);
};
ASPx.IsActionElement = function(element) {
 if(!ASPx.IsExistsElement(element))
  return false;
 var tabIndex = parseInt(ASPx.Attr.GetAttribute(element, ASPx.Attr.GetTabIndexAttributeName()));
 var hasTabIndex = !isNaN(tabIndex);
 var hasNonNegativeTabIndex = hasTabIndex && tabIndex > -1;
 var hasNegativeTabIndex = hasTabIndex && tabIndex < 0;
 var tagName = element.tagName;
 var focusableElementTags = ["BUTTON", "SELECT", "TEXTAREA", "OPTION", "IFRAME"];
 var isFocusableCore = ASPx.IsFocusable(element);
 var isFocusableTag = focusableElementTags.indexOf(tagName) !== -1;
 var isFocusableLink = tagName === "A" && (!!element.href || hasNonNegativeTabIndex);
 var isFocusableInput = tagName === "INPUT" && element.type.toLowerCase() !== "hidden";
 var isFocusableByTabIndex = tagName !== "INPUT" && hasNonNegativeTabIndex;
 var isEditableDiv = tagName == "DIV" && element.contentEditable === "true";
 return isFocusableCore && !hasNegativeTabIndex && (isFocusableTag || isFocusableLink || isFocusableInput || isFocusableByTabIndex || isEditableDiv);
};
ASPx.GetCanBeActiveElementsInContainer = function(container) {
 var canBeActiveTags = ["INPUT", "A", "UL", "BUTTON", "TEXTAREA", "SELECT", "IFRAME"],
  canBeActiveElements = [];
 Data.ForEach(canBeActiveTags, function(tag) {
  var elements = container.getElementsByTagName(tag);
  canBeActiveElements = canBeActiveElements.concat([].slice.call(elements));
 });
 return canBeActiveElements;
};
function isActionElementAllowedByPredicate(element, predicate) {
  var allowedByPredicate = !predicate || predicate(element);
  return allowedByPredicate && ASPx.IsActionElement(element);
}
ASPx.FindChildActionElements = function(container, predicate) {
 return ASPx.GetNodes(container, function(el) {
  return isActionElementAllowedByPredicate(el, predicate);
 });
};
ASPx.FindAllSortedActionElements = function(container, predicate) {
 var result = [ ];
 if(!container || !container.getElementsByTagName) return result;
 var actionElements = ASPx.FindChildActionElements(container, predicate);
 var getTabOrderValue = function(el) {
  var tabIndex = parseInt(ASPx.Attr.GetAttribute(el, ASPx.Attr.GetTabIndexAttributeName()));
  return isNaN(tabIndex) ? 0 : tabIndex;
 };
 var positiveTabIndexElements = actionElements.filter(function(x) { return getTabOrderValue(x) > 0; });
 var nonPositiveTabIndexElements = actionElements.filter(function(x) { return getTabOrderValue(x) === 0; });
 var sortedTabIndexElements = positiveTabIndexElements.sort(function(x, y) { return getTabOrderValue(x) - getTabOrderValue(y); });
 result = sortedTabIndexElements.concat(nonPositiveTabIndexElements);
 return result;
};
ASPx.FindFirstChildActionElement = function(container, predicate) {
 if(!container || isActionElementAllowedByPredicate(container, predicate))
  return !container ? null : container;
 var sortedActionElements = ASPx.FindAllSortedActionElements(container, predicate);
 return sortedActionElements[0];
};
ASPx.FindLastChildActionElement = function(container, predicate) {
 if(!container)
  return null;
 var sortedActionElements = ASPx.FindAllSortedActionElements(container, predicate);
 var actionElement = sortedActionElements[sortedActionElements.length - 1];
 if(!actionElement && isActionElementAllowedByPredicate(container, predicate))
  actionElement = container;
 return actionElement;
};
ASPx.GetParentClientControls = function(name) {
 var nameParts = name.split("_");
 var result = [ ];
 var controlCollection = ASPx.GetControlCollection();
 for(var i = 1; i <= nameParts.length; i++) {
  var controlName = nameParts.slice(0, i).join("_");
  var control = controlCollection.Get(controlName);
  if(control)
   result.push(control);
 }
 return result;
};
ASPx.GetRootClientControl = function(childControlName) {
 var parentControls = ASPx.GetParentClientControls(childControlName);
 return parentControls[0];
};
ASPx.GetClientControlByElementID = function(elementID) {
 var parentControls = ASPx.GetParentClientControls(elementID);
 return parentControls[parentControls.length - 1];
};
ASPx.IsExists = function(obj){
 return (typeof(obj) != "undefined") && (obj != null);
};
ASPx.IsFunction = function(obj){
 return typeof(obj) == "function";
};
ASPx.IsNumber = function(str) {
 return !isNaN(parseFloat(str)) && isFinite(str);
};
ASPx.GetDefinedValue = function(value, defaultValue){
 return (typeof(value) != "undefined") ? value : defaultValue;
};
ASPx.CorrectJSFloatNumber = function(number) {
 var ret = 21; 
 var numString = number.toPrecision(21);
 numString = numString.replace("-", ""); 
 var integerDigitsCount = numString.indexOf(ASPx.PossibleNumberDecimalSeparators[0]);
 if(integerDigitsCount < 0)
  integerDigitsCount = numString.indexOf(ASPx.PossibleNumberDecimalSeparators[1]);
 var floatDigitsCount = numString.length - integerDigitsCount - 1;
 if(floatDigitsCount < 10)
  return number;
 if(integerDigitsCount > 0) {
  ret = integerDigitsCount + 12;
 }
 var toPrecisionNumber = Math.min(ret, 21);
 var newValueString = number.toPrecision(toPrecisionNumber);
 return parseFloat(newValueString, 10);
};
ASPx.CorrectRounding = function(number, step) { 
 var regex = /[,|.](.*)/,
  isFloatValue = regex.test(number),
  isFloatStep = regex.test(step);
 if(isFloatValue || isFloatStep) {
  var valueAccuracy = (isFloatValue) ? regex.exec(number)[0].length - 1 : 0,
   stepAccuracy = (isFloatStep) ? regex.exec(step)[0].length - 1 : 0,
   accuracy = Math.max(valueAccuracy, stepAccuracy);
  var multiplier = Math.pow(10, accuracy);
  number = Math.round((number + step) * multiplier) / multiplier;
  return number;
 }
 return number + step;
};
ASPx.GetActiveElement = function() {
 try{ return document.activeElement; } catch(e) { return null; }
};
var verticalScrollBarWidth;
ASPx.GetVerticalScrollBarWidth = function() {
 if(typeof(verticalScrollBarWidth) == "undefined") {
  var container = document.createElement("DIV");
  container.style.cssText = "position: absolute; top: 0px; left: 0px; visibility: hidden; width: 200px; height: 150px; overflow: hidden; box-sizing: content-box";
  document.body.appendChild(container);
  var child = document.createElement("P");
  container.appendChild(child);
  child.style.cssText = "width: 100%; height: 200px;";
  var widthWithoutScrollBar = child.offsetWidth;
  container.style.overflow = "scroll";
  var widthWithScrollBar = child.offsetWidth;
  if(widthWithoutScrollBar == widthWithScrollBar)
   widthWithScrollBar = container.clientWidth;
  verticalScrollBarWidth = widthWithoutScrollBar - widthWithScrollBar;
  document.body.removeChild(container);
 }
 return verticalScrollBarWidth;
};
function hideScrollBarCore(element, scrollName) {
 if(element.tagName == "IFRAME") {
  if((element.scrolling == "yes") || (element.scrolling == "auto")) {
   Attr.ChangeAttribute(element, "scrolling", "no");
   return true;
  }
 }
 else if(element.tagName == "DIV") {
  if((element.style[scrollName] == "scroll") || (element.style[scrollName] == "auto")) {
   Attr.ChangeStyleAttribute(element, scrollName, "hidden");
   return true;
  }
 }
 return false;
}
function restoreScrollBarCore(element, scrollName) {
 if(element.tagName == "IFRAME")
  return Attr.RestoreAttribute(element, "scrolling");
 else if(element.tagName == "DIV")
  return Attr.RestoreStyleAttribute(element, scrollName);
 return false;
}
ASPx.SetScrollBarVisibilityCore = function(element, scrollName, isVisible) {
 return isVisible ? restoreScrollBarCore(element, scrollName) : hideScrollBarCore(element, scrollName);
};
ASPx.SetScrollBarVisibility = function(element, isVisible) {
 if(ASPx.SetScrollBarVisibilityCore(element, "overflow", isVisible)) 
  return true;
 var result = ASPx.SetScrollBarVisibilityCore(element, "overflowX", isVisible)
  || ASPx.SetScrollBarVisibilityCore(element, "overflowY", isVisible);
 return result;
};
ASPx.SetInnerHtml = function(element, html) {
 if(Browser.IE) {
  setInnerHtmlInternal(element, "<em>&nbsp;</em>" + html);
  element.removeChild(element.firstChild);
 } else
  setInnerHtmlInternal(element, html);
};
ASPx.GetInnerText = function(container) {
 if(Browser.Safari && Browser.MajorVersion <= 5) {
  var filter = getHtml2PlainTextFilter();
  setInnerHtmlInternal(filter, container.innerHTML);
  ASPx.SetElementDisplay(filter, true);
  var innerText = filter.innerText;
  ASPx.SetElementDisplay(filter, false);
  return innerText;
 } else if(Browser.NetscapeFamily || Browser.WebKitFamily || (Browser.IE && Browser.Version >= 9) || Browser.Edge) {
  return container.textContent;
 } else
  return container.innerText;
};
ASPx.RemoveComment = function(text) {
 var result = text;
 var commentStart = "<!--";
 var commentEnd = "//-->";
 var positionStart = result.indexOf(commentStart);
 while(positionStart > -1) {
  var positionEnd = result.indexOf(commentEnd);
  var startStr = result.substring(0, positionStart);
  var endStr = result.substring(positionEnd + commentEnd.length);
  result = startStr + endStr;
  positionStart = result.indexOf(commentStart);
 }
 return result;
};
var html2PlainTextFilter = null;
function getHtml2PlainTextFilter() {
 if(html2PlainTextFilter == null) {
  html2PlainTextFilter = document.createElement("DIV");
  html2PlainTextFilter.style.width = "0";
  html2PlainTextFilter.style.height = "0";
  html2PlainTextFilter.style.overflow = "visible";
  ASPx.SetElementDisplay(html2PlainTextFilter, false);
  document.body.appendChild(html2PlainTextFilter);
 }
 return html2PlainTextFilter;
}
ASPx.CreateHiddenField = function(name, id, parent) {
 var input = document.createElement("INPUT");
 input.setAttribute("type", "hidden");
 if(name)
  input.setAttribute("name", name);
 if(id)
  input.setAttribute("id", id);
 if(parent)
  parent.appendChild(input);
 return input;
};
ASPx.CloneObject = function(srcObject) {
 if(typeof(srcObject) != 'object' || srcObject == null)
  return srcObject;
 var newObject = {};
 for(var i in srcObject)
  newObject[i] = srcObject[i];
 return newObject;
};
ASPx.InsertRowsBefore = function(table, rowsHtml, index) {
 var row = null;
 if(index >= 0 && index < table.rows.length)
  row = table.rows[index];
 var func = ASPx.Browser.IE && ASPx.Browser.Version < 10 ? insertRowsBefore_IE9 : insertRowsBefore;
 func(table, rowsHtml, row);
};
var insertRowsBefore = function(table, rowsHtml, row) {
 if(!row && table.tBodies.length > 0) {
  row = document.createElement("TR");
  table.tBodies[0].appendChild(row);
  row.shouldRemove = true;
 }
 if(row) {
  row.insertAdjacentHTML("beforeBegin", rowsHtml);
  if(row.shouldRemove)
   ASPx.RemoveElement(row);
 }
};
var insertRowsBefore_IE9 = function(table, rowsHtml, nextRow) {
 var row = document.createElement("TR");
 var cell = document.createElement("TD");
 setInnerHtmlInternal(cell, "<table><tbody>" + rowsHtml + "</tbody></table>");
 var tbody = table.tBodies[0];
 tbody.appendChild(row);
 row.appendChild(cell);
 var newTable = ASPx.GetNodeByTagName(cell, "TABLE", 0);
 var rowCount = newTable.rows.length;
 for(var i = rowCount - 1; i >= 0; i--) {
  var newRow = newTable.rows[i];
  if(nextRow == null)
   tbody.appendChild(newRow);
  else
   tbody.insertBefore(newRow, nextRow);
  nextRow = newRow;
 }
 ASPx.RemoveElement(row);
};
ASPx.IsPercentageSize = function(size) {
 return size && size.indexOf('%') != -1;
};
ASPx.GetElementById = function(id) {
 if(document.getElementById)
  return document.getElementById(id);
 else
  return document.all[id];
};
ASPx.GetInputElementById = function(id) {
 var elem = ASPx.GetElementById(id);
 if(!Browser.IE)
  return elem;
 if(elem) {
  if(elem.id == id)
   return elem;
  else {
   for(var i = 1; i < document.all[id].length; i++) {
    if(document.all[id][i].id == id)
     return document.all[id][i];
   }
  }
 }
 return null;
};
ASPx.GetElementByIdInDocument = function(documentObj, id) {
 if(documentObj.getElementById)
  return documentObj.getElementById(id);
 else
  return documentObj.all[id];
};
ASPx.GetIsParent = function(parentElement, element) {
 if(!parentElement || !element)
  return false;
 while(element){
  if(element === parentElement)
   return true;
  if(element.tagName === "BODY")
   return false;
  element = element.parentNode;
 }
 return false;
};
ASPx.GetParentById = function(element, id) {
 element = element.parentNode;
 while(element){
  if(element.id === id)
   return element;
  element = element.parentNode;
 }
 return null;
};
ASPx.GetParentByPartialId = function(element, idPart){
 while(element && element.tagName != "BODY") {
  if(element.id && element.id.match(idPart)) 
   return element;
  element = element.parentNode;
 }
 return null;
};
ASPx.GetParentByTagName = function(element, tagName) {
 tagName = tagName.toUpperCase();
 while(element) {
  if(element.tagName === "BODY")
   return null;
  if(element.tagName === tagName)
   return element;
  element = element.parentNode;
 }
 return null;
};
function getParentByCondition(element, conditionArg, condition) {
 while(element != null) {
  if(element.tagName == "BODY" || element.nodeName == "#document")
   return null;
  if (condition(element, conditionArg))
   return element;
  element = element.parentNode;
 }
 return null;
}
ASPx.GetParentByPartialClassName = function(element, className) {
 return getParentByCondition(element, className, ASPx.ElementContainsCssClass);
};
ASPx.GetParentByClassName = function(element, className) {
 return getParentByCondition(element, className, ASPx.ElementHasCssClass);
};
ASPx.GetParentBySelector = function (element, selector) {
 return getParentByCondition(element, selector, ASPx.ElementMatchesSelector);
};
ASPx.GetParentByTagNameAndAttributeValue = function(element, tagName, attrName, attrValue) {
 tagName = tagName.toUpperCase();
 while(element != null) {
  if(element.tagName == "BODY")
   return null;
  if(element.tagName == tagName && element[attrName] == attrValue)
   return element;
  element = element.parentNode;
 }
 return null;
};
ASPx.GetParent = function(element, testFunc){
 if (!ASPx.IsExists(testFunc)) return null;
 while(element != null && element.tagName != "BODY"){
  if(testFunc(element))
   return element;
  element = element.parentNode;
 }
 return null;
};
ASPx.GetElementTreeLine = function(element, stopTagName, stopFunc) {
 var result = [];
 stopTagName = stopTagName || "BODY";
 while(element != null) {
  if(!stopFunc && element.tagName == stopTagName)
   break;
  if(stopFunc && stopFunc(element))
   break;
  result.push(element);
  element = element.parentNode;
 }
 return result;
};
ASPx.IsScrollableElement = function(element, isHorzScrollable, isVertScrollable) {
 isHorzScrollable = ASPx.IsExists(isHorzScrollable) ? isHorzScrollable : true;
 isVertScrollable = ASPx.IsExists(isVertScrollable) ? isVertScrollable : true;
 var style = ASPx.GetCurrentStyle(element);
 var overflowStyleNames = ["overflow"];
 if(isHorzScrollable)
  overflowStyleNames.push("overflowX");
 if(isVertScrollable)
  overflowStyleNames.push("overflowY");
 for(var i = 0; i < overflowStyleNames.length; i++)
  if(style[overflowStyleNames[i]] == "scroll" || style[overflowStyleNames[i]] == "auto")
   return true;
 return false;
};
ASPx.GetPreviousSibling = function(el) {
 if(el.previousElementSibling) {
  return el.previousElementSibling;
 } else {
  while(el = el.previousSibling) {
   if(el.nodeType === 1)
    return el;
  }
 }
};
ASPx.ElementMatchesSelector = (function (e) {
 return (function (matches) {
  return function (el, selector) { return !!el && !!selector && matches.call(el, selector); };
 })(e.matches || e.matchesSelector || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector);
})(Element.prototype);
ASPx.ElementHasCssClass = function(element, className) {
 try {
  var elementClasses;
  var classList = ASPx.GetClassNameList(element);
  if(!classList) {
   var elementClassName = ASPx.GetClassName(element);
   if(!elementClassName) {
    return false;
   }
   elementClasses = elementClassName.split(" ");
  }
  var classNames = className.split(" ");
  for(var i = classNames.length - 1; i >= 0; i--) {
   if(classList) {
    if(classList.indexOf(classNames[i]) === -1)
     return false;
    continue;
   }
   if(Data.ArrayIndexOf(elementClasses, classNames[i]) < 0)
    return false;
  }
  return true;
 } catch(e) {
  return false;
 }
};
ASPx.ElementContainsCssClass = function(element, className) {
 try {
  var elementClassName = ASPx.GetClassName(element);
  if(!elementClassName) {
   return false;
  }
  return elementClassName.indexOf(className) != -1;
 } catch(e) {
  return false;
 }
};
ASPx.AddClassNameToElement = function (element, className) {
 if(!element || typeof(className) !== "string" ) return;
 className = className.trim();
 if(!ASPx.ElementHasCssClass(element, className) && className !== "") {
  var oldClassName = ASPx.GetClassName(element);
  ASPx.SetClassName(element, (oldClassName === "") ? className : oldClassName + " " + className);
 }
};
ASPx.RemoveClassNameFromElement = function(element, className) {
 if(!element) return;
 var elementClassName = ASPx.GetClassName(element);
 var updClassName = " " + elementClassName + " ";
 var newClassName = updClassName.replace(" " + className + " ", " ");
 if(updClassName.length != newClassName.length)
  ASPx.SetClassName(element, Str.Trim(newClassName));  
};
ASPx.RemoveClassNamesFromElement = function(element, classNames) {
 if(!element) return;
 for(var i = 0; i < classNames.length; i++) {
  var className = classNames[i];
  if(ASPx.Browser.IE && ASPx.Browser.Version < 10)
   ASPx.RemoveClassNameFromElement(element, className);
  else
   element.classList.remove(className);
 }
};
ASPx.ToggleClassNameToElement = function(element, className, toggleState) {
 if(!toggleState)
  ASPx.RemoveClassNameFromElement(element, className);
 if(toggleState && !ASPx.ElementHasCssClass(element, className))
  ASPx.AddClassNameToElement(element, className);
};
ASPx.GetClassNameList = function(element) {
 var result = [];
 if(element) {
  if(element.tagName === "svg") {
   result = ASPx.GetClassName(element).replace(/^\s+|\s+$/g, '').split(/\s+/);
  }
  else {
   result = element.classList ? [].slice.call(element.classList) : ASPx.GetClassName(element).replace(/^\s+|\s+$/g, '').split(/\s+/);
  }
 }
 return result;
};
ASPx.GetClassName = function(element) {
 var result = "";
 if(element) {
  if(element.tagName === "svg") {
   result = element.className.baseVal;
  }
  else {
   result = element.className ? element.className : "";
  }
 }
 return result;
};
ASPx.SetClassName = function(element, className) {
 if(element.tagName === "svg") {
  element.className.baseVal = Str.Trim(className);
 }
 else {
  element.className = Str.Trim(className);
 }
};
ASPx.GetElementOffsetWidth = function(element) {
 if(element.tagName === "svg") {
  return element.getBoundingClientRect().width;
 }
 else {
  return element.offsetWidth;
 }
};
ASPx.GetElementOffsetHeight = function(element) {
 if(element.tagName === "svg") {
  return element.getBoundingClientRect().height;
 }
 else {
  return element.offsetHeight;
 }
};
function nodeListToArray(nodeList, filter) {
 var result = [];
 for(var i = 0, element; element = nodeList[i]; i++) {
  if(filter && !filter(element))
   continue;
  result.push(element);
 }
 return result;
}
ASPx.NodeListToArray = nodeListToArray;
function getItemByIndex(collection, index) {
 if(!index) index = 0;
 if(collection != null && collection.length > index)
  return collection[index];
 return null;
}
ASPx.GetChildNodesByQuerySelector = function (parent, selector) {
 return nodeListToArray(parent.querySelectorAll(selector), function (el) { return el.parentNode === parent; });
};
ASPx.GetChildNodesByClassName = function(parent, className) {
 if(!parent) return [];
 if(parent.querySelectorAll) {
  var children = parent.querySelectorAll('.' + className);
  return nodeListToArray(children, function(element) { 
   return element.parentNode === parent;
  });
 }
 return ASPx.GetChildNodes(parent, function(elem) { return elem.className && ASPx.ElementHasCssClass(elem, className); });
};
ASPx.GetChildNodesByPartialClassName = function(element, className) {
 return ASPx.GetChildElementNodesByPredicate(element,
  function(child) {
   return ASPx.ElementContainsCssClass(child, className);
  });
};
ASPx.GetChildByPartialClassName = function(element, className, index) {
 if(element != null){    
  var collection = ASPx.GetChildNodesByPartialClassName(element, className);
  return getItemByIndex(collection, index);
 }
 return null;
};
ASPx.GetChildByClassName = function(element, className, index) {
 if(element != null){    
  var collection = ASPx.GetChildNodesByClassName(element, className);
  return getItemByIndex(collection, index);
 }
 return null;
};
ASPx.GetNodesByPartialClassName = function(element, className) {
 if(element.querySelectorAll) {
  var list = element.querySelectorAll('*[class*=' + className + ']');
  return nodeListToArray(list);
 }
 var collection = element.all || element.getElementsByTagName('*');
 var ret = [ ];
 if(collection != null) {
  for(var i = 0; i < collection.length; i ++) {
   if(ASPx.ElementContainsCssClass(collection[i], className))
    ret.push(collection[i]);
  }
 }
 return ret;
};
ASPx.GetNodesByClassName = function(parent, className) {
 if(parent.querySelectorAll) {
  var children = parent.querySelectorAll('.' + className);
  return nodeListToArray(children);
 }
 return ASPx.GetNodes(parent, function(elem) { return elem.className && ASPx.ElementHasCssClass(elem, className); });
};
ASPx.GetNodeByClassName = function(element, className, index) {
 if(element != null){    
  var collection = ASPx.GetNodesByClassName(element, className);
  return getItemByIndex(collection, index);
 }
 return null;
};
ASPx.GetChildById = function(element, id) {
 if(element.all) {
  var child = element.all[id];
  if(!child) {
   child = element.all(id); 
   if(!child)
    return Browser.IE ? document.getElementById(id) : null; 
  } 
  if(!ASPx.IsExists(child.length)) 
   return child;
  else
   return ASPx.GetElementById(id);
 }
 else
  return ASPx.GetElementById(id);
};
ASPx.GetNodesByPartialId = function(element, partialName, list) {
 if(element.id && element.id.indexOf(partialName) > -1) 
  list.push(element);
 if(element.childNodes) {
  for(var i = 0; i < element.childNodes.length; i ++) 
   ASPx.GetNodesByPartialId(element.childNodes[i], partialName, list);
 }
};
ASPx.GetNodesByTagName = function(element, tagName) {
 var tagNameToUpper = tagName.toUpperCase();
 var result = null;
 if(element) {
  if(element.getElementsByTagName) {
   result = element.getElementsByTagName(tagNameToUpper);
   if(result.length === 0) {
    result = element.getElementsByTagName(tagName);
   }
  }
  else if(element.all && element.all.tags !== undefined)
   result = Browser.Netscape ? element.all.tags[tagNameToUpper] : element.all.tags(tagNameToUpper);
 }
 return result;
};
ASPx.GetNodeByTagName = function(element, tagName, index) {
 if(element != null){    
  var collection = ASPx.GetNodesByTagName(element, tagName);
  return getItemByIndex(collection, index);
 }
 return null;
};
ASPx.GetChildNodesByTagName = function(parent, tagName) {
 return ASPx.GetChildNodes(parent, function (child) { return child.tagName === tagName; });
};
ASPx.GetChildByTagName = function(element, tagName, index) {
 if(element != null){    
  var collection = ASPx.GetChildNodesByTagName(element, tagName);
  return getItemByIndex(collection, index);
 }
 return null;
};
ASPx.RetrieveByPredicate = function(scourceCollection, predicate) {
 var result = [];
 for(var i = 0; i < scourceCollection.length; i++) {
  var element = scourceCollection[i];
  if(!predicate || predicate(element)) 
   result.push(element);
 }
 return result;
};
ASPx.GetChildNodes = function(parent, predicate) {
 return ASPx.RetrieveByPredicate(parent.childNodes, predicate);
};
ASPx.GetNodes = function(parent, predicate) {
 var c = parent.all || parent.getElementsByTagName('*');
 return ASPx.RetrieveByPredicate(c, predicate);
};
ASPx.GetChildElementNodes = function(parent) {
 if(!parent) return null;
 return ASPx.GetChildNodes(parent, function(e) { return e.nodeType == 1; });
};
ASPx.GetChildElementNodesByPredicate = function(parent, predicate) {
 if(!parent) return null;
 if(!predicate) return ASPx.GetChildElementNodes(parent);
 return ASPx.GetChildNodes(parent, function(e) { return e.nodeType == 1 && predicate(e); });
};
ASPx.GetTextNode = function(element, index) {
 if(element != null){
  var collection = [ ];
  ASPx.GetTextNodes(element, collection);
  return getItemByIndex(collection, index);
 }
 return null;
};
ASPx.GetTextNodes = function(element, collection) {
 if(element.tagName === "svg")
  return;
 for(var i = 0; i < element.childNodes.length; i ++){
  var childNode = element.childNodes[i];
  if(ASPx.IsExists(childNode.nodeValue))
   collection.push(childNode);
  ASPx.GetTextNodes(childNode, collection);
 }
};
ASPx.GetNormalizedTextNode = function(element, index) {
 var textNode = ASPx.GetTextNode(element, index);
 if(textNode != null)
  ASPx.MergeAdjacentTextNodes(textNode);
 return textNode;
};
ASPx.MergeAdjacentTextNodes = function(firstTextNode) {
 if(!ASPx.IsExists(firstTextNode.nodeValue))
  return;
 var textNode = firstTextNode;
 while(textNode.nextSibling && ASPx.IsExists(textNode.nextSibling.nodeValue)) {
  textNode.nodeValue += textNode.nextSibling.nodeValue;
  textNode.parentNode.removeChild(textNode.nextSibling);
 }
};
ASPx.GetElementDocument = function(element) {
 return element.document || element.ownerDocument;
};
ASPx.RemoveElement = function(element) {
 if(element && element.parentNode)
  element.parentNode.removeChild(element);
};
ASPx.ReplaceTagName = function(element, newTagName, cloneChilds) {
 if(element.nodeType != 1)
  return null;
 if(element.nodeName == newTagName)
  return element;
 cloneChilds = cloneChilds !== undefined ? cloneChilds : true;
 var doc = element.ownerDocument;
 var newElem = doc.createElement(newTagName);
 Attr.CopyAllAttributes(element, newElem);
 if(cloneChilds) {
  for(var i = 0; i < element.childNodes.length; i++)
   newElem.appendChild(element.childNodes[i].cloneNode(true));
 }
 else {
  for(var child; child = element.firstChild; )
   newElem.appendChild(child);
 }
 element.parentNode.replaceChild(newElem, element);
 return newElem;
};
ASPx.RemoveOuterTags = function(element) {
 if(ASPx.Browser.IE) {
  element.insertAdjacentHTML( 'beforeBegin', element.innerHTML ) ;
  ASPx.RemoveElement(element);
 } else {
  var docFragment = element.ownerDocument.createDocumentFragment();
  for(var i = 0; i < element.childNodes.length; i++)
   docFragment.appendChild(element.childNodes[i].cloneNode(true));
  element.parentNode.replaceChild(docFragment, element);
 }
};
ASPx.WrapElementInNewElement = function(element, newElementTagName) { 
 var wrapElement = null;
 if(Browser.IE) {
  var wrapElement = element.ownerDocument.createElement(newElementTagName);
  wrapElement.appendChild(element.cloneNode(true));
  element.parentNode.insertBefore(wrapElement, element);
  element.parentNode.removeChild(element);
 } else {
  var docFragment = element.ownerDocument.createDocumentFragment();
  wrapElement = element.ownerDocument.createElement(newElementTagName);
  docFragment.appendChild(wrapElement);
  wrapElement.appendChild(element.cloneNode(true));
  element.parentNode.replaceChild(docFragment, element);
 }
 return wrapElement;
};
ASPx.InsertElementAfter = function(newElement, targetElement) {
 var parentElem = targetElement.parentNode;
 if(parentElem.childNodes[parentElem.childNodes.length - 1] == targetElement)
  parentElem.appendChild(newElement);
 else if(newElement !== targetElement.nextSibling)
  parentElem.insertBefore(newElement, targetElement.nextSibling);
};
ASPx.SetElementOpacity = function(element, value) {
  var useOpacityStyle = !Browser.IE || Browser.Version > 8;
  if(useOpacityStyle){
   element.style.opacity = value;
  } else {
   if(typeof(element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"])
    element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity = value*100;
   else
   element.style.filter = "alpha(opacity=" + (value * 100) + ")";
  }
};
ASPx.GetElementOpacity = function(element) {
 var useOpacityStyle = !Browser.IE || Browser.Version > 8;
 if(useOpacityStyle)
  return parseFloat(ASPx.GetCurrentStyle(element).opacity);
 else {
  if(typeof(element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"]){
   return element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity / 100;
  } else {
   var alphaValue = ASPx.GetCurrentStyle(element).filter;
   var value = alphaValue.replace("alpha(opacity=", "");
   value = value.replace(")", "");
   return parseInt(value) / 100;
  }
  return 100;
 }
};
ASPx.HiddenChangable = "dx-hc";
ASPx.DefaultDisplayNoneSelectors = [ "dxmodalSys" ];
ASPx.DefaultDisplaySelectors = ["show"];
function getIsDefaultDisplayNone(element) {
 for(var i = 0; i < ASPx.DefaultDisplayNoneSelectors.length; i++) {
  if(ASPx.ElementHasCssClass(element, ASPx.DefaultDisplayNoneSelectors[i]))
   return true;
 }
 return false;
}
ASPx.GetElementDisplay = function(element, isCurrentStyle) {
 if(isCurrentStyle)
  return ASPx.GetCurrentStyle(element).display != "none";
 if(getIsDefaultDisplayNone(element))
  return element.style.display != "none" && element.style.display != "" || ASPx.DefaultDisplaySelectors.some(function(s) { return ASPx.ElementHasCssClass(element, s); });
 return element.style.display != "none" && !ASPx.ElementHasCssClass(element, ASPx.HiddenChangable);
};
ASPx.SetElementDisplay = function(element, value) {
 if(!element) return;
 if(ASPx.ElementHasCssClass(element, ASPx.HiddenChangable))
  ASPx.RemoveClassNameFromElement(element, ASPx.HiddenChangable);
 if(typeof(value) === "string")
  element.style.display = value;
 else if(getIsDefaultDisplayNone(element))
  element.style.display = value ? (element.tagName === "TABLE" ? "table" : "block") : "";
 else if(!value)
  element.style.display = "none";
 else
  element.style.display = "";
};
ASPx.GetElementVisibility = function(element, isCurrentStyle) {
 if(isCurrentStyle)
  return ASPx.GetCurrentStyle(element).visibility != "hidden";
 return element.style.visibility != "hidden";
};
ASPx.SetElementVisibility = function(element, value) {
 if(!element) return;
 if(typeof(value) === "string")
  element.style.visibility = value;
 else
  element.style.visibility = value ? "visible" : "hidden";
};
ASPx.IsElementVisible = function(element, isCurrentStyle) {
 while(element && element.tagName != "BODY") {
  if(!ASPx.GetElementDisplay(element, isCurrentStyle) || (!ASPx.GetElementVisibility(element, isCurrentStyle) && !Attr.IsExistsAttribute(element, "errorFrame")))
     return false;
  element = element.parentNode;
 }
 return true;
};
ASPx.IsElementDisplayed = function(element) {
 while(element && element.tagName != "BODY") {
  if(!ASPx.GetElementDisplay(element))
     return false;
  element = element.parentNode;
 }
 return true;
};
ASPx.GetElementInitializedFlag = function(element) {
 return element["dxinit"];
};
ASPx.SetElementInitializedFlag = function(element) {
 element["dxinit"] = true;
};
ASPx.AddStyleSheetLinkToDocument = function(doc, linkUrl) {
 var newLink = createStyleLink(doc, linkUrl);
 var head = ASPx.GetHeadElementOrCreateIfNotExist(doc);
 head.appendChild(newLink);
 return newLink;
};
ASPx.GetHeadElementOrCreateIfNotExist = function(doc) {
 var elements = ASPx.GetNodesByTagName(doc, "head");
 var head = null;
 if(elements.length == 0) {
  head = doc.createElement("head");
  head.visibility = "hidden";
  doc.insertBefore(head, doc.body);
 } else
  head = elements[0];
 return head;
};
function createStyleLink(doc, url) {
 var newLink = doc.createElement("link");
 Attr.SetAttribute(newLink, "href", url);
 Attr.SetAttribute(newLink, "type", "text/css");
 Attr.SetAttribute(newLink, "rel", "stylesheet");
 return newLink;
}
ASPx.GetCurrentStyle = function(element) {
 if(document.defaultView && document.defaultView.getComputedStyle) { 
  var result = document.defaultView.getComputedStyle(element, null);
  if(!result && Browser.Firefox && window.frameElement) {
   var changes = [];
   var curElement = window.frameElement;
   while(!(result = document.defaultView.getComputedStyle(element, null))) {
    changes.push([curElement, curElement.style.display]);
    ASPx.SetStylesCore(curElement, "display", "block", true);
    curElement = curElement.tagName == "BODY" ? curElement.ownerDocument.defaultView.frameElement : curElement.parentNode;
   }
   result = ASPx.CloneObject(result);
   for(var ch, i = 0; ch = changes[i]; i++)
    ASPx.SetStylesCore(ch[0], "display", ch[1]);
   var dummy = document.body.offsetWidth; 
  }
  if(Browser.Firefox && Browser.MajorVersion >= 62 && window.frameElement && result.length === 0) { 
   result = ASPx.CloneObject(result);
   result.display = element.style.display;
  }
  return result;
 }
 return window.getComputedStyle(element, null);
};
ASPx.CreateStyleSheetInDocument = function(doc) {
 if(doc.createStyleSheet) {
  try {
   return doc.createStyleSheet();
  }
  catch(e) {
   var message = "The CSS link limit (31) has been exceeded. Please enable CSS merging or reduce the number of CSS files on the page. For details, see http://www.devexpress.com/Support/Center/p/K18487.aspx.";
   throw new Error(message);
  }
 }
 else {
  var styleSheet = doc.createElement("STYLE");
  ASPx.GetNodeByTagName(doc, "HEAD", 0).appendChild(styleSheet);
  return styleSheet.sheet;
 }
};
ASPx.currentStyleSheet = null;
ASPx.GetCurrentStyleSheet = function() {
 if(!ASPx.currentStyleSheet)
  ASPx.currentStyleSheet = ASPx.CreateStyleSheetInDocument(document);
 return ASPx.currentStyleSheet;
};
function getStyleSheetRules(styleSheet){
 try {
  if (styleSheet.href && styleSheet.href.indexOf("file:///") === 0)
   return null;
  return Browser.IE && Browser.Version == 8 ? styleSheet.rules : styleSheet.cssRules;
 }
 catch(e) {
  return null;
 }
}
ASPx.cachedCssRules = { };
ASPx.GetStyleSheetRules = function (className, stylesStorageDocument) {
 if(ASPx.cachedCssRules[className]) {
  if(ASPx.cachedCssRules[className] != ASPx.EmptyObject)
   return ASPx.cachedCssRules[className];
  return null;
 }
 var result = iterateStyleSheetRules(stylesStorageDocument, function(rule) {
  if(rule.selectorText == "." + className){
   ASPx.cachedCssRules[className] = rule;
   return rule;
  }
 });
 if(ASPx.IsExists(result))
  return result;
 ASPx.cachedCssRules[className] = ASPx.EmptyObject;
 return null;
};
function iterateStyleSheetRules(stylesStorageDocument, callback) {
 var doc = stylesStorageDocument || document;
 for(var i = 0; i < doc.styleSheets.length; i ++){
  var styleSheet = doc.styleSheets[i];
  var rules = getStyleSheetRules(styleSheet);
  if(rules != null){
   for(var j = 0; j < rules.length; j ++) {
    var result = callback(rules[j]);
    if(result !== undefined)
     return result;
   }
  }
 }
}
ASPx.ProcessStyleSheetRules = function(prefix, callback) {
 iterateStyleSheetRules(null, function(rule) {
  if(!!rule.selectorText && rule.selectorText.indexOf(prefix) === 0) {
   var name = rule.selectorText.substring(prefix.length);
   var result = callback(name, rule.style, rule);
   if(result !== undefined)
    return result;
  }
 });
};
ASPx.ClearCachedCssRules = function(){
 ASPx.cachedCssRules = { };
};
var styleCount = 0;
var styleNameCache = { };
ASPx.CreateImportantStyleRule = function(styleSheet, cssText, postfix, prefix) {
 styleSheet = styleSheet || ASPx.GetCurrentStyleSheet();
 var cacheKey = (postfix ? postfix + "||" : "") + cssText + (prefix ? "||" + prefix : "");
 if(styleNameCache[cacheKey])
  return styleNameCache[cacheKey];
 prefix = prefix ? prefix + " " : "";
 var className = "dxh" + styleCount + (postfix ? postfix : "");
 ASPx.AddStyleSheetRule(styleSheet, prefix + "." + className, ASPx.CreateImportantCssText(cssText));
 styleCount++;
 styleNameCache[cacheKey] = className;
 return className; 
};
ASPx.CreateImportantCssText = function(cssText) {
 var newText = "";
 var hasEncodedSemicolon = cssText.indexOf(ASPx.StyleValueEncodedSemicolon) > -1;
 var attributes = cssText.split(";");
 for(var i = 0; i < attributes.length; i++) {
  var rule = attributes[i];
  if(rule != "")
   newText += ASPx.CreateImportantCssRule(rule, hasEncodedSemicolon);
 }
 return newText;
};
ASPx.CreateImportantCssRule = function(rule, hasEncodedSemicolon) {
 var result = rule;
 if(hasEncodedSemicolon) {
  var regex = new RegExp(ASPx.StyleValueEncodedSemicolon, "g");
  result = result.replace(regex, ";");
 }
 result = result + " !important;";
 return result;
};
ASPx.AddStyleSheetRule = function(styleSheet, selector, cssText){
 if(!cssText) return;
 var index = styleSheet.cssRules.length;
 styleSheet.insertRule(selector + " { " + cssText + " }", index);
 return styleSheet.cssRules[index];
};
ASPx.GetPointerCursor = function() {
 return "pointer";
};
ASPx.SetPointerCursor = function(element) {
 if(element.style.cursor == "")
  element.style.cursor = ASPx.GetPointerCursor();
};
ASPx.SetElementFloat = function(element, value) {
 if(ASPx.IsExists(element.style.cssFloat))
  element.style.cssFloat = value;
 else if(ASPx.IsExists(element.style.styleFloat))
  element.style.styleFloat = value;
 else
  Attr.SetAttribute(element.style, "float", value);
};
ASPx.GetElementFloat = function(element) {
 var currentStyle = ASPx.GetCurrentStyle(element);
 if(ASPx.IsExists(currentStyle.cssFloat))
  return currentStyle.cssFloat;
 if(ASPx.IsExists(currentStyle.styleFloat))
  return currentStyle.styleFloat;
 return Attr.GetAttribute(currentStyle, "float");
};
function getElementDirection(element) {
 return ASPx.GetCurrentStyle(element).direction;
}
ASPx.IsElementRightToLeft = function(element) {
 return getElementDirection(element) == "rtl";
};
ASPx.AdjustVerticalMarginsInContainer = function(container) {
 var containerBorderAndPaddings = ASPx.GetTopBottomBordersAndPaddingsSummaryValue(container);
 var flowElements = [], floatElements = [], floatTextElements = [];
 var maxHeight = 0, maxFlowHeight = 0;
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  ASPx.ClearVerticalMargins(element);
 }
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  var float = ASPx.GetElementFloat(element);
  var isFloat = (float === "left" || float === "right");
  if(isFloat)
   floatElements.push(element);
  else {
   flowElements.push(element);
   if(element.tagName !== "IMG"){
    if(!ASPx.IsTextWrapped(element))
     element.style.verticalAlign = 'baseline'; 
    floatTextElements.push(element);
   }
   if(element.tagName === "DIV")
    Attr.ChangeStyleAttribute(element, "float", "left"); 
  }
  if(element.offsetHeight > maxHeight) 
   maxHeight = element.offsetHeight;
  if(!isFloat && element.offsetHeight > maxFlowHeight) 
   maxFlowHeight = element.offsetHeight;
 }
 for(var i = 0; i < flowElements.length; i++) 
  Attr.RestoreStyleAttribute(flowElements[i], "float");
 var containerBorderAndPaddings = ASPx.GetTopBottomBordersAndPaddingsSummaryValue(container);
 var containerHeight = container.offsetHeight - containerBorderAndPaddings;
 if(maxHeight == containerHeight) {
  var verticalAlign = ASPx.GetCurrentStyle(container).verticalAlign;
  for(var i = 0; i < floatTextElements.length; i++)
   floatTextElements[i].style.verticalAlign = '';
  containerHeight = container.offsetHeight - containerBorderAndPaddings;
  for(var i = 0; i < floatElements.length; i++)
   adjustVerticalMarginsCore(floatElements[i], containerHeight, verticalAlign, true);
  for(var i = 0; i < flowElements.length; i++) {
   if(maxFlowHeight != maxHeight)
    adjustVerticalMarginsCore(flowElements[i], containerHeight, verticalAlign);
  }
 }
};
ASPx.AdjustVerticalMargins = function(element) {
 ASPx.ClearVerticalMargins(element);
 var parentElement = element.parentNode;
 var parentHeight = parentElement.getBoundingClientRect().height - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(parentElement);
 adjustVerticalMarginsCore(element, parentHeight, ASPx.GetCurrentStyle(parentElement).verticalAlign);
};
function adjustVerticalMarginsCore(element, parentHeight, verticalAlign, toBottom) {
 var marginTop;
 if(verticalAlign == "top")
  marginTop = 0;
 else if(verticalAlign == "bottom")
  marginTop = parentHeight - element.getBoundingClientRect().height;
 else
  marginTop = (parentHeight - element.getBoundingClientRect().height) / 2;
 if(marginTop !== 0){
  element.style.marginTop = marginTop + "px";
 }
}
ASPx.ClearVerticalMargins = function(element) {
 element.style.marginTop = "";
 element.style.marginBottom = "";
};
ASPx.AdjustHeightInContainer = function(container) {
 var height = container.offsetHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(container);
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  ASPx.ClearHeight(element);
 }
 var elements = [];
 var childrenHeight = 0;
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  childrenHeight += element.offsetHeight + ASPx.GetTopBottomMargins(element);
  elements.push(element);
 }
 if(elements.length > 0 && childrenHeight < height) {
  var correctedHeight = 0;
  for(var i = 0; i < elements.length; i++) {
   var elementHeight = 0;
   if(i < elements.length - 1){
    var elementHeight = Math.floor(height / elements.length);
    correctedHeight += elementHeight;
   }
   else{
    var elementHeight = height - correctedHeight;
    if(elementHeight < 0) elementHeight = 0;
   }
   adjustHeightCore(elements[i], elementHeight);
  }
 }
};
ASPx.AdjustHeight = function(element) {
 ASPx.ClearHeight(element);
 var parentElement = element.parentNode;
 var height = parentElement.getBoundingClientRect().height - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(parentElement);
 adjustHeightCore(element, height);
};
function adjustHeightCore(element, height) {
 var height = height - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element);
 if(height < 0) height = 0;
 element.style.height = height + "px";
}
ASPx.ClearHeight = function(element) {
 element.style.height = "";
};
ASPx.ShrinkWrappedTextInContainer = function(container) {
 if(!container) return;
 for(var i = 0; i < container.childNodes.length; i++){
  var child = container.childNodes[i];
  if(child.style && ASPx.IsTextWrapped(child)) {
   Attr.ChangeStyleAttribute(child, "width", "1px");
   child.shrinkedTextContainer = true;
  }
 }
};
ASPx.AdjustWrappedTextInContainer = function(container) {
 if(!container) return;
 var textContainer, leftWidth = 0, rightWidth = 0;
 for(var i = 0; i < container.childNodes.length; i++){
  var child = container.childNodes[i];
  if(child.tagName === "BR")
   return;
  if(!child.tagName)
   continue;
  if(child.tagName !== "IMG"){
   textContainer = child;
   if(ASPx.IsTextWrapped(textContainer)){
    if(!textContainer.shrinkedTextContainer)
     textContainer.style.width = "";
    textContainer.style.marginRight = "";
   }
  }
  else {
   if(ASPx.GetElementOffsetWidth(child)=== 0)
    Evt.AttachEventToElement(child, "load", function(evt) { ASPx.AdjustWrappedTextInContainer(container); });
   else {
    var width = ASPx.GetElementOffsetWidth(child) + ASPx.GetLeftRightMargins(child);
    if(textContainer)
     rightWidth += width;
    else
     leftWidth += width;
   }
  }
 }
 if(textContainer && ASPx.IsTextWrapped(textContainer)) {
  var containerWidth = ASPx.GetElementOffsetWidth(container) - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(container);
  if(textContainer.shrinkedTextContainer) {
   Attr.RestoreStyleAttribute(textContainer, "width");
   Attr.ChangeStyleAttribute(container, "width", containerWidth + "px");
  }
  if(ASPx.GetElementOffsetWidth(textContainer) + leftWidth + rightWidth >= containerWidth) {
    if(rightWidth > 0 && !textContainer.shrinkedTextContainer)
    textContainer.style.width = (containerWidth - rightWidth) + "px";
   else if(leftWidth > 0){
    if(ASPx.IsElementRightToLeft(container))
     textContainer.style.marginLeft = leftWidth + "px";
    else
     textContainer.style.marginRight = leftWidth + "px";
   }
  }
 }
};
ASPx.IsTextWrapped = function(element) {
 return element && ASPx.GetCurrentStyle(element).whiteSpace !== "nowrap";
};
ASPx.IsValidPosition = function(pos){
 return pos != ASPx.InvalidPosition && pos != -ASPx.InvalidPosition;
};
ASPx.getSpriteMainElement = function(element) {
 var cssClassMarker = "dx-acc";
 if(ASPx.ElementContainsCssClass(element, cssClassMarker))
  return element;
 if(element.parentNode && ASPx.ElementContainsCssClass(element.parentNode, cssClassMarker))
  return element.parentNode;
 return element;
};
ASPx.GetAbsoluteX = function(curEl){
 return ASPx.GetAbsolutePositionX(curEl);
};
ASPx.GetAbsoluteY = function(curEl){
 return ASPx.GetAbsolutePositionY(curEl);
};
ASPx.SetAbsoluteX = function(element, x){
 element.style.left = ASPx.PrepareClientPosForElement(x, element, true) + "px";
};
ASPx.SetAbsoluteY = function(element, y){
 element.style.top = ASPx.PrepareClientPosForElement(y, element, false) + "px";
};
ASPx.GetAbsolutePositionX = function(element){
 if(Browser.IE)
  return getAbsolutePositionX_IE(element);
 else if(Browser.Firefox && Browser.Version >= 3)
  return getAbsolutePositionX_FF3(element);
 else if(Browser.Opera)
  return getAbsolutePositionX_Opera(element);
 else if(Browser.NetscapeFamily && (!Browser.Firefox || Browser.Version < 3))
  return getAbsolutePositionX_NS(element);
 else if(Browser.WebKitFamily || Browser.Edge)
  return getAbsolutePositionX_FF3(element);
 else
  return getAbsolutePositionX_Other(element);
};
function getAbsolutePositionX_Opera(curEl){
 var isFirstCycle = true;
 var pos = getAbsoluteScrollOffset_OperaFF(curEl, true);
 while(curEl != null) {
  pos += curEl.offsetLeft;
  if(!isFirstCycle)
   pos -= curEl.scrollLeft;
  curEl = curEl.offsetParent;
  isFirstCycle = false;
 }
 pos += document.body.scrollLeft;
 return pos;
}
function getAbsolutePositionX_IE(element){
 if(element == null || Browser.IE && element.parentNode == null) return 0; 
 return element.getBoundingClientRect().left + ASPx.GetDocumentScrollLeft();
}
function getAbsolutePositionX_FF3(element){
 if(element == null) return 0;
 var x = element.getBoundingClientRect().left + ASPx.GetDocumentScrollLeft();
 return x;
}
function getAbsolutePositionX_NS(curEl){
 var pos = getAbsoluteScrollOffset_OperaFF(curEl, true);
 var isFirstCycle = true;
 while(curEl != null) {
  pos += curEl.offsetLeft;
  if(!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollLeft;
  if(!isFirstCycle && Browser.Firefox){
   var style = ASPx.GetCurrentStyle(curEl);
   if(curEl.tagName == "DIV" && style.overflow != "visible")
    pos += ASPx.PxToInt(style.borderLeftWidth);
  }
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function getAbsolutePositionX_Other(curEl){
 var pos = 0;
 var isFirstCycle = true;
 while(curEl != null) {
  pos += curEl.offsetLeft;
  if(!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollLeft;
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
ASPx.GetAbsolutePositionY = function(element){
 if(Browser.IE)
  return getAbsolutePositionY_IE(element);
 else if(Browser.Firefox && Browser.Version >= 3)
  return getAbsolutePositionY_FF3(element);
 else if(Browser.Opera)
  return getAbsolutePositionY_Opera(element);
 else if(Browser.NetscapeFamily && (!Browser.Firefox || Browser.Version < 3))
  return getAbsolutePositionY_NS(element);
 else if(Browser.WebKitFamily || Browser.Edge)
  return getAbsolutePositionY_FF3(element);
 else
  return getAbsolutePositionY_Other(element);
};
function getAbsolutePositionY_Opera(curEl){
 var isFirstCycle = true;
 if(curEl && curEl.tagName == "TR" && curEl.cells.length > 0)
  curEl = curEl.cells[0];
 var pos = getAbsoluteScrollOffset_OperaFF(curEl, false);
 while(curEl != null) {
  pos += curEl.offsetTop;
  if(!isFirstCycle)
   pos -= curEl.scrollTop;
  curEl = curEl.offsetParent;
  isFirstCycle = false;
 }
 pos += document.body.scrollTop;
 return pos;
}
function getAbsolutePositionY_IE(element){
 if(element == null || Browser.IE && element.parentNode == null) return 0; 
 return element.getBoundingClientRect().top + ASPx.GetDocumentScrollTop();
}
function getAbsolutePositionY_FF3(element){
 if(element == null) return 0;
 var y = element.getBoundingClientRect().top + ASPx.GetDocumentScrollTop();
 return y;
}
function getAbsolutePositionY_NS(curEl){
 var pos = getAbsoluteScrollOffset_OperaFF(curEl, false);
 var isFirstCycle = true;
 while(curEl != null) {
  pos += curEl.offsetTop;
  if(!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollTop;
  if(!isFirstCycle && Browser.Firefox){
   var style = ASPx.GetCurrentStyle(curEl);
   if(curEl.tagName == "DIV" && style.overflow != "visible")
    pos += ASPx.PxToInt(style.borderTopWidth);
  }
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function getAbsoluteScrollOffset_OperaFF(curEl, isX) {
 var pos = 0;   
 var isFirstCycle = true;
 while(curEl != null) {
  if(curEl.tagName == "BODY")
   break;
  var style = ASPx.GetCurrentStyle(curEl);
  if(style.position == "absolute")
   break;
  if(!isFirstCycle && curEl.tagName == "DIV" && (style.position == "" || style.position == "static"))
   pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
  curEl = curEl.parentNode;
  isFirstCycle = false;
 }
 return pos; 
}
function getAbsolutePositionY_Other(curEl){
 var pos = 0;
 var isFirstCycle = true;
 while(curEl != null) {
  pos += curEl.offsetTop;
  if(!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollTop;
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function createElementMock(element) {
 var div = document.createElement('DIV');
 div.style.top = "0px";
 div.style.left = "0px";
 div.visibility = "hidden";
 div.style.position = ASPx.GetCurrentStyle(element).position;
 return div;
}
ASPx.PrepareClientPosElementForOtherParent = function(pos, element, otherParent, isX) {
 if(element.parentNode == otherParent)
  return ASPx.PrepareClientPosForElement(pos, element, isX);
 var elementMock = createElementMock(element);
 otherParent.appendChild(elementMock); 
 var preparedPos = ASPx.PrepareClientPosForElement(pos, elementMock, isX);
 otherParent.removeChild(elementMock);
 return preparedPos;
};
ASPx.PrepareClientPosForElement = function(pos, element, isX) {
 pos -= ASPx.GetPositionElementOffset(element, isX);
 return pos;
};
function getExperimentalPositionOffset(element, isX) {
 var div = createElementMock(element);
 if(div.style.position == "static")
  div.style.position = "absolute";
 element.parentNode.appendChild(div); 
 var realPos = isX ? ASPx.GetAbsoluteX(div) : ASPx.GetAbsoluteY(div);
 element.parentNode.removeChild(div);
 return realPos;
}
ASPx.GetPositionElementOffset = function(element, isX) {
 return getExperimentalPositionOffset(element, isX);
};
ASPx.GetSizeOfText = function(text, textCss) {
 var testContainer = document.createElement("tester");
 var defaultLineHeight = ASPx.Browser.Firefox ? "1" : "";
 testContainer.style.fontSize = textCss.fontSize;
 testContainer.style.fontFamily = textCss.fontFamily;
 testContainer.style.fontWeight = textCss.fontWeight;
 testContainer.style.letterSpacing = textCss.letterSpacing;
 testContainer.style.lineHeight = textCss.lineHeight || defaultLineHeight;
 testContainer.style.position = "absolute";
 testContainer.style.top = ASPx.InvalidPosition + "px";
 testContainer.style.left = ASPx.InvalidPosition + "px";
 testContainer.style.width = "auto";
 testContainer.style.whiteSpace = "nowrap";
 testContainer.appendChild(document.createTextNode(text));
 var testElement = document.body.appendChild(testContainer);
 var size = {
  "width": testElement.offsetWidth,
  "height": testElement.offsetHeight
 };
 document.body.removeChild(testElement);
 return size;
};
ASPx.PointToPixel = function(points, addPx) {  
 var result = 0;
 try {
  var indexOfPt = points.toLowerCase().indexOf("pt");
  if(indexOfPt > -1)
   result = parseInt(points.substr(0, indexOfPt)) * 96 / 72;
  else
   result = parseInt(points) * 96 / 72;
  if(addPx)
   result = result + "px";
 } catch(e) {}
 return result;
};
ASPx.PixelToPoint = function(pixels, addPt) { 
 var result = 0;
 try {
  var indexOfPx = pixels.toLowerCase().indexOf("px");
  if(indexOfPx > -1)
   result = parseInt(pixels.substr(0, indexOfPx)) * 72 / 96;
  else
   result = parseInt(pixels) * 72 / 96;
  if(addPt)
   result = result + "pt";
 } catch(e) {}
 return result;         
};
ASPx.PxToInt = function(px) {
 return pxToNumber(px, parseInt);
};
ASPx.PxToFloat = function(px) {
 return pxToNumber(px, parseFloat);
};
function pxToNumber(px, parseFunction) {
 var result = 0;
 if(px != null && px != "") {
  try {
   var indexOfPx = px.indexOf("px");
   if(indexOfPx > -1)
    result = parseFunction(px.substr(0, indexOfPx));
  } catch(e) { }
 }
 return result;
}
ASPx.PercentageToFloat = function(perc) {
 var result = 0;
 if(perc != null && perc != "") {
  try {
   var indexOfPerc = perc.indexOf("%");
   if(indexOfPerc > -1)
    result = parseFloat(perc.substr(0, indexOfPerc)) / 100;
  } catch(e) { }
 }
 return result;
};
ASPx.CreateGuid = function() {
 return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { 
   var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;
  return v.toString(16);
 });
};
ASPx.GetLeftRightBordersAndPaddingsSummaryValue = function(element, currentStyle) {
 return ASPx.GetLeftRightPaddings(element, currentStyle) + ASPx.GetHorizontalBordersWidth(element, currentStyle);
};
ASPx.GetTopBottomBordersAndPaddingsSummaryValue = function(element, currentStyle) {
 return ASPx.GetTopBottomPaddings(element, currentStyle) + ASPx.GetVerticalBordersWidth(element, currentStyle);
};
ASPx.GetVerticalBordersWidth = function(element, style) {
 if(!ASPx.IsExists(style))
  style = (Browser.IE && Browser.MajorVersion != 9 && window.getComputedStyle) ? window.getComputedStyle(element) : ASPx.GetCurrentStyle(element);
 var res = 0;
 if(style.borderTopStyle != "none") {
  res += ASPx.PxToFloat(style.borderTopWidth);
  if(Browser.IE && Browser.MajorVersion < 9)
   res += getIe8BorderWidthFromText(style.borderTopWidth);
 }
 if(style.borderBottomStyle != "none") {
  res += ASPx.PxToFloat(style.borderBottomWidth);
  if(Browser.IE && Browser.MajorVersion < 9)
   res += getIe8BorderWidthFromText(style.borderBottomWidth);
 }
 return res;
};
ASPx.GetHorizontalBordersWidth = function(element, style) {
 if(!ASPx.IsExists(style))
  style = (Browser.IE && window.getComputedStyle) ? window.getComputedStyle(element) : ASPx.GetCurrentStyle(element);
 var res = 0;
 if(style.borderLeftStyle != "none") {
  res += ASPx.PxToFloat(style.borderLeftWidth);
  if(Browser.IE && Browser.MajorVersion < 9)
   res += getIe8BorderWidthFromText(style.borderLeftWidth);
 }
 if(style.borderRightStyle != "none") {
  res += ASPx.PxToFloat(style.borderRightWidth);
  if(Browser.IE && Browser.MajorVersion < 9)
   res += getIe8BorderWidthFromText(style.borderRightWidth);
 }
 return res;
};
function getIe8BorderWidthFromText(textWidth) {
 var availableWidth = { "thin": 1, "medium" : 3, "thick": 5 };
 var width = availableWidth[textWidth];
 return width ? width : 0;
}
ASPx.GetTopBottomPaddings = function(element, style) {
 var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
 return ASPx.PxToInt(currentStyle.paddingTop) + ASPx.PxToInt(currentStyle.paddingBottom);
};
ASPx.GetTopPaddings = function(element, style) {
 var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
 return ASPx.PxToInt(currentStyle.paddingTop);
};
ASPx.GetBottomPaddings = function(element, style) {
 var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
 return ASPx.PxToInt(currentStyle.paddingBottom);
};
ASPx.GetLeftRightPaddings = function(element, style) {
 var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
 return ASPx.PxToInt(currentStyle.paddingLeft) + ASPx.PxToInt(currentStyle.paddingRight);
};
ASPx.GetTopBottomMargins = function(element, style) {
 var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
 return ASPx.PxToInt(currentStyle.marginTop) + ASPx.PxToInt(currentStyle.marginBottom);
};
ASPx.GetLeftRightMargins = function(element, style) {
 var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
 return ASPx.PxToInt(currentStyle.marginLeft) + ASPx.PxToInt(currentStyle.marginRight);
};
ASPx.GetClearClientWidth = function(element) {
 return ASPx.GetElementOffsetWidth(element)- ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element);
};
ASPx.GetClearClientHeight = function(element) {
 return ASPx.GetElementOffsetHeight(element) - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element);
};
ASPx.SetOffsetWidth = function(element, widthValue, currentStyle) {
 if(!ASPx.IsExists(currentStyle))
  currentStyle = ASPx.GetCurrentStyle(element);
 var value = widthValue - ASPx.PxToInt(currentStyle.marginLeft) - ASPx.PxToInt(currentStyle.marginRight);
  value -= ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle);
 if(value > -1)
  element.style.width = value + "px";
};
ASPx.SetOffsetHeight = function(element, heightValue, currentStyle) {
 if(!ASPx.IsExists(currentStyle))
  currentStyle = ASPx.GetCurrentStyle(element);
 var value = heightValue - ASPx.PxToInt(currentStyle.marginTop) - ASPx.PxToInt(currentStyle.marginBottom);
  value -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle);
 if(value > -1)
  element.style.height = value + "px";
};
ASPx.FindOffsetParent = function(element) {
 var currentElement = element.parentNode;
 while(ASPx.IsExistsElement(currentElement) && currentElement.tagName != "BODY") {
  if(ASPx.GetElementOffsetWidth(currentElement) > 0 && ASPx.GetElementOffsetHeight(currentElement) > 0)
   return currentElement;
  currentElement = currentElement.parentNode;
 }
 return document.body;
};
ASPx.GetDocumentScrollTop = function(){
 var isScrollBodyIE = Browser.IE && ASPx.GetCurrentStyle(document.body).overflow == "hidden" && document.body.scrollTop > 0;
 if(Browser.WebKitFamily || Browser.Edge || isScrollBodyIE) {
  if(Browser.MacOSMobilePlatform) 
   return window.pageYOffset;
  if(Browser.WebKitFamily)
   return document.documentElement.scrollTop || document.body.scrollTop;
  return document.body.scrollTop;
 }
 else
  return document.documentElement.scrollTop;
};
ASPx.SetDocumentScrollTop = function(scrollTop) {
 if(Browser.WebKitFamily && Browser.Version < 60 || Browser.Edge)
  document.body.scrollTop = scrollTop;
 else
  document.documentElement.scrollTop = scrollTop;
};
ASPx.GetDocumentScrollLeft = function(){
 var isScrollBodyIE = Browser.IE && ASPx.GetCurrentStyle(document.body).overflow == "hidden" && document.body.scrollLeft > 0;
 if(Browser.Edge || isScrollBodyIE)
  return document.body ? document.body.scrollLeft : document.documentElement.scrollLeft;
 if(Browser.WebKitFamily)
  return document.documentElement.scrollLeft || document.body.scrollLeft;
 return document.documentElement.scrollLeft;
};
ASPx.SetDocumentScrollLeft = function (scrollLeft) {
 if(Browser.WebKitFamily && Browser.Version < 60 || Browser.Edge)
  document.body.scrollLeft = scrollLeft;
 else
  document.documentElement.scrollLeft = scrollLeft;
};
ASPx.GetDocumentClientWidth = function(){
 if(document.documentElement.clientWidth == 0)
  return document.body.clientWidth;
 else
  return document.documentElement.clientWidth;
};
ASPx.GetDocumentClientHeight = function() {
 if(Browser.Firefox && window.innerHeight - document.documentElement.clientHeight > ASPx.GetVerticalScrollBarWidth()) {
  return window.innerHeight;
 } else if(Browser.Opera && Browser.Version < 9.6 || document.documentElement.clientHeight == 0) {
   return document.body.clientHeight;
 }
 return document.documentElement.clientHeight;
};
ASPx.GetDocumentWidth = function(){
 var bodyWidth = document.body.offsetWidth;
 var docWidth = Browser.IE ? document.documentElement.clientWidth : document.documentElement.offsetWidth;
 var bodyScrollWidth = document.body.scrollWidth;
 var docScrollWidth = document.documentElement.scrollWidth;
 return getMaxDimensionOf(bodyWidth, docWidth, bodyScrollWidth, docScrollWidth);
};
ASPx.GetDocumentHeight = function(){
 var bodyHeight = document.body.offsetHeight;
 var docHeight = Browser.IE ? document.documentElement.clientHeight : document.documentElement.offsetHeight;
 var bodyScrollHeight = document.body.scrollHeight;
 var docScrollHeight = document.documentElement.scrollHeight;
 var maxHeight = getMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight, docScrollHeight);
 if(Browser.Opera && Browser.Version >= 9.6){
  if(Browser.Version < 10)
   maxHeight = getMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight);
  var visibleHeightOfDocument = document.documentElement.clientHeight;
  if(maxHeight > visibleHeightOfDocument)
   maxHeight = getMaxDimensionOf(window.outerHeight, maxHeight);
  else
   maxHeight = document.documentElement.clientHeight;
  return maxHeight;
 }
 return maxHeight;
};
ASPx.GetDocumentMaxClientWidth = function(){
 var bodyWidth = document.body.offsetWidth;
 var docWidth = document.documentElement.offsetWidth;
 var docClientWidth = document.documentElement.clientWidth;
 return getMaxDimensionOf(bodyWidth, docWidth, docClientWidth);
};
ASPx.GetDocumentMaxClientHeight = function(){
 var bodyHeight = document.body.offsetHeight;
 var docHeight = document.documentElement.offsetHeight;
 var docClientHeight = document.documentElement.clientHeight;
 return getMaxDimensionOf(bodyHeight, docHeight, docClientHeight);
};
ASPx.verticalScrollIsNotHidden = null;
ASPx.horizontalScrollIsNotHidden = null;
ASPx.GetVerticalScrollIsNotHidden = function() {
 if(!ASPx.IsExists(ASPx.verticalScrollIsNotHidden))
  ASPx.verticalScrollIsNotHidden = ASPx.GetCurrentStyle(document.body).overflowY !== "hidden"
   && ASPx.GetCurrentStyle(document.documentElement).overflowY !== "hidden";
 return ASPx.verticalScrollIsNotHidden;
};
ASPx.GetHorizontalScrollIsNotHidden = function() {
 if(!ASPx.IsExists(ASPx.horizontalScrollIsNotHidden))
  ASPx.horizontalScrollIsNotHidden = ASPx.GetCurrentStyle(document.body).overflowX !== "hidden"
   && ASPx.GetCurrentStyle(document.documentElement).overflowX !== "hidden";
 return ASPx.horizontalScrollIsNotHidden;
};
ASPx.GetCurrentDocumentWidth = function() {
 var result = ASPx.GetDocumentClientWidth();
 if(!ASPx.Browser.Safari && ASPx.GetVerticalScrollIsNotHidden() && ASPx.GetDocumentHeight() > ASPx.GetDocumentClientHeight())
  result += ASPx.GetVerticalScrollBarWidth();
 return result;
};
ASPx.GetCurrentDocumentHeight = function() {
 var result = ASPx.GetDocumentClientHeight();
 if(!ASPx.Browser.Safari && ASPx.GetHorizontalScrollIsNotHidden() && ASPx.GetDocumentWidth() > ASPx.GetDocumentClientWidth())
  result += ASPx.GetVerticalScrollBarWidth();
 return result;
};
function getMaxDimensionOf(){
 var max = ASPx.InvalidDimension;
 for(var i = 0; i < arguments.length; i++){
  if(max < arguments[i])
   max = arguments[i];
 }
 return max;
}
ASPx.GetClientLeft = function(element) {
 return ASPx.IsExists(element.clientLeft) ? element.clientLeft : (ASPx.GetElementOffsetWidth(element)- element.clientWidth) / 2;
};
ASPx.GetClientTop = function(element) {
 return ASPx.IsExists(element.clientTop) ? element.clientTop : (ASPx.GetElementOffsetHeight(element) - element.clientHeight) / 2;
};
var requestAnimationFrameFunc = window.requestAnimationFrame || function(callback) { callback(); };
var cancelAnimationFrameFunc = window.cancelAnimationFrame || function(id) { };
ASPx.CancelAnimationFrame = function(id) { cancelAnimationFrameFunc(id); };
ASPx.RequestAnimationFrame = function (callback) { return requestAnimationFrameFunc(callback); };
ASPx.SetStyles = function(element, styles, makeImportant) {
 if(ASPx.IsExists(styles.cssText))
  element.style.cssText = styles.cssText;
 if(ASPx.IsExists(styles.className)) {
  ASPx.SetClassName(element, styles.className);
 }
 for(var property in styles) {
  if(!styles.hasOwnProperty(property))
   continue;
  var value = styles[property];
  switch (property) {
   case "cssText":
   case "className":
    break;
   case "float":
    ASPx.SetElementFloat(element, value);
    break;
   case "opacity":
    ASPx.SetElementOpacity(element, value);
    break;
   case "zIndex":
    ASPx.SetStylesCore(element, property, value, makeImportant);
    break;
   case "fontWeight":
    if(ASPx.Browser.IE && ASPx.Browser.Version < 9 && typeof(styles[property]) == "number")
     value = styles[property].toString();
   default:
    ASPx.SetStylesCore(element, property, value + (typeof (value) == "number" ? "px" : ""), makeImportant);
  }
 }
};
ASPx.SetStylesCore = function(element, property, value, makeImportant) {
 if(makeImportant) {
  var index = property.search("[A-Z]");
  if(index != -1)
   property = property.replace(property.charAt(index), "-" + property.charAt(index).toLowerCase());
  if(element.style.setProperty)
   element.style.setProperty(property, value, "important");
  else 
   element.style.cssText += ";" + property + ":" + value + "!important";
 }
 else
  element.style[property] = value;
};
ASPx.RemoveBordersAndShadows = function(el) {
 if(!el || !el.style)
  return;
 el.style.borderWidth = 0;
 if(ASPx.IsExists(el.style.boxShadow))
  el.style.boxShadow = "none";
 else if(ASPx.IsExists(el.style.MozBoxShadow))
  el.style.MozBoxShadow = "none";
 else if(ASPx.IsExists(el.style.webkitBoxShadow))
  el.style.webkitBoxShadow = "none";
};
ASPx.GetCellSpacing = function(element) {
 var val = parseInt(element.cellSpacing);
 if(!isNaN(val)) return val;
 val = parseInt(ASPx.GetCurrentStyle(element).borderSpacing);
 if(!isNaN(val)) return val;
 return 0;
};
ASPx.GetInnerScrollPositions = function(element) {
 var scrolls = [];
 getInnerScrollPositionsCore(element, scrolls);
 return scrolls;
};
function getInnerScrollPositionsCore(element, scrolls) {
 for(var child = element.firstChild; child; child = child.nextSibling) {
  var scrollTop = child.scrollTop,
   scrollLeft = child.scrollLeft;
  if(scrollTop > 0 || scrollLeft > 0)
   scrolls.push([child, scrollTop, scrollLeft]);
  getInnerScrollPositionsCore(child, scrolls);
 }
}
ASPx.RestoreInnerScrollPositions = function(scrolls) {
 for(var i = 0, scrollArr; scrollArr = scrolls[i]; i++) {
  if(scrollArr[1] > 0)
   scrollArr[0].scrollTop = scrollArr[1];
  if(scrollArr[2] > 0)
   scrollArr[0].scrollLeft = scrollArr[2];
 }
};
ASPx.GetOuterScrollPosition = function(element) {
 while(element && element.tagName !== "BODY") {
  var scrollTop = element.scrollTop,
   scrollLeft = element.scrollLeft;
  if(scrollTop > 0 || scrollLeft > 0) {
   return {
    scrollTop: scrollTop,
    scrollLeft: scrollLeft,
    element: element
   };
  }
  element = element.parentNode;
 }
 return {
  scrollTop: ASPx.GetDocumentScrollTop(),
  scrollLeft: ASPx.GetDocumentScrollLeft()
 };
};
ASPx.RestoreOuterScrollPosition = function(scrollInfo) {
 if(scrollInfo.element) {
  if(scrollInfo.scrollTop > 0)
   scrollInfo.element.scrollTop = scrollInfo.scrollTop;
  if(scrollInfo.scrollLeft > 0)
   scrollInfo.element.scrollLeft = scrollInfo.scrollLeft;
 }
 else {
  if(scrollInfo.scrollTop > 0)
   ASPx.SetDocumentScrollTop(scrollInfo.scrollTop);
  if(scrollInfo.scrollLeft > 0)
   ASPx.SetDocumentScrollLeft(scrollInfo.scrollLeft);
 }
};
ASPx.ChangeElementContainer = function(element, container, savePreviousContainer) {
 if(element.parentNode != container) {
  var parentNode = element.parentNode;
  parentNode.removeChild(element);
  container.appendChild(element);
  if(savePreviousContainer)
   element.previousContainer = parentNode;
 }
};
ASPx.RestoreElementContainer = function(element) {
 if(element.previousContainer) {
  ASPx.ChangeElementContainer(element, element.previousContainer, false);
  element.previousContainer = null;
 }
};
ASPx.MoveChildrenToElement = function(sourceElement, destinationElement){
 while(sourceElement.childNodes.length > 0)
  destinationElement.appendChild(sourceElement.childNodes[0]);
};
ASPx.GetScriptCode = function(script) {
 var useFirstChildElement = Browser.Chrome && Browser.Version < 11 || Browser.Safari && Browser.Version < 5; 
 var text = useFirstChildElement ? script.firstChild.data : script.text;
 var comment = "<!--";
 var pos = text.indexOf(comment);
 if(pos > -1)
  text = text.substr(pos + comment.length);
 return text;
};
ASPx.AppendScript = function(script) {
 var parent = document.getElementsByTagName("head")[0];
 if(!parent)
  parent = document.body;
 if(parent)
  parent.appendChild(script);
};
function getFrame(frames, name) {
 if(frames[name])
  return frames[name];
 for(var i = 0; i < frames.length; i++) {
  try {
   var frame = frames[i];
   if(frame.name == name) 
    return frame; 
   frame = getFrame(frame.frames, name);
   if(frame != null)   
    return frame; 
  } catch(e) {
  } 
 }
 return null;
}
ASPx.IsValidElement = function(element) {
 if(!element) 
  return false;
 if(!(Browser.Firefox && Browser.Version < 4)) {
  if(element.ownerDocument && element.ownerDocument.body && element.ownerDocument.body.compareDocumentPosition)
   return element.ownerDocument.body.compareDocumentPosition(element) % 2 === 0;
 }
 if(!Browser.Opera && !(Browser.IE && Browser.Version < 9) && element.offsetParent && element.parentNode.tagName)
  return true;
 while(element != null){
  if(element.tagName == "BODY")
   return true;
  element = element.parentNode;
 }
 return false;
};
ASPx.IsValidElements = function(elements) {
 if(!elements)
  return false; 
 for(var i = 0; i < elements.length; i++) {
  if(elements[i] && !ASPx.IsValidElement(elements[i]))
   return false;
 }
 return true;
};
ASPx.IsExistsElement = function(element) {
 return element && ASPx.IsValidElement(element);
};
ASPx.CreateHtmlElementFromString = function(str) {
 var dummy = ASPx.CreateHtmlElement();
 setInnerHtmlInternal(dummy, str);
 return dummy.firstChild;
};
ASPx.CreateHtmlElement = function(tagName, styles) {
 var element = document.createElement(tagName || "DIV");
 if(styles)
  ASPx.SetStyles(element, styles);
 return element;
};
ASPx.RestoreElementOriginalWidth = function(element) {
 if(!ASPx.IsExistsElement(element)) 
  return;
 element.style.width = element.dxOrigWidth = ASPx.GetElementOriginalWidth(element);
};
ASPx.GetElementOriginalWidth = function(element) {
 if(!ASPx.IsExistsElement(element)) 
  return null;
 var width;
 if(!ASPx.IsExists(element.dxOrigWidth)) {
  width = String(element.style.width).length > 0
   ? element.style.width
   : ASPx.GetElementOffsetWidth(element) + "px";
 } else {
  width = element.dxOrigWidth;
 }
 return width;
};
ASPx.DropElementOriginalWidth = function(element) {
 if(ASPx.IsExists(element.dxOrigWidth))
  element.dxOrigWidth = null;
};
ASPx.GetObjectKeys = function(obj) {
 if(!obj) return [ ];
 if(Object.keys)
  return Object.keys(obj);
 var keys = [ ];
 for(var key in obj) {
  if(obj.hasOwnProperty(key))
   keys.push(key);
 }
 return keys;
};
ASPx.ShowErrorAlert = function(message) {
 message = ASPx.Str.DecodeHtmlViaTextArea(message);
 if(ASPx.IsExists(message) && message !== "")
  alert(message);
};
ASPx.ShowKBErrorMessage = function(text, kbid) {
 ASPx.ShowErrorMessage(text + "https://www.devexpress.com/kbid=" + kbid + ".");
};
ASPx.ShowErrorMessage = function(errorMessage) {
 var console = window.console;
 if(!console || !ASPx.IsFunction(console.error))
  return;
 console.error(errorMessage);
};
ASPx.IsInteractiveControl = function(element, extremeParent) { 
 return Data.ArrayIndexOf(["A", "INPUT", "SELECT", "OPTION", "TEXTAREA", "BUTTON", "IFRAME"], element.tagName) > -1;
};
ASPx.IsUrlContainsClientScript = function(url) {
 return url.toLowerCase().indexOf("javascript:") !== -1;
};
ASPx.GetMSAjaxRequestManager = function() {
 if(window.Sys && Sys.WebForms && Sys.WebForms.PageRequestManager && Sys.WebForms.PageRequestManager.getInstance)
  return Sys.WebForms.PageRequestManager.getInstance();
 return null;
};
Function.prototype.aspxBind = function(scope) {
 var func = this;
 return function() {
  return func.apply(scope, arguments);
 };
};
var FilteringUtils = { };
FilteringUtils.EventKeyCodeChangesTheInput = function(evt) {
 if(ASPx.IsPasteShortcut(evt))
  return true;
 else if(evt.ctrlKey && !evt.altKey)
  return false;
 if(ASPx.Browser.AndroidMobilePlatform || ASPx.Browser.MacOSMobilePlatform) return true; 
 var keyCode = ASPx.Evt.GetKeyCode(evt);
 var isSystemKey = ASPx.Key.Windows <= keyCode && keyCode <= ASPx.Key.ContextMenu;
 var isFKey = ASPx.Key.F1 <= keyCode && keyCode <= 127; 
 return ASPx.Key.Delete <= keyCode && !isSystemKey && !isFKey || keyCode == ASPx.Key.Backspace || keyCode == ASPx.Key.Space;
};
FilteringUtils.FormatCallbackArg = function(prefix, arg) {
 return (ASPx.IsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
};
ASPx.FilteringUtils = FilteringUtils;
var FormatStringHelper = { };
FormatStringHelper.PlaceHolderTemplateStruct = function(startIndex, length, index, placeHolderString){
 this.startIndex = startIndex;
 this.realStartIndex = 0;
 this.length = length;
 this.realLength = 0;
 this.index = index;
 this.placeHolderString = placeHolderString;
};
FormatStringHelper.GetPlaceHolderTemplates = function(formatString){
 formatString = this.CollapseDoubleBrackets(formatString);
 var templates = this.CreatePlaceHolderTemplates(formatString);
 return templates;
};
FormatStringHelper.CreatePlaceHolderTemplates = function(formatString){
 var templates = [];
 var templateStrings = formatString.match(/{[^}]+}/g);
 if(templateStrings != null){
  var pos = 0;
  for(var i = 0; i < templateStrings.length; i++){
   var tempString = templateStrings[i];
   var startIndex = formatString.indexOf(tempString, pos);
   var length = tempString.length;
   var indexString = tempString.slice(1).match(/^[0-9]+/);
   var index = parseInt(indexString);
   templates.push(new this.PlaceHolderTemplateStruct(startIndex, length, index, tempString));
   pos = startIndex + length;
  }
 }
 return templates;
};
FormatStringHelper.CollapseDoubleBrackets = function(formatString){
 formatString = this.CollapseOpenDoubleBrackets(formatString);
 formatString = this.CollapseCloseDoubleBrackets(formatString);
 return formatString;
};
FormatStringHelper.CollapseOpenDoubleBrackets = function(formatString){
 return formatString.replace(/{{/g, "_");
};
FormatStringHelper.CollapseCloseDoubleBrackets = function(formatString){
 while(true){
  var index = formatString.lastIndexOf("}}");
  if(index == -1) 
   break;
  else
   formatString = formatString.substr(0, index) + "_" + formatString.substr(index + 2);
 }
 return formatString;
};
ASPx.FormatStringHelper = FormatStringHelper;
var StartWithFilteringUtils = { };
StartWithFilteringUtils.HighlightSuggestedText = function(input, suggestedText, control, onChangeInput){
 if(this.NeedToLockAndoidKeyEvents(control))
  control.LockAndroidKeyEvents();
 var selInfo = ASPx.Selection.GetInfo(input);
 var currentTextLenght = ASPx.Str.GetCoincideCharCount(suggestedText, input.value, 
  function(text, filter) { 
   return text.indexOf(filter) == 0;
  });
 var suggestedTextLenght = suggestedText.length;
 var isSelected = selInfo.startPos == 0 && selInfo.endPos == currentTextLenght && 
  selInfo.endPos == suggestedTextLenght && input.value == suggestedText;
 if(!isSelected) { 
  input.value = suggestedText;
  if(onChangeInput)
   onChangeInput();
  if(this.NeedToLockAndoidKeyEvents(control)) {
   window.setTimeout(function() {
    this.SelectText(input, currentTextLenght, suggestedTextLenght);
    control.UnlockAndroidKeyEvents();
   }.aspxBind(this), control.adroidSamsungBugTimeout);
  } else
   this.SelectText(input, currentTextLenght, suggestedTextLenght);
 }
};
StartWithFilteringUtils.SelectText = function(input, startPos, stopPos) {
 if(startPos < stopPos)
  ASPx.Selection.Set(input, startPos, stopPos);
};
StartWithFilteringUtils.RollbackOneSuggestedChar = function(input){
 var currentText = input.value;
 var cutText = currentText.slice(0, -1);
 if(cutText != currentText)
  input.value = cutText;
};
StartWithFilteringUtils.NeedToLockAndoidKeyEvents = function(control) {
 return ASPx.Browser.AndroidMobilePlatform && control && control.LockAndroidKeyEvents;
};
ASPx.StartWithFilteringUtils = StartWithFilteringUtils;
var ContainsFilteringUtils = { };
ContainsFilteringUtils.ColumnSelectionStruct = function(index, startIndex, length){
 this.index = index;
 this.length = length;
 this.startIndex = startIndex;
};
ContainsFilteringUtils.IsFilterCrossPlaseHolder = function(filterStartIndex, filterEndIndex, template) {
 var left = Math.max(filterStartIndex, template.realStartIndex);
 var right = Math.min(filterEndIndex,  template.realStartIndex + template.realLength);
 return left < right;
};
ContainsFilteringUtils.GetColumnSelectionsForItem = function(itemValues, formatString, filterString) {
 if(formatString == "") 
  return this.GetSelectionForSingleColumnItem(itemValues, filterString); 
 var result = [];
 var formatedString = ASPx.Formatter.Format(formatString, itemValues);
 var filterStartIndex = ASPx.Str.PrepareStringForFilter(formatedString).indexOf(ASPx.Str.PrepareStringForFilter(filterString));
 if(filterStartIndex == -1) return result;
 var filterEndIndex = filterStartIndex + filterString.length;
 var templates = FormatStringHelper.GetPlaceHolderTemplates(formatString);
 this.SupplyTemplatesWithRealValues(itemValues, templates);
 for(var i = 0; i < templates.length ; i++) {
  if(this.IsFilterCrossPlaseHolder(filterStartIndex, filterEndIndex, templates[i])) 
   result.push(this.GetColumnSelectionsForItemValue(templates[i], filterStartIndex, filterEndIndex));
 }
 return result;
};
ContainsFilteringUtils.GetColumnSelectionsForItemValue = function(template, filterStartIndex, filterEndIndex) {
 var selectedTextStartIndex = filterStartIndex < template.realStartIndex ? 0 :
  filterStartIndex - template.realStartIndex;
 var selectedTextEndIndex = filterEndIndex >  template.realStartIndex + template.realLength ? template.realLength :
  filterEndIndex - template.realStartIndex;
 var selectedTextLength = selectedTextEndIndex - selectedTextStartIndex;
 return new this.ColumnSelectionStruct(template.index, selectedTextStartIndex, selectedTextLength);
};
ContainsFilteringUtils.GetSelectionForSingleColumnItem = function(itemValues, filterString) {
 var selectedTextStartIndex = ASPx.Str.PrepareStringForFilter(itemValues[0]).indexOf(ASPx.Str.PrepareStringForFilter(filterString));
 var selectedTextLength = filterString.length;
 return [new this.ColumnSelectionStruct(0, selectedTextStartIndex, selectedTextLength)];
};
ContainsFilteringUtils.ResetFormatStringIndex = function(formatString, index) {
 if(index != 0)
  return formatString.replace(index.toString(), "0");
 return formatString;
};
ContainsFilteringUtils.SupplyTemplatesWithRealValues = function(itemValues, templates) {
 var shift = 0;
 for(var i = 0; i < templates.length; i++) {
  var formatString = this.ResetFormatStringIndex(templates[i].placeHolderString, templates[i].index);
  var currentItemValue = itemValues[templates[i].index];
  templates[i].realLength = ASPx.Formatter.Format(formatString, currentItemValue).length;
  templates[i].realStartIndex  += templates[i].startIndex + shift; 
  shift += templates[i].realLength - templates[i].placeHolderString.length; 
 }
};
ContainsFilteringUtils.PrepareElementText = function(itemText) {
 return itemText ? itemText.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : '';
};
ContainsFilteringUtils.UnselectContainsTextInElement = function(element, selection, highlightTagName) {
 var currentText =  ASPx.Attr.GetAttribute (element, "DXText");
 if(ASPx.IsExists(currentText)) {
  currentText = ContainsFilteringUtils.PrepareElementText(currentText);
  ASPx.Security.setInnerHtml(element, currentText === "" ? "&nbsp;" : currentText, ASPx.Security.DataType.Trusted);
 }
};
ContainsFilteringUtils.ReselectContainsTextInElement = function(element, selection, highlightTagName) {
 var currentText = ASPx.GetInnerText(element);
 if(!highlightTagName)
  highlightTagName = "em";
 highlightTagName = highlightTagName.toLowerCase();
 if(currentText.indexOf("</" + highlightTagName + ">") != -1)
  ContainsFilteringUtils.UnselectContainsTextInElement(element, selection, highlightTagName);
 return ContainsFilteringUtils.SelectContainsTextInElement(element, selection, highlightTagName);
};
ContainsFilteringUtils.SelectContainsTextInElement = function(element, selection, highlightTagName) {
 if(selection.startIndex == -1)
  return;
 var currentText =  ASPx.Attr.GetAttribute (element, "DXText");
 if(!ASPx.IsExists(currentText)) ASPx.Attr.SetAttribute (element, "DXText", ASPx.GetInnerText(element));
 if(!highlightTagName)
  highlightTagName = "em";
 highlightTagName = highlightTagName.toLowerCase();
 var oldInnerText = ASPx.GetInnerText(element);
 var newInnerText = ContainsFilteringUtils.PrepareElementText(oldInnerText.substr(0, selection.startIndex)) + "<" + highlightTagName + ">" +
      ContainsFilteringUtils.PrepareElementText(oldInnerText.substr(selection.startIndex, selection.length)) + "</" + highlightTagName + ">" +
      ContainsFilteringUtils.PrepareElementText(oldInnerText.substr(selection.startIndex + selection.length));
 ASPx.Security.setInnerHtml(element, newInnerText, ASPx.Security.DataType.Trusted);
};
ASPx.ContainsFilteringUtils = ContainsFilteringUtils;
ASPx.MakeEqualControlsWidth = function(name1, name2){
 var control1 = ASPx.GetControlCollection().Get(name1);
 var control2 = ASPx.GetControlCollection().Get(name2);
 if(control1 && control2){
  var width = Math.max(control1.GetWidth(), control2.GetWidth());
  control1.SetWidth(width);
  control2.SetWidth(width);
 }
};
ASPx.HighContrastForeColorHighlightColorMap = {
 "#ffff00" : "#008000",
 "#00ff00" : "#0000ff",
 "#ffffff" : "#00838f",
 "#000000" : "#a347ff"
};
var BadgeManagerBase = ASPx.CreateClass(null, {
 createBadge: function(text, iconCssClass) {
  var badge = document.createElement("SPAN");
  ASPx.SetClassName(badge, this.getBadgeClassName());
  if(iconCssClass && iconCssClass.length)
   this.setBadgeIconCssClass(badge, iconCssClass);
  if(text && text.length)
   this.setBadgeText(badge, text);
  return badge;
 },
 findBadge: function(element) {
  if(!element)
   return null;
  return element.querySelector("." + this.getBadgeClassName());
 },
 setBadgeIconCssClass: function(badge, iconCssClass) {
  if(!badge || iconCssClass === undefined)
   return;
  var iconElement = this.getBadgeIconElement(badge);
  if(!iconCssClass) {
   if(iconElement)
    badge.removeChild(iconElement);
  }
  else {
   if(!iconElement) {
    iconElement = document.createElement("SPAN");
    badge.insertBefore(iconElement, badge.childNodes[0]);
   }
   ASPx.SetClassName(iconElement, iconCssClass + " " + this.getBadgeIconDefaultClassName());
  }
 },
 getBadgeIconCssClass: function(element) {
  var badge = this.findBadge(element);
  if(badge) {
   var iconElement = this.getBadgeIconElement(badge);
   var regEx = new RegExp("(?:^|\\s)" + this.getBadgeIconDefaultClassName() + "(?!\\S)");
   return iconElement ? ASPx.Str.Trim(ASPx.GetClassName(iconElement).replace(regEx, "")) : "";
  }
  return "";
 },
 setBadgeText: function(badge, text) {
  if(!badge || text === undefined)
   return;
  var textElement = this.getBadgeTextElement(badge);
  if(!text) {
   if(textElement)
    badge.removeChild(textElement);
  }
  else {
   if(!textElement) {
    textElement = document.createElement("SPAN");
    badge.appendChild(textElement);
   }
   ASPx.Security.setInnerHtml(textElement, text, ASPx.Security.DataType.Trusted);
  }
 },
 getBadgeText: function(element) {
  var badge = this.findBadge(element);
  if(badge) {
   var textElement = this.getBadgeTextElement(badge);
   return textElement ? ASPx.GetInnerText(textElement) : "";
  }
  return "";
 },
 getBadgeClassName: function() {
  return "";
 },
 getBadgeIconDefaultClassName: function() {
  return "";
 },
 getBadgeIconElement: function(badge) {
  return badge.childNodes.length ? badge.querySelector("." + this.getBadgeIconDefaultClassName()) : null;
 },
 getBadgeTextElement: function(badge) {
  return badge.childNodes.length ? badge.querySelector("span:not(." + this.getBadgeIconDefaultClassName() + ")") : null;
 }
});
ASPx.BadgeManagerBase = BadgeManagerBase;
var BadgeManager = ASPx.CreateClass(BadgeManagerBase, {
 getBadgeClassName: function() {
  return "dxBadge";
 },
 getBadgeIconDefaultClassName: function() {
  return "dxBadgeImage";
 }
});
ASPx.BadgeManager = new BadgeManager();
var AccessibilityUtils = {
 isInitialized: false,
 highContrastCssClassMarker: "dxHighContrast",
 highContrastBackgroundCssClassMarker: "dxHCB",
 highContrastDefaultBackgroundColor: "#a347ff",
 highContrastThemeActive: false,
 accessibleBackgroundCssMarker: ".dx-runtime-background",
 createAccessibleBackgrounds: function(control) {
  if(!this.highContrastThemeActive || control.accessibleBackgroundsCreated || !control.accessibilityCompliant)
   return;
  var className = this.accessibleBackgroundCssMarker;
  var styleSheetRuleNames = [];
  iterateStyleSheetRules(null, function(rule) {
   var selectorTxt = rule.selectorText;
   if(selectorTxt && selectorTxt.indexOf(className) > -1)
    styleSheetRuleNames.push(ASPx.Str.CompleteReplace(selectorTxt, className, "")); 
  });
  for(var i = 0; i < styleSheetRuleNames.length; i++) {
   var name = styleSheetRuleNames[i];
   var rule = ASPx.GetStyleSheetRules(name.substring(1));
   if(rule && rule.style && rule.style.backgroundImage)
    this.createAccessibleBackground(control.GetMainElement(), rule.style, name);
  }
  control.accessibleBackgroundsCreated = true;
 },
 createAccessibleBackground: function(container, style, selector) {
  if(!container)
   return;
  var backgroundUrl = style.backgroundImage.substring(5, style.backgroundImage.length - 2);
  var elements = container.querySelectorAll(selector);
  var accessibleBackgroundClassName = "dx-acc-bi";
  for(var i = 0; i < elements.length; i++) {
   var element = elements[i];
   if(ASPx.ElementHasCssClass(element, accessibleBackgroundClassName))
    continue;
   var image = null;
   if(element.tagName !== "IMG") {
    ASPx.AddClassNameToElement(element, accessibleBackgroundClassName);
    image = element.ownerDocument.createElement("IMG");
    ASPx.SetStyles(image, { width: "100%", height: "100%" });
    if(element.firstChild)
     element.insertBefore(image, element.firstChild);
    else
     element.appendChild(image);
   } else
    image = element;
   image.src = backgroundUrl;
  }
 },
 createHighContrastBackgroundStyle: function() {
  var style = document.createElement('style');
  style.type = 'text/css';
  var styleContent = [
   "." + this.highContrastCssClassMarker + " ." + this.highContrastBackgroundCssClassMarker + ":after {",
   "border-image: url(" + this.getHighContrastBackgroundUrl() + ") 0 1 0 0 round;",
   "}",
  ];
  setInnerHtmlInternal(style, styleContent.join('\n'));
  document.getElementsByTagName('head')[0].appendChild(style);
 },
 getHighContrastBackgroundUrl: function() {
  var canvas = document.createElement("canvas"),
  ctx = canvas.getContext('2d');
  canvas.width = 1;
  canvas.height = 1;
  ctx.fillStyle = this.getHighContrastBackgroundColor();
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  return canvas.toDataURL();
 },
 getHighContrastBackgroundColor: function() {
  var foreColor = ASPx.GetCurrentStyle(document.body).color;
  var hexColor = ASPx.Color.ColorToHexadecimal(foreColor);
  return ASPx.HighContrastForeColorHighlightColorMap[hexColor] || this.highContrastDefaultBackgroundColor;
 },
 initialize: function() {
  if(this.isInitialized)
   return;
  this.isInitialized = true;
  this.detectHighContrastTheme();
  if(this.highContrastThemeActive)
   this.createHighContrastBackgroundStyle();
 },
 detectHighContrastTheme: function() {
  var testElement = document.createElement("DIV");
  ASPx.SetStyles(testElement, {
   backgroundImage: "url('" + ASPx.EmptyImageUrl + "')",
   display: "none"
  }, true);
  var docElement = document.documentElement;
  docElement.appendChild(testElement);
  var actualBackgroundImg = ASPx.GetCurrentStyle(testElement).backgroundImage;
  docElement.removeChild(testElement);
  if(actualBackgroundImg === "none") {
   this.highContrastThemeActive = true;
   ASPx.AddClassNameToElement(docElement, this.highContrastCssClassMarker);
  }
 }
};
ASPx.AccessibilityUtils = AccessibilityUtils;
ASPx.AccessibilityUtils.SendMessageToAssistiveTechnology = function(message) {
 var messageParts = ASPx.Ident.IsArray(message) ? message : [message];
 var args = new ASPxClientControlBeforePronounceEventArgs(messageParts, null);
 ASPx.AccessibilityPronouncer.EnsureInitialize();
 ASPx.AccessibilityPronouncer.Pronounce(args, ASPx.AccessibilityPronouncerType.live);
};
ASPx.AccessibilityUtils.SetFocusAccessible = function(focusableElement) {
 if(!focusableElement)
  return;
 var elementId = focusableElement.id;
 if(!elementId) {
  var namedParent = ASPx.GetParent(focusableElement, function(element) {
   return !!element.id;
  });
  if(ASPx.IsExists(namedParent))
   elementId = namedParent.id;
 }
 var focusableControl = ASPx.GetClientControlByElementID(elementId);
 if(focusableControl && focusableControl.OnAssociatedLabelClick)
  focusableControl.OnAssociatedLabelClick(focusableElement);
 else
  window.setTimeout(function() {
   ASPx.AccessibilityUtils.SetFocusAccessibleCore(focusableElement);
  }, 0);
};
ASPx.AccessibilityUtils.SetFocusAccessibleCore = function(focusableElement) {
 if(!ASPx.IsExists(focusableElement))
  return;
 if(!ASPx.IsValidElement(focusableElement) && focusableElement.id)
  focusableElement = ASPx.GetElementById(focusableElement.id);
 if(!ASPx.IsActionElement(focusableElement))
  focusableElement = ASPx.RestoreFocusHelper.findNeighbourFocusElement(focusableElement, document.body);
 if(ASPx.IsExistsElement(focusableElement))
  focusableElement.focus();
};
var Security = {
 setInnerHtml: function(el, html, dataType) {
  if(!html) {
   while(el.firstChild)
    ASPx.RemoveElement(el.firstChild);
  } else
   Security.setData(html, function(d) { ASPx.SetInnerHtml.call(window, el, d); }, dataType);
 },
 setText: function(control, text, dataType) { Security.setData(text, control.SetText.aspxBind(control), dataType); },
 safeEncodeHtml: function(html) { return ASPx.Str.EncodeHtml(ASPx.Str.DecodeHtml(html)); },
 setData: function(data, dataSetter, dataType) {
  if(dataType === undefined)
   throw new Error("Specify the dataType");
  if(dataType == Security.DataType.Untrusted)
   data = Security.safeEncodeHtml(data);
  dataSetter(data);
 }
};
Security.DataType = {
 Trusted: 0,
 Untrusted: 1
};
ASPx.EnableCssAnimation = true;
var AnimationTransitionBase = ASPx.CreateClass(null, {
 constructor: function(element, options) {
  if(element) {
   AnimationTransitionBase.Cancel(element);
   this.element = element;
   this.element.aspxTransition = this;
  }
  this.duration = options.duration || AnimationConstants.Durations.DEFAULT;
  this.transition = options.transition || AnimationConstants.Transitions.SINE;
  this.property = options.property;
  this.unit = options.unit || "";
  this.onComplete = options.onComplete;
  this.to = null;
  this.from = null;
 },
 Start: function(from, to) {
  if(to != undefined) {
   this.to = to;
   this.from = from;
   this.SetValue(this.from);
  }
  else
   this.to = from;
 },
 Cancel: function() {
  if(!this.element)
   return;
  try {
   delete this.element.aspxTransition;
  } catch(e) {
   this.element.aspxTransition = undefined;
  }
 },
 GetValue: function() {
  return this.getValueInternal(this.element, this.property);
 },
 SetValue: function(value) {
  this.setValueInternal(this.element, this.property, this.unit, value);
 },
 setValueInternal: function(element, property, unit, value) {
  if(property == "opacity")
   AnimationUtils.setOpacity(element, value);
  else
   element.style[property] = value + unit;
 },
 getValueInternal: function(element, property) {
  if(property == "opacity")
   return ASPx.GetElementOpacity(element);
  var value = parseFloat(element.style[property]);
  return isNaN(value) ? 0 : value;
 },
 performOnComplete: function() {
  if(this.onComplete)
   this.onComplete(this.element);
 },
 getTransition: function() {
  return this.transition;
 }
});
AnimationTransitionBase.Cancel = function(element) {
 if(element.aspxTransition)
  element.aspxTransition.Cancel();
};
var AnimationConstants = {};
AnimationConstants.Durations = {
 SHORT: 200,
 DEFAULT: 400,
 LONG: 600
};
AnimationConstants.Transitions = {
 LINER: {
  Css: "cubic-bezier(0.250, 0.250, 0.750, 0.750)",
  Js: function(progress) { return progress; }
 },
 SINE: {
  Css: "cubic-bezier(0.470, 0.000, 0.745, 0.715)",
  Js: function(progress) { return Math.sin(progress * 1.57); }
 },
 POW: {
  Css: "cubic-bezier(0.755, 0.050, 0.855, 0.060)",
  Js: function(progress) { return Math.pow(progress, 4); }
 },
 POW_EASE_OUT: {
  Css: "cubic-bezier(0.165, 0.840, 0.440, 1.000)",
  Js: function(progress) { return 1 - AnimationConstants.Transitions.POW.Js(1 - progress); }
 },
 RIPPLE: {
  Css: "cubic-bezier(0.47, 0.06, 0.23, 0.99)",
  Js: function(progress) {
   return Math.pow((progress), 3) * 0.47 + 3 * progress * Math.pow((1 - progress), 2) * 0.06 + 3 * Math.pow(progress, 2) *
    (1 - progress) * 0.23 + 0.99 * Math.pow(progress, 3);
  }
 }
};
var JsAnimationTransition = ASPx.CreateClass(AnimationTransitionBase, {
 constructor: function(element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.onStep = options.onStep;
  this.fps = 60;
  this.startTime = null;
 },
 Start: function(from, to) {
  if(from == to) {
   this.from = this.to = from;
   setTimeout(this.complete.aspxBind(this), 0);
  }
  else {
   AnimationTransitionBase.prototype.Start.call(this, from, to);
   if(to == undefined)
    this.from = this.GetValue();
   this.initTimer();
  }
 },
 Cancel: function() {
  AnimationTransitionBase.prototype.Cancel.call(this);
  if(this.timerId)
   clearInterval(this.timerId);
 },
 initTimer: function() {
  this.startTime = new Date();
  this.timerId = window.setInterval(function() { this.onTick(); }.aspxBind(this), 1000 / this.fps);
 },
 onTick: function() {
  var progress = (new Date() - this.startTime) / this.duration;
  if(progress >= 1)
   this.complete();
  else {
   this.update(progress);
   if(this.onStep)
    this.onStep();
  }
 },
 update: function(progress) {
  this.SetValue(this.gatCalculatedValue(this.from, this.to, progress));
 },
 complete: function() {
  this.Cancel();
  this.update(1);
  this.performOnComplete();
 },
 gatCalculatedValue: function(from, to, progress) {
  if(progress == 1)
   return to;
  return from + (to - from) * this.getTransition()(progress);
 },
 getTransition: function() {
  return this.transition.Js;
 }
});
var SimpleAnimationTransition = ASPx.CreateClass(JsAnimationTransition, {
 constructor: function(options) {
  this.constructor.prototype.constructor.call(this, null, options);
  this.transition = options.transition || AnimationConstants.Transitions.POW_EASE_OUT;
  this.onUpdate = options.onUpdate;
  this.lastValue = 0;
 },
 SetValue: function(value) {
  this.onUpdate(value - this.lastValue);
  this.lastValue = value;
 },
 GetValue: function() {
  return this.lastValue;
 },
 performOnComplete: function() {
  if(this.onComplete)
   this.onComplete();
 }
});
var MultipleJsAnimationTransition = ASPx.CreateClass(JsAnimationTransition, {
 constructor: function(element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.properties = {};
 },
 Start: function(properties) {
  this.initProperties(properties);
  this.initTimer();
 },
 initProperties: function(properties) {
  this.properties = properties;
  for(var propName in this.properties)
   if(properties[propName].from == undefined)
    properties[propName].from = this.getValueInternal(this.element, propName);
 },
 update: function(progress) {
  for(var propName in this.properties) {
   if(this.properties.hasOwnProperty(propName)) {
    var property = this.properties[propName];
    if(property.from != property.to)
     this.setValueInternal(this.element, propName, property.unit, this.gatCalculatedValue(property.from, property.to, progress));
   }
  }
 }
});
var CssAnimationTransition = ASPx.CreateClass(AnimationTransitionBase, {
 constructor: function(element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.transitionPropertyName = AnimationUtils.CurrentTransition.property;
  this.eventName = AnimationUtils.CurrentTransition.event;
 },
 Start: function(from, to) {
  AnimationTransitionBase.prototype.Start.call(this, from, to);
  this.startTimerId = window.setTimeout(function() {
   if(this.from == this.to)
    this.onTransitionEnd();
   else {
    var isHidden = ASPx.GetElementOffsetHeight(this.element) == 0 && ASPx.GetElementOffsetWidth(this.element) == 0; 
    if(!isHidden)
     this.prepareElementBeforeAnimation();
    this.SetValue(this.to);
    if(isHidden)
     this.onTransitionEnd();
   }
  }.aspxBind(this), 0);
 },
 Cancel: function() {
  window.clearTimeout(this.startTimerId);
  AnimationTransitionBase.prototype.Cancel.call(this);
  ASPx.Evt.DetachEventFromElement(this.element, this.eventName, CssAnimationTransition.transitionEnd);
  this.setValueInternal(this.element, this.transitionPropertyName, "", "");
  this.stopAnimation();
 },
 prepareElementBeforeAnimation: function() {
  ASPx.Evt.AttachEventToElement(this.element, this.eventName, CssAnimationTransition.transitionEnd);
  var dummy = this.element.offsetHeight;
  this.element.style[this.transitionPropertyName] = this.getTransitionCssString();
  if(ASPx.Browser.Safari && ASPx.Browser.MacOSMobilePlatform && ASPx.Browser.MajorVersion >= 8) 
   setTimeout(function() {
    if(this.element && this.element.aspxTransition) {
     this.element.style[this.transitionPropertyName] = "";
     this.element.aspxTransition.onTransitionEnd();
    }
   }.aspxBind(this), this.duration + 100);
 },
 stopAnimation: function() {
  this.SetValue(ASPx.GetCurrentStyle(this.element)[this.property]);
 },
 onTransitionEnd: function() {
  this.Cancel();
  this.performOnComplete();
 },
 getTransition: function() {
  return this.transition.Css;
 },
 getTransitionCssString: function() {
  return this.getTransitionCssStringInternal(this.getCssName(this.property));
 },
 getTransitionCssStringInternal: function(cssProperty) {
  return cssProperty + " " + this.duration + "ms " + this.getTransition();
 },
 getCssName: function(property) {
  switch(property) {
   case "marginLeft":
    return "margin-left";
   case "marginTop":
    return "margin-top";
  }
  return property;
 }
});
var MultipleCssAnimationTransition = ASPx.CreateClass(CssAnimationTransition, {
 constructor: function(element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.properties = null;
 },
 Start: function(properties) {
  this.properties = properties;
  this.forEachProperties(function(property, propName) {
   if(property.from !== undefined)
    this.setValueInternal(this.element, propName, property.unit, property.from);
  }.aspxBind(this));
  this.prepareElementBeforeAnimation();
  window.setTimeout(function() {
   this.forEachProperties(function(property, propName) {
    this.setValueInternal(this.element, propName, property.unit, property.to);
   }.aspxBind(this));
  }.aspxBind(this), 0);
 },
 stopAnimation: function() {
  var style = ASPx.GetCurrentStyle(this.element);
  this.forEachProperties(function(property, propName) {
   this.setValueInternal(this.element, propName, "", style[propName]);
  }.aspxBind(this));
 },
 getTransitionCssString: function() {
  var str = "";
  this.forEachProperties(function(property, propName) {
   str += this.getTransitionCssStringInternal(this.getCssName(propName)) + ",";
  }.aspxBind(this));
  str = str.substring(0, str.length - 1);
  return str;
 },
 forEachProperties: function(func) {
  for(var propName in this.properties) {
   if(this.properties.hasOwnProperty(propName)) {
    var property = this.properties[propName];
    if(property.from == undefined)
     property.from = this.getValueInternal(this.element, propName);
    if(property.from != property.to)
     func(property, propName);
   }
  }
 }
});
CssAnimationTransition.transitionEnd = function(evt) {
 var element = evt.target;
 if(element && element.aspxTransition)
  element.aspxTransition.onTransitionEnd();
};
var AnimationUtils = {
 CanUseCssTransition: function() { return ASPx.EnableCssAnimation && this.CurrentTransition; },
 CanUseCssTransform: function() { return this.CanUseCssTransition() && this.CurrentTransform; },
 CurrentTransition: (function() {
  if(ASPx.Browser.IE) 
   return null;
  var transitions = [
   { property: "webkitTransition", event: "webkitTransitionEnd" },
   { property: "MozTransition", event: "transitionend" },
   { property: "OTransition", event: "oTransitionEnd" },
   { property: "transition", event: "transitionend" }
  ];
  var fakeElement = document.createElement("DIV");
  for(var i = 0; i < transitions.length; i++)
   if(transitions[i].property in fakeElement.style)
    return transitions[i];
 })(),
 CurrentTransform: (function() {
  var transforms = ["transform", "MozTransform", "-webkit-transform", "msTransform", "OTransform"];
  var fakeElement = document.createElement("DIV");
  for(var i = 0; i < transforms.length; i++)
   if(transforms[i] in fakeElement.style)
    return transforms[i];
 })(),
 SetTransformValue: function(element, position, isTop) {
  if(this.CanUseCssTransform())
   element.style[this.CurrentTransform] = this.GetTransformCssText(position, isTop);
  else
   element.style[!isTop ? "left" : "top"] = position + "px";
 },
 GetTransformValue: function(element, isTop) {
  if(this.CanUseCssTransform()) {
   var cssValue = element.style[this.CurrentTransform];
   return cssValue && cssValue != "none" ? Number(cssValue.replace('matrix(1, 0, 0, 1,', '').replace(')', '').split(',')[!isTop ? 0 : 1]) : 0;
  }
  else
   return !isTop ? element.offsetLeft : element.offsetTop;
 },
 GetTransformCssText: function(position, isTop) {
  if(!position)
   return "none";
  return "matrix(1, 0, 0, 1," + (!isTop ? position : 0) + ", " + (!isTop ? 0 : position) + ")";
 },
 createMultipleAnimationTransition: function (element, options) {
  return this.CanUseCssTransition() && !options.onStep ? new MultipleCssAnimationTransition(element, options) : new MultipleJsAnimationTransition(element, options);
 },
 createSimpleAnimationTransition: function(options) {
  return new SimpleAnimationTransition(options);
 },
 createJsAnimationTransition: function(element, options) {
  return new JsAnimationTransition(element, options);
 },
 createCssAnimationTransition: function(element, options) {
  return new CssAnimationTransition(element, options);
 },
 setOpacity: function(element, value) {
  ASPx.SetElementOpacity(element, value);
 }
};
var AsyncTracker = function() {
 var currentToken,
  lockedTokens,
  onDoneDelegates,
  lockedDelegates;
 function clearState() {
  currentToken = 1;
  lockedTokens = [];
  onDoneDelegates = [];
  lockedDelegates = {};
 }
 clearState();
 var log = function(msg) { };
 function setLog(delegate){
  log = delegate;
 }
 function getLockToken() {
  if(onDoneDelegates.length === 0)
   return -1;
  var token = currentToken++;
  lockedTokens.push(token);
  lockedDelegates[token] = [];
  for (var i = 0; i < onDoneDelegates.length; i++) {
   lockedDelegates[token].push(onDoneDelegates[i]);
  }
  log("module locks token " + token);
  return token;
 }
 function releaseToken(token) {
  if(token < 0) return;
  log("module releasing token " + token);
  ASPx.Data.ArrayRemove(lockedTokens, token);
  delete lockedDelegates[token];
  invokeUnlockedDelegates();
  if(lockedTokens.length === 0)
   clearState();
  log("module released token " + token);
 }
 function invokeUnlockedDelegates() {
  var onDoneDelegate;
  for (var i = onDoneDelegates.length - 1; i >= 0; i--) {
   if(onDoneDelegates[i] && !isDelegateLocked(onDoneDelegates[i])) {
    onDoneDelegate = onDoneDelegates[i];
    delete onDoneDelegates[i];
    onDoneDelegate();
   }
  }
 }
 function isDelegateLocked(delegate) {
  for (var i = lockedTokens.length - 1; i >= 0; i--) {
   var token = lockedTokens[i];
   var delegates = lockedDelegates[token];
   if(delegates) {
    for (var j = delegates.length - 1; j >= 0; j--) {
     if(delegates[j] && delegates[j] === delegate)
      return true;
    }
   }
  }
  return false;
 }
 function track(doDelegate, onDoneDelegate) {
  if(onDoneDelegate)
   onDoneDelegates.push(onDoneDelegate);
  doDelegate();
  if(onDoneDelegate)
   invokeUnlockedDelegates();
 }
 return {
  getLockToken: getLockToken,
  releaseToken: releaseToken,
  track: track,
  setLog:setLog,
 };
};
var GetEditorValuesInContainer = function(containerOrId, processInvisibleEditors, needSerialize) {
 var container = typeof(containerOrId) === "string" ? ASPx.GetElementById(containerOrId) : containerOrId;
 var result = {};
 if(!ASPx.ProcessEditorsInContainer) 
  return result;
 ASPx.ProcessEditorsInContainer(container, function(editor){
  result[editor.name] = GetCorrectedByTypeValue(ASPx.GetEditorValueByControl(editor), needSerialize);
 }, null, null, processInvisibleEditors, false);
 return result;
};
var SetEditorValues = function(values) {
 for(var controlName in values) {
  if(values.hasOwnProperty(controlName)) {
   var trackedControl = ASPxClientControl.GetControlCollection().Get(controlName);
   if(!trackedControl)
    continue;
   var setValueMethod = trackedControl.SetTokenCollection || trackedControl.SelectValues || trackedControl.SetValue;
   if(setValueMethod === trackedControl.SelectValues)
    trackedControl.UnselectAll();
   setValueMethod.call(trackedControl, values[controlName]);
  }
 }
};
var GetCorrectedByTypeValue = function(value, needSerialize){
 if(ASPx.Ident.IsArray(value))
  for(var i = 0; i < value.length; i++)
   value[i] = GetCorrectedByTypeValue(value[i]);
 if(needSerialize && ASPx.Ident.IsDate(value))
  return ASPx.DateUtils.GetInvariantDateTimeString(value);
 return value;
};
var ListBoxTemporaryCache = ASPx.CreateClass(null, {
 constructor: function() { 
  this.cache = { };
  this.invalidateTimerID = -1;
 },
 Get: function(key, getObjectFunc, context, args) {
  if(this.invalidateTimerID < 0) {
   this.invalidateTimerID = window.setTimeout(function() {
    this.Invalidate();
   }.aspxBind(this), 0);
  }
  if(!ASPx.IsExists(this.cache[key])) {
   if(!ASPx.IsExists(args))
    args = [ ];
   this.cache[key] = getObjectFunc.apply(context, args);
  }
  return this.cache[key];
 },
 Invalidate: function() {
  this.cache = { };
  this.invalidateTimerID = ASPx.Timer.ClearTimer(this.invalidateTimerID);
 }
});
ASPx.GetEditorValueByControl = function(control, needSerialize) {
 var result;
 if(ASPx.IsMultipleValueOwner(control))
  result = control.GetSelectedValues();
 if(ASPx.IsTokenBox(control)) {
  if(needSerialize)
   result = control.GetTokenValuesCollection();
  else
   result = control.GetTokenCollection();
 }
 return result || control.GetValue();
};
ASPx.IsMultipleValueOwner = function(control) {
 return ASPx.IsListBox(control) || ASPx.IsCheckBoxList(control);
};
ASPx.IsCheckBoxList = function(control) {
 return control && typeof(ASPxClientCheckBoxList) != "undefined" && control instanceof ASPxClientCheckBoxList;
};
ASPx.IsListBox = function(control) {
 return control && typeof(ASPxClientListBox) != "undefined" && control instanceof ASPxClientListBox;
};
ASPx.IsComboBox = function(control) {
 return control && typeof(ASPxClientComboBox) != "undefined" && control instanceof ASPxClientComboBox;
};
ASPx.IsTokenBox = function(control) {
 return control && typeof(ASPxClientTokenBox) != "undefined" && control instanceof ASPxClientTokenBox;
};
ASPx.IsGridLookup = function(control) {
 return control && typeof(MVCxClientGridLookup) != "undefined" && control instanceof MVCxClientGridLookup;
};
ASPx.IsSpinEdit = function(control) {
 return control && typeof(ASPxClientSpinEdit) != "undefined" && control instanceof ASPxClientSpinEdit;
};
ASPx.DatePickerType = {
 Days: 0,
 Months: 1,
 Years: 2,
 Decades: 3
};
ASPx.FullScreenUtils = {
 subscribeChange: function(handler) {
  Evt.AttachEventToElement(document, "fullscreenchange", handler);
  Evt.AttachEventToElement(document, "msfullscreenchange", handler); 
  Evt.AttachEventToElement(document, "MSFullscreenChange", handler); 
  Evt.AttachEventToElement(document, "webkitfullscreenchange", handler);
  Evt.AttachEventToElement(document, "mozfullscreenchange", handler);
 },
 unsubscribeChange: function(handler) {
  Evt.DetachEventFromElement(document, "fullscreenchange", handler);
  Evt.DetachEventFromElement(document, "msfullscreenchange", handler);
  Evt.DetachEventFromElement(document, "MSFullscreenChange", handler);
  Evt.DetachEventFromElement(document, "webkitfullscreenchange", handler);
  Evt.DetachEventFromElement(document, "mozfullscreenchange", handler);
 },
 setFullscreen: function(on) {
  var element = window.self.document.body;
  if(on) {
   if(element.requestFullscreen) {
    element.requestFullscreen();
   } else if(element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
   } else if(element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen();
   } else if(element.msRequestFullscreen) {
    element.msRequestFullscreen();
   }
  } else {
   if(document.exitFullscreen) {
    document.exitFullscreen();
   } else if(document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
   } else if(document.webkitCancelFullScreen) {
    document.webkitCancelFullScreen();
   } else if(document.msExitFullscreen) {
    document.msExitFullscreen();
   }
  }
 },
 inFullscreen: function() {
  var fullscreenElement = document.fullscreenElement || document.msFullscreenElement || document.webkitFullscreenElement;
  var isInFullscreen = fullscreenElement === document.body || document.webkitIsFullScreen;
  return !!isInFullscreen;
 }
 };
ASPx.InitializeSVGSprite = function () {
 if (ASPx.SVGSprites && ASPx.SVGSprites.length > 0) {
  var svgContainer = document.getElementById('svgContainer');
  var hasSvgContainer = !!svgContainer;
  if (!hasSvgContainer) {
   svgContainer = document.createElement('div');
   svgContainer.id = 'svgContainer';
   svgContainer.style.display = "none";
   document.body.appendChild(svgContainer);
  }
  for (var i = 0; i < ASPx.SVGSprites.length; i++) {
   svgContainer.innerHTML += ASPx.SVGSprites[i];
  }
 }
};
var GridDynamicStyleSheetHelper = ASPx.CreateClass(null, {
 constructor: function() {
  this.styleSheet = {};
  this.rules = {};
  this.updateLock = 0;
 },
 Update: function(control, styleName, rules) {
  var key = control.name + "_" + styleName;
  this.BeginUpdate(key);
  this.ChangeRules(key, rules);
  this.EndUpdate(key);
 },
 ChangeRules: function(key, rules) {
  if(key && rules)
   this.rules[key] = rules;
 },
 BeginUpdate: function(key) {
  this.updateLock++;
  this.RemoveStyleSheetElement(key);
 },
 EndUpdate: function(key) {
  this.updateLock--;
  if(this.updateLock !== 0)
   return;
  var styleArgs = [];
  var controlRules = this.rules[key];
  for(var i = 0; i < controlRules.length; i++) {
   var rule = controlRules[i];
   styleArgs.push(rule.selector + " { " + rule.cssText + " } ");
  }
  this.styleSheet[key] = this.CreateStyleSheet(key, styleArgs.join(""));
 },
 CreateStyleSheet: function(key, cssText) {
  var container = document.createElement("DIV");
  ASPx.Security.setInnerHtml(container, "<style type='text/css' id='" + key + "'>" + cssText + "</style>", ASPx.Security.DataType.Trusted);
  styleSheet = ASPx.GetNodeByTagName(container, "style", 0);
  if(styleSheet)
   ASPx.GetNodeByTagName(document, "HEAD", 0).appendChild(styleSheet);
  return styleSheet;
 },
 ClearStyleSheet: function(control, styleName) {
  var key = control.name + "_" + styleName;
  this.RemoveStyleSheetElement(key);
 },
 RemoveStyleSheetElement: function(key) {
  if(this.styleSheet[key]) {
   ASPx.RemoveElement(this.styleSheet[key]);
   delete this.styleSheet[key];
  }
 }
});
GridDynamicStyleSheetHelper.Instance = new GridDynamicStyleSheetHelper();
ASPx.GridDynamicStyleSheetHelper = GridDynamicStyleSheetHelper;
ASPxClientUtils = {};
ASPxClientUtils.agent = Browser.UserAgent;
ASPxClientUtils.opera = Browser.Opera;
ASPxClientUtils.opera9 = Browser.Opera && Browser.MajorVersion == 9;
ASPxClientUtils.safari = Browser.Safari;
ASPxClientUtils.safari3 = Browser.Safari && Browser.MajorVersion == 3;
ASPxClientUtils.safariMacOS = Browser.Safari && Browser.MacOSPlatform;
ASPxClientUtils.chrome = Browser.Chrome;
ASPxClientUtils.ie = Browser.IE;
ASPxClientUtils.ie7 = Browser.IE && Browser.MajorVersion == 7;
ASPxClientUtils.firefox = Browser.Firefox;
ASPxClientUtils.firefox3 = Browser.Firefox && Browser.MajorVersion == 3;
ASPxClientUtils.mozilla = Browser.Mozilla;
ASPxClientUtils.netscape = Browser.Netscape;
ASPxClientUtils.browserVersion = Browser.Version;
ASPxClientUtils.browserMajorVersion = Browser.MajorVersion;
ASPxClientUtils.macOSPlatform = Browser.MacOSPlatform;
ASPxClientUtils.windowsPlatform = Browser.WindowsPlatform;
ASPxClientUtils.webKitFamily = Browser.WebKitFamily;
ASPxClientUtils.netscapeFamily = Browser.NetscapeFamily;
ASPxClientUtils.touchUI = Browser.TouchUI;
ASPxClientUtils.webKitTouchUI = Browser.WebKitTouchUI;
ASPxClientUtils.msTouchUI = Browser.MSTouchUI;
ASPxClientUtils.iOSPlatform = Browser.MacOSMobilePlatform;
ASPxClientUtils.androidPlatform = Browser.AndroidMobilePlatform;
ASPxClientUtils.ArrayInsert = Data.ArrayInsert;
ASPxClientUtils.ArrayRemove = Data.ArrayRemove;
ASPxClientUtils.ArrayRemoveAt = Data.ArrayRemoveAt;
ASPxClientUtils.ArrayClear = Data.ArrayClear;
ASPxClientUtils.ArrayIndexOf = Data.ArrayIndexOf;
ASPxClientUtils.AttachEventToElement = Evt.AttachEventToElement;
ASPxClientUtils.DetachEventFromElement = Evt.DetachEventFromElement;
ASPxClientUtils.GetEventSource = Evt.GetEventSource;
ASPxClientUtils.GetEventX = Evt.GetEventX;
ASPxClientUtils.GetEventY = Evt.GetEventY;
ASPxClientUtils.GetKeyCode = Evt.GetKeyCode;
ASPxClientUtils.PreventEvent = Evt.PreventEvent;
ASPxClientUtils.PreventEventAndBubble = Evt.PreventEventAndBubble;
ASPxClientUtils.PreventDragStart = Evt.PreventDragStart;
ASPxClientUtils.ClearSelection = Selection.Clear;
ASPxClientUtils.IsExists = ASPx.IsExists;
ASPxClientUtils.IsFunction = ASPx.IsFunction;
ASPxClientUtils.GetAbsoluteX = ASPx.GetAbsoluteX;
ASPxClientUtils.GetAbsoluteY = ASPx.GetAbsoluteY;
ASPxClientUtils.SetAbsoluteX = ASPx.SetAbsoluteX;
ASPxClientUtils.SetAbsoluteY = ASPx.SetAbsoluteY;
ASPxClientUtils.GetDocumentScrollTop = ASPx.GetDocumentScrollTop;
ASPxClientUtils.GetDocumentScrollLeft = ASPx.GetDocumentScrollLeft;
ASPxClientUtils.GetDocumentClientWidth = ASPx.GetDocumentClientWidth;
ASPxClientUtils.GetDocumentClientHeight = ASPx.GetDocumentClientHeight;
ASPxClientUtils.AddClassNameToElement = ASPx.AddClassNameToElement;
ASPxClientUtils.RemoveClassNameFromElement = ASPx.RemoveClassNameFromElement;
ASPxClientUtils.ToggleClassName = ASPx.ToggleClassNameToElement;
ASPxClientUtils.GetIsParent = ASPx.GetIsParent;
ASPxClientUtils.GetParentById = ASPx.GetParentById;
ASPxClientUtils.GetParentByTagName = ASPx.GetParentByTagName;
ASPxClientUtils.GetParentByClassName = ASPx.GetParentByPartialClassName;
ASPxClientUtils.GetChildById = ASPx.GetChildById;
ASPxClientUtils.GetChildByTagName = ASPx.GetChildByTagName;
ASPxClientUtils.SetCookie = Cookie.SetCookie;
ASPxClientUtils.GetCookie = Cookie.GetCookie;
ASPxClientUtils.DeleteCookie = Cookie.DelCookie;
ASPxClientUtils.GetShortcutCode = ASPx.GetShortcutCode; 
ASPxClientUtils.GetShortcutCodeByEvent = ASPx.GetShortcutCodeByEvent;
ASPxClientUtils.StringToShortcutCode = ASPx.ParseShortcutString;
ASPxClientUtils.Trim = Str.Trim; 
ASPxClientUtils.TrimStart = Str.TrimStart;
ASPxClientUtils.TrimEnd = Str.TrimEnd;
ASPxClientUtils.GetEditorValuesInContainer = GetEditorValuesInContainer;
ASPxClientUtils.SetEditorValues = SetEditorValues;
ASPxClientUtils.SendMessageToAssistiveTechnology = ASPx.AccessibilityUtils.SendMessageToAssistiveTechnology;
window.ASPxClientUtils = ASPxClientUtils;
window.ListBoxTemporaryCache = ListBoxTemporaryCache;
ASPx.AnimationUtils = AnimationUtils;
ASPx.AnimationTransitionBase = AnimationTransitionBase;
ASPx.AnimationConstants = AnimationConstants;
ASPx.AsyncTracker = AsyncTracker;
ASPx.Security = Security;
})(ASPx, dx);

(function module(ASPx, options) {
ASPx.modules.Classes = module;
ASPx.classesScriptParsed = false;
ASPx.documentLoaded = false; 
ASPx.CallbackType = {
 Data: "d",
 Common: "c"
};
ASPx.callbackState = {
 aborted: "aborted",
 inTurn: "inTurn",
 sent: "sent"
};
var ASPxClientEvent = ASPx.CreateClass(null, {
 constructor: function() {
  this.handlerInfoList = [];
  this.firingIndex = -1;
 },
 AddHandler: function(handler, executionContext) {
  if(typeof(executionContext) == "undefined")
   executionContext = null;
  this.RemoveHandler(handler, executionContext);
  var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
  this.handlerInfoList.push(handlerInfo);
 },
 RemoveHandler: function(handler, executionContext) {
  this.removeHandlerByCondition(function(handlerInfo) {
   return handlerInfo.handler == handler && 
    (!executionContext || handlerInfo.executionContext == executionContext);
  });
 },
 removeHandlerByCondition: function(predicate) {
   for(var i = this.handlerInfoList.length - 1; i >= 0; i--) {
   var handlerInfo = this.handlerInfoList[i];
   if(predicate(handlerInfo)) {
    ASPx.Data.ArrayRemoveAt(this.handlerInfoList, i);
    if(i <= this.firingIndex)
     this.firingIndex--;
   }
  }
 },
 removeHandlerByControlName: function(controlName) {
  this.removeHandlerByCondition(function(handlerInfo) {
   return handlerInfo.executionContext &&  
    handlerInfo.executionContext.name === controlName;
  });
 },
 ClearHandlers: function() {
  this.handlerInfoList.length = 0;
 },
 FireEvent: function(obj, args) {
  for(this.firingIndex = 0; this.firingIndex < this.handlerInfoList.length; this.firingIndex++) {
   var handlerInfo = this.handlerInfoList[this.firingIndex];
   handlerInfo.handler.call(handlerInfo.executionContext, obj, args);
  }
 },
 InsertFirstHandler: function(handler, executionContext){
  if(typeof(executionContext) == "undefined")
   executionContext = null;
  var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
  ASPx.Data.ArrayInsert(this.handlerInfoList, handlerInfo, 0);
 },
 IsEmpty: function() {
  return this.handlerInfoList.length == 0;
 }
});
ASPxClientEvent.CreateHandlerInfo = function(handler, executionContext) {
 return {
  handler: handler,
  executionContext: executionContext
 };
};
var ASPxClientEventArgs = ASPx.CreateClass(null, {
 constructor: function() {
 }
});
ASPxClientEventArgs.Empty = new ASPxClientEventArgs();
var ASPxClientCancelEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.cancel = false;
 }
});
var ASPxClientProcessingModeEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(processOnServer){
  this.constructor.prototype.constructor.call(this);
  this.processOnServer = !!processOnServer;
 }
});
var ASPxClientProcessingModeCancelEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.cancel = false;
 }
});
var OrderedMap = ASPx.CreateClass(null, {
 constructor: function(){
  this.entries = {};
  this.firstEntry = null;
  this.lastEntry = null;
 },
 add: function(key, element) {
  var entry = this.addEntry(key, element);
  this.entries[key] = entry;
 },
 remove: function(key) {
  var entry = this.entries[key];
  if(entry === undefined)
   return;
  this.removeEntry(entry);
  delete this.entries[key];
 },
 clear: function() {
  this.markAllEntriesAsRemoved();
  this.entries = {};
  this.firstEntry = null;
  this.lastEntry = null;
 },
 get: function(key) {
  var entry = this.entries[key];
  return entry ? entry.value : undefined;
 },
 forEachEntry: function(processFunc, context) {
  context = context || this;
  for(var entry = this.firstEntry; entry; entry = entry.next) {
   if(entry.removed)
    continue;
   if(processFunc.call(context, entry.key, entry.value))
    return;
  }
 },
 addEntry: function(key, element) {
  var entry = { key: key, value: element, next: null, prev: null };
  if(!this.firstEntry)
   this.firstEntry = entry;
  else {
   entry.prev = this.lastEntry;
   this.lastEntry.next = entry;
  }
  this.lastEntry = entry;
  return entry;
 },
 removeEntry: function(entry) {
  if(this.firstEntry == entry)
   this.firstEntry = entry.next;
  if(this.lastEntry == entry)
   this.lastEntry = entry.prev;
  if(entry.prev)
   entry.prev.next = entry.next;
  if(entry.next)
   entry.next.prev = entry.prev;
  entry.removed = true;
 },
 markAllEntriesAsRemoved: function() {
  for(var entry = this.firstEntry; entry; entry = entry.next)
   entry.removed = true;
 }
});
var CollectionBase = ASPx.CreateClass(null, {
 constructor: function(){
  this.elementsMap = new OrderedMap();
  this.isASPxClientCollection = true;
 },
 Add: function(key, element) {
  this.elementsMap.add(key, element);
 },
 Remove: function(key) {
  this.elementsMap.remove(key);
 },
 Clear: function(){
  this.elementsMap.clear();
 },
 Get: function(key){
  return this.elementsMap.get(key);
 }
});
(function garbageCollector(ASPx, options) {
 ASPx.modules.garbageCollector = garbageCollector;
 var interval = options.GCCheckInterval;
 window.setInterval(collectObjects, interval);
 function canCollectObjects() {
  if (!ASPx.GetControlCollection) return false;
  var collection = ASPx.GetControlCollection();
  return collection && !collection.InCallback();
 }
 function collectObjects() {
  if (!canCollectObjects()) return;
  ASPx.GetControlCollectionCollection().RemoveDisposedControls();
  if(typeof(ASPx.GetStateController) != "undefined")
   ASPx.GetStateController().RemoveDisposedItems();
  if(ASPx.TableScrollHelperCollection)
   ASPx.TableScrollHelperCollection.RemoveDisposedObjects();
  if(ASPx.Ident.scripts.ASPxClientRatingControl)
   ASPxClientRatingControl.RemoveDisposedElementUnderCursor();
  var postHandler = ASPx.GetPostHandler();
  if(postHandler)
   postHandler.RemoveDisposedFormsFromCache();
 }
})(ASPx, options);
var ControlTree = ASPx.CreateClass(null, {
 constructor: function(controlCollection, container, controlFilter) {
  this.container = container;
  this.domMap = { };
  this.rootNode = this.createNode(null, null);
  this.createControlTree(controlCollection, container, controlFilter);
 },
 createControlTree: function(controlCollection, container, controlFilter) {
  controlCollection.ProcessControlsInContainer(container, function(control) {
   control.RegisterInControlTree(this);
  }.aspxBind(this), controlFilter);
  var fixedNodes = [];
  var fixedNodesChildren = [];
  for(var domElementID in this.domMap) {
   if(!this.domMap.hasOwnProperty(domElementID)) continue;
   var node = this.domMap[domElementID];
   var controlOwner = node.control ? node.control.controlOwner : null;
   if(controlOwner && this.domMap[controlOwner.name])
    continue;
   if(this.isFixedNode(node))
    fixedNodes.push(node);
   else {
    var parentNode = this.findParentNode(domElementID);
    parentNode = parentNode || this.rootNode;
    if(this.isFixedNode(parentNode))
     fixedNodesChildren.push(node);
    else {
     var childNode = node.mainNode || node;
     this.addChildNode(parentNode, childNode);
    }
   }
  }
  for(var i = fixedNodes.length - 1; i >= 0; i--)
   this.insertChildNode(this.rootNode, fixedNodes[i], 0);
  for(var i = fixedNodesChildren.length - 1; i >= 0; i--)
   this.insertChildNode(this.rootNode, fixedNodesChildren[i], 0);
 },
 findParentNode: function(id) {
  var element = document.getElementById(id).parentNode;
  while(element && element.tagName !== "BODY") {
   if(element.id) {
    var parentNode = this.domMap[element.id];
    if(parentNode)
     return parentNode;
   }
   element = element.parentNode;
  }
  return null;
 },
 addChildNode: function(node, childNode) {
  if(!childNode.parentNode) {
   node.children.push(childNode);
   childNode.parentNode = node;
  }
 },
 insertChildNode: function(node, childNode, index) {
  if(!childNode.parentNode) {
   ASPx.Data.ArrayInsert(node.children, childNode, index);
   childNode.parentNode = node;
  }
 },
 addRelatedNode: function(node, relatedNode) {
  this.addChildNode(node, relatedNode);
  relatedNode.mainNode = node;
 },
 isFixedNode: function(node) {
  var control = node.mainNode ? node.mainNode.control : node.control;
  return control && control.HasFixedPosition();
 },
 createNode: function(domElementID, control) {
  var node = {
   control: control,
   children: [],
   parentNode: null,
   mainNode: null
  };
  if(domElementID)
   this.domMap[domElementID] = node;
  return node;
 }
});
var ControlAdjuster = ASPx.CreateClass(null, {
 constructor: function() {
 },
 adjustControlsInHierarchy: function(controlCollection, adjustFunc, container, collapseControls, controlFilter) {
  var controlTree = new ASPx.ControlTree(controlCollection, container, controlFilter);
  this.adjustControlsInTree(controlTree.rootNode, adjustFunc, container, collapseControls);
 },
 adjustControlsInTree: function(treeNode, adjustFunc, container, collapseControls) {
  var observer = _aspxGetDomObserver();
  observer.pause(container, true);
  var documentScrollInfo;
  if(collapseControls) {
   documentScrollInfo = ASPx.GetOuterScrollPosition(document.body);
   this.collapseControls(treeNode);
  }
  var adjustNodes = [], 
   autoHeightNodes = [];
  var requireReAdjust = this.forEachControlCore(treeNode, collapseControls, adjustFunc, adjustNodes, autoHeightNodes);
  if(requireReAdjust)
   this.forEachControlsBackward(adjustNodes, collapseControls, adjustFunc);
  else {
   for(var i = 0, node; node = autoHeightNodes[i]; i++)
    node.control.AdjustAutoHeight();
  }
  if(collapseControls)
   ASPx.RestoreOuterScrollPosition(documentScrollInfo);
  observer.resume(container, true);
 },
 forEachControlCore: function(node, collapseControls, processFunc, adjustNodes, autoHeightNodes) {
  var requireReAdjust = false,
   size, newSize;
  if(node.control) {
   var checkReadjustment = collapseControls && node.control.IsControlCollapsed() && node.control.CanCauseReadjustment();
   if(checkReadjustment)
    size = node.control.GetControlPercentMarkerSize(false, true);
   if(node.control.IsControlCollapsed() && !node.control.IsExpandableByAdjustment())
    node.control.ExpandControl();
   node.control.isInsideHierarchyAdjustment = true;
   processFunc(node.control);
   node.control.isInsideHierarchyAdjustment = false;
   if(checkReadjustment) {
    newSize = node.control.GetControlPercentMarkerSize(false, true);
    requireReAdjust = size.width !== newSize.width;
   }
   if(node.control.sizingConfig.supportAutoHeight)
    autoHeightNodes.push(node);
   node.control.ResetControlPercentMarkerSize();
  }
  for(var childNode, i = 0; childNode = node.children[i]; i++)
   requireReAdjust = this.forEachControlCore(childNode, collapseControls, processFunc, adjustNodes, autoHeightNodes) || requireReAdjust;
  adjustNodes.push(node);
  return requireReAdjust;
 },
 forEachControlsBackward: function(adjustNodes, collapseControls, processFunc) {
  for(var i = 0, node; node = adjustNodes[i]; i++)
   this.forEachControlsBackwardCore(node, collapseControls, processFunc);
 },
 forEachControlsBackwardCore: function(node, collapseControls, processFunc) {
  if(node.control)
   processFunc(node.control);
  if(node.children.length > 1) {
   for(var i = 0, childNode; childNode = node.children[i]; i++) {
    if(childNode.control)
     processFunc(childNode.control);
   }
  }
 },
 collapseControls: function(node) {
  for(var childNode, i = 0; childNode = node.children[i]; i++)
   this.collapseControls(childNode);
  if(node.control && node.control.NeedCollapseControl())
   node.control.CollapseControl();
 }
});
var controlAdjuster = null;
function GetControlAdjuster() {
 if(!controlAdjuster)
  controlAdjuster = new ControlAdjuster();
 return controlAdjuster;
}
function _aspxFunctionIsInCallstack(currentCallee, targetFunction, depthLimit) {
 var candidate = currentCallee;
 var depth = 0;
 while(candidate && depth <= depthLimit) {
  candidate = candidate.caller;
  if(candidate == targetFunction)
   return true;
  depth++;
 }
 return false;
}
ASPx.attachToReady(aspxClassesWindowOnLoad);
function aspxClassesWindowOnLoad(){
 ASPx.documentLoaded = true;
 _aspxMoveLinkElements();
 _aspxSweepDuplicatedLinks();
 ResourceManager.SynchronizeResources();
 var externalScriptProcessor = GetExternalScriptProcessor();
 if(externalScriptProcessor)
  externalScriptProcessor.ShowErrorMessages();
 ASPx.AccessibilityUtils.initialize();
 ASPx.GetControlCollection().Initialize();
 _aspxInitializeScripts();
 _aspxInitializeLinks();
 _aspxInitializeFocus();
 ASPx.GetControlCollection().FinalizeInitialization();
}
Ident = { };
Ident.IsDate = function(obj) {
 return obj && obj.constructor == Date;
};
Ident.IsRegExp = function(obj) {
 return obj && obj.constructor === RegExp;
};
Ident.IsArray = function(obj) {
 return obj && obj.constructor == Array;
};
Ident.IsASPxClientCollection = function(obj) {
 return obj && obj.isASPxClientCollection;
};
Ident.IsASPxClientControl = function(obj) {
 return obj && obj instanceof ASPxClientControlBase;
};
Ident.IsASPxClientEdit = function(obj) {
 return obj && obj.isASPxClientEdit;
};
Ident.IsFocusableElementRegardlessTabIndex = function (element) {
 var tagName = element.tagName;
 return tagName == "TEXTAREA" || tagName == "INPUT" || tagName == "A" ||
  tagName == "SELECT" || tagName == "IFRAME" || tagName == "OBJECT" || tagName == "BUTTON";
};
Ident.isDialogInvisibleControl = function(control) {
 return !!ASPx.Dialog && ASPx.Dialog.isDialogInvisibleControl(control);
};
Ident.isBatchEditUnusedEditor = function(control) {
 return !!ASPx.BatchEditHelper && ASPx.BatchEditHelper.isBatchEditUnusedEditor(control);
};
Ident.scripts = {};
if(ASPx.IsFunction(window.WebForm_InitCallbackAddField)) {
 (function() {
  var original = window.WebForm_InitCallbackAddField;
  window.WebForm_InitCallbackAddField = function(name, value) {
   if(typeof(name) == "string" && name)
    original.apply(null, arguments);
  };
 })();
}
ASPx.FireDefaultButton = function(evt, buttonID) {
 if(_aspxIsDefaultButtonEvent(evt, buttonID)) {
  var defaultButton = ASPx.GetElementById(buttonID);
  if(defaultButton && defaultButton.click) {
   if(ASPx.IsFocusable(defaultButton))
    defaultButton.focus();
   ASPx.Evt.DoElementClick(defaultButton);
   ASPx.Evt.PreventEventAndBubble(evt);
   return false;
  }
 }
 return true;
};
function _aspxIsDefaultButtonEvent(evt, defaultButtonID) {
 if(evt.keyCode != ASPx.Key.Enter)
  return false;
 var srcElement = ASPx.Evt.GetEventSource(evt);
 if(!srcElement || srcElement.id === defaultButtonID)
  return true;
 var tagName = srcElement.tagName;
 var type = srcElement.type;
 return tagName != "TEXTAREA" && tagName != "BUTTON" && tagName != "A" &&
  (tagName != "INPUT" || type != "checkbox" && type != "radio" && type != "button" && type != "submit" && type != "reset");
}
var PostHandler = ASPx.CreateClass(null, {
 constructor: function() {
  this.Post = new ASPxClientEvent();
  this.PostFinalization = new ASPxClientEvent();
  this.observableForms = [];
  this.dxCallbackTriggers = {};
  this.lastSubmitElementName = null;
  this.beforeOnSubmit = function() { };
  this.ReplaceGlobalPostFunctions();
  this.HandleDxCallbackBeginning();
  this.HandleMSAjaxRequestBeginning();
 },
 Update: function() {
  this.ReplaceFormsSubmit(true);
 },
 ProcessPostRequest: function(ownerID, isCallback, isMSAjaxRequest, isDXCallback) {
  this.cancelPostProcessing = false;
  this.isMSAjaxRequest = isMSAjaxRequest;
  if(this.SkipRaiseOnPost(ownerID, isCallback, isDXCallback))
   return;
  var args = new PostHandlerOnPostEventArgs(ownerID, isCallback, isMSAjaxRequest, isDXCallback);
  this.Post.FireEvent(this, args);
  this.cancelPostProcessing = args.cancel;
  if(!args.cancel)
   this.PostFinalization.FireEvent(this, args);
 },
 SkipRaiseOnPost: function(ownerID, isCallback, isDXCallback) { 
  if(!isCallback)
   return false;
  var dxOwner = isDXCallback && ASPx.GetControlCollection().GetByName(ownerID);
  if(dxOwner) {
   this.dxCallbackTriggers[dxOwner.uniqueID] = true;
   return false;
  }
  if(this.dxCallbackTriggers[ownerID]) {
   this.dxCallbackTriggers[ownerID] = false;
   return true;
  }
  return false;
 },
 ReplaceGlobalPostFunctions: function() {
  if(ASPx.IsFunction(window.__doPostBack))
   this.ReplaceDoPostBack();
  if(ASPx.IsFunction(window.WebForm_DoCallback))
   this.ReplaceDoCallback();
  if(ASPx.IsFunction(window.WebForm_ExecuteCallback))
   this.ReplaceExecuteCallback();
  this.ReplaceFormsSubmit();
 },
 HandleDxCallbackBeginning: function() {
  ASPx.GetControlCollection().BeforeInitCallback.AddHandler(function(s, e) {
   aspxRaisePostHandlerOnPost(e.callbackOwnerID, true, false, true); 
  });
 },
 HandleMSAjaxRequestBeginning: function() {
  var pageRequestManager = ASPx.GetMSAjaxRequestManager();
  if(pageRequestManager != null && Ident.IsArray(pageRequestManager._onSubmitStatements)) {
   pageRequestManager._onSubmitStatements.unshift(function() {
    var postbackSettings = Sys.WebForms.PageRequestManager.getInstance()._postBackSettings;
    var postHandler = aspxGetPostHandler();
    aspxRaisePostHandlerOnPost(postbackSettings.asyncTarget, true, true);
    return !postHandler.cancelPostProcessing;
   });
  }
 },
 ReplaceDoPostBack: function() {
  var original = __doPostBack;
  __doPostBack = function(eventTarget, eventArgument) {
   var postHandler = aspxGetPostHandler();
   aspxRaisePostHandlerOnPost(eventTarget);
   if(postHandler.cancelPostProcessing)
    return;
   ASPxClientControl.postHandlingLocked = true;
   original(eventTarget, eventArgument);
   delete ASPxClientControl.postHandlingLocked;
  };
 },
 ReplaceDoCallback: function() {
  var original = WebForm_DoCallback;
  WebForm_DoCallback = function(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync) {
   var postHandler = aspxGetPostHandler();
   aspxRaisePostHandlerOnPost(eventTarget, true);
   if(postHandler.cancelPostProcessing)
    return;
   return original(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync);
  };
 },
 ReplaceExecuteCallback: function() {
  var original = WebForm_ExecuteCallback;
  var handler = this;
  WebForm_ExecuteCallback = function(callbackObject) {
   var isDxCallback = callbackObject && callbackObject.context && ASPx.GetControlCollection().Get(callbackObject.context) !== null;
   ASPx.callbackProcessed = false;
   original(callbackObject);
   if(isDxCallback && !ASPx.callbackProcessed) {
    var request = callbackObject.xmlRequest;
    if(handler.HasAppErrorOnCallback(request) && ASPxClientUtils.IsExists(callbackObject.eventCallback))
     callbackObject.eventCallback(handler.GetServerErrorText(), callbackObject.context);
   }
  };
 },
 HasAppErrorOnCallback: function(request) {
  if(!request) return false;
  var isServerError = request.status && request.status == 500;
  var pattern = /<html[^>]*>([\w|\W]*)<\/html>/im;
  var text = request.responseText;
  return isServerError && !!text && pattern.test(text);
 },
 GetServerErrorText: function() {
  return "Internal Server Error";
 }, 
 ReplaceFormsSubmit: function(checkObservableCollection) {
  for(var i = 0; i < document.forms.length; i++) { 
   var form = document.forms[i];
   if(checkObservableCollection && ASPx.Data.ArrayIndexOf(this.observableForms, form) >= 0)
    continue;
   if(form.submit)
    this.ReplaceFormSubmit(form);
   this.ReplaceFormOnSumbit(form);
   this.observableForms.push(form);
  }
 },
 ReplaceFormSubmit: function(form) {
  var originalSubmit = form.submit;
  form.submit = function() {
   var postHandler = aspxGetPostHandler();
   aspxRaisePostHandlerOnPost();
   if(postHandler.cancelPostProcessing)
    return false;
   var callee = arguments.callee;
   this.submit = originalSubmit;
   var submitResult = this.submit();
   this.submit = callee;
   return submitResult;
  };
  form = null;
 },
 ReplaceFormOnSumbit: function(form) {
  var originalSubmit = form.onsubmit;
  form.onsubmit = function() {
   var postHandler = aspxGetPostHandler();
   postHandler.beforeOnSubmit();
   if(postHandler.isMSAjaxRequest)
    postHandler.isMsAjaxRequest = false;
   else
    aspxRaisePostHandlerOnPost(postHandler.GetLastSubmitElementName());
   if(postHandler.cancelPostProcessing)
    return false;
   return ASPx.IsFunction(originalSubmit)
    ? originalSubmit.apply(this, arguments)
    : true;
  };
  form = null;
 },
 SetBeforeOnSubmit: function(action) {
  this.beforeOnSubmit = action;
 },
 SetLastSubmitElementName: function(elementName) {
  this.lastSubmitElementName = elementName;
 },
 GetLastSubmitElementName: function() {
  return this.lastSubmitElementName;
 },
 RemoveDisposedFormsFromCache: function(){
  for(var i = 0; this.observableForms && i < this.observableForms.length; i++){
   var form = this.observableForms[i];
   if(!ASPx.IsExistsElement(form)){
    ASPx.Data.ArrayRemove(this.observableForms, form);
    i--;
   }
  }
 }
});
function aspxRaisePostHandlerOnPost(ownerID, isCallback, isMSAjaxRequest, isDXCallback) {
 if(ASPxClientControl.postHandlingLocked) return;
 var postHandler = aspxGetPostHandler();
 if(postHandler)
  postHandler.ProcessPostRequest(ownerID, isCallback, isMSAjaxRequest, isDXCallback);
}
var aspxPostHandler;
function aspxGetPostHandler() {
 if(!aspxPostHandler)
  aspxPostHandler = new PostHandler();
 return aspxPostHandler;
}
var PostHandlerOnPostEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(ownerID, isCallback, isMSAjaxCallback, isDXCallback){
  this.constructor.prototype.constructor.call(this);
  this.ownerID = ownerID;
  this.isCallback = !!isCallback;
  this.isDXCallback = !!isDXCallback;
  this.isMSAjaxCallback = !!isMSAjaxCallback;
 }
});
var ResourceManager = {
 HandlerStr: "DXR.axd?r=",
 ResourceHashes: {},
 SynchronizeResources: function(method){
  if(!method){
   method = function(name, resource) { 
    this.UpdateInputElements(name, resource); 
   }.aspxBind(this);
  }
  var resources = this.GetResourcesData();
  for(var name in resources)
   if(resources.hasOwnProperty(name))
    method(name, resources[name]);
 },
 GetResourcesData: function(){
  return {
   DXScript: this.GetResourcesElementsString(_aspxGetIncludeScripts(), "src", "DXScript"),
   DXCss: this.GetResourcesElementsString(_aspxGetLinks(), "href", "DXCss")
  };
 },
 ParseBundleSrc: function(elements, urlAttr){
  var timeStamp = "";
  var resourceUrlArray = [];
  for(var i = 0; i < elements.length; i++) {
   var resourceUrl = ASPx.Attr.GetAttribute(elements[i], urlAttr);
   if(resourceUrl) {
    var pos = resourceUrl.indexOf(this.HandlerStr);
    if(pos > -1){
     var list = resourceUrl.substr(pos + this.HandlerStr.length);
     var ampPos = list.lastIndexOf("-");
     if(ampPos > -1) {
      timeStamp = list.substr(ampPos);
      list = list.substr(0, ampPos);
     }
     var indexes = list.split(",");
     for(var j = 0; j < indexes.length; j++) {
      resourceUrlArray.push(indexes[j]);
     }
    }
    else
     resourceUrlArray.push(resourceUrl);
   }
  }
  return {
   'resourceUrlArray': resourceUrlArray,
   'timeStamp': timeStamp
  };
 },
 GetResourceHashes: function (id) {
  if (!this.ResourceHashes[id])
   this.ResourceHashes[id] = {};
  return this.ResourceHashes[id];
 },
 GetResourcesElementsString: function (elements, urlAttr, id) {
  var hash = this.GetResourceHashes(id);
  var resourceUrlArray = this.ParseBundleSrc(elements, urlAttr).resourceUrlArray;
  for(var i = 0; i < resourceUrlArray.length; i++) {
   hash[resourceUrlArray[i]] = resourceUrlArray[i];
  }
  var array = [];
  for(var key in hash)
   if(hash.hasOwnProperty(key))
    array.push(key);
  return array.join(",");
 },
 GetNewResourcesElementString: function (element, urlAttr, id) {
  var originalUrl = ASPx.Attr.GetAttribute(element, urlAttr);
  var handlerStrIndex = originalUrl.indexOf(this.HandlerStr);
  var dxResources = handlerStrIndex > -1;
  if(!dxResources) return element[urlAttr];
  var hash = this.GetResourceHashes(id);
  var srcInfo = this.ParseBundleSrc([element], urlAttr);
  var resourceUrlArray = srcInfo.resourceUrlArray;
  var timeStamp = srcInfo.timeStamp;
  var newResourceArray = [];
  for(var i = 0; i < resourceUrlArray.length; i++) {
    if(!hash[resourceUrlArray[i]])
    newResourceArray.push(resourceUrlArray[i]);
  }
  var newResources = "";
  if(newResourceArray.length > 0) {
   var baseUrl = originalUrl.substr(0, handlerStrIndex);
   newResources = baseUrl + this.HandlerStr + newResourceArray.join(",") + timeStamp;
  }
  return newResources;
 },
 UpdateInputElements: function(typeName, list){
  for(var i = 0; i < document.forms.length; i++){
   var inputElement = document.forms[i][typeName];
   if(!inputElement)
    inputElement = this.CreateInputElement(document.forms[i], typeName);
   inputElement.value = list;
  }
 },
 CreateInputElement: function(form, typeName){
  var inputElement = ASPx.CreateHiddenField(typeName);
  form.appendChild(inputElement);
  return inputElement;
 }
};
ASPx.includeScriptPrefix = "dxis_";
ASPx.startupScriptPrefix = "dxss_";
var includeScriptsCache = {};
var createdIncludeScripts = [];
var appendedScriptsCount = 0;
var callbackOwnerNames = [];
var scriptsRestartHandlers = { };
function _aspxIsKnownIncludeScript(script) {
 return !!includeScriptsCache[script.src];
}
function _aspxCacheIncludeScript(script) {
 includeScriptsCache[script.src] = 1;
}
function _aspxProcessScriptsAndLinks(ownerName, isCallback) {
 if(!ASPx.documentLoaded) return; 
 _aspxProcessScripts(ownerName, isCallback);
 getLinkProcessor().process();
 ASPx.ClearCachedCssRules();
}
function _aspxGetStartupScripts(container) {
 return _aspxGetScriptsCore(ASPx.startupScriptPrefix, container);
}
function _aspxGetIncludeScripts() {
 return _aspxGetScriptsCore(ASPx.includeScriptPrefix);
}
function _aspxGetScriptsCore(prefix, container) {
 var result = [];
 var scripts;
 if(ASPx.IsExists(container))
  scripts = ASPx.GetNodesByTagName(container, "SCRIPT");
 else
  scripts = document.getElementsByTagName("SCRIPT");
 for(var i = 0; i < scripts.length; i++) {
  if(scripts[i].id.indexOf(prefix) == 0)
   result.push(scripts[i]);
 }
 return result;
}
function _aspxGetLinks() {
 var result = [];
 var links = document.getElementsByTagName("LINK");
 for(var i = 0; i < links.length; i++) 
  result[i] = links[i];
 return result;
}
function _aspxIsLinksLoaded() {
 var links = _aspxGetLinks();
 for(var i = 0, link; link = links[i]; i++)
  if(link.readyState && link.readyState.toLowerCase() == "loading")
    return false;
 return true;
}
function _aspxInitializeLinks() {
 var links = _aspxGetLinks();
 for(var i = 0; i < links.length; i++)
  links[i].loaded = true; 
}
var scriptExecutedAttrName = "data-executed";
var scriptDelayedExecutionAttrName = "data-dx-delayedeval";
ASPx.MarkInnerScriptBlocksAsDelayedExecution = function(scriptsContainer) {
 var scripts = scriptsContainer.querySelectorAll("script[id^=" + ASPx.startupScriptPrefix + "]");
 for(var i = 0; i < scripts.length; i++)
  ASPx.Attr.SetAttribute(scripts[i], scriptDelayedExecutionAttrName, true);
};
function isScriptExecuted(script) {
 return ASPx.Attr.GetAttribute(script, scriptExecutedAttrName);
}
function markScriptAsExecuted(script) {
 if(ASPx.Attr.GetAttribute(script, scriptDelayedExecutionAttrName))
  ASPx.Attr.RemoveAttribute(script, scriptDelayedExecutionAttrName);
 else
  ASPx.Attr.SetAttribute(script, scriptExecutedAttrName, true);
}
function _aspxInitializeScripts() {
 var scripts = _aspxGetIncludeScripts();
 for(var i = 0; i < scripts.length; i++)
  _aspxCacheIncludeScript(scripts[i]);   
 var startupScripts = _aspxGetStartupScripts();
 for(var i = 0; i < startupScripts.length; i++)
  markScriptAsExecuted(startupScripts[i]);
}
function _aspxSweepDuplicatedLinks() {
 var hash = { };
 var links = _aspxGetLinks();
 for(var i = 0; i < links.length; i++) {
  var href = links[i].href;
  if(!href)
   continue;
  if(hash[href]){
   if((ASPx.Browser.IE || !hash[href].loaded) && links[i].loaded) {
    ASPx.RemoveElement(hash[href]);
    hash[href] = links[i];
   }
   else
    ASPx.RemoveElement(links[i]);
  }
  else
   hash[href] = links[i];
 }
}
function _aspxSweepDuplicatedScripts() {
 var hash = { };
 var scripts = _aspxGetIncludeScripts();
 for(var i = 0; i < scripts.length; i++) {
  var src = scripts[i].src;
  if(!src) continue;
  if(hash[src])
   ASPx.RemoveElement(scripts[i]);
  else
   hash[src] = scripts[i];
 }
}
function _aspxAreScriptsEqual(script1, script2) {
 return script1.src == script2.src;
}
function _aspxProcessScripts(ownerName, isCallback) {
 var scripts = _aspxGetIncludeScripts();
 var previousCreatedScript = null;
 var firstCreatedScript = null;
 for(var i = 0; i < scripts.length; i++) {
  var script = scripts[i];
  if(script.src == "") continue; 
  if(_aspxIsKnownIncludeScript(script))
   continue;
  var getOnlyNewResources = true;
  var onlyNewScripts = ResourceManager.GetNewResourcesElementString(script, "src", "DXScript", getOnlyNewResources);
  if (onlyNewScripts == "")
   continue;
  var createdScript = document.createElement("script");
  createdScript.type = "text/javascript";
  createdScript.src = onlyNewScripts;
  createdScript.id = script.id;
  if(ASPx.Data.ArrayIndexOf(createdIncludeScripts, createdScript, _aspxAreScriptsEqual) >= 0)
   continue;
  createdIncludeScripts.push(createdScript);
  ASPx.RemoveElement(script);
  if(ASPx.Browser.IE && ASPx.Browser.Version < 9) {
   createdScript.onreadystatechange = new Function("ASPx.OnScriptReadyStateChangedCallback(this, " + isCallback + ");");
  } else if(ASPx.Browser.Edge || ASPx.Browser.WebKitFamily || (ASPx.Browser.Firefox && ASPx.Browser.Version >= 4) || ASPx.Browser.IE && ASPx.Browser.Version >= 9) {
   createdScript.onload = new Function("ASPx.OnScriptLoadCallback(this, " + isCallback + ");");
   if(firstCreatedScript == null)
    firstCreatedScript = createdScript;
   createdScript.nextCreatedScript = null;
   if(previousCreatedScript != null)
    previousCreatedScript.nextCreatedScript = createdScript;
   previousCreatedScript = createdScript;
  } else {
   createdScript.onload = new Function("ASPx.OnScriptLoadCallback(this);");
   ASPx.AppendScript(createdScript);
   _aspxCacheIncludeScript(createdScript);
  }
 }
 if(firstCreatedScript != null) {
  ASPx.AppendScript(firstCreatedScript);
  _aspxCacheIncludeScript(firstCreatedScript);
 }
 if(isCallback)
  callbackOwnerNames.push(ownerName);
 if(createdIncludeScripts.length == 0) {
  var newLinks = ASPx.GetNodesByTagName(document.body, "link");
  var needProcessLinks = isCallback && newLinks.length > 0;
  if(needProcessLinks)
   needProcessLinks = getLinkProcessor().addLinks(newLinks);
  if(!needProcessLinks)
   ASPx.FinalizeScriptProcessing(isCallback);
 }
}
ASPx.FinalizeScriptProcessing = function(isCallback) {
 createdIncludeScripts = [];
 appendedScriptsCount = 0;
 var linkProcessor = getLinkProcessor();
 if(linkProcessor.hasLinks())
  _aspxSweepDuplicatedLinks();
 linkProcessor.reset();
 _aspxSweepDuplicatedScripts();
 ResourceManager.SynchronizeResources();
 _aspxRunStartupScripts(isCallback);
};
var startupScriptsRunning = false;
function _aspxRunStartupScripts(isCallback, container) {
 startupScriptsRunning = true;
 try {
  _aspxRunStartupScriptsCore(container);
 }
 finally {
  startupScriptsRunning = false;
 }
 if(ASPx.documentLoaded) {
  ASPx.GetControlCollection().ProcessActionByPredicate(
   function(collection) { collection.InitializeElements(isCallback); },
   function(control) { return !ASPx.IsExists(container) || ASPx.GetIsParent(container, control.GetMainElement()); }
  );
  for(var key in scriptsRestartHandlers)
   if(scriptsRestartHandlers.hasOwnProperty(key))
    scriptsRestartHandlers[key]();
  _aspxRunEndCallbackScript();
 }
}
function _aspxIsStartupScriptsRunning(isCallback) {
 return startupScriptsRunning;
}
function _aspxRunStartupScriptsCore(container) {
 var scripts = _aspxGetStartupScripts(container);
 var code;
 for(var i = 0; i < scripts.length; i++){
  var script = scripts[i];
  if(!isScriptExecuted(script)) {
   _aspxEnsureStartupScriptIsUnique(script.id); 
   code = ASPx.GetScriptCode(script);
   eval(code);
   markScriptAsExecuted(script);
  }
 }
}
function _aspxEnsureStartupScriptIsUnique(scriptId) {
 if(!scriptId)
  return;
 var scriptExecutedSelector = "script[" + scriptExecutedAttrName + "='true']#" + scriptId;
 ASPx.RemoveElement(document.querySelector(scriptExecutedSelector));
}
function _aspxRunEndCallbackScript() {
 while(callbackOwnerNames.length > 0) {
  var callbackOwnerName = callbackOwnerNames.pop();
  var callbackOwner = ASPx.GetControlCollection().Get(callbackOwnerName);
  if(callbackOwner)
   callbackOwner.DoEndCallback();
 }
}
ASPx.OnScriptReadyStateChangedCallback = function(scriptElement, isCallback) {
 if(scriptElement.readyState == "loaded") {
  _aspxCacheIncludeScript(scriptElement);
  for(var i = 0; i < createdIncludeScripts.length; i++) {
   var script = createdIncludeScripts[i];
   if(_aspxIsKnownIncludeScript(script)) {
    if(!isScriptExecuted(script)) {
     markScriptAsExecuted(script);
     ASPx.AppendScript(script);
     appendedScriptsCount++;
    }
   } else
    break;
  }
  if(createdIncludeScripts.length == appendedScriptsCount)
   ASPx.FinalizeScriptProcessing(isCallback);
 }
};
ASPx.OnScriptLoadCallback = function(scriptElement, isCallback) {
 appendedScriptsCount++;
 if(scriptElement.nextCreatedScript) {
  ASPx.AppendScript(scriptElement.nextCreatedScript);
  _aspxCacheIncludeScript(scriptElement.nextCreatedScript);
 }
 if(createdIncludeScripts.length == appendedScriptsCount)
  ASPx.FinalizeScriptProcessing(isCallback);
};
function _aspxAddScriptsRestartHandler(objectName, handler) {
 scriptsRestartHandlers[objectName] = handler;
}
function _aspxMoveLinkElements() {
 var head = ASPx.GetNodesByTagName(document, "head")[0];
 var bodyLinks = ASPx.GetNodesByTagName(document.body, "link");
 if(head && bodyLinks.length > 0){
  var headLinks = ASPx.GetNodesByTagName(head, "link");
  var dxLinkAnchor = head.firstChild;
  for(var i = 0; i < headLinks.length; i++){
   if(headLinks[i].href.indexOf(ResourceManager.HandlerStr) > -1)
    dxLinkAnchor = headLinks[i].nextSibling;
  }
  while(bodyLinks.length > 0) 
   head.insertBefore(bodyLinks[0], dxLinkAnchor);
 }
}
var LinkProcessor = ASPx.CreateClass(null, {
 constructor: function() {
  this.loadedLinkCount = 0;
  this.linkInfos = [];
  this.loadingObservationTimerID = -1;
 },
 process: function() {
  if(this.hasLinks()) {
   if(this.isLinkLoadEventSupported())
    this.processViaLoadEvent();
   else
    this.processViaTimer();
  }
  else
   _aspxSweepDuplicatedLinks();
  _aspxMoveLinkElements();
 },
 addLinks: function(links) {
  var prevLinkCount = this.linkInfos.length;
  for(var i = 0; i < links.length; i++) {
   var link = links[i];
   if(link.loaded || link.rel != "stylesheet" || link.type != "text/css" || link.href.toLowerCase().indexOf("dxr.axd?r=") == -1)
    continue;
   var linkInfo = {
    link: link,
    href: link.href
   };
   this.linkInfos.push(linkInfo);
  }
  return prevLinkCount != this.linkInfos.length;
 },
 hasLinks: function() {
  return this.linkInfos.length > 0;
 },
 reset: function() {
  this.linkInfos = [];
  this.loadedLinkCount = 0;
 },
 processViaLoadEvent: function() {
  var that = this;
  for(var i = 0, linkInfo; linkInfo = this.linkInfos[i]; i++) {
   if(ASPx.Browser.IE && ASPx.Browser.Version < 9)
    linkInfo.link.onreadystatechange = function() { that.onLinkReadyStateChanged(this); };
   else
    linkInfo.link.onload = this.onLinkLoad.aspxBind(this);
  }
 },
 isLinkLoadEventSupported: function() {
  return !(ASPx.Browser.Chrome && ASPx.Browser.MajorVersion < 19 || ASPx.Browser.Firefox && ASPx.Browser.MajorVersion < 9 ||
   ASPx.Browser.Safari && ASPx.Browser.MajorVersion < 6 || ASPx.Browser.AndroidDefaultBrowser && ASPx.Browser.MajorVersion < 4.4);
 },
 processViaTimer: function() {
  if(this.loadingObservationTimerID == -1)
   this.onLinksLoadingObserve();
 },
 onLinksLoadingObserve: function() {
  if(this.getIsAllLinksLoaded()) {
   this.loadingObservationTimerID = -1;
   this.onAllLinksLoad();
  }
  else
   this.loadingObservationTimerID = window.setTimeout(this.onLinksLoadingObserve.aspxBind(this), 100);
 },
 getIsAllLinksLoaded: function() {
  var styleSheets = document.styleSheets;
  var loadedLinkHrefs = { };
  for(var i = 0; i < styleSheets.length; i++) {
   var styleSheet = styleSheets[i];
   try {
    if(styleSheet.cssRules)
     loadedLinkHrefs[styleSheet.href] = 1;
   }
   catch(ex) { }
  }
  var loadedLinksCount = 0;
  for(var i = 0, linkInfo; linkInfo = this.linkInfos[i]; i++) {
   if(loadedLinkHrefs[linkInfo.href])
    loadedLinksCount++;
  }
  return loadedLinksCount == this.linkInfos.length;
 },
 onAllLinksLoad: function() {
  this.reset();
  _aspxSweepDuplicatedLinks();
  if(createdIncludeScripts.length == 0)
   ASPx.FinalizeScriptProcessing(true);
 },
 onLinkReadyStateChanged: function(linkElement) {
  if(linkElement.readyState == "complete")
   this.onLinkLoadCore(linkElement);
 },
 onLinkLoad: function(evt) {
  var linkElement = ASPx.Evt.GetEventSource(evt);
  this.onLinkLoadCore(linkElement);
 },
 onLinkLoadCore: function(linkElement) {
  if(!this.hasLinkElement(linkElement)) return;
  this.loadedLinkCount++;
  if(!ASPx.Browser.Firefox && this.loadedLinkCount == this.linkInfos.length || 
   ASPx.Browser.Firefox && this.loadedLinkCount == 2 * this.linkInfos.length) {
   this.onAllLinksLoad();
  }
 },
 hasLinkElement: function(linkElement) {
  for(var i = 0, linkInfo; linkInfo = this.linkInfos[i]; i++) {
   if(linkInfo.link == linkElement)
    return true;
  }
  return false;
 }
});
var linkProcessor = null;
function getLinkProcessor() {
 if(linkProcessor == null)
  linkProcessor = new LinkProcessor();
 return linkProcessor;
}
ASPx.LinkProcessor = LinkProcessor;
var IFrameHelper = ASPx.CreateClass(null, {
 constructor: function(params) {
  this.params = params || {};
  this.params.src = this.params.src || "";
  this.CreateElements();
 },
 CreateElements: function() {
  var elements = IFrameHelper.Create(this.params);
  this.containerElement = elements.container;
  this.iframeElement = elements.iframe;
  this.AttachOnLoadHandler(this, this.iframeElement);
  this.SetLoading(true);
  if(this.params.onCreate)
   this.params.onCreate(this.containerElement, this.iframeElement);
 },
 AttachOnLoadHandler: function(instance, element) {
  ASPx.Evt.AttachEventToElement(element, "load", function() {
   instance.OnLoad(element);
  });
 },
 OnLoad: function(element) {
  this.SetLoading(false, element);
  if(!element.preventCustomOnLoad && this.params.onLoad)
   this.params.onLoad();
 },
 IsLoading: function(element) {
  element = element || this.iframeElement;
  if(element)
   return element.loading;
  return false;
 },
 SetLoading: function(value, element) {
  element = element || this.iframeElement;
  if(element)
   element.loading = value;
 },
 GetContentUrl: function() {
  return this.params.src;
 },
 SetContentUrl: function(url, preventBrowserCaching) {
  if(url) {
   this.params.src = url;
   if(preventBrowserCaching)
    url = IFrameHelper.AddRandomParamToUrl(url);
   this.SetLoading(true);
   this.iframeElement.src = url;
  }
 },
 RefreshContentUrl: function() {
  if(this.IsLoading())
   return;
  this.SetLoading(true);
  var oldContainerElement = this.containerElement;
  var oldIframeElement = this.iframeElement;
  var postfix = "_del" + Math.floor(Math.random()*100000).toString();
  if(this.params.id)
   oldIframeElement.id = this.params.id + postfix;
  if(this.params.name)
   oldIframeElement.name = this.params.name + postfix;
  ASPx.SetStyles(oldContainerElement, { height: 0 });
  this.CreateElements();
  oldIframeElement.preventCustomOnLoad = true;
  oldIframeElement.src = ASPx.BlankUrl;
  window.setTimeout(function() {
   oldContainerElement.parentNode.removeChild(oldContainerElement);
  }, 10000); 
 }
});
IFrameHelper.Create = function(params) {
 var iframeHtmlStringParts = [ "<iframe frameborder='0'" ];
 if(params) {
  if(params.id)
   iframeHtmlStringParts.push(" id='", params.id, "'");
  if(params.name)
   iframeHtmlStringParts.push(" name='", params.name, "'");
  if(params.title)
   iframeHtmlStringParts.push(" title='", params.title, "'");
  if(params.scrolling)
   iframeHtmlStringParts.push(" scrolling='", params.scrolling, "'");
  if(params.src)
   iframeHtmlStringParts.push(" src='", params.src, "'");
 }
 iframeHtmlStringParts.push("></iframe>");
 var containerElement = ASPx.CreateHtmlElementFromString("<div style='border-width: 0px; padding: 0px; margin: 0px'></div>");
 var iframeElement = ASPx.CreateHtmlElementFromString(iframeHtmlStringParts.join(""));
 containerElement.appendChild(iframeElement);
 return {
  container: containerElement,
  iframe: iframeElement
 };
};
IFrameHelper.AddRandomParamToUrl = function(url) {
 var prefix = url.indexOf("?") > -1
  ? "&"
  : "?";
 var param = prefix + Math.floor(Math.random()*100000).toString();
 var anchorIndex = url.indexOf("#");
 return anchorIndex == -1
  ? url + param
  : url.substr(0, anchorIndex) + param + url.substr(anchorIndex);
};
IFrameHelper.GetWindow = function(name) {
 if(ASPx.Browser.IE)
  return window.frames[name].window;
 else{
  var frameElement = document.getElementById(name);
  return (frameElement != null) ? frameElement.contentWindow : null;
 }
};
IFrameHelper.GetDocument = function(name) {
 var frameElement;
 if(ASPx.Browser.IE) {
  frameElement = window.frames[name];
  return (frameElement != null) ? frameElement.document : null;
 }
 else {
  frameElement = document.getElementById(name);
  return (frameElement != null) ? frameElement.contentDocument : null;
 }
};
IFrameHelper.GetDocumentBody = function(name) {
 var doc = IFrameHelper.GetDocument(name);
 return (doc != null) ? doc.body : null;
};
IFrameHelper.GetDocumentHead = function (name) {
 var doc = IFrameHelper.GetDocument(name);
 return (doc != null) ? doc.head || doc.getElementsByTagName('head')[0] : null;
};
IFrameHelper.GetElement = function(name) {
 if(ASPx.Browser.IE)
  return window.frames[name].window.frameElement;
 else
  return document.getElementById(name);
};
var KbdHelper = ASPx.CreateClass(null, {
 constructor: function(control) {
  this.control = control;
 },
 Init: function() {
  KbdHelper.GlobalInit();
  var elements = this.getFocusableElements();
  for(var i = 0; i < elements.length; i++) {
   var element = elements[i];
   element.tabIndex = Math.max(element.tabIndex, 0);
   ASPx.Evt.AttachEventToElement(element, "click", function(e) { this.HandleClick(e); }.aspxBind(this));
   ASPx.Evt.AttachEventToElement(element, "focus", function(e) {    
    return this.onElementFocus(e);
   }.aspxBind(this));
   ASPx.Evt.AttachEventToElement(element, "blur", function () { this.onBlur(); }.aspxBind(this)); 
  }   
 },
 onElementFocus: function(e) {
  if(!this.CanFocus(e))
   return true;
  KbdHelper.active = this;
 },
 getFocusableElements: function() {
  return [this.GetFocusableElement()]; 
 },
 GetFocusableElement: function() { return this.control.GetMainElement(); },
 canHandleNoFocusAction: function() { 
  var focusableElements = this.getFocusableElements();
  for(var i = 0; i < focusableElements.length; i++) {
   if(focusableElements[i] === _aspxGetFocusedElement())
    return false;
  }
  return true;
 },
 RequirePreventScrollOnFocus: function() { return false; },
 CanFocus: function(e) {
  var tag = ASPx.Evt.GetEventSource(e).tagName;
  return !(tag === "A" || tag === "TEXTAREA" || tag === "INPUT" || tag === "SELECT" || tag === "IFRAME" || tag === "OBJECT");
 },
 HandleClick: function(e) {
  if(!this.CanFocus(e))
   return;
  this.Focus();
 },
 Focus: function() {
  var preventScroll = this.RequirePreventScrollOnFocus() && !ASPx.Browser.IE; 
  var savedDocumentScrollTop = preventScroll ? ASPx.GetDocumentScrollTop() : -1;
  try {
   this.GetFocusableElement().focus({ preventScroll: preventScroll });
  } catch(e) { }
  if(preventScroll && !this.IsNativePreventScrollOnFocusSupported() && savedDocumentScrollTop !== ASPx.GetDocumentScrollTop())
   ASPx.SetDocumentScrollTop(savedDocumentScrollTop);
 },
 IsNativePreventScrollOnFocusSupported: function() {
  if(this.isNativePreventScrollOnFocusSupported === undefined)
   this.isNativePreventScrollOnFocusSupported = this.CalcIsNativePreventScrollOnFocusSupported();
  return this.isNativePreventScrollOnFocusSupported;
 },
 CalcIsNativePreventScrollOnFocusSupported: function() {
  var result = false;
  try {
   ASPx.GetActiveElement().focus(Object.defineProperty({}, "preventScroll", { get: function() { result = true; } }));
  } catch(e) { result = false; }
  return result;
 },
 onBlur: function(){
  delete KbdHelper.active;
 },
 HandleKeyDown: function(e) { }, 
 HandleKeyPress: function(e) { }, 
 HandleKeyUp: function (e) { },
 HandleNoFocusAction: function(e) { },
 FocusByAccessKey: function () { }
});
KbdHelper.GlobalInit = function() {
 if(KbdHelper.ready)
  return;
 ASPx.Evt.AttachEventToDocument("keydown", KbdHelper.OnKeyDown);
 ASPx.Evt.AttachEventToDocument("keypress", KbdHelper.OnKeyPress);
 ASPx.Evt.AttachEventToDocument("keyup", KbdHelper.OnKeyUp);
 KbdHelper.ready = true; 
};
KbdHelper.swallowKey = false;
KbdHelper.accessKeys = { };
KbdHelper.ProcessKey = function(e, actionName) {
 if(!KbdHelper.active) 
  return;
 if (KbdHelper.active.canHandleNoFocusAction()) {
  KbdHelper.active["HandleNoFocusAction"](e, actionName);
  return;
 }
 var ctl = KbdHelper.active.control;
 if(ctl !== ASPx.GetControlCollection().Get(ctl.name)) {
  delete KbdHelper.active;
  return;
 }
 if(!KbdHelper.swallowKey) 
  KbdHelper.swallowKey = KbdHelper.active[actionName](e);
 if(KbdHelper.swallowKey)
  ASPx.Evt.PreventEvent(e);
};
KbdHelper.OnKeyDown = function(e) {
 KbdHelper.swallowKey = false;
 if(KbdHelper.TryAccessKey(KbdHelper.getKeyName(e)))
  ASPx.Evt.PreventEvent(e);
 else 
  KbdHelper.ProcessKey(e, "HandleKeyDown"); 
};
KbdHelper.OnKeyPress = function(e) { KbdHelper.ProcessKey(e, "HandleKeyPress"); };
KbdHelper.OnKeyUp = function(e) { KbdHelper.ProcessKey(e, "HandleKeyUp"); };
KbdHelper.RegisterAccessKey = function(obj) {
 var key;
 if(obj.accessKey)
  key = "CtrlShift" + obj.accessKey;
 else if(obj.keyTipModeShortcut)
  key = obj.keyTipModeShortcut;
 if(!key) return;
 KbdHelper.accessKeys[key.toLowerCase()] = obj.name;
};
KbdHelper.TryAccessKey = function(code) {
 var key = code.toLowerCase ? code.toLowerCase() : String.fromCharCode(code).toLowerCase();
 var name = KbdHelper.accessKeys[key];
 if(!name) return false;
 var obj = ASPx.GetControlCollection().Get(name);
 return KbdHelper.ClickAccessKey(obj);
};
KbdHelper.ClickAccessKey = function (control) {
 if (!control) return false;
 var el = control.GetMainElement();
 if (!el) return false;
 el.focus();
 setTimeout(function () {
  if (KbdHelper.active && KbdHelper.active.FocusByAccessKey)
   KbdHelper.active.FocusByAccessKey();
 }.aspxBind(this), 100);
 return true;
};
KbdHelper.getKeyName = function(e) {
 var name = "";
 if(e.altKey)
  name += "Alt";
 if(e.ctrlKey)
  name += "Ctrl";
 if(e.shiftKey)
  name += "Shift";
 var keyCode = e.key || e.code || String.fromCharCode(ASPx.Evt.GetKeyCode(e));
 if(keyCode.match(/key/i))
  name += keyCode.replace(/key/i, "");
 else if(keyCode.match(/digit/i))
  name += keyCode.replace(/digit/i, "");
 else if(keyCode.match(/arrow/i))
  name += keyCode.replace(/arrow/i, "");
 else if(keyCode.match(/ins/i))
  name += "Ins";
 else if(keyCode.match(/del/i))
  name += "Del";
 else if(keyCode.match(/back/i))
  name += "Back";
 else if(!keyCode.match(/alt/i) && !keyCode.match(/control/i) && !keyCode.match(/shift/i))
  name += keyCode;
 return name.replace(/^a-zA-Z0-9/, "");
};
AccessKeysHelper = ASPx.CreateClass(KbdHelper, {
 constructor: function (control) {
  this.constructor.prototype.constructor.call(this, control);
  this.accessKeysVisible = false;
  this.activeKey = null;
  this.accessKey = control.createAccessKey ? control.createAccessKey(control.accessKey) : new AccessKey(control.accessKey);
  this.accessKeys = this.accessKey.accessKeys;
  this.charIndex = 0;
  this.onFocusByAccessKey = null;
  this.onClose = null;
  this.manualStopProcessing = false;
  this.isActive = false;
  this.areAccessKeysShown = false;
 },
 Init: function (control) {
  KbdHelper.prototype.Init.call(this);
  KbdHelper.RegisterAccessKey(control);   
 },
 Add: function (accessKey) {
  this.accessKey.Add(accessKey);
 },
 HandleKeyDown: function (e) {
  var keyCode = ASPx.Evt.GetKeyCode(e);
  var stopProcessing = this.processKeyDown(keyCode);
  if (stopProcessing.value) {
   this.stopProcessing();
   if(this.onClosedOnEscape && (keyCode == ASPx.Key.Esc || stopProcessing.fireEvent))
    this.onClosedOnEscape();
  }
  return stopProcessing;
 },
 HandleNoFocusAction: function (e, actionName) {
  var keyCode = ASPx.Evt.GetKeyCode(e);
  if (this.onClosedOnEscape && keyCode == ASPx.Key.Esc && actionName == "HandleKeyDown")
   this.onClosedOnEscape();
 },
 Activate: function () {
  KbdHelper.ClickAccessKey(this.control);
  this.areAccessKeysShown = true;
 },
 Stop: function() {
  this.stopProcessing();
 },
 stopProcessing: function () {
  this.HideAccessKeys();
  if (KbdHelper.active && this.isActive) {
   this.isActive = false;
   KbdHelper.active.control.GetMainElement().blur();
   delete KbdHelper.active;
  }
 },
 onBlur: function() {
  if (this.manualStopProcessing) {
   this.manualStopProcessing = false;
   return;
  }
  this.HideAccessKeys();
  KbdHelper.prototype.onBlur.call(this);
 },
 processKeyDown: function (keyCode) {
  switch (keyCode) {
   case ASPx.Key.Left:
    this.TryMoveFocusLeft();
    return { value: false };
   case ASPx.Key.Right:
    this.TryMoveFocusRight();
    return { value: false };
   case ASPx.Key.Esc:
    if(this.control.hideAllPopups)
     this.control.hideAllPopups(true, true);
    if(this.activeKey)
     this.activeKey = this.activeKey.Return();
    this.charIndex = 0;
    if (!this.activeKey)
     return { value: true };
    break;
   case ASPx.Key.Enter:
    return { value: true };
   default:
    if (!ASPx.IsPrintableKey(keyCode))
     return { value: false };
    var char = String.fromCharCode(keyCode).toUpperCase();
    var needToContinue = { value: false };
    var keyResult;
    if(this.activeKey)
     keyResult = this.activeKey.TryAccessKey(char, this.charIndex, needToContinue);
    if (needToContinue.value) {
     this.charIndex++;
     return { value: false };
    }
    this.charIndex = 0;
    if(keyResult !== undefined)
     this.activeKey = keyResult;
    else
     return { value: true, fireEvent: true };
    if (!this.activeKey || !this.activeKey.accessKeys || this.activeKey.accessKeys.length == 0) {
     if (this.activeKey && this.activeKey.manualStopProcessing) {
      this.manualStopProcessing = true;
      break;
     }
     return { value: true, fireEvent: true };
    }
  }
  return { value: false };
 },
 TryMoveFocusLeft: function (modifier) {},
 TryMoveFocusRight: function (modifier) {},
 TryMoveFocusUp: function (modifier) {},
 TryMoveFocusDown: function (modifier) {},
 FocusByAccessKey: function() {
  if (this.onFocusByAccessKey)
   this.onFocusByAccessKey();
  this.HideAccessKeys();
  KbdHelper.prototype.FocusByAccessKey.call(this);
  this.activeKey = this.accessKey;
  this.activeKey.execute();
  this.isActive = true;
  this.areAccessKeysShown = true;
 },
 HideAccessKeys: function() {
  this.areAccessKeysShown = false;
  this.hideAccessKeys(this.accessKey);
 },
 Update: function() {
  this.throttleMethod(this.refresh, 100);
 },
 refresh: function() {
  if(this.activeKey && this.areAccessKeysShown) {
   this.activeKey.execute();
  }
 },
 throttleMethod: function(method, delay) {
  clearTimeout(method.timerId);
  method.timerId = setTimeout(function() {
   method.call(this);
  }.aspxBind(this), delay);
 },
 AreAccessKeysShown: function() {
  return this.areAccessKeysShown;
 },
 hideAccessKeys: function (accessKey) {
  for (var i = 0, ak; ak = accessKey.accessKeys[i]; i++) {
   this.hideAccessKeys(ak);
  }
  if (accessKey)
   accessKey.hide();
 },
 HandleClick: function(e) {
  KbdHelper.prototype.HandleClick.call(this, e);
  this.stopProcessing();
 }
});
AccessKey = ASPx.CreateClass(null, {
 constructor: function (popupItem, getPopupElement, keyTipElement, key, onlyClick, manualStopProcessing) {
  this.key = key ? key : keyTipElement ? ASPxClientUtils.Trim(ASPx.GetInnerText(keyTipElement)) : null;
  this.popupItem = popupItem;
  this.getPopupElement = getPopupElement;
  this.keyTipElement = keyTipElement;
  this.accessKeys = [];
  this.needShowChilds = true;
  this.parent = null;
  this.onlyClick = onlyClick;
  this.manualStopProcessing = manualStopProcessing;
 },
 Add: function (accessKey) {
  this.accessKeys.push(accessKey);
  accessKey.parent = this;
 },
 TryAccessKey: function (char, index, needToContinue) {
  if (!this.accessKeys || this.accessKeys.length == 0)
   return;
  for (var i = 0, accessKey; accessKey = this.accessKeys[i]; i++) {
   if (accessKey.key[index] == char && accessKey.isVisible()) {
    if (accessKey.key[index + 1]) {
     needToContinue.value = true;
    }
    else {
     accessKey.execute();
     return accessKey;
    }
   } else {
    accessKey.hide();
   }
  }
  for (var i = 0, accessKey; accessKey = this.accessKeys[i]; i++) {
   var key = accessKey.TryAccessKey(char, index, needToContinue);
   if (key)
    return key;
  }
  return;
 },
 isVisible: function(){
  return ASPx.GetElementVisibility(this.keyTipElement);
 },
 Return: function () {
  this.hideChildAccessKeys();
  if (this.parent) {
   this.parent.showAccessKeys(true);
  }  
  return this.parent;
 },
 execute: function () {
  this.hideAll();
  if (this.popupItem && this.popupItem.accessKeyClick && !this.onlyClick)
   this.popupItem.accessKeyClick();
  if (this.getPopupElement && this.onlyClick)
   ASPx.Evt.EmulateMouseClick(this.getPopupElement(this.popupItem));
  if (this.accessKeys)
   setTimeout(function () {
    this.showAccessKeys(true);
   }.aspxBind(this), 100);
 },
 showAccessKeys: function(directShow) {
  if (!directShow && !this.needShowChilds)
   return;
  for (var i = 0; i < this.accessKeys.length; i++) {
   var accessKey = this.accessKeys[i];
   if (accessKey) {
    var popupElement = accessKey.getPopupElement ? accessKey.getPopupElement(accessKey.popupItem) : null;
    if (popupElement && this.isElementVisible(popupElement)) {
     this.show(accessKey);
    }
    accessKey.showAccessKeys();
   }
  }
 },
 isElementVisible: function (el) { return ASPx.IsElementVisible(el, true); },
 show: function(accessKey) {
  var keyTipElement = accessKey.keyTipElement;
  var popupElement = accessKey.getPopupElement(accessKey.popupItem);
  this.showKeyTipElement(keyTipElement, this.calculateCoordinates(accessKey, keyTipElement, popupElement));
 },
 showKeyTipElement: function (keyTipElement, coordinates) {
  ASPx.SetAbsoluteY(keyTipElement, coordinates.top);
  ASPx.SetAbsoluteX(keyTipElement, coordinates.left);
  ASPx.SetElementVisibility(keyTipElement, true); 
 },
 calculateCoordinates: function (accessKey, keyTipElement, popupElement) {
  var top = ASPx.GetAbsolutePositionY(popupElement);
  var left = ASPx.GetAbsolutePositionX(popupElement);
  if (accessKey.popupItem.getAccessKeyPosition)
   switch (accessKey.popupItem.getAccessKeyPosition()) {
    case "AboveRight":
     left = left + popupElement.offsetWidth - keyTipElement.offsetWidth / 3;
     top = top - keyTipElement.offsetHeight / 2;
     break;
    case "Right":
     left = left + popupElement.offsetWidth - keyTipElement.offsetWidth / 3;
     top = top + popupElement.offsetHeight / 2 - keyTipElement.offsetHeight / 2;
     break;
    case "BelowRight":
     left = left + popupElement.offsetWidth - keyTipElement.offsetWidth / 3;
     top = top + keyTipElement.offsetHeight / 2;
     break;
    default:
     top = top + popupElement.offsetHeight;
     left = left + popupElement.offsetWidth / 2 - keyTipElement.offsetWidth / 2;
     break;
   }
  else {
   top = top + popupElement.offsetHeight;
   left = left + popupElement.offsetWidth / 2 - keyTipElement.offsetWidth / 2;
  }
  return { top: top, left: left };
 },
 hide: function() {
  if (this.keyTipElement)
   ASPx.SetElementVisibility(this.keyTipElement, false);
 },
 hideChildAccessKeys: function () {
  this.hideAccessKeys(this.accessKeys);
 },
 hideAccessKeys: function (accessKeys) {
  if (accessKeys) {
   for (var i = 0, accessKey; accessKey = accessKeys[i]; i++) {
    if (accessKey.keyTipElement)
     accessKey.hide();
    accessKey.hideChildAccessKeys();
   }
  }
 },
 hideAll: function () {
  this.getRoot(this).hideChildAccessKeys();
 },
 getRoot: function (accessKey) {
  if (!accessKey.parent)
   return accessKey;
  return this.getRoot(accessKey.parent);
 }
});
var focusedElement = null;
function aspxOnElementFocused(evt) {
 evt = ASPx.Evt.GetEvent(evt);
 if(evt && evt.target)
  focusedElement = evt.target;
}
function _aspxInitializeFocus() {
 if(!ASPx.GetActiveElement())
  ASPx.Evt.AttachEventToDocument("focus", aspxOnElementFocused);
}
function _aspxGetFocusedElement() {
 var activeElement = ASPx.GetActiveElement();
 return activeElement ? activeElement : focusedElement;
}
CheckBoxCheckState = {
 Checked : "Checked",
 Unchecked : "Unchecked",
 Indeterminate : "Indeterminate"
};
CheckBoxInputKey = { 
 Checked : "C",
 Unchecked : "U",
 Indeterminate : "I"
};
var CheckableElementStateController = ASPx.CreateClass(null, {
 constructor: function(imageProperties) {
  this.checkBoxStates = [];
  this.imageProperties = imageProperties;
  this.customImageMarkerClassName = "dxcbCI";
 },
 GetValueByInputKey: function(inputKey) {
  return this.GetFirstValueBySecondValue("Value", "StateInputKey", inputKey);
 },
 GetInputKeyByValue: function(value) {
  return this.GetFirstValueBySecondValue("StateInputKey", "Value", value);
 },
 GetImagePropertiesNumByInputKey: function(value) {
  return this.GetFirstValueBySecondValue("ImagePropertiesNumber", "StateInputKey", value);
 },
 GetNextCheckBoxValue: function(currentValue, allowGrayed) {
  var currentInputKey = this.GetInputKeyByValue(currentValue);
  var nextInputKey = '';
  switch(currentInputKey) {
   case CheckBoxInputKey.Checked:
    nextInputKey = CheckBoxInputKey.Unchecked; break;
   case CheckBoxInputKey.Unchecked:
    nextInputKey = allowGrayed ? CheckBoxInputKey.Indeterminate : CheckBoxInputKey.Checked; break;
   case CheckBoxInputKey.Indeterminate:
    nextInputKey = CheckBoxInputKey.Checked; break;
  }
  return this.GetValueByInputKey(nextInputKey);
 },
 GetCheckStateByInputKey: function(inputKey) {
  switch(inputKey) {
   case CheckBoxInputKey.Checked: 
    return CheckBoxCheckState.Checked;
   case CheckBoxInputKey.Unchecked: 
    return CheckBoxCheckState.Unchecked;
   case CheckBoxInputKey.Indeterminate: 
    return CheckBoxCheckState.Indeterminate;
  }
 },
 GetValueByCheckState: function(checkState) {
  switch(checkState) {
   case CheckBoxCheckState.Checked: 
    return this.GetValueByInputKey(CheckBoxInputKey.Checked);
   case CheckBoxCheckState.Unchecked: 
    return this.GetValueByInputKey(CheckBoxInputKey.Unchecked);
   case CheckBoxCheckState.Indeterminate: 
    return this.GetValueByInputKey(CheckBoxInputKey.Indeterminate);
  }
 },
 GetFirstValueBySecondValue: function(firstValueName, secondValueName, secondValue) {
  return this.GetValueByFunc(firstValueName, 
   function(checkBoxState) { return checkBoxState[secondValueName] === secondValue; });
 },
 GetValueByFunc: function(valueName, func) {
  for(var i = 0; i < this.checkBoxStates.length; i++) {
   if(func(this.checkBoxStates[i]))
    return this.checkBoxStates[i][valueName];
  }  
 },
 AssignElementClassName: function(element, cssClassPropertyKey, disabledCssClassPropertyKey, assignedClassName) {
  var classNames = [ ];
  for(var i = 0; i < this.imageProperties[cssClassPropertyKey].length; i++) {
   classNames.push(this.imageProperties[disabledCssClassPropertyKey][i]);
   classNames.push(this.imageProperties[cssClassPropertyKey][i]);
  }
  var elementClassName = element.className;
  for(var i = 0; i < classNames.length; i++) {
   var className = classNames[i];
   var index = elementClassName.indexOf(className);
   if(index > -1)
    elementClassName = elementClassName.replace((index == 0 ? '' : ' ') + className, "");
  }
  elementClassName += " " + assignedClassName;
  element.className = elementClassName;
 },
 UpdateInternalCheckBoxDecoration: function(mainElement, inputKey, enabled) {
  var imagePropertiesNumber = this.GetImagePropertiesNumByInputKey(inputKey);
  for(var imagePropertyKey in this.imageProperties) {
   if(this.imageProperties.hasOwnProperty(imagePropertyKey)) {
    var propertyValue = this.imageProperties[imagePropertyKey][imagePropertiesNumber];
    propertyValue = propertyValue || !isNaN(propertyValue) ? propertyValue : "";
    switch(imagePropertyKey) {
     case "0" : mainElement.title = propertyValue; break;
     case "1" : mainElement.style.width = propertyValue + (propertyValue != "" ? "px" : ""); break;
     case "2" : mainElement.style.height = propertyValue + (propertyValue != "" ? "px" : ""); break;
    }
    if(enabled) {
     switch(imagePropertyKey) {
      case "3" : this.SetImageSrc(mainElement, propertyValue); break;
      case "4" : 
       this.AssignElementClassName(mainElement, "4", "8", propertyValue);
       break;
      case "5" : this.SetBackgroundPosition(mainElement, propertyValue, true); break;
      case "6" : this.SetBackgroundPosition(mainElement, propertyValue, false); break;
     }
    } else {
     switch(imagePropertyKey) {
      case "7" : this.SetImageSrc(mainElement, propertyValue); break;
      case "8" : 
       this.AssignElementClassName(mainElement, "4", "8", propertyValue);
       break;
      case "9" : this.SetBackgroundPosition(mainElement, propertyValue, true); break;
      case "10" : this.SetBackgroundPosition(mainElement, propertyValue, false); break;
     }
    }
   }
  }
 },
 SetImageSrc: function(mainElement, src) {
  if(src === ""){
   mainElement.style.backgroundImage = "";
   mainElement.style.backgroundPosition = "";
   ASPx.RemoveClassNameFromElement(mainElement, this.customImageMarkerClassName);
  }
  else{
   mainElement.style.backgroundImage = "url('" + src + "')";
   this.SetBackgroundPosition(mainElement, 0, true);
   this.SetBackgroundPosition(mainElement, 0, false);
   ASPx.AddClassNameToElement(mainElement, this.customImageMarkerClassName);
  }
 },
 SetBackgroundPosition: function(element, value, isX) {
  if(value === "") {
   element.style.backgroundPosition = value;
   return;
  }
  if(element.style.backgroundPosition === "")
   element.style.backgroundPosition = isX ? "-" + value.toString() + "px 0px" : "0px -" + value.toString() + "px";
  else {
   var position = element.style.backgroundPosition.split(' ');
   element.style.backgroundPosition = isX ? '-' + value.toString() + "px " + position[1] :  position[0] + " -" + value.toString() + "px";
  }
 },
 AddState: function(value, stateInputKey, imagePropertiesNumber) {
  this.checkBoxStates.push({
   "Value" : value, 
   "StateInputKey" : stateInputKey, 
   "ImagePropertiesNumber" : imagePropertiesNumber
  });
 },
 GetAriaCheckedValue: function(state) {
  switch(state) {
   case ASPx.CheckBoxCheckState.Checked: return "true";
   case ASPx.CheckBoxCheckState.Unchecked: return "false";
   case ASPx.CheckBoxCheckState.Indeterminate: return "mixed";
   default: return "";
  }
 }
});
CheckableElementStateController.Create = function(imageProperties, valueChecked, valueUnchecked, valueGrayed, allowGrayed) {
 var stateController = new CheckableElementStateController(imageProperties);
 stateController.AddState(valueChecked, CheckBoxInputKey.Checked, 0);
 stateController.AddState(valueUnchecked, CheckBoxInputKey.Unchecked, 1);
 if(typeof(valueGrayed) != "undefined")
  stateController.AddState(valueGrayed, CheckBoxInputKey.Indeterminate, allowGrayed ? 2 : 1);
 stateController.allowGrayed = allowGrayed;
 return stateController;
};
var CheckableElementHelper = ASPx.CreateClass(null, {
 InternalCheckBoxInitialize: function(internalCheckBox) {
  this.AttachToMainElement(internalCheckBox);
  this.AttachToInputElement(internalCheckBox);
 },
 AttachToMainElement: function(internalCheckBox) {
  var instance = this;
  if(internalCheckBox.mainElement) {
    var toggleEvent = internalCheckBox.displaySwitch ? ASPx.TouchUIHelper.touchMouseDownEventName : "click";
    ASPx.Evt.AttachEventToElement(internalCheckBox.mainElement, toggleEvent,
    function (evt) {
     if(ASPx.Evt.IsRightButtonPressed(evt))
      return;
     instance.InvokeClick(internalCheckBox, evt);
     if(!internalCheckBox.disableCancelBubble)
      return ASPx.Evt.PreventEventAndBubble(evt);
    }
   );
   ASPx.Evt.AttachEventToElement(internalCheckBox.mainElement, "mousedown",
    function (evt) {
     internalCheckBox.Refocus();
    }
   );
   ASPx.Evt.PreventElementDragAndSelect(internalCheckBox.mainElement, true);
  }
 },
 AttachToInputElement: function(internalCheckBox) {
  var instance = this;
  if(internalCheckBox.inputElement && internalCheckBox.mainElement) {
   var checkableElement = internalCheckBox.accessibilityCompliant ? internalCheckBox.mainElement : internalCheckBox.inputElement;
   ASPx.Evt.AttachEventToElement(checkableElement, "focus",
    function (evt) { 
     if(!internalCheckBox.enabled)
      checkableElement.blur();
     else
      internalCheckBox.OnFocus();
    }
   );
   ASPx.Evt.AttachEventToElement(checkableElement, "blur", 
    function (evt) { 
     internalCheckBox.OnLostFocus();
    }
   );
   ASPx.Evt.AttachEventToElement(checkableElement, "keyup",
    function (evt) { 
     if(ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Space)
      instance.InvokeClick(internalCheckBox, evt);
    }
   );
   ASPx.Evt.AttachEventToElement(checkableElement, "keydown",
    function (evt) { 
     if(ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Space)
      return ASPx.Evt.PreventEvent(evt);
    }
   );
  }
 },
 IsKBSInputWrapperExist: function() {
  return ASPx.Browser.Opera || ASPx.Browser.WebKitFamily;
 },
 GetICBMainElementByInput: function(icbInputElement) {
  return this.IsKBSInputWrapperExist() ? icbInputElement.parentNode.parentNode : icbInputElement.parentNode;
 },
 RequirePreventFocus: function() { return false; },
 InvokeClick: function(internalCheckBox, evt) {
  if(internalCheckBox.enabled && !internalCheckBox.GetReadOnly()) {
   var inputElementValue = internalCheckBox.inputElement.value;
   var focusableElement = internalCheckBox.accessibilityCompliant ? internalCheckBox.mainElement : internalCheckBox.inputElement; 
   if(!this.RequirePreventFocus())
    focusableElement.focus();
   if(!ASPx.Browser.IE) 
    internalCheckBox.inputElement.value = inputElementValue;
   this.InvokeClickCore(internalCheckBox, evt);
   }
 },
 InvokeClickCore: function(internalCheckBox, evt) {
  internalCheckBox.OnClick(evt);
 }
});
CheckableElementHelper.Instance = new CheckableElementHelper();
var CheckBoxInternal = ASPx.CreateClass(null, {
 constructor: function(inputElement, stateController, allowGrayed, allowGrayedByClick, helper, container, storeValueInInput, key, disableCancelBubble,
  accessibilityCompliant, displaySwitch) {
  this.inputElement = inputElement;
  this.mainElement = helper.GetICBMainElementByInput(this.inputElement);
  this.name = (key ? key : this.inputElement.id) + CheckBoxInternal.GetICBMainElementPostfix();
  this.mainElement.id = this.name;
  this.stateController = stateController;
  this.container = container;
  this.allowGrayed = allowGrayed;
  this.allowGrayedByClick = allowGrayedByClick;
  this.autoSwitchEnabled = true;
  this.displaySwitch = displaySwitch;
  this.storeValueInInput = !!storeValueInInput;
  this.storedInputKey = !this.storeValueInInput ? this.inputElement.value : null;
  this.disableCancelBubble = !!disableCancelBubble;
  this.accessibilityCompliant = accessibilityCompliant;
  this.focusDecoration = null;
  this.focused = false;
  this.focusLocked = false;
  this.enabled = !this.mainElement.className.match(/dxWeb_\w+Disabled(\b|_)/);
  this.readOnly = false;
  this.preventFocus = helper.RequirePreventFocus();
  this.CheckedChanged = new ASPxClientEvent();
  this.Focus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  helper.InternalCheckBoxInitialize(this);
 },
 GetReadOnly: function() {
  return this.readOnly;
 },
 ChangeInputElementTabIndex: function() {  
  var changeMethod = this.enabled ? ASPx.Attr.RestoreTabIndexAttribute : ASPx.Attr.SaveTabIndexAttributeAndReset;
  changeMethod(this.inputElement);
 },
 CreateFocusDecoration: function(focusedStyle) {
   this.focusDecoration = new FocusedStyleDecoration(this);
   this.focusDecoration.AddStyle('F', focusedStyle[0], focusedStyle[1]);
   this.focusDecoration.AddPostfix("");
 },
 UpdateFocusDecoration: function() {
  this.focusDecoration.Update();
 },  
 StoreInputKey: function(inputKey) {
  if(this.storeValueInInput)
   this.inputElement.value = inputKey;
  else
   this.storedInputKey = inputKey;
 },
 GetStoredInputKey: function() {
  if(this.storeValueInInput)
   return this.inputElement.value;
  else
   return this.storedInputKey;
 },
 OnClick: function(e) {
  if(this.autoSwitchEnabled) {
   var currentValue = this.GetValue();
   var value = this.stateController.GetNextCheckBoxValue(currentValue, this.allowGrayedByClick && this.allowGrayed);
   this.SetValue(value);
  }
  this.CheckedChanged.FireEvent(this, e);
 },
 OnFocus: function() {
  if(!this.IsFocusLocked()) {
   this.focused = true;
   this.UpdateFocusDecoration();
   this.Focus.FireEvent(this, null);
  } else
   this.UnlockFocus();
 },
 OnLostFocus: function() {
  if(!this.IsFocusLocked()) {
   this.focused = false;
   this.UpdateFocusDecoration();
   this.LostFocus.FireEvent(this, null);
  }
 },
 Refocus: function() {
  if(this.preventFocus) return;
  if(this.focused) {
   this.LockFocus();
   this.inputElement.blur();
   if(ASPx.Browser.MacOSMobilePlatform) {
    window.setTimeout(function() {
     ASPx.SetFocus(this.inputElement);
    }, 100);
   } else {
    ASPx.SetFocus(this.inputElement);
   }
  }
 },
 LockFocus: function() {
  this.focusLocked = true;
 },
 UnlockFocus: function() {
  this.focusLocked = false;
 },
 IsFocusLocked: function() {
  if(!!ASPx.Attr.GetAttribute(this.mainElement, ASPx.Attr.GetTabIndexAttributeName()))
   return false;
  return this.focusLocked;
 },
 SetValue: function(value, force) {
  var currentValue = this.GetValue();
  if(currentValue !== value || force) {
   var newInputKey = this.stateController.GetInputKeyByValue(value);
   if(newInputKey) {
    this.StoreInputKey(newInputKey);   
    this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, newInputKey, this.enabled);
   }
  }
  if(this.accessibilityCompliant) {
   var state = this.GetCurrentCheckState();
   var value = this.stateController.GetAriaCheckedValue(state);
   if(this.mainElement.attributes["aria-checked"] !== undefined)
    this.mainElement.setAttribute("aria-checked", value); 
   if(this.mainElement.attributes["aria-selected"] !== undefined)
    this.mainElement.setAttribute("aria-selected", value); 
  }
 },
 GetValue: function() {
  return this.stateController.GetValueByInputKey(this.GetCurrentInputKey());
 },
 GetCurrentCheckState: function() {
  return this.stateController.GetCheckStateByInputKey(this.GetCurrentInputKey());
 },
 GetCurrentInputKey: function() {
  return this.GetStoredInputKey();
 },
 GetChecked: function() {
  return this.GetCurrentInputKey() === CheckBoxInputKey.Checked;
 },
 SetChecked: function(checked) {
  var newValue = this.stateController.GetValueByCheckState(checked ? CheckBoxCheckState.Checked : CheckBoxCheckState.Unchecked);
  this.SetValue(newValue);
 },
 SetEnabled: function(enabled) {
  if(this.enabled != enabled) {
   this.enabled = enabled;
   this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, this.GetCurrentInputKey(), this.enabled);
   this.ChangeInputElementTabIndex();
  }
 },
 GetEnabled: function() {
  return this.enabled;
 }
});
CheckBoxInternal.GetICBMainElementPostfix = function() {
 return "_D";
};
var CheckBoxInternalCollection = ASPx.CreateClass(CollectionBase, {
 constructor: function(imageProperties, allowGrayed, storeValueInInput, helper, disableCancelBubble, accessibilityCompliant) {
  this.constructor.prototype.constructor.call(this);
  this.stateController = allowGrayed 
   ? CheckableElementStateController.Create(imageProperties, CheckBoxInputKey.Checked, CheckBoxInputKey.Unchecked, CheckBoxInputKey.Indeterminate, true)
   : CheckableElementStateController.Create(imageProperties, CheckBoxInputKey.Checked, CheckBoxInputKey.Unchecked);
  this.helper = helper || CheckableElementHelper.Instance;
  this.storeValueInInput = !!storeValueInInput;
  this.disableCancelBubble = !!disableCancelBubble;
  this.accessibilityCompliant = accessibilityCompliant;
 },
 Add: function(key, inputElement, container) {
  this.Remove(key);
  var checkBox = this.CreateInternalCheckBox(key, inputElement, container);
  CollectionBase.prototype.Add.call(this, key, checkBox);
  return checkBox;
 },
 SetImageProperties: function(imageProperties) {
  this.stateController.imageProperties = imageProperties;
 },
 CreateInternalCheckBox: function(key, inputElement, container) {
  return new CheckBoxInternal(inputElement, this.stateController, this.stateController.allowGrayed, false, this.helper, container, 
   this.storeValueInInput, key, this.disableCancelBubble, this.accessibilityCompliant);
 }
});
var FocusedStyleDecoration = ASPx.CreateClass(null, {
 constructor: function(editor) {
  this.editor = editor;
  this.postfixList = [];
  this.styles = {};
  this.innerStyles = {};
 },
 AddPostfix: function(value) {
  this.postfixList.push(value);
 },
 AddStyle: function(key, className, cssText) {
  this.styles[key] = this.CreateRule(className, cssText);
  this.innerStyles[key] = this.CreateRule("", this.FilterInnerCss(cssText));
 },
 CreateRule: function(className, cssText) {
  return ASPx.Str.Trim(className + " " + ASPx.CreateImportantStyleRule(this.GetStyleSheet(), cssText));
 },
 GetStyleSheet: function() {
  return ASPx.GetCurrentStyleSheet();
 },
 FilterInnerCss: function(css) {
  return css.replace(/(border|background-image)[^:]*:[^;]+/gi, "");
 },
 Update: function() {
  for(var i = 0; i < this.postfixList.length; i++) {
   var postfix = this.postfixList[i];
   var inner = postfix.length > 0;
   var element = this.GetElementByPostfix(postfix);
   if(element)
    this.ApplyStyles(element, inner);
  }
 },
 GetElementByPostfix: function(postfix) {
  return ASPx.GetElementById(this.editor.name + postfix);
 },
 ApplyStyles: function(element, inner) {
  this.ApplyFocusedStyle(element, inner);
 },
 ApplyFocusedStyle: function(element, inner) {
  if(this.HasDecoration("F"))
   this.ApplyDecoration("F", element, inner, this.editor.focused);
 },
 HasDecoration: function(key) {
  return !!this.styles[key];
 },
 ApplyDecoration: function(key, element, inner, active) {
  var value = inner ? this.innerStyles[key] : this.styles[key];
  this.RemoveDecoration(element, value);
  if(active) {
   ASPx.AddClassNameToElement(element, value);
   if(ASPx.Browser.IE && ASPx.Browser.Version > 10 && element.border != null) 
    this.EnsureElementBorder(element);
  }
 },
 RemoveDecoration: function(element, value) {
  ASPx.RemoveClassNameFromElement(element, value);
  if(ASPx.Browser.IE && ASPx.Browser.MajorVersion >= 11)
   var dummy = element.offsetWidth; 
 },
 ApplyDecorationCore: function() {
 },
 EnsureElementBorder: function(element) {
  var border = parseInt(element.border) || 0;
  element.border = 1;
  element.border = border;
 }
});
var EditorStyleDecoration = ASPx.CreateClass(FocusedStyleDecoration, {
 constructor: function(editor) {
  this.constructor.prototype.constructor.call(this, editor);
  this.lockUpdate = false;
 },
 LockUpdate: function() {
  this.lockUpdate = true;
 },
 UnlockUpdate: function() {
  this.lockUpdate = false;
 },
 IsUpdateLocked: function() {
  return this.lockUpdate;
 },
 Update: function () {
  if(this.IsUpdateLocked())
   return;
  ASPx.FocusedStyleDecoration.prototype.Update.call(this);
 },
 ApplyStyles: function (element, inner) {
  this.ApplyInvalidStyle(element, inner);
  ASPx.FocusedStyleDecoration.prototype.ApplyStyles.call(this, element, inner);
 },
 ApplyInvalidStyle: function (element, inner) {
  if(this.HasDecoration("I")) {
   var isValid = this.editor.GetIsValid();
   this.ApplyDecoration("I", element, inner, !isValid);
  }
 }
});
var TextEditorStyleDecoration = ASPx.CreateClass(EditorStyleDecoration, {
 constructor: function(editor) {
  this.constructor.prototype.constructor.call(this, editor);
  this.nullTextClassName = "";
 },
 ApplyStyles: function(element, inner) {
  ASPx.EditorStyleDecoration.prototype.ApplyStyles.call(this, element, inner);
  this.ApplyNullTextStyle(element, inner);
 },
 ApplyNullTextStyle: function(element, inner) {
  if(!this.HasDecoration("N"))
   return;
  var apply = !this.editor.focused && this.editor.CanApplyNullTextDecoration();
  this.EnsureSpellcheckAttribute(element, apply);
  this.ApplyDecoration("N", element, inner, apply);
 },
 EnsureSpellcheckAttribute: function(element, apply) {
  if(apply)
   ASPx.Attr.ChangeAttribute(element, "spellcheck", "false");
  else
   ASPx.Attr.RestoreAttribute(element, "spellcheck");
 },
 ApplyNullTextClassName: function(active) {
  var nullTextClassName = this.GetNullTextClassName();
  var editorMainElement = this.editor.GetMainElement();
  if(active)
   ASPx.AddClassNameToElement(editorMainElement, nullTextClassName);
  else
   ASPx.RemoveClassNameFromElement(editorMainElement, nullTextClassName);
 },
 GetNullTextClassName: function() {
  if (!this.nullTextClassName)
   this.InitializeNullTextClassName();
  return this.nullTextClassName;
 },
 InitializeNullTextClassName: function() {
  var nullTextStyle = this.styles["N"];
  if (nullTextStyle) {
   var nullTextStyleClassNames = nullTextStyle.split(" ");
   for (var i = 0; i < nullTextStyleClassNames.length; i++)
    if (nullTextStyleClassNames[i].match("dxeNullText"))
     this.nullTextClassName = nullTextStyleClassNames[i];
  }
 }
});
var TouchUIHelper = {
 isGesture: false,
 isMouseEventFromScrolling: false,
 isNativeScrollingAllowed: true,
 clickSensetivity: 10,
 documentTouchHandlers: {},
 documentEventAttachingAllowed: true,
 msTouchDraggableClassName: "dxMSTouchDraggable",
 touchMouseDownEventName: ASPx.Browser.WebKitTouchUI ? "touchstart" : (ASPx.Browser.Edge && ASPx.Browser.MSTouchUI && window.PointerEvent ? "pointerdown" : "mousedown"),
 touchMouseUpEventName:   ASPx.Browser.WebKitTouchUI ? "touchend"   : (ASPx.Browser.Edge && ASPx.Browser.MSTouchUI && window.PointerEvent ? "pointerup" : "mouseup"),
 touchMouseMoveEventName: ASPx.Browser.WebKitTouchUI ? "touchmove"  : (ASPx.Browser.Edge && ASPx.Browser.MSTouchUI && window.PointerEvent ? "pointermove" : "mousemove"),
 isTouchEvent: function(evt) {
  if(!evt) return false;
  return ASPx.Browser.WebKitTouchUI && ASPx.IsExists(evt.changedTouches); 
 },
 isTouchEventName: function(eventName) {
  return ASPx.Browser.WebKitTouchUI && (eventName.indexOf("touch") > -1 || eventName.indexOf("gesture") > -1);
 },
 getEventX: function(evt) {
  if(ASPx.Browser.IE)
   return evt.pageX;
  var touchPoint = null;
  if(evt.changedTouches.length > 0)
   touchPoint = evt.changedTouches;
  else if(evt.targetTouches.length > 0)
   touchPoint = evt.targetTouches;
  return touchPoint ? touchPoint[0].pageX : 0;
 },
 getEventY: function(evt) { 
  if(ASPx.Browser.IE)
   return evt.pageY;
  var touchPoint = null;
  if(evt.changedTouches.length > 0)
   touchPoint = evt.changedTouches;
  else if(evt.targetTouches.length > 0)
   touchPoint = evt.targetTouches;
  return touchPoint ? touchPoint[0].pageY : 0;
 },
 getWebkitMajorVersion: function(){
  if(!this.webkitMajorVersion){
   var regExp = new RegExp("applewebkit/(\\d+)", "i");
   var matches = regExp.exec(ASPx.Browser.UserAgent);
   if(matches && matches.index >= 1)
    this.webkitMajorVersion = matches[1];
  }
  return this.webkitMajorVersion;
 },
 getIsLandscapeOrientation: function(){
  if(ASPx.Browser.MacOSMobilePlatform || ASPx.Browser.AndroidMobilePlatform)
   return Math.abs(window.orientation) == 90;
  return ASPx.GetDocumentClientWidth() > ASPx.GetDocumentClientHeight();
 },
 nativeScrollingSupported: function() {
  var allowedSafariVersion = ASPx.Browser.Version >= 5.1 && ASPx.Browser.Version < 8; 
  var webkitMajorVersion = this.getWebkitMajorVersion();
  var allowedWebKitVersion = webkitMajorVersion > 533 && webkitMajorVersion < 600;
  return (ASPx.Browser.MacOSMobilePlatform && (allowedSafariVersion || allowedWebKitVersion))
   || (ASPx.Browser.AndroidMobilePlatform && ASPx.Browser.PlaformMajorVersion >= 3) || (ASPx.Browser.MSTouchUI && (!ASPx.Browser.WindowsPhonePlatform || !ASPx.Browser.IE));
 },
 makeScrollableIfRequired: function(element, options) {
  if(ASPx.Browser.WebKitTouchUI && element) {
   var overflow = ASPx.GetCurrentStyle(element).overflow;
   if(element.tagName == "DIV" &&  overflow != "hidden" && overflow != "visible" ){
    return this.MakeScrollable(element);
   }
  }
 },
 preventScrollOnEvent: function(evt){
 },
 handleFastTapIfRequired: function(evt, action, preventCommonClickEvents) {
  if(ASPx.Browser.WebKitTouchUI && evt.type == 'touchstart' && action) {
   this.FastTapHelper.HandleFastTap(evt, action, preventCommonClickEvents);
   return true;
  }
  return false;
 },
 ensureDocumentSizesCorrect: function (){
  return (document.documentElement.clientWidth - document.documentElement.clientHeight) / (screen.width - screen.height) > 0;
 },
 ensureOrientationChanged: function(onOrientationChangedFunction){
  if(ASPxClientUtils.iOSPlatform || this.ensureDocumentSizesCorrect())
   onOrientationChangedFunction();
  else {
   window.setTimeout(function(){
    this.ensureOrientationChanged(onOrientationChangedFunction);
   }.aspxBind(this), 100);
  }
 },
 onEventAttachingToDocument: function(eventName, func){
  if(ASPx.Browser.MacOSMobilePlatform && this.isTouchEventName(eventName)) {
   if(!this.documentTouchHandlers[eventName])
    this.documentTouchHandlers[eventName] = [];
   this.documentTouchHandlers[eventName].push(func);
   return this.documentEventAttachingAllowed;
  }
  return true;
 },
 onEventDettachedFromDocument: function(eventName, func){
  if(ASPx.Browser.MacOSMobilePlatform && this.isTouchEventName(eventName)) {
   var handlers = this.documentTouchHandlers[eventName];
   if(handlers)
    ASPx.Data.ArrayRemove(handlers, func);
  }
 },
 processDocumentTouchEventHandlers: function(proc) {
  var touchEventNames = ["touchstart", "touchend", "touchmove", "gesturestart", "gestureend"];
  for(var i = 0; i < touchEventNames.length; i++) {
   var eventName = touchEventNames[i];
   var handlers = this.documentTouchHandlers[eventName];
   if(handlers) {
    for(var j = 0; j < handlers.length; j++) {
     proc(eventName,handlers[j]);
    }
   }
  }
 },
 removeDocumentTouchEventHandlers: function() {
  if(ASPx.Browser.MacOSMobilePlatform) {
   this.documentEventAttachingAllowed = false;
   this.processDocumentTouchEventHandlers(ASPx.Evt.DetachEventFromDocumentCore);
  }
 },
 restoreDocumentTouchEventHandlers: function () {
  if(ASPx.Browser.MacOSMobilePlatform) {
   this.documentEventAttachingAllowed = true;
   this.processDocumentTouchEventHandlers(ASPx.Evt.AttachEventToDocumentCore);
  }
 },
 IsNativeScrolling: function() {
  return TouchUIHelper.nativeScrollingSupported() && TouchUIHelper.isNativeScrollingAllowed;
 },
 pointerEnabled: !!(window.PointerEvent || window.MSPointerEvent),
 pointerDownEventName: window.PointerEvent ? "pointerdown" : "MSPointerDown",
 pointerUpEventName: window.PointerEvent ? "pointerup" : "MSPointerUp",
 pointerCancelEventName: window.PointerEvent ? "pointercancel" : "MSPointerCancel",
 pointerMoveEventName: window.PointerEvent ? "pointermove" : "MSPointerMove",
 pointerOverEventName: window.PointerEvent ? "pointerover" : "MSPointerOver",
 pointerOutEventName: window.PointerEvent ? "pointerout" : "MSPointerOut",
 pointerType: {
  Touch: (ASPx.Browser.IE && ASPx.Browser.Version == 10) ? 2 : "touch",
  Pen: (ASPx.Browser.IE && ASPx.Browser.Version == 10) ? 3 : "pen",
  Mouse: (ASPx.Browser.IE && ASPx.Browser.Version == 10) ? 4 : "mouse"
 },
 msGestureEnabled: !!(window.PointerEvent || window.MSPointerEvent) && typeof(MSGesture) != "undefined",
 msTouchCreateGesturesWrapper: function(element, onTap){
  if(!TouchUIHelper.msGestureEnabled) 
   return;
  var gesture = new MSGesture();
  gesture.target = element;
  ASPx.Evt.AttachEventToElement(element, TouchUIHelper.pointerDownEventName, function(evt){
   gesture.addPointer(evt.pointerId);
  });
  ASPx.Evt.AttachEventToElement(element, TouchUIHelper.pointerUpEventName, function(evt){
   gesture.stop();
  });
  if(onTap)
   ASPx.Evt.AttachEventToElement(element, "MSGestureTap", onTap);
  return gesture;
 },
 useLongTapHelper: function () {
  return ASPx.Browser.Safari && ASPx.Browser.TouchUI;
 },
 attachLongTapHandler: function(element, handler, onlyBubbling) {
  var timerID = -1;
  var timeout = 1000;
  var event = null;
  var preventClickEvent = false;
  var startX = -1;
  var startY = -1;
  var pixelLimit = 5;
  function onTouchMouseDown(evt) {
   abortWating();
   event = evt;
   startX = evt.pageX;
   startY = evt.pageY;
   preventClickEvent = false;
   timerID = window.setTimeout(onTimeout, timeout);
  }
  function onTouchMouseMove(evt) {
   if (!isUnderTouch())
    return;
   var shiftX = Math.abs(startX - evt.pageX),
    shiftY = Math.abs(startY - evt.pageY),
    maxShift = Math.max(shiftX, shiftY);
   if (maxShift > pixelLimit)
    abortWating();
  }
  function onTouchMouseUp(evt) {
   abortWating();
   if (preventClickEvent) {
    ASPx.Evt.PreventEventAndBubble(evt);
    preventClickEvent = false;
   }
  }
  function onTimeout() {
   handler(event);
   preventClickEvent = true;
   abortWatingInternal();
  }
  function isUnderTouch() {
   return timerID !== -1;
  }
  function abortWating() {
   if (isUnderTouch()) {
    window.clearTimeout(timerID);
    abortWatingInternal();
   }
  }
  function abortWatingInternal() {
   timerID = -1;
   event = null;
  }
  ASPx.Evt.AttachEventToElement(element, TouchUIHelper.touchMouseDownEventName, onTouchMouseDown, onlyBubbling);
  ASPx.Evt.AttachEventToElement(element, TouchUIHelper.touchMouseMoveEventName, onTouchMouseMove, onlyBubbling);
  ASPx.Evt.AttachEventToElement(element, TouchUIHelper.touchMouseUpEventName, onTouchMouseUp, onlyBubbling);
  element.style["-webkit-user-select"] = "none";
  return function () {
   ASPx.Evt.DetachEventFromElement(element, TouchUIHelper.touchMouseDownEventName, onTouchMouseDown);
   ASPx.Evt.DetachEventFromElement(element, TouchUIHelper.touchMouseMoveEventName, onTouchMouseMove);
   ASPx.Evt.DetachEventFromElement(element, TouchUIHelper.touchMouseUpEventName, onTouchMouseUp);
   element.style["-webkit-user-select"] = "";
  };
 }
};
var CacheHelper = {};
CacheHelper.GetCachedValueCore = function(obj, key, func, cacheObj, fillValueMethod) {
 if(!cacheObj)
  cacheObj = obj;
 if(!cacheObj.cache)
  cacheObj.cache = {};
 if(!key) 
  key = "default";
 fillValueMethod(obj, key, func, cacheObj);
 return cacheObj.cache[key];
};
CacheHelper.GetCachedValue = function(obj, key, func, cacheObj) {
 return CacheHelper.GetCachedValueCore(obj, key, func, cacheObj, 
  function(obj, key, func, cacheObj) {
   if(!ASPx.IsExists(cacheObj.cache[key]))
    cacheObj.cache[key] = func.apply(obj, []);
  });
};
CacheHelper.GetCachedElement = function(obj, key, func, cacheObj) {
 return CacheHelper.GetCachedValueCore(obj, key, func, cacheObj, 
  function(obj, key, func, cacheObj) {
   if(!ASPx.IsValidElement(cacheObj.cache[key]))
    cacheObj.cache[key] = func.apply(obj, []);
  });
};
CacheHelper.GetCachedElements = function(obj, key, func, cacheObj) {
 return CacheHelper.GetCachedValueCore(obj, key, func, cacheObj, 
  function(obj, key, func, cacheObj) {
   if(!ASPx.IsValidElements(cacheObj.cache[key])){
    var elements = func.apply(obj, []);
    if(!Ident.IsArray(elements))
     elements = [elements];
    cacheObj.cache[key] = elements;
   }
  });
};
CacheHelper.GetCachedElementById = function(obj, id, cacheObj) {
 return CacheHelper.GetCachedElement(obj, id, function() { return ASPx.GetElementById(id); }, cacheObj);
};
CacheHelper.GetCachedChildById = function(obj, parent, id, cacheObj) {
 return CacheHelper.GetCachedElement(obj, id, function() { return ASPx.GetChildById(parent, id); }, cacheObj);
};
CacheHelper.DropCachedValue = function(cacheObj, key) {
 cacheObj.cache[key] = null;
};  
CacheHelper.DropCache = function(cacheObj) {
 cacheObj.cache = null;
};  
var DomObserver = ASPx.CreateClass(null, {
 constructor: function() {
  this.items = { };
 },
 subscribe: function(elementID, callbackFunc) {
  var item = this.items[elementID];
  if(item)
   this.unsubscribe(elementID);
  item = {
   elementID: elementID,
   callbackFunc: callbackFunc,
   pauseCount: 0
  };
  this.prepareItem(item);
  this.items[elementID] = item;
 },
 prepareItem: function(item) {
 },
 unsubscribe: function(elementID) {
  this.items[elementID] = null;
 },
 getItemElement: function(item) {
  var element = this.getElementById(item.elementID);
  if(element)
   return element;
  this.unsubscribe(item.elementID);
  return null;
 },
 getElementById: function(elementID) {
  var element = document.getElementById(elementID);
  return element && ASPx.IsValidElement(element) ? element : null;
 },
 pause: function(element, includeSubtree) {
  this.changeItemsState(element, includeSubtree, true);
 },
 resume: function(element, includeSubtree) {
  this.changeItemsState(element, includeSubtree, false);
 },
 forEachItem: function(processFunc, context) {
  context = context || this;
  for(var itemName in this.items) {
   if(!this.items.hasOwnProperty(itemName))
    continue;
   var item = this.items[itemName];
   if(item) {
    var needBreak = processFunc.call(context, item);
    if(needBreak)
     return;
   }
  }
 },
 changeItemsState: function(element, includeSubtree, pause) {
  this.forEachItem(function(item) {
   if(!element)
    this.changeItemState(item, pause);
   else {
    var itemElement = this.getItemElement(item);
    if(itemElement && (element == itemElement || (includeSubtree && ASPx.GetIsParent(element, itemElement)))) {
     this.changeItemState(item, pause);
     if(!includeSubtree)
      return true;
    }
   }
  }.aspxBind(this));
 },
 changeItemState: function(item, pause) {
  if(pause)
   this.pauseItem(item);
  else
   this.resumeItem(item);
 },
 pauseItem: function(item) {
  item.paused = true;
  item.pauseCount++;
 },
 resumeItem: function(item) {
  if(item.pauseCount > 0) {
   if(item.pauseCount == 1)
    item.paused = false;
   item.pauseCount--;
  }
 }
});
DomObserver.IsMutationObserverAvailable = function() {
 return !!window.MutationObserver;
};
var TimerObserver = ASPx.CreateClass(DomObserver, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.timerID = -1;
  this.observationTimeout = 300;
 },
 subscribe: function(elementID, callbackFunc) {
  DomObserver.prototype.subscribe.call(this, elementID, callbackFunc);
  if(!this.isActivated())
   this.startObserving();
 },
 isActivated: function() {
  return this.timerID !== -1;
 },
 startObserving: function() {
  if(this.isActivated())
   window.clearTimeout(this.timerID);
  this.timerID = window.setTimeout(this.onTimeout, this.observationTimeout);
 },
 onTimeout: function() {
  var observer = _aspxGetDomObserver();
  observer.doObserve();
  observer.startObserving();
 },
 doObserve: function() {
  if(!ASPx.documentLoaded) return;
  this.forEachItem(function(item) {
   if(!item.paused)
    this.doObserveForItem(item);
  }.aspxBind(this));
 },
 doObserveForItem: function(item) {
  var element = this.getItemElement(item);
  if(element)
   item.callbackFunc.call(this, element);
 }
});
var MutationObserver = ASPx.CreateClass(DomObserver, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.callbackTimeout = 10;
 },
 prepareItem: function(item) {
  item.callbackTimerID = -1;
  var target = this.getElementById(item.elementID);
  if(!target)
   return;
  var observerCallbackFunc = function() {
   if(item.callbackTimerID === -1) {
    var timeoutHander = function() {
     item.callbackTimerID = -1;
     item.callbackFunc.call(this, target);
    }.aspxBind(this);
    item.callbackTimerID = window.setTimeout(timeoutHander, this.callbackTimeout);
   }
  }.aspxBind(this);
  var observer = new window.MutationObserver(observerCallbackFunc);
  var config = { attributes: true, childList: true, characterData: true, subtree: true };
  observer.observe(target, config);
  item.observer = observer;
  item.config = config;
 },
 unsubscribe: function(elementID) {
  var item = this.items[elementID];
  if(item) {
   item.observer.disconnect();
   item.observer = null;
  }
  DomObserver.prototype.unsubscribe.call(this, elementID);
 },
 pauseItem: function(item) {
  DomObserver.prototype.pauseItem.call(this, item);
  item.observer.disconnect();
 },
 resumeItem: function(item) {
  DomObserver.prototype.resumeItem.call(this, item);
  if(!item.paused) {
   var target = this.getItemElement(item);
   if(target)
    item.observer.observe(target, item.config);
  }
 }
});
var domObserver = null;
function _aspxGetDomObserver() {
 if(domObserver == null)
  domObserver = DomObserver.IsMutationObserverAvailable() ? new MutationObserver() : new TimerObserver();
 return domObserver;
}
var ControlUpdateWatcher = ASPx.CreateClass(null, {
 constructor: function() {
  this.helpers = { };
  this.clearLockerTimerID = -1;
  this.clearLockerTimerDelay = 15;
  this.postProcessing = false;
  this.init();
 },
 init: function() {
  var postHandler = aspxGetPostHandler();
  postHandler.Post.AddHandler(this.OnPost, this);
 },
 Add: function(helper) {
  this.helpers[helper.GetName()] = helper;
 },
 CanSendCallback: function(dxCallbackOwner, arg) {
  this.LockConfirmOnBeforeWindowUnload();
  var modifiedHelpers = this.FilterModifiedHelpersByDXCallbackOwner(this.GetModifiedHelpers(), dxCallbackOwner, arg);
  if(modifiedHelpers.length === 0) return true;
  var modifiedHelpersInfo = this.GetToConfirmAndToResetLists(modifiedHelpers, dxCallbackOwner.name);
  if(!modifiedHelpersInfo) return true;
  if(modifiedHelpersInfo.toConfirm.length === 0) {
   this.ResetClientChanges(modifiedHelpersInfo.toReset);
   return true;
  }
  var helper = modifiedHelpersInfo.toConfirm[0];
  if(!confirm(helper.GetConfirmUpdateText()))
   return false;
  this.ResetClientChanges(modifiedHelpersInfo.toReset);
  return true;
 },
 OnPost: function(s, e) {
  if(this.isDxCallback(e))
   return;
  this.postProcessing = true;
  this.LockConfirmOnBeforeWindowUnload();
  var modifiedHelpersInfo = this.GetModifedHelpersInfo(e);
  if(!modifiedHelpersInfo)
   return;
  if(modifiedHelpersInfo.toConfirm.length === 0) {
   this.ResetClientChanges(modifiedHelpersInfo.toReset);
   return;
  }
  var helper = modifiedHelpersInfo.toConfirm[0];
  if(!confirm(helper.GetConfirmUpdateText())) {
   e.cancel = true;
   this.finishPostProcessing();
  }
  if(!e.cancel)
   this.ResetClientChanges(modifiedHelpersInfo.toReset);
 },
 isDxCallback: function(e) {
  return e.isDXCallback || this.isInternalUploadControlCallback();
 },
 isInternalUploadControlCallback: function() {
  var isInCallback = false;
  for(var key in this.helpers) {
   if(this.helpers.hasOwnProperty(key)) {
    var helper = this.helpers[key];
    isInCallback = isInCallback || helper.isInUploadCallback();
   }
  }
  return isInCallback;
 },
 finishPostProcessing: function() {
  this.postProcessing = false;
 },
 GetModifedHelpersInfo: function(e) {
  var modifiedHelpers = this.FilterModifiedHelpers(this.GetModifiedHelpers(), e);
  if(modifiedHelpers.length === 0) return;
  return this.GetToConfirmAndToResetLists(modifiedHelpers, e && e.ownerID);
 },
 GetToConfirmAndToResetLists: function(modifiedHelpers, ownerID) {
  var resetList = [ ];
  var confirmList = [ ];
  for(var i = 0; i < modifiedHelpers.length; i++) {
   var helper = modifiedHelpers[i];
   if(!helper.GetConfirmUpdateText()) { 
    resetList.push(helper);
    continue;
   }
   if(helper.CanShowConfirm(ownerID)) { 
    resetList.push(helper);
    confirmList.push(helper);
   }
  }
  return { toConfirm: confirmList, toReset: resetList };
 },
 FilterModifiedHelpers: function(modifiedHelpers, e) {
  if(modifiedHelpers.length === 0)
   return [ ];
  if(this.RequireProcessUpdatePanelCallback(e))
   return this.FilterModifiedHelpersByUpdatePanels(modifiedHelpers);
  if(this.postProcessing)
   return this.FilterModifiedHelpersByPostback(modifiedHelpers);
  return modifiedHelpers;
 },
 FilterModifiedHelpersByDXCallbackOwner: function(modifiedHelpers, dxCallbackOwner, arg) {
  var result = [ ];
  for(var i = 0; i < modifiedHelpers.length; i++) {
   var helper = modifiedHelpers[i];
   if(helper.NeedConfirmOnCallback(dxCallbackOwner, arg))
    result.push(helper);
  }
  return result;
 },
 FilterModifiedHelpersByUpdatePanels: function(modifiedHelpers) {
  var result = [ ];
  var updatePanels = this.GetUpdatePanelsWaitedForUpdate();
  for(var i = 0; i < updatePanels.length; i++) {
   var panelID = updatePanels[i].replace(/\$/g, "_");
   var panel = ASPx.GetElementById(panelID);
   if(!panel) continue;
   for(var j = 0; j < modifiedHelpers.length; j++) {
    var helper = modifiedHelpers[j];
    if(ASPx.GetIsParent(panel, helper.GetControlMainElement()))
     result.push(helper);
   }
  }
  return result;
 },
 FilterModifiedHelpersByPostback: function(modifiedHelpers) {
  var result = [ ];
  for(var i = 0; i < modifiedHelpers.length; i++) {
   var helper = modifiedHelpers[i];
   if(helper.NeedConfirmOnPostback())
    result.push(helper);
  }
  return result;
 },
 RequireProcessUpdatePanelCallback: function(e) {
  var rManager = this.GetMSRequestManager();
  if(rManager && e && e.isMSAjaxCallback)
   return rManager._postBackSettings.async;
  return false;
 },
 GetUpdatePanelsWaitedForUpdate: function() {
  var rManager = this.GetMSRequestManager();
  if(!rManager) return [ ];
  var panelUniqueIDs = rManager._postBackSettings.panelsToUpdate || [ ];
  var panelClientIDs = [ ];
  for(var i = 0; i < panelUniqueIDs.length; i++) {
   var index = ASPx.Data.ArrayIndexOf(rManager._updatePanelIDs, panelUniqueIDs[i]);
   if(index >= 0)
    panelClientIDs.push(rManager._updatePanelClientIDs[index]);
  }
  return panelClientIDs;
 },
 GetMSRequestManager: function() {
  return ASPx.GetMSAjaxRequestManager();
 },
 GetModifiedHelpers: function() {
  var result = [ ];
  for(var key in this.helpers) { 
   if(this.helpers.hasOwnProperty(key)) {
    var helper = this.helpers[key];
    if(helper.HasChanges())
     result.push(helper);
   }
  }
  return result;
 },
 ResetClientChanges: function(modifiedHelpers) {
  for(var i = 0; i < modifiedHelpers.length; i++)
   modifiedHelpers[i].ResetClientChanges();
 },
 GetConfirmUpdateMessage: function() {
  if(this.confirmOnWindowUnloadLocked) return;
  var modifiedHelpersInfo = this.GetModifedHelpersInfo();
  if(!modifiedHelpersInfo || modifiedHelpersInfo.toConfirm.length === 0) 
   return;
  var helper = modifiedHelpersInfo.toConfirm[0];
  return helper.GetConfirmUpdateText();
 },
 LockConfirmOnBeforeWindowUnload: function() {
  this.confirmOnWindowUnloadLocked = true;
  this.clearLockerTimerID = ASPx.Timer.ClearTimer(this.clearLockerTimerID);
  this.clearLockerTimerID = window.setTimeout(function() {
   this.confirmOnWindowUnloadLocked = false;
  }.aspxBind(this), this.clearLockerTimerDelay);
 },
 OnWindowBeforeUnload: function(e) {
  var confirmMessage = this.GetConfirmUpdateMessage();
  if(confirmMessage)
   e.returnValue = confirmMessage;
  this.finishPostProcessing();
  return confirmMessage;
 },
 OnWindowUnload: function(e) {
  if(this.confirmOnWindowUnloadLocked) return;
  var modifiedHelpersInfo = this.GetModifedHelpersInfo();
  if(!modifiedHelpersInfo) return;
  this.ResetClientChanges(modifiedHelpersInfo.toReset);
 },
 OnMouseDown: function(e) {
  if(ASPx.Browser.IE)
   this.PreventBeforeUnloadOnLinkClick(e);
 },
 OnFocusIn: function(e) {
  if(ASPx.Browser.IE)
   this.PreventBeforeUnloadOnLinkClick(e);
 },
 PreventBeforeUnloadOnLinkClick: function(e) {
  if(ASPx.GetObjectKeys(this.helpers).length == 0)
   return;
  var link = ASPx.GetParentByTagName(ASPx.Evt.GetEventSource(e), "A");
  if(!link || link.dxgvLinkClickHanlderAssigned)
   return;
  var url = ASPx.Attr.GetAttribute(link, "href");
  if(!url || url.indexOf("javascript:") < 0)
   return;
  ASPx.Evt.AttachEventToElement(link, "click", function(ev) { return ASPx.Evt.PreventEvent(ev); });
  link.dxgvLinkClickHanlderAssigned = true;
 }
});
ControlUpdateWatcher.Instance = null;
ControlUpdateWatcher.getInstance = function () {
 if (!ControlUpdateWatcher.Instance) {
  ControlUpdateWatcher.Instance = new ControlUpdateWatcher();
  ASPx.Evt.AttachEventToElement(window, "beforeunload", function(e) {
   return ControlUpdateWatcher.Instance.OnWindowBeforeUnload(e);
  });
  ASPx.Evt.AttachEventToElement(window, "unload", function(e) {
   ControlUpdateWatcher.Instance.OnWindowUnload(e);
  });
  ASPx.Evt.AttachEventToDocument("mousedown", function(e) {
   ControlUpdateWatcher.Instance.OnMouseDown(e);
  });
  ASPx.Evt.AttachEventToDocument("focusin", function(e) {
   ControlUpdateWatcher.Instance.OnFocusIn(e);
  });
 }
 return ControlUpdateWatcher.Instance;
};
var UpdateWatcherHelper = ASPx.CreateClass(null, {
 constructor: function(owner) {
  this.owner = owner;
  this.ownerWatcher = ControlUpdateWatcher.getInstance();
  this.ownerWatcher.Add(this);
 },
 GetName: function() {
  return this.owner.name;
 },
 GetControlMainElement: function() {
  return this.owner.GetMainElement();
 },
 GetControlParentForm: function(){
  return ASPx.GetParentByTagName(this.GetControlMainElement(), "FORM");
 },
 CanShowConfirm: function(requestOwnerID) {
  return true;
 },
 HasChanges: function() {
  return false;
 },
 GetConfirmUpdateText: function() {
  return "";
 },
 NeedConfirmOnCallback: function(dxCallbackOwner) {
  return true;
 },
 NeedConfirmOnPostback: function() {
  if(ASPx.IsUploadSubmitRequest)
   return !ASPx.IsUploadSubmitRequest(this.GetControlParentForm());
  return true;
 },
 ResetClientChanges: function() {
 },
 ConfirmOnCustomControlEvent: function() {
  var confirmMessage = this.GetConfirmUpdateText();
  if(confirmMessage)
   return confirm(confirmMessage);
  return false;
 },
 isInUploadCallback: function() {
  return false;
 }
});
var ControlTabIndexManager = ASPx.CreateClass(null, {
 constructor: function() {
  this.elementsWithChangedTabIndex = {};
 },
 getChangedElementsForControlId: function(id) {
  if(!this.elementsWithChangedTabIndex[id])
   this.elementsWithChangedTabIndex[id] = [];
  return this.elementsWithChangedTabIndex[id];
 },
 isElementWithChangedIndex: function(element) {
  for(var key in this.elementsWithChangedTabIndex)
   if(this.elementsWithChangedTabIndex.hasOwnProperty(key))
    if(this.elementsWithChangedTabIndex[key].indexOf(element) !== -1)
     return true;
  return false;
 },
 changeTabIndexAttribute: function(element, id) {
  var elements = this.getChangedElementsForControlId(id);
  ASPx.Attr.ChangeTabIndexAttribute(element);
  if(elements.indexOf(element) === -1)
   elements.push(element);
 },
 restoreTabIndexAttribute: function(element, id) {
  var elements = this.getChangedElementsForControlId(id),
   index = elements.indexOf(element);
  if(index !== -1) {
   elements.splice(index, 1);
   if(!this.isElementWithChangedIndex(element))
    ASPx.Attr.RestoreTabIndexAttribute(element);
  }
 }
});
ControlTabIndexManager.Instance = null;
ControlTabIndexManager.getInstance = function() {
 if(!ControlTabIndexManager.Instance)
  ControlTabIndexManager.Instance = new ControlTabIndexManager();
 return ControlTabIndexManager.Instance;
};
var ControlCallbackHandlersQueue = ASPx.CreateClass(null, {
 constructor: function (owner) {
  this.owner = owner;
  this.handlerInfos = [];
 },
 addCallbackHandler: function(handlerInfo) {
  this.handlerInfos.push(handlerInfo);
 },
 executeCallbacksHandlers: function() {
  for(var i = 0, handlerInfo; handlerInfo = this.handlerInfos[i]; i++)
   handlerInfo.handler.call(this.owner, handlerInfo.result);
  this.handlerInfos = [];
 }
});
var ControlCallbackQueueHelper = ASPx.CreateClass(null, {
 constructor: function (owner) {
  this.owner = owner;
  this.pendingCallbacks = [];
  this.receivedCallbacks = [];
  this.attachEvents();
 },
 showLoadingElements: function () {
  this.owner.ShowLoadingDiv();
  if (this.owner.IsCallbackAnimationEnabled())
   this.owner.StartBeginCallbackAnimation();
  else
   this.owner.ShowLoadingElementsInternal();
 },
 attachEvents: function () {
  this.owner.EndCallback.AddHandler(this.onEndCallback.aspxBind(this));
  this.owner.CallbackError.AddHandler(this.onCallbackError.aspxBind(this));
 },
 detachEvents: function () {
  this.owner.EndCallback.RemoveHandler(this.onEndCallback);
  this.owner.CallbackError.RemoveHandler(this.onCallbackError);
 },
 onCallbackError: function (owner, result) {
  this.sendErrorToChildControl(result);
 },
 ignoreDuplicates: function () {
  return true;
 },
 hasDuplicate: function (arg) {
  for (var i in this.pendingCallbacks) {
   if (this.pendingCallbacks[i].arg == arg && this.pendingCallbacks[i].state != ASPx.callbackState.aborted)
    return true;
  }
  return false;
 },
 getToken: function (halperContext, callbackInfo) {
  return {
   cancel: function () {
    if (callbackInfo.state == ASPx.callbackState.sent) {
     callbackInfo.state = ASPx.callbackState.aborted;
     halperContext.sendNext();
    }
    if (callbackInfo.state == ASPx.callbackState.inTurn)
     ASPx.Data.ArrayRemove(halperContext.pendingCallbacks, callbackInfo);
   },
   callbackId: -1
  };
 },
 sendCallback: function (arg, handlerContext, handler, commandName, onBeforeSend) {
  if (this.ignoreDuplicates() && this.hasDuplicate(arg))
   return false;
  var handlerContext = handlerContext || this.owner;
  var callbackInfo = {
   arg: arg,
   handlerContext: handlerContext,
   handler: handler || handlerContext.OnCallback,
   state: ASPx.callbackState.inTurn,
   callbackId: -1,
   onBeforeSend: onBeforeSend
  };
  this.pendingCallbacks.push(callbackInfo);
  if (!this.hasActiveCallback()) {
   this.createCallbackByCallbackInfo(callbackInfo, commandName);
  }
  return this.getToken(this, callbackInfo);
 },
 hasActiveCallback: function () {
  return this.getCallbacksInfoByState(ASPx.callbackState.sent).length > 0;
 },
 sendNext: function () {
  var nextCallbackInfo = this.getCallbacksInfoByState(ASPx.callbackState.inTurn)[0];
  if (nextCallbackInfo) {
   this.createCallbackByCallbackInfo(nextCallbackInfo);
   return nextCallbackInfo.callbackId;
  }
 },
 createCallbackByCallbackInfo: function(callbackInfo, commandName) {
  if(callbackInfo.onBeforeSend)
   callbackInfo.onBeforeSend();
  callbackInfo.callbackId = this.owner.CreateCallback(callbackInfo.arg, commandName);
  callbackInfo.state = ASPx.callbackState.sent;
 },
 onEndCallback: function () {
  if (!this.owner.isErrorOnCallback && this.hasPendingCallbacks()) {
   var curCallbackId;
   var curCallbackInfo;
   var handlerContext;
   for (var i in this.receivedCallbacks) {
    if(this.receivedCallbacks.hasOwnProperty(i)) {
     curCallbackId = this.receivedCallbacks[i];
     curCallbackInfo = this.getCallbackInfoById(curCallbackId);
     if (curCallbackInfo.state != ASPx.callbackState.aborted) {
      handlerContext = curCallbackInfo.handlerContext;
      if (handlerContext.OnEndCallback)
       handlerContext.OnEndCallback();
      this.sendNext();
     }
     ASPx.Data.ArrayRemove(this.pendingCallbacks, curCallbackInfo);
    }
   }
   ASPx.Data.ArrayClear(this.receivedCallbacks);
  }
 },
 hasPendingCallbacks: function () {
  return this.pendingCallbacks && this.pendingCallbacks.length && this.pendingCallbacks.length > 0;
 },
 processCallback: function (result, callbackId) {
  this.receivedCallbacks.push(callbackId);
  if (this.hasPendingCallbacks()) {
   var callbackInfo = this.getCallbackInfoById(callbackId);
   if (callbackInfo.state != ASPx.callbackState.aborted)
    callbackInfo.handler.call(callbackInfo.handlerContext, result);
  }
 },
 getCallbackInfoById: function (id) {
  for (var i in this.pendingCallbacks) {
   if (this.pendingCallbacks[i].callbackId == id)
    return this.pendingCallbacks[i];
  }
 },
 getCallbacksInfoByState: function (state) {
  var result = [];
  for (var i in this.pendingCallbacks) {
   if (this.pendingCallbacks[i].state == state)
    result.push(this.pendingCallbacks[i]);
  }
  return result;
 },
 sendErrorToChildControl: function (callbackObj) {
  if (!this.hasPendingCallbacks())
   return;
  var callbackInfo = this.getCallbackInfoById(callbackObj.callbackId || 0);
  if (!callbackInfo)
   return;
  var hasChildControlHandler = (callbackInfo.handlerContext != this.owner) && callbackInfo.handlerContext.OnCallbackError;
  if (hasChildControlHandler)
   callbackInfo.handlerContext.OnCallbackError.call(callbackInfo.handlerContext, callbackObj.message, callbackObj.data);
 }
});
var AccessibilityHelperBase = ASPx.CreateClass(null, {
 constructor: function(control) {
  this.control = control;
  this.timerID = -1;
  this.pronounceMessageTimeout = 500;
  this.activeItem = this.getItems()[0];
  this.pronounceIsStarted = false;
 },
 PronounceMessage: function(text, activeItemArgs, inactiveItemArgs, mainElementArgs, ownerMainElement) {   
  this.timerID = ASPx.Timer.ClearTimer(this.timerID);
  this.pronounceIsStarted = true;
  this.timerID = window.setTimeout(function() {
   this.PronounceMessageCore(text, activeItemArgs, inactiveItemArgs, mainElementArgs, ownerMainElement);
  }.aspxBind(this), this.getPronounceTimeout());
 },
 PronounceMessageCore: function(text, activeItemArgs, inactiveItemArgs, mainElementArgs, ownerMainElement) {
  if(!this.getItems())
   return;
  this.toogleItem();
  var mainElement = this.getMainElement();
  var activeItem = this.getItem(true);
  var inactiveItem = this.getItem();
  if(ASPx.Attr.GetAttribute(mainElement, "role") != "application")
   mainElementArgs = this.addArguments(mainElementArgs, { "aria-activedescendant" : activeItem.id });
  var messageAttrObj = {};
  var activeItemRole = ASPx.Attr.GetAttribute(activeItem, "role");
  var attrName = activeItemRole == "combobox" ? "aria-label" : "innerHtml";
  messageAttrObj[attrName] = ASPx.Str.EncodeHtml(text);
  activeItemArgs = this.addArguments(activeItemArgs, messageAttrObj);
  messageAttrObj[attrName] = "";
  inactiveItemArgs = this.addArguments(inactiveItemArgs, messageAttrObj);
  var errorTextElement = null;
  if(this.control.GetErrorCell()) {
   errorTextElement = this.getAriaExplanatoryTextManager().GetErrorTextElement();
   activeItemArgs = this.addArguments(activeItemArgs,   {"aria-invalid"  : !this.control.isValid ? "true" : "" });
   mainElementArgs = this.addArguments(mainElementArgs, { "aria-invalid" : "" });
   inactiveItemArgs = this.addArguments(inactiveItemArgs,  { "aria-invalid" : "" });
  }
  this.changeActivityAttributes(activeItem, activeItemArgs);
  if(errorTextElement) {
   this.getAriaExplanatoryTextManager().SetOrRemoveText([activeItem], errorTextElement, !this.control.isValid, false, true);
   this.getAriaExplanatoryTextManager().SetOrRemoveText([mainElement, inactiveItem], errorTextElement, false, false, false);
  }
  this.changeActivityAttributes(mainElement, mainElementArgs);
  if(!!ownerMainElement && ASPx.Attr.GetAttribute(ownerMainElement, "role") != "application")
   this.changeActivityAttributes(ownerMainElement, { "aria-activedescendant": activeItem.id });
  this.changeActivityAttributes(inactiveItem, inactiveItemArgs);
  this.pronounceIsStarted = false;
 },
 GetActiveElement: function(inputIsMainElement) {
  if(this.pronounceIsStarted) return null;
  var mainElement = inputIsMainElement ? this.control.GetInputElement() : this.getMainElement();
  var activeElementId = ASPx.Attr.GetAttribute(mainElement, 'aria-activedescendant');
  return activeElementId ? ASPx.GetElementById(activeElementId) : mainElement;
 },
 getMainElement: function() {
  if(!ASPx.IsExistsElement(this.mainElement))
   this.mainElement = this.control.GetAccessibilityAssistantElement();
  return this.mainElement;
 },
 getItems: function() {
  if(!ASPx.IsExistsElement(this.items))
   this.items = ASPx.GetChildElementNodes(this.getMainElement());
  return this.items;
 },
 getItem: function(isActive) {
  if(isActive)
   return this.activeItem;
  var items = this.getItems();
  return items[0] === this.activeItem ? items[1] : items[0];
 },
 getAriaExplanatoryTextManager: function() { return this.control.ariaExplanatoryTextManager; },
 getPronounceTimeout: function() { return this.pronounceMessageTimeout; },
 toogleItem: function() {
  this.activeItem = this.getItem();
 },
 addArguments: function(targetArgs, newArgs) {
  if(!targetArgs) targetArgs = { };
  for(var key in newArgs) {
   if(newArgs.hasOwnProperty(key) && !targetArgs.hasOwnProperty(key))
    targetArgs[key] = newArgs[key];
  }
  return targetArgs;
 },
 changeActivityAttributes: function(element, args) {
  if(!element)
   return;
  for(var key in args) {
   if(args.hasOwnProperty(key)) {
    var value = args[key];
    if(key == "innerHtml")
     ASPx.SetInnerHtml(element, value);
    else {
     var action = value !== "" ? ASPx.Attr.SetAttribute : ASPx.Attr.RemoveAttribute;
     action(element, key, value);
    }
   }
  }
 }
});
var AccessibilityPronouncer = ASPx.CreateClass(null, {
 constructor: function() {
  this.pronouncerId = "dxPronouncer";
  this.initialized = false;
  this.focusableMessageElement = null;
  this.messageElement = null;
  this.pronouncers = {
   live: new AccessibilityLivePronouncer(this),
   descendant: new AccessibilityDescendantPronouncer(this)
  };
 },
 Pronounce: function(args, type) {
  this.pronouncers[type].Pronounce(args);
 },
 EnsureInitialize: function() {
  if(!this.initialized)
   this.initialize();
 },
 RemoveState: function() {
  for(var pronouncer in this.pronouncers)
   if(this.pronouncers.hasOwnProperty(pronouncer))
    pronouncer.RemoveState();
 },
 RestoreControlState: function(type, mainElement) {
  this.pronouncers[type].RestoreControlState(mainElement);
 },
 RestoreElementsState: function(type, elements) {
  this.pronouncers[type].RestoreElementsState(elements);
 },
 RestoreElementState: function(type, element) {
  this.pronouncers[type].RestoreElementState(element);
 },
 initialize: function() {
  this.createFocusableMessageElement();
  this.createMessageElement();
  this.prepareFocusableMessageElement();
  this.setAttributesForKeyboardNavigation();
  this.initialized = true;
 },
 createFocusableMessageElement: function() {
  var focusableMessageElement = document.createElement("DIV");
  document.body.appendChild(focusableMessageElement);
  this.focusableMessageElement = focusableMessageElement;   
 },
 prepareFocusableMessageElement: function() {
  this.focusableMessageElement.className = "dxAIFFE";
 },
 setAttributesForKeyboardNavigation: function() {
  ASPx.Attr.Aria.SetApplicationRole(this.focusableMessageElement);
  ASPx.Attr.Aria.SetSilence(this.focusableMessageElement);
 },
 createMessageElement: function() {
  var messageElement = document.createElement("DIV");
  messageElement.id = this.pronouncerId;
  ASPx.Attr.SetAttribute(messageElement, "role", "note");
  this.focusableMessageElement.appendChild(messageElement);
  this.messageElement = messageElement;
 },
 getMessage: function(messagePartsArg) {
  var messageParts = messagePartsArg.filter(function(x) { return ASPx.IsExists(x); });
  return messageParts.join(", ");
 }
});
var AccessibilityPronouncerBase = ASPx.CreateClass(null, {
 constructor: function() {
  this.state = { };
 },
 Pronounce: function(args) {
  var messageElement = this.getMessageElement();
  ASPx.Attr.Aria.SetOrRemoveLabel(messageElement);
  ASPx.SetInnerHtml(messageElement, "");
  this.PronounceCore(args);
 },
 PronounceCore: function(args) { },
 SaveElementState: function(element) { 
  if(this.state[element.id])
   return;
  this.state[element.id] = {
   element: element,
   descendant: ASPx.Attr.GetAttribute(element, ASPx.Attr.Aria.descendant)
  };
 },
 RemoveState: function() {
  this.state = { };
 },
 RestoreControlState: function(mainElement) { 
  for(var elementInfo in this.state) {
   if(this.state.hasOwnProperty(elementInfo)) {
    var element = this.state[elementInfo].element;
    if(!mainElement || ASPx.GetIsParent(mainElement, element))
     this.RestoreElementState(element);
   }
  }
 },
 RestoreElementsState: function(elements) { 
  for(var i = 0; i < elements.length; i++)
   this.RestoreElementState(elements[i]);
 },
 RestoreElementState: function(element) {
  var elementState = this.state[element.id];
  if(!elementState)
   return;
  ASPx.Attr.Aria.SetOrRemoveDescendant(element, elementState.descendant);
  delete this.state[element.id];
 },
 getMessage: function(args) {
  return ASPx.AccessibilityPronouncer.getMessage(args.messageParts);
 },
 getMessageElement: function() {
  return ASPx.AccessibilityPronouncer.messageElement;
 },
 getFocusableMessageElement: function() {
   return ASPx.AccessibilityPronouncer.focusableMessageElement;
 }
});
var AccessibilityLivePronouncer = ASPx.CreateClass(AccessibilityPronouncerBase, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 PronounceCore: function(args) {
  var message = this.getMessage(args);
  var messageElement = this.getMessageElement();
  ASPx.Attr.SetAttribute(this.getFocusableMessageElement(), "aria-live", "assertive");
  ASPx.Attr.Aria.SetAtomic(this.getFocusableMessageElement(), "true");
  ASPx.SetInnerHtml(messageElement, ASPx.Str.EncodeHtml(message));
 }
});
var AccessibilityDescendantPronouncer = ASPx.CreateClass(AccessibilityPronouncerBase, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 PronounceCore: function(args) {
  var message = this.getMessage(args);
  var activeElement = ASPx.GetActiveElement();
  var messageElement = this.getMessageElement();
  this.SaveElementState(activeElement);
  ASPx.Attr.RemoveAttribute(this.getFocusableMessageElement(), "aria-live");
  ASPx.Attr.RemoveAttribute(this.getFocusableMessageElement(), "aria-atomic");
  ASPx.Attr.Aria.SetOrRemoveLabel(messageElement, message);
  ASPx.Attr.Aria.SetOrRemoveDescendant(activeElement, messageElement.id);
 }
});
ASPx.AccessibilityPronouncerType = {
 live: "live",
 descendant: "descendant"
};
ASPx.AccessibilityPronouncer = new AccessibilityPronouncer();
var RestoreFocusHelper = ASPx.CreateClass(null, {
 constructor: function() {
  this.excludedIDs = [ "DXCBtn" ]; 
  this.pronouncerType = ASPx.AccessibilityPronouncerType.live;
  this.callbackQueue = [];
  this.Initialize();
 },
 Initialize: function() {
  var that = this;
  ASPx.attachToLoad(function() {
   ASPxClientControl.GetControlCollection().BeginCallback.AddHandler(that.OnBeginCallback, that);
   ASPxClientControl.GetControlCollection().EndCallback.AddHandler(that.OnEndCallback, that);
  });
 },
 OnBeginCallback: function(s, e) {
  var control = e.control;
  if(!control.allowRestoreFocusOnCallbacks())
   return;
  control.accessibilityFocusTreeLine = this.getFocusTreeLine(control);
  var controlHasCallbackTreeLine = this.callbackQueueContainsTreeLine(control);
  this.pushTreeLineInfoIntoCallbackQueue(control);
  if(control.accessibilityFocusTreeLine && !controlHasCallbackTreeLine)
   control.SendMessageToAssistiveTechnology(this.getDefaultCallbackMessage());
 },
 OnEndCallback: function(s, e) {
  var control = e.control;
  if(!control.allowRestoreFocusOnCallbacks())
   return;
  var treeLineInfo = this.shiftTreeLineInfoFromCallbackQueue(control);
  if(treeLineInfo.queueLength == 0) {
   if(!control.accessibilityFocusTreeLine && treeLineInfo.treeLine)
    control.accessibilityFocusTreeLine = treeLineInfo.treeLine;
   var focusElement = this.findFocusElement(control);
   var focusIsManagerByPopupwindow = this.isFocusManagedByActivePopupWindow(focusElement);
   var focusIsManagedByControl = control.shouldPreventFocusRestoringOnCallback && control.shouldPreventFocusRestoringOnCallback();
   if(!focusIsManagerByPopupwindow && !focusIsManagedByControl)
    ASPx.AccessibilityUtils.SetFocusAccessible(focusElement);
   delete control.accessibilityFocusTreeLine;
  }
 },
 pushTreeLineInfoIntoCallbackQueue: function(control) {
  var controlTreeLine = control.accessibilityFocusTreeLine ? control.accessibilityFocusTreeLine.slice(0) : null;
  if(!this.callbackQueue[control.name])
   this.callbackQueue[control.name] = [];
  this.callbackQueue[control.name].push(controlTreeLine);
 },
 shiftTreeLineInfoFromCallbackQueue: function(control) {
  var treeLineInfo = { queueLength: 0, treeLine: null };
  var treeLines = this.callbackQueue[control.name];
  if(treeLines && treeLines.length > 0) {
   treeLineInfo.treeLine = treeLines.shift();
   var linesCount = treeLines.length;
   treeLineInfo.queueLength = linesCount;
   if(linesCount > 0 && !treeLines[0] && treeLineInfo.treeLine)
    treeLines[0] = treeLineInfo.treeLine.slice(0);
  }
  return treeLineInfo;
 },
 callbackQueueContainsTreeLine: function(control) {
  var treeLines = this.callbackQueue[control.name];
  if(!treeLines || treeLines.length == 0) 
   return false;
  if(treeLines[treeLines.length - 1])
   return true;
  return false;
 },
 getDefaultCallbackMessage: function() {
  return ASPx.AccessibilitySR.DefaultCallbackMessage;
 },
 isFocusManagedByActivePopupWindow: function(focusElement) {
  var popupControl = this.getActivePopupControl();
  if(!popupControl || popupControl.accessibleFocusElement)
   return false;
  this.initializePopupAccessibleFocusElement(popupControl, focusElement);
  return popupControl.setFocusOnCallback;
 },
 getActivePopupControl: function() {
  var activePopupWindow = ASPx.GetPopupControlCollection && ASPx.GetPopupControlCollection().GetCurrentActiveWindowElement();
  if(!activePopupWindow)
   return null;
  var popupInfo = ASPx.GetPopupControlCollection().GetPopupWindowFromID(activePopupWindow.id);
  return popupInfo.popupControl;
 },
 initializePopupAccessibleFocusElement: function(popupControl, focusElement) {
  if(popupControl.setFocusOnCallback)
   popupControl.accessibleFocusElement = focusElement;
  else {
   var parentControl = popupControl.GetParentControl();
   if(parentControl && parentControl.GetMainElement())
    popupControl.accessibleFocusElement = ASPx.FindFirstChildActionElement(parentControl.GetMainElement());
  }
 },
 getFocusTreeLine: function(control) {
  var element = ASPx.GetActiveElement();
  if(!ASPx.IsExistsElement(element))
   return null;
  var mainElement = control.GetMainElement();
  if(!ASPx.GetIsParent(mainElement, element)) {
   var treeInfo = this.findFocusedControlElement(mainElement, element);
   element = treeInfo.focusElement;
   mainElement = treeInfo.rootElement;
  }
  return this.getTreeLineCore(mainElement, element);
 },
 getTreeLineCore: function(mainElement, element) {
  if(!element) return null;
  treeLine = [ ];
  while(element) {
   treeLine.push({ 
    id: element.id,
    tagName: element.tagName,
    index: ASPx.Data.ArrayIndexOf(element.parentNode.childNodes, element)
   });
   if(element === mainElement || element === document.body)
    break;
   element = element.parentNode;
  }
  return treeLine;
 },
 findFocusedControlElement: function(mainElement, activeElement) {
  var element = null;
  var parentElement = mainElement;
  var focusedEditor = ASPx.IsExists(ASPx.GetFocusedEditor) ? ASPx.GetFocusedEditor() : null;
  if(focusedEditor && ASPx.GetIsParent(mainElement, focusedEditor.GetMainElement()))
   element = focusedEditor.GetFocusableInputElement();
  else {
   if(mainElement && activeElement) {
    var mainControl = ASPx.GetClientControlByElementID(mainElement.id);
    var parentControls = ASPx.GetParentClientControls(activeElement.id);
    for(var i = parentControls.length - 1; i > -1; i--) {   
     if(mainControl.name == parentControls[i].name) {
      element = activeElement;
      var rootIndex = i > 0 ? i - 1 : i;
      parentElement = parentControls[rootIndex].GetMainElement();
      if(!parentElement && parentControls[rootIndex].GetCurrentWindowElement)
       parentElement = parentControls[rootIndex].GetCurrentWindowElement();
      break;
     }
    }
   }
  }
  return { focusElement: element, rootElement: parentElement }; 
 },
 findFocusElement: function(control) {
  if(!control.accessibilityFocusTreeLine)
   return;
  var treeLine = control.accessibilityFocusTreeLine.slice(0);
  var focusElementParent = this.findFocusElementParentById(treeLine);
  if(!focusElementParent) 
   return;
  return this.findFocusElementFromDOMTree(treeLine, focusElementParent);
 },
 findFocusElementParentById: function(treeLine) {
  for(var i = 0; i < treeLine.length; i++) {
   var id = treeLine[i].id;
   if(!this.isValidId(id))
    continue;
   var element = document.getElementById(id);
   if(element) {
    treeLine.splice(i, treeLine.length - i);
    treeLine.reverse();
    return element;
   }
  }
  return null;
 },
 findFocusElementFromDOMTree: function(treeLine, focusElementParent) {
  var element = focusElementParent;
  for(var i = 0; i < treeLine.length; i++) {
   var info = treeLine[i];
   if(info.index >= element.childNodes.length) {
    element = element.childNodes.length > 0 ? element.childNodes[element.childNodes.length - 1] : null;
    return this.findNeighbourFocusElement(element, focusElementParent);
   }
   var child = element.childNodes[info.index];
   if(child.tagName !== info.tagName)
    return this.findNeighbourFocusElement(child, focusElementParent);
   element = child;
  }
  return element;
 },
 findNeighbourFocusElement: function(element, focusElementParent) {
  if(!element || !element.parentNode) return null;
  var neighbours = element.parentNode.childNodes;
  var indices = this.calcLeftRightIndices(ASPx.Data.ArrayIndexOf(neighbours, element), neighbours.length);
  for(var i = 0; i < indices.length; i++) {
   var index = indices[i];
   var actionElement = ASPx.FindFirstChildActionElement(neighbours[index]);
   if(actionElement)
    return actionElement;
  }
  if(element === focusElementParent)
   return null;
  return this.findNeighbourFocusElement(element.parentNode, focusElementParent);
 },
 calcLeftRightIndices: function(startIndex, count) {
  var indices = [ ];
  var incSides = [ 0, 0 ];
  var index = startIndex;
  for(var i = 0; i < count; i++) {
   indices.push(index);
   var even = i % 2 === 0;
   var nextIndex = this.calcNextIndex(startIndex, count, incSides, even);
   if(nextIndex < 0)
    nextIndex = this.calcNextIndex(startIndex, count, incSides, !even);
   index = nextIndex;
  }
  return indices;
 },
 calcNextIndex: function(startIndex, count, incSides, even) {
  var sideIndex = even ? 0 : 1;
  var inc = incSides[sideIndex];
  inc += even ? -1 : 1;
  var nextIndex = startIndex + inc;
  if(nextIndex >= 0 && nextIndex < count) {
   incSides[sideIndex] = inc;
   return nextIndex;
  }
  return -1;
 },
 isValidId: function(id) {
  return id && !this.isExcludedId(id);
 },
 isExcludedId: function(id) {
  var result = false;
  for(var i = 0; i < this.excludedIDs.length; i++) {
   if(id.indexOf(this.excludedIDs[i]) > -1) {
    result = true;
    break;
   }
  }
  return result;
 }
});
var EventStorage = ASPx.CreateClass(null, {
 constructor: function() {
  this.bag = { };
 },
 Save: function(e, data, overwrite) {
  var key = this.getEventKey(e);
  if(this.bag.hasOwnProperty(key) && !overwrite)
   return;
  this.bag[key] = data;
  window.setTimeout(function() { delete this.bag[key]; }.aspxBind(this), 100);
 },
 Load: function(e) {
  var key = this.getEventKey(e);
  return this.bag[key];
 },
 getEventKey: function(e) {
  if(ASPx.IsExists(e.timeStamp))
   return e.timeStamp.toString();
  var eventSource = ASPx.Evt.GetEventSource(e);
  var type = e.type.toString();
  return eventSource ? type + "_" + eventSource.uniqueID.toString() : type;
 }
});
ASPx.RestoreFocusHelper = new RestoreFocusHelper();
EventStorage.Instance = null;
EventStorage.getInstance = function() {
 if(!EventStorage.Instance)
  EventStorage.Instance = new EventStorage();
 return EventStorage.Instance;
};
var GetGlobalObject = function(objectName) {
 var fields = objectName.split('.');
 var obj = window[fields[0]];
 for(var i = 1; obj && i < fields.length; i++) {
  obj = obj[fields[i]];
 }
 return obj;
};
var GetExternalScriptProcessor = function() {
 return ASPx.ExternalScriptProcessor ? ASPx.ExternalScriptProcessor.getInstance() : null;
};
var SAVED_WIDTH_ATTR = "data-dx-ripple-saved-width";
var RIPPLE_FIXED_ROW_ATTR = "data-dx-ripple-locked";
var READ_ONLY_COMBOBOX_MARKER_CSS_CLASS = "dxICBReadonlyMarker";
var ThemesWithRipple = ['Material'];
var RippleHelper = {
 rippleTargetClassName: "dxRippleTarget",
 rippleTargetExternalClassName: "dxRippleTargetExternal",
 rippleContainerClassName: "dxRippleContainer",
 rippleClassName: "dxRipple",
 touchRadius: -1,
 isMobileExternalRipple: null,
 zoom: 1,
 Init: function() {
  if(this.getIsRippleFunctionalityEnabled()) {
   setTimeout(function() {
    this.calcTouchRadius();
   }.aspxBind(this), 0);
  }
 },
 calcTouchRadius: function() {
  var testBlock = document.createElement("DIV");
  ASPx.SetStyles(testBlock, {
   height: "1in",
   width: "1in",
   left: "-100%",
   top: "-100%",
   position: "absolute"
  });
  document.body.appendChild(testBlock);
  this.touchRadius = (1.8 / 2.54) * Math.max(testBlock.offsetWidth, testBlock.offsetHeight);
  document.body.removeChild(testBlock);
 },
 isRippleFunctionalityEnabled: null,
 checkRippleFunctionality: function() {
  if(ASPx.Browser.Safari && ASPx.Browser.Version <= 5.1)
   return false;
  for(var i = 0; i < ThemesWithRipple.length; i++) {
   var firstRippleThemeElement = document.querySelector("[class*='_" + ThemesWithRipple[i] + "']");
   if(firstRippleThemeElement)
    return true;
  }  
  return false;
 },
 ReInit: function() {
  this.isRippleFunctionalityEnabled = null;
  this.Init();
 },
 onDocumentMouseDown: function(evt) {
  if(RippleHelper.getIsRippleFunctionalityEnabled())
   RippleHelper.processMouseDown(evt);
 },
 getIsRippleFunctionalityEnabled: function() {
  if(!ASPx.IsExists(this.isRippleFunctionalityEnabled))
   this.isRippleFunctionalityEnabled = this.checkRippleFunctionality();
  return this.isRippleFunctionalityEnabled;
 },
   createTargetInfo: function(target) {
  return { 
   x: ASPx.GetAbsoluteX(target),
   y: ASPx.GetAbsoluteY(target),
   width: target.offsetWidth,
   height: target.offsetHeight,
   classNames: ASPx.GetClassNameList(target),
   getTarget: function() { return target; },
   getRect: function() { return {x: this.x, y: this.y, width: this.width, height: this.height }; }
  };
 },
 createEventInfo: function(evt) {
  return { x: this.getEventX(evt), y: this.getEventY(evt) };
 },
 processMouseDown: function(evt) {
  var evtSource = ASPx.Evt.GetEventSource(evt);
  var rippleTarget = this.getRippleTargetElement(evtSource);
  if(this.needToProcessRipple(rippleTarget, evtSource))
   this.processRipple(this.createTargetInfo(rippleTarget), this.createEventInfo(evt));
 },
 getRippleTargetElement: function(evtSource) {
  if(this.hasRippleMarker(evtSource))
   return evtSource;
  if(evtSource.tagName && evtSource.tagName.toLowerCase() == "input" && ASPx.ElementContainsCssClass(evtSource, "dxTI")) {
   var elements = ASPx.GetChildElementNodesByPredicate(evtSource.parentNode.parentNode, function(element) {
    return this.hasRippleMarker(element);
   }.aspxBind(this));
   return elements && elements[0];
  }
  return ASPx.GetParent(evtSource, function(element) {
   return this.hasRippleMarker(element);
  }.aspxBind(this));
 },
 hasRippleMarker: function(element) {
  if(!ASPx.IsExistsElement(element))
   return false;
  var computedStyles = window.getComputedStyle(element, ":before");
  if(ASPx.IsExists(computedStyles)) {
   var content = computedStyles.getPropertyValue("content");
   if(content.indexOf(this.rippleTargetExternalClassName) > -1) {
    ASPx.AddClassNameToElement(element, this.rippleTargetExternalClassName);
    return true;
   }
   return content.indexOf(this.rippleTargetClassName) > -1;
  }
  return false;
 },
 needToProcessRipple: function(rippleTarget, evtSource) {
  if(!rippleTarget || !ASPx.AnimationUtils)
   return false;
  var isClearButton = ASPx.ElementContainsCssClass(rippleTarget, "dxeButton") && rippleTarget.id && rippleTarget.id.indexOf("B-100") !== -1;
  var isEmptyCalendarDay = ASPx.ElementContainsCssClass(rippleTarget, "dxeCalendarDay") && ASPx.Str.Trim(rippleTarget.textContent) == "";
  var isReadonly = ASPx.ElementContainsCssClass(rippleTarget, READ_ONLY_COMBOBOX_MARKER_CSS_CLASS);
  var tempFixDisable = ASPx.ElementContainsCssClass(rippleTarget, "dxSwitcher") && ASPx.Browser.MacOSMobilePlatform;
  var rippleIsForbidden = isReadonly || isClearButton || isEmptyCalendarDay || ASPx.GetParentByPartialClassName(rippleTarget, "Disabled") ||
   ASPx.ElementContainsCssClass(rippleTarget, "dxgvBatchEditCell") || ASPx.ElementContainsCssClass(rippleTarget, "dxcvEditForm") ||
   ASPx.GetParentByPartialClassName(evtSource, "dxcvFocusedCell") || tempFixDisable;
  return !rippleIsForbidden;
 },
 hasBothOverflow: function(style) {
  return style.overflow == "scroll" || style.overflow == "auto" || style.overflow == "hidden";
 },
 hasOverflowX: function(style) {
  return style.overflowX == "scroll" || style.overflowX == "auto" || style.overflowX == "hidden";
 },
 hasOverflowY: function(style) {
  return style.overflowY == "scroll" || style.overflowY == "auto" || style.overflowY == "hidden";
 },
 getExternalRippleContainerSize: function(targetRect) {
  if(ASPx.Browser.MobileUI) {
   var origTouchRadius = this.getOriginTouchRadius();
   if(origTouchRadius < targetRect.width || origTouchRadius < targetRect.height)
    origTouchRadius = Math.max(targetRect.width, targetRect.height);
   return {x: targetRect.x + (targetRect.width - origTouchRadius) / 2, y: targetRect.y + (targetRect.height - origTouchRadius) / 2, width: origTouchRadius, height: origTouchRadius };
  }
  var result = { x: 0, y: 0, width: 0, height: 0 };
  var diff = targetRect.width - targetRect.height;
  if(diff > 0) {
   result.x = targetRect.x;
   result.y = targetRect.y - diff / 2;
   result.width = targetRect.width;
   result.height = targetRect.width;
  } else {
   result.x = targetRect.x + diff / 2;
   result.y = targetRect.y;
   result.width = targetRect.height;
   result.height = targetRect.height;
  }
  return result;
 },
 getInternalContainerSize: function(targetInfo) {
  var parentWithOverflow = RippleHelper.getParentWithOverflow(targetInfo.getTarget());
  if(!ASPx.IsExists(parentWithOverflow))
   return targetInfo;
  var parentWithOverflowStyle = ASPx.GetCurrentStyle(parentWithOverflow);
  var bothOverflow = this.hasBothOverflow(parentWithOverflowStyle);
  var overflowX = this.hasOverflowX(parentWithOverflowStyle);
  var overflowY = this.hasOverflowY(parentWithOverflowStyle);
  var parentRect = {
   x: ASPx.GetAbsoluteX(parentWithOverflow),
   y: ASPx.GetAbsoluteY(parentWithOverflow),
   width: parentWithOverflow.offsetWidth,
   height: parentWithOverflow.offsetHeight
  };
  return this.getInternalContainerSizeCore(targetInfo, parentRect, bothOverflow, overflowX, overflowY);
 },
 getInternalContainerSizeCore: function(targetRect, parentRect, bothOverflow, overflowX, overflowY) {
  var result = {};
  ASPx.Data.MergeHashTables(result, targetRect);
  if(bothOverflow || overflowX) {
   result.x = targetRect.x < parentRect.x ? parentRect.x : targetRect.x;
   if(targetRect.x + targetRect.width > parentRect.x + parentRect.width)
    result.width = parentRect.x + parentRect.width - targetRect.x;
   if(parentRect.x > targetRect.x)
    result.width -= (parentRect.x - targetRect.x);
  }
  if(bothOverflow || overflowY) {
   result.y = targetRect.y < parentRect.y ? parentRect.y : targetRect.y;
   if(targetRect.y + targetRect.height > parentRect.y + parentRect.height)
    result.height = parentRect.y + parentRect.height - targetRect.y;
   if(parentRect.y > targetRect.y)
    result.height -= (parentRect.y - targetRect.y);
  }
  return result;
 },
 calculateRippleContainerSize: function(targetInfo, isExternalRipple) {
  return isExternalRipple ? this.getExternalRippleContainerSize(targetInfo) : this.getInternalContainerSize(targetInfo);
 },
 getParentWithOverflow: function(rippleTarget) {
  var result = ASPx.GetParent(rippleTarget, function(element) {
   var elementStyle = ASPx.GetCurrentStyle(element);
   return this.hasBothOverflow(elementStyle) || this.hasOverflowX(elementStyle) || this.hasOverflowY(elementStyle);
  }.aspxBind(this));
  return result;
 },
 getDuration: function(targetInfo) {
  return this.IsExternalRipple(targetInfo) || ASPx.Browser.MobileUI ? 650 : 450;
 },
 createRippleTransition: function(container, rippleElement, radius, targetInfo) {
  var rippleSize = 2 * radius;
  var transitionEndIsAborted = true;
  var transitionProperties = {
   width: { from: 0, to: rippleSize, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "width", unit: "px" },
   height: { from: 0, to: rippleSize, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "height", unit: "px" },
   marginLeft: { from: 0, to: -rippleSize / 2, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "marginLeft", unit: "px" },
   marginTop: { from: 0, to: -rippleSize / 2, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "marginTop", unit: "px" },
   opacity: { from: 1, to: 0.05, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "opacity", unit: "%" }
  };
  var rippleTransition = ASPx.AnimationUtils.createMultipleAnimationTransition(rippleElement, {
   transition: ASPx.AnimationConstants.Transitions.RIPPLE,
   duration: this.getDuration(targetInfo),
   onComplete: function() {
    this.RemoveRippleContainer(container.parentElement);
    transitionEndIsAborted = false;
   }.bind(this)
  });
  rippleTransition.Start(transitionProperties);
  window.setTimeout(function() {
   if(transitionEndIsAborted)
    this.RemoveRippleContainer(container.parentElement);
  }.bind(this), 500);
 },
 calculateRadius: function(isExternalRipple, posX, posY, containerRect) {
  var radius = -1;
  if(isExternalRipple) {
   if(ASPx.Browser.MobileUI)
    radius = this.getOriginTouchRadius() / 2;
   else
    radius = Math.max(containerRect.height, containerRect.width);
  } else {
   var width1 = posX - containerRect.x;
   var width2 = containerRect.width - width1;
   var height1 = posY - containerRect.y;
   var height2 = containerRect.height - height1;
   var rippleWidth = Math.max(width1, width2);
   var rippleHeight = Math.max(height1, height2);
   radius = Math.sqrt(Math.pow(rippleHeight, 2) + Math.pow(rippleWidth, 2));
  }
  return radius;
 },
 createRippleElement: function(container, rippleCenter) {
  var rippleElement = document.createElement("DIV");
  rippleElement.className = this.rippleClassName;
  container.appendChild(rippleElement);
  ASPxClientUtils.SetAbsoluteX(rippleElement, rippleCenter.x);
  ASPxClientUtils.SetAbsoluteY(rippleElement, rippleCenter.y);
  return rippleElement;
 },
 processRipple: function(targetInfo, eventInfo) {
  this.initRippleProcess();
  var isExternalRipple = this.IsExternalRipple(targetInfo);
  var rippleCenter = this.getRippleCenter(targetInfo.getRect(), eventInfo, isExternalRipple);
  var container = this.createRippleContainer(targetInfo, isExternalRipple);
  var rippleElement = this.createRippleElement(container, rippleCenter);
  var radius = this.calculateRadius(isExternalRipple, rippleCenter.x, rippleCenter.y, this.getElementRect(container));
  this.createRippleTransition(container, rippleElement, radius, targetInfo);
 },
 initRippleProcess: function() {
  this.isMobileExternalRipple = null;
  this.zoom = screen.width / window.innerWidth;
 },
 getRippleCenter: function(targetInfo, eventInfo, isExternalRipple) {
  var posX = 0;
  var posY = 0;
  if(isExternalRipple) {
   posX = targetInfo.x + targetInfo.width / 2;
   posY = targetInfo.y + targetInfo.height / 2;
  } else {
   posX = eventInfo.x;
   posY = eventInfo.y;
  }
  return {x: posX, y: posY};
 },
 createRippleContainer: function(targetInfo, isExternalRipple) {
  var containerParent = targetInfo.getTarget();
  if(!containerParent)
   return;
  var containerTagName = containerParent.tagName == "TR" ? "TD" : "DIV";
  var container = document.createElement(containerTagName);
  container.className = this.rippleContainerClassName;
  if(containerParent.parentNode && containerParent.tagName == "IMG")
   containerParent = containerParent.parentNode;
  if(this.isARowInFixedLayoutTable(containerParent))
   this.lockFixedLayoutTableSizes(containerParent);
  containerParent.appendChild(container);
  if(isExternalRipple)
   container.style.borderRadius = "50%";
  var containerRect = this.calculateRippleContainerSize(targetInfo, isExternalRipple);
  this.assignContainerSettings(container, containerRect);
  return container;
 },
 isARowInFixedLayoutTable: function(containerParent) {
  if(containerParent.tagName !== "TR")
   return false;
  var parentTable = this.getParentTable(containerParent);
  return parentTable && ASPx.GetCurrentStyle(parentTable)["table-layout"] === "fixed";
 },
 processFirstRowOfFixedTable: function(containerRow, rowAction, cellAction) {
  var firstRow = this.getFirstRow(containerRow);
  rowAction(firstRow);
  var cells = ASPx.Data.CollectionToArray(firstRow.cells);
  cells.forEach(cellAction);
 },
 getParentTable: function(element) {
  var parentTable = element;
  while(parentTable && parentTable.tagName !== "TABLE")
   parentTable = parentTable.parentElement;
  return parentTable;
 },
 lockFixedLayoutTableSizes: function(containerRow) {
  var firstRow = this.getFirstRow(containerRow);
  if(this.incLockCount(firstRow) === 1) {
   var cells = ASPx.Data.CollectionToArray(firstRow.cells);
   var widths = cells.map(function(cell) { return cell.style.width; });
   var computedWidths = cells.map(function(cell) {
    if(ASPx.Browser.IE && ASPx.ElementHasCssClass(cell, "dxeCM"))
     return cell.offsetWidth + "px";
    return window.getComputedStyle(cell).width;
   });
   var fixWidth = function(cell, i) {
    if(ASPx.Attr.IsExistsAttribute(cell, SAVED_WIDTH_ATTR))
     return;
    if(widths[i])
     ASPx.Attr.SetAttribute(cell, SAVED_WIDTH_ATTR, widths[i]);
    cell.style.width = computedWidths[i];
   };
   cells.forEach(fixWidth);
  }
 }, 
 unlockFixedLayoutTableSizes: function(containerRow) {
  var firstRow = this.getFirstRow(containerRow);   
  if(this.decLockCount(firstRow) === 0) {
   var cells = ASPx.Data.CollectionToArray(firstRow.cells);
   var restoreState = function(cell) {
    if(ASPx.Attr.IsExistsAttribute(cell, SAVED_WIDTH_ATTR)) {
     cell.style.width = ASPx.Attr.GetAttribute(cell, SAVED_WIDTH_ATTR);
     ASPx.Attr.RemoveAttribute(cell, SAVED_WIDTH_ATTR);
    } else {
     cell.style.width = null;
    }
   };
   cells.forEach(restoreState);
  }
 },
 getFirstRow: function(containerRow) { return ASPx.GetChildByTagName(containerRow.parentElement, "TR", 0); },
 incLockCount: function(elem) { return this.changeLockCount(elem, 1); },
 decLockCount: function(elem) { return this.changeLockCount(elem, -1); },
 changeLockCount: function(elem, diff) {
  var lockCounter = this.getLockCount(elem);
  lockCounter += diff;
  lockCounter = Math.max(0, lockCounter);
  if(lockCounter === 0)
   ASPx.Attr.RemoveAttribute(elem, RIPPLE_FIXED_ROW_ATTR);
  else
   ASPx.Attr.SetAttribute(elem, RIPPLE_FIXED_ROW_ATTR, lockCounter);
  return lockCounter;
 },
 getLockCount: function(lockElement) {
  var attrValue = ASPx.Attr.GetAttribute(lockElement, RIPPLE_FIXED_ROW_ATTR);
  return parseInt(attrValue) || 0;
 },
 assignContainerSettings: function(container, containerRect) {
  var properties = {
   height: containerRect.height,
   width: containerRect.width,
   left: ASPx.PrepareClientPosForElement(containerRect.x, container, true),
   top: ASPx.PrepareClientPosForElement(containerRect.y, container, false)
  };
  if(ASPx.Browser.MobileUI)
   ASPx.Data.MergeHashTables(properties, {marginTop: 0, marginLeft: 0 });
  ASPx.SetStyles(container, properties, ASPx.Browser.MobileUI);
 },
 IsExternalRipple: function(targetInfo) {
  var hasExternalRippleClassName = ASPx.ElementContainsCssClass(targetInfo.getTarget(), this.rippleTargetExternalClassName);
  if(!ASPx.Browser.MobileUI)
   return hasExternalRippleClassName;
  return hasExternalRippleClassName || this.IsMobileExternalRipple(targetInfo);
 },
 IsMobileExternalRipple: function(targetInfo) {
  if(this.isMobileExternalRipple == null) {
   var originTouchRadius = this.getOriginTouchRadius();
   this.isMobileExternalRipple = ASPx.Browser.MobileUI && targetInfo.width < originTouchRadius && targetInfo.height < originTouchRadius;
  }
  return this.isMobileExternalRipple;
 },
 RemoveRippleContainer: function(element) {
  if(!element)
   return;
  var childs = ASPx.GetChildNodesByClassName(element, this.rippleContainerClassName);
  var rippleContainer = childs.length > 0 ? childs[0] : null;
  if(rippleContainer != null) {
   var containerParent = rippleContainer.parentNode;
   containerParent.removeChild(rippleContainer);
   if(this.isARowInFixedLayoutTable(containerParent))
    this.unlockFixedLayoutTableSizes(containerParent);
  }
 },
 getEventX: function(evt) {
  return ASPxClientUtils.GetEventX(evt);
 },
 getEventY: function(evt) {
  return ASPxClientUtils.GetEventY(evt);
 },
 getOriginTouchRadius: function() {
  return this.touchRadius / this.zoom;
 },
 getElementRect: function(element) {
  return { x: ASPx.GetAbsoluteX(element), y: ASPx.GetAbsoluteY(element), width: element.offsetWidth, height: element.offsetHeight };
 }
};
var AccessibilitySR = {
 AddStringResources: function(stringResourcesObj) {
  if(stringResourcesObj) {
   for(var key in stringResourcesObj)
    if(stringResourcesObj.hasOwnProperty(key))
     this[key] = stringResourcesObj[key];
  }
 }
};
ASPx.CollectionBase = CollectionBase;
ASPx.FunctionIsInCallstack = _aspxFunctionIsInCallstack;
ASPx.RaisePostHandlerOnPost = aspxRaisePostHandlerOnPost;
ASPx.GetPostHandler = aspxGetPostHandler;
ASPx.ProcessScriptsAndLinks = _aspxProcessScriptsAndLinks;
ASPx.InitializeLinks = _aspxInitializeLinks;
ASPx.InitializeScripts = _aspxInitializeScripts;
ASPx.RunStartupScripts = _aspxRunStartupScripts;
ASPx.IsStartupScriptsRunning = _aspxIsStartupScriptsRunning;
ASPx.AddScriptsRestartHandler = _aspxAddScriptsRestartHandler;
ASPx.GetFocusedElement = _aspxGetFocusedElement;
ASPx.GetDomObserver = _aspxGetDomObserver;
ASPx.CacheHelper = CacheHelper;
ASPx.ControlTree = ControlTree;
ASPx.ControlAdjuster = ControlAdjuster;
ASPx.GetControlAdjuster = GetControlAdjuster;
ASPx.ControlCallbackHandlersQueue = ControlCallbackHandlersQueue;
ASPx.ResourceManager = ResourceManager;
ASPx.UpdateWatcherHelper = UpdateWatcherHelper;
ASPx.EventStorage = EventStorage;
ASPx.GetGlobalObject = GetGlobalObject;
ASPx.GetExternalScriptProcessor = GetExternalScriptProcessor;
ASPx.CheckBoxCheckState = CheckBoxCheckState;
ASPx.CheckBoxInputKey = CheckBoxInputKey;
ASPx.CheckableElementStateController = CheckableElementStateController;
ASPx.CheckableElementHelper = CheckableElementHelper;
ASPx.CheckBoxInternal = CheckBoxInternal;
ASPx.CheckBoxInternalCollection = CheckBoxInternalCollection;
ASPx.ControlCallbackQueueHelper = ControlCallbackQueueHelper;
ASPx.FocusedStyleDecoration = FocusedStyleDecoration;
ASPx.EditorStyleDecoration = EditorStyleDecoration;
ASPx.TextEditorStyleDecoration = TextEditorStyleDecoration;
ASPx.AccessibilitySR = AccessibilitySR;
ASPx.KbdHelper = KbdHelper;
ASPx.AccessKeysHelper = AccessKeysHelper;
ASPx.AccessKey = AccessKey;
ASPx.IFrameHelper = IFrameHelper;
ASPx.Ident = Ident;
ASPx.TouchUIHelper = TouchUIHelper;
ASPx.ControlUpdateWatcher = ControlUpdateWatcher;
ASPx.ControlTabIndexManager = ControlTabIndexManager;
ASPx.AccessibilityHelperBase = AccessibilityHelperBase;
ASPx.RippleHelper = RippleHelper;
ASPx.ThemesWithRipple = ThemesWithRipple;
window.ASPxClientEvent = ASPxClientEvent;
window.ASPxClientEventArgs = ASPxClientEventArgs;
window.ASPxClientCancelEventArgs = ASPxClientCancelEventArgs;
window.ASPxClientProcessingModeEventArgs = ASPxClientProcessingModeEventArgs;
window.ASPxClientProcessingModeCancelEventArgs = ASPxClientProcessingModeCancelEventArgs;
ASPx.Evt.AttachEventToDocument(TouchUIHelper.touchMouseDownEventName, RippleHelper.onDocumentMouseDown);
ASPx.classesScriptParsed = true;
})(ASPx, { GCCheckInterval: 5000 });

(function () {
ASPx.StateItemsExist = false;
ASPx.FocusedItemKind = "FocusedStateItem";
ASPx.HoverItemKind = "HoverStateItem";
ASPx.PressedItemKind = "PressedStateItem";
ASPx.SelectedItemKind = "SelectedStateItem";
ASPx.DisabledItemKind = "DisabledStateItem";
ASPx.ReadOnlyItemKind = "ReadOnlyStateItem";
ASPx.CachedStatePrefix = "cached";
ASPxStateItem = ASPx.CreateClass(null, {
 constructor: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink){
  this.name = name;
  this.classNames = classNames;
  this.customClassNames = [];
  this.resultClassNames = [];
  this.cssTexts = cssTexts;
  this.postfixes = postfixes;
  this.imageObjs = imageObjs;
  this.imagePostfixes = imagePostfixes;
  this.kind = kind;
  this.classNamePostfix = kind.substr(0, 1).toLowerCase();
  this.enabled = true;
  this.needRefreshBetweenElements = false;
  this.elements = null;
  this.images = null;
  this.links = [];
  this.linkColor = null;
  this.linkTextDecoration = null;
  this.disableApplyingStyleToLink = !!disableApplyingStyleToLink; 
 },
 GetCssText: function(index){
  if(ASPx.IsExists(this.cssTexts[index]))
   return this.cssTexts[index];
  return this.cssTexts[0];
 },
 CreateStyleRule: function(index){
  if(this.GetCssText(index) == "") return "";
  var styleSheet = ASPx.GetCurrentStyleSheet();
  if(styleSheet)
   return ASPx.CreateImportantStyleRule(styleSheet, this.GetCssText(index), this.classNamePostfix);  
  return ""; 
 },
 GetClassName: function(index){
  if(ASPx.IsExists(this.classNames[index]))
   return this.classNames[index];
  return this.classNames[0];
 },
 GetResultClassName: function(index){
  if(!ASPx.IsExists(this.resultClassNames[index])) {
   if(!ASPx.IsExists(this.customClassNames[index]))
    this.customClassNames[index] = this.CreateStyleRule(index);
   if(this.GetClassName(index) != "" && this.customClassNames[index] != "")
    this.resultClassNames[index] = this.GetClassName(index) + " " + this.customClassNames[index];
   else if(this.GetClassName(index) != "")
    this.resultClassNames[index] = this.GetClassName(index);
   else if(this.customClassNames[index] != "")
    this.resultClassNames[index] = this.customClassNames[index];
   else
    this.resultClassNames[index] = "";
  }
  return this.resultClassNames[index];
 },
 GetElements: function(element){
  if(!this.elements || !ASPx.IsValidElements(this.elements)){
   if(this.postfixes && this.postfixes.length > 0){
    this.elements = [ ];
    var parentNode = element.parentNode;
    if(parentNode){
     for(var i = 0; i < this.postfixes.length; i++){
      var id = this.name + this.postfixes[i];
      this.elements[i] = ASPx.GetChildById(parentNode, id);
      if(!this.elements[i])
       this.elements[i] = ASPx.GetElementById(id);
     }
    }
   }
   else
    this.elements = [element];
  }
  return this.elements;
 },
 GetImages: function(element){
  if(!this.images || !ASPx.IsValidElements(this.images)){
   this.images = [ ];
   if(this.imagePostfixes && this.imagePostfixes.length > 0){
    var elements = this.GetElements(element);
    for(var i = 0; i < this.imagePostfixes.length; i++){
     var id = this.name + this.imagePostfixes[i];
     for(var j = 0; j < elements.length; j++){
      if(!elements[j]) continue;
      if(elements[j].id == id)
       this.images[i] = elements[j];
      else
       this.images[i] = ASPx.GetChildById(elements[j], id);
      if(this.images[i])
       break;
     }
    }
   }
  }
  return this.images;
 },
 Apply: function(element){
  if(!this.enabled) return;
  try{
   this.ApplyStyle(element);
   if(this.imageObjs && this.imageObjs.length > 0)
    this.ApplyImage(element);
   if(ASPx.Browser.IE && ASPx.Browser.MajorVersion >= 11 && ASPx.Browser.PlaformMajorVersion < 10)
    this.ForceRedrawAppearance(element);
  }
  catch(e){
  }
 },
 ApplyStyle: function(element){
  var elements = this.GetElements(element);
  for(var i = 0; i < elements.length; i++){
   if(!elements[i]) continue;
   if(this.GetResultClassName(i) != "") {
    var className = elements[i].className.replace(this.GetResultClassName(i), "");
    elements[i].className = ASPx.Str.Trim(className) + " " + this.GetResultClassName(i);
   }
   if(!ASPx.Browser.Opera || ASPx.Browser.Version >= 9)
    this.ApplyStyleToLinks(elements, i);
  }
 },
 ApplyStyleToLinks: function(elements, index){
  if(this.disableApplyingStyleToLink)
   return;
  if(!ASPx.IsValidElements(this.links[index]))
   this.links[index] = ASPx.GetNodesByTagName(elements[index], "A");
  for(var i = 0; i < this.links[index].length; i++)
   this.ApplyStyleToLinkElement(this.links[index][i], index);
 },
 ApplyStyleToLinkElement: function(link, index){
  if(this.GetLinkColor(index) != "")
   ASPx.Attr.ChangeAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color", this.GetLinkColor(index));
  if(this.GetLinkTextDecoration(index) != "")
   ASPx.Attr.ChangeAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration", this.GetLinkTextDecoration(index));
 },
 ApplyImage: function(element){
  var images = this.GetImages(element);
  for(var i = 0; i < images.length; i++){
   if(!images[i] || !this.imageObjs[i]) continue;
   var useSpriteImage = typeof(this.imageObjs[i]) != "string";
   var newUrl = "", newCssClass = "", newBackground = "";
   if(useSpriteImage){
    newUrl = ASPx.EmptyImageUrl;           
    if(this.imageObjs[i].spriteCssClass) 
     newCssClass = this.imageObjs[i].spriteCssClass;
    if(this.imageObjs[i].spriteBackground)
     newBackground = this.imageObjs[i].spriteBackground;
   }
   else{
    newUrl = this.imageObjs[i];
    if(ASPx.Attr.IsExistsAttribute(images[i].style, "background"))   
     newBackground = " ";
   }
   if(newUrl != "")
    ASPx.Attr.ChangeAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src", newUrl);
   if(newCssClass != "")
    this.ApplyImageClassName(images[i], newCssClass);
   if(newBackground != ""){
    if(ASPx.Browser.WebKitFamily) {
     var savedBackground = ASPx.Attr.GetAttribute(images[i].style, "background");
     if(!useSpriteImage)
      savedBackground += " " + images[i].style["backgroundPosition"];
     ASPx.Attr.SetAttribute(images[i], "saved" + this.kind + "Background", savedBackground);
     ASPx.Attr.SetAttribute(images[i].style, "background", newBackground);
    }
    else
     ASPx.Attr.ChangeAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background", newBackground);
   }     
  }
 },
 ApplyImageClassName: function(element, newClassName){
  if(ASPx.Attr.GetAttribute(element, "saved" + this.kind + "ClassName"))
   this.CancelImageClassName(element);
  var className = element.className;
  ASPx.Attr.SetAttribute(element, "saved" + this.kind + "ClassName", className);
  element.className = className + " " + newClassName;
 },
 Cancel: function(element){
  if(!this.enabled) return;
  try{  
   if(this.imageObjs && this.imageObjs.length > 0)
    this.CancelImage(element);
   this.CancelStyle(element);
  }
  catch(e){
  }
 },
 CancelStyle: function(element){
  var elements = this.GetElements(element);
  for(var i = 0; i < elements.length; i++){
   if(!elements[i]) continue;
   if(this.GetResultClassName(i) != "") {
    var className = ASPx.Str.Trim(elements[i].className.replace(this.GetResultClassName(i), ""));
    elements[i].className = className;
   }
   if(!ASPx.Browser.Opera || ASPx.Browser.Version >= 9)
    this.CancelStyleFromLinks(elements, i);
  }
 },
 CancelStyleFromLinks: function(elements, index){
  if(this.disableApplyingStyleToLink)
   return;
  if(!ASPx.IsValidElements(this.links[index]))
   this.links[index] = ASPx.GetNodesByTagName(elements[index], "A");
  for(var i = 0; i < this.links[index].length; i++)
   this.CancelStyleFromLinkElement(this.links[index][i], index);
 },
 CancelStyleFromLinkElement: function(link, index){
  if(this.GetLinkColor(index) != "")
   ASPx.Attr.RestoreAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color");
  if(this.GetLinkTextDecoration(index) != "")
   ASPx.Attr.RestoreAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration");
 },
 CancelImage: function(element){
  var images = this.GetImages(element);
  for(var i = 0; i < images.length; i++){
   if(!images[i] || !this.imageObjs[i]) continue;
   ASPx.Attr.RestoreAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src");
   this.CancelImageClassName(images[i]);
   ASPx.Attr.RestoreAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background");
  }
 },
 CancelImageClassName: function(element){
  var savedClassName = ASPx.Attr.GetAttribute(element, "saved" + this.kind + "ClassName");
  if(ASPx.IsExists(savedClassName)) {
   element.className = savedClassName;
   ASPx.Attr.RemoveAttribute(element, "saved" + this.kind + "ClassName");
  }
 },
 Clone: function(){
  return new ASPxStateItem(this.name, this.classNames, this.cssTexts, this.postfixes, 
   this.imageObjs, this.imagePostfixes, this.kind, this.disableApplyingStyleToLink);
 },
 IsChildElement: function(element){
  if(element != null){
   var elements = this.GetElements(element);
   for(var i = 0; i < elements.length; i++){
    if(!elements[i]) continue;
    if(ASPx.GetIsParent(elements[i], element)) 
     return true;
   }
  }
  return false;
 },
 ForceRedrawAppearance: function(element) {
  if(!aspxGetStateController().IsForceRedrawAppearanceLocked()) {
   var value = element.style.opacity;
   element.style.opacity = "0.7777";
   var dummy = element.offsetWidth;
   element.style.opacity = value;
  }
 },
 GetLinkColor: function(index){
  if(!ASPx.IsExists(this.linkColor)){
   var rule = ASPx.GetStyleSheetRules(this.customClassNames[index]);
   this.linkColor = rule ? rule.style.color : null;
   if(!ASPx.IsExists(this.linkColor)){
    var rule = ASPx.GetStyleSheetRules(this.GetClassName(index));
    this.linkColor = rule ? rule.style.color : null;
   }
   if(this.linkColor == null) 
    this.linkColor = "";
  }
  return this.linkColor;
 },
 GetLinkTextDecoration: function(index){
  if(!ASPx.IsExists(this.linkTextDecoration)){
   var rule = ASPx.GetStyleSheetRules(this.customClassNames[index]);
   this.linkTextDecoration = rule ? rule.style.textDecoration : null;
   if(!ASPx.IsExists(this.linkTextDecoration)){
    var rule = ASPx.GetStyleSheetRules(this.GetClassName(index));
    this.linkTextDecoration = rule ? rule.style.textDecoration : null;
   }
   if(this.linkTextDecoration == null) 
    this.linkTextDecoration = "";
  }
  return this.linkTextDecoration;
 }
});
ASPxClientStateEventArgs = ASPx.CreateClass(null, {
 constructor: function(item, element){
  this.item = item;
  this.element = element;
  this.toElement = null;
  this.fromElement = null;
  this.htmlEvent = null;
 }
});
ASPxStateController = ASPx.CreateClass(null, {
 constructor: function(){
  this.focusedItems = { };
  this.hoverItems = { };
  this.pressedItems = { };
  this.selectedItems = { };
  this.disabledItems = {};
  this.readOnlyItems = {};
  this.disabledScheme = {};
  this.currentFocusedElement = null;
  this.currentFocusedItemName = null;
  this.currentHoverElement = null;
  this.currentHoverItemName = null;
  this.currentPressedElement = null;
  this.currentPressedItemName = null;
  this.savedCurrentPressedElement = null;
  this.savedCurrentMouseMoveSrcElement = null;
  this.forceRedrawAppearanceLockCount = 0;
  this.stateItemType = ASPxStateItem;
  this.AfterSetFocusedState = new ASPxClientEvent();
  this.AfterClearFocusedState = new ASPxClientEvent();
  this.AfterSetHoverState = new ASPxClientEvent();
  this.AfterClearHoverState = new ASPxClientEvent();
  this.AfterSetPressedState = new ASPxClientEvent();
  this.AfterClearPressedState = new ASPxClientEvent();
  this.AfterDisabled = new ASPxClientEvent();
  this.AfterEnabled = new ASPxClientEvent();
  this.BeforeSetFocusedState = new ASPxClientEvent();
  this.BeforeClearFocusedState = new ASPxClientEvent();
  this.BeforeSetHoverState = new ASPxClientEvent();
  this.BeforeClearHoverState = new ASPxClientEvent();
  this.BeforeSetPressedState = new ASPxClientEvent();
  this.BeforeClearPressedState = new ASPxClientEvent();
  this.BeforeDisabled = new ASPxClientEvent();
  this.BeforeEnabled = new ASPxClientEvent();
  this.FocusedItemKeyDown = new ASPxClientEvent();
 }, 
 AddHoverItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.hoverItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.HoverItemKind, disableApplyingStyleToLink);
  this.AddItem(this.focusedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.FocusedItemKind, disableApplyingStyleToLink);
 },
 AddPressedItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.pressedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.PressedItemKind, disableApplyingStyleToLink);
 },
 AddSelectedItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.selectedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.SelectedItemKind, disableApplyingStyleToLink);
 },
 AddDisabledItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink, rootId) {
  this.AddItem(this.disabledItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes,
   ASPx.DisabledItemKind, disableApplyingStyleToLink, this.addIdToDisabledItemScheme, rootId);
 },
 AddReadOnlyItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink) {
  this.AddItem(this.readOnlyItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.ReadOnlyItemKind, disableApplyingStyleToLink);
 },
 addIdToDisabledItemScheme: function(rootId, childId) {
  if (!rootId)
   return;
  if (!this.disabledScheme[rootId])
   this.disabledScheme[rootId] = [rootId];
  if (childId && (rootId != childId) && ASPx.Data.ArrayIndexOf(this.disabledScheme[rootId], childId) == -1)
   this.disabledScheme[rootId].push(childId);
 },
 removeIdFromDisabledItemScheme: function(rootId, childId) {
  if (!rootId || !this.disabledScheme[rootId])
   return;
  ASPx.Data.ArrayRemove(this.disabledScheme[rootId], childId);
  if (this.disabledScheme[rootId].length == 0)
   delete this.disabledScheme[rootId];
 },
 AddItem: function (items, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink, onAdd, rootId) {
  var type = this.getStateItemType();
  var stateItem = new type(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink);
  if (postfixes && postfixes.length > 0) {
   for (var i = 0; i < postfixes.length; i++) {
    items[name + postfixes[i]] = stateItem;
    if (onAdd)
     onAdd.call(this, rootId, name + postfixes[i]);
   }
  }
  else {
   if (onAdd)
    onAdd.call(this, rootId, name);
   items[name] = stateItem;
  }
  ASPx.StateItemsExist = true;
 },
 getStateItemType: function () { return this.stateItemType; },
 withCustomStateItemType: function (newType, callback) {
  this.stateItemType = newType;
  callback(this);
  this.stateItemType = ASPxStateItem;
 },
 RemoveHoverItem: function(name, postfixes){
  this.RemoveItem(this.hoverItems, name, postfixes);
  this.RemoveItem(this.focusedItems, name, postfixes);
 },
 RemovePressedItem: function(name, postfixes){
  this.RemoveItem(this.pressedItems, name, postfixes);
 },
 RemoveSelectedItem: function(name, postfixes){
  this.RemoveItem(this.selectedItems, name, postfixes);
 },
 RemoveDisabledItem: function (name, postfixes, rootId) {
  this.RemoveItem(this.disabledItems, name, postfixes, this.removeIdFromDisabledItemScheme, rootId);
 },
 RemoveReadOnlyItem: function(name, postfixes) {
  this.RemoveItem(this.readOnlyItems, name, postfixes);
 },
 RemoveItem: function (items, name, postfixes, onRemove, rootId) {
  if (postfixes && postfixes.length > 0) {
   for (var i = 0; i < postfixes.length; i++) {
    delete items[name + postfixes[i]];
    if (onRemove)
     onRemove.call(this, rootId, name + postfixes[i]);
   }
  }
  else {
   delete items[name];
   if (onRemove)
    onRemove.call(this, rootId, name);
  }
 },
 RemoveDisposedItems: function(){
  this.RemoveDisposedItemsByType(this.hoverItems);
  this.RemoveDisposedItemsByType(this.pressedItems);
  this.RemoveDisposedItemsByType(this.focusedItems);
  this.RemoveDisposedItemsByType(this.selectedItems);
  this.RemoveDisposedItemsByType(this.disabledItems);
  this.RemoveDisposedItemsByType(this.disabledScheme);
  this.RemoveDisposedItemsByType(this.readOnlyItems);
 },
 RemoveDisposedItemsByType: function(items){
  for(var key in items) {
   if(items.hasOwnProperty(key)) {
    var item = items[key];
    var element = document.getElementById(key);
    if(!element || !ASPx.IsValidElement(element))
     delete items[key];
    try {
     if(item && item.elements) {
      for(var i = 0; i < item.elements.length; i++) {
       if(!ASPx.IsValidElements(item.links[i]))
        item.links[i] = null;
      }
     }
    }
    catch(e) {
    }
   }
  }
 },
 GetFocusedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.focusedItems, ASPx.FocusedItemKind);
 },
 GetHoverElement: function(srcElement){
  return this.GetItemElement(srcElement, this.hoverItems, ASPx.HoverItemKind);
 },
 GetPressedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.pressedItems, ASPx.PressedItemKind);
 },
 GetSelectedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.selectedItems, ASPx.SelectedItemKind);
 },
 GetDisabledElement: function(srcElement){
  return this.GetItemElement(srcElement, this.disabledItems, ASPx.DisabledItemKind);
 },
 GetReadOnlyElement: function(srcElement) {
  return this.GetItemElement(srcElement, this.readOnlyItems, ASPx.ReadOnlyItemKind);
 },
 GetItemElement: function(srcElement, items, kind){
  if(srcElement && srcElement[ASPx.CachedStatePrefix + kind]){
   var cachedElement = srcElement[ASPx.CachedStatePrefix + kind];
   if(cachedElement != ASPx.EmptyObject)
    return cachedElement;
   return null;
  }
  var element = srcElement;
  while(element != null) {
   var item = items[element.id];
   if(item){
    this.CacheItemElement(srcElement, kind, element);
    element[kind] = item;
    return element;
   }
   element = element.parentNode;
  }
  this.CacheItemElement(srcElement, kind, ASPx.EmptyObject);
  return null;
 },
 CacheItemElement: function(srcElement, kind, value){
  if(srcElement && !srcElement[ASPx.CachedStatePrefix + kind])
   srcElement[ASPx.CachedStatePrefix + kind] = value;
 },
 DoSetFocusedState: function(element, fromElement){
  var item = element[ASPx.FocusedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.fromElement = fromElement;
   this.BeforeSetFocusedState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetFocusedState.FireEvent(this, args);
  }
 },
 DoClearFocusedState: function(element, toElement){
  var item = element[ASPx.FocusedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.toElement = toElement;
   this.BeforeClearFocusedState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearFocusedState.FireEvent(this, args);
  }
 },
 DoSetHoverState: function(element, fromElement){
  var item = element[ASPx.HoverItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.fromElement = fromElement;
   this.BeforeSetHoverState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetHoverState.FireEvent(this, args);
  }
 },
 DoClearHoverState: function(element, toElement){
  var item = element[ASPx.HoverItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.toElement = toElement;
   this.BeforeClearHoverState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearHoverState.FireEvent(this, args);
  }
 },
 DoSetPressedState: function(element){
  var item = element[ASPx.PressedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   this.BeforeSetPressedState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetPressedState.FireEvent(this, args);
  }
 },
 DoClearPressedState: function(element){
  var item = element[ASPx.PressedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   this.BeforeClearPressedState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearPressedState.FireEvent(this, args);
  }
 },
 SetCurrentFocusedElement: function(element){
  if(this.currentFocusedElement && !ASPx.IsValidElement(this.currentFocusedElement)){
   this.currentFocusedElement = null;
   this.currentFocusedItemName = "";
  }
  if(this.currentFocusedElement != element){
   var oldCurrentFocusedElement = this.currentFocusedElement;
   var item = (element != null) ? element[ASPx.FocusedItemKind] : null;
   var itemName = (item != null) ? item.name : "";
   if(this.currentFocusedItemName != itemName){
    if(this.currentHoverItemName != "")
     this.SetCurrentHoverElement(null);
    if(this.currentFocusedElement != null)
     this.DoClearFocusedState(this.currentFocusedElement, element);
    this.currentFocusedElement = element;
    item = (element != null) ? element[ASPx.FocusedItemKind] : null;
    this.currentFocusedItemName = (item != null) ? item.name : "";
    if(this.currentFocusedElement != null)
     this.DoSetFocusedState(this.currentFocusedElement, oldCurrentFocusedElement);
   }
  }
 },
 SetCurrentHoverElement: function(element){
  if(this.currentHoverElement && !ASPx.IsValidElement(this.currentHoverElement)){
   this.currentHoverElement = null;
   this.currentHoverItemName = "";
  }
  var item = (element != null) ? element[ASPx.HoverItemKind] : null;
  if(item && !item.enabled) { 
   element = this.GetItemElement(element.parentNode, this.hoverItems, ASPx.HoverItemKind);
   item = (element != null) ? element[ASPx.HoverItemKind] : null;
  }
  if(this.currentHoverElement != element){
   var oldCurrentHoverElement = this.currentHoverElement,
    itemName = (item != null) ? item.name : "";
   if(this.currentHoverItemName != itemName || (item != null && item.needRefreshBetweenElements)){
    if(this.currentHoverElement != null)
     this.DoClearHoverState(this.currentHoverElement, element);
    item = (element != null) ? element[ASPx.HoverItemKind] : null;
    if(item == null || item.enabled){
     this.currentHoverElement = element;
     this.currentHoverItemName = (item != null) ? item.name : "";
     if(this.currentHoverElement != null)
      this.DoSetHoverState(this.currentHoverElement, oldCurrentHoverElement);
    }
   }
  }
 },
 SetCurrentPressedElement: function(element){
  if(this.currentPressedElement && !ASPx.IsValidElement(this.currentPressedElement)){
   this.currentPressedElement = null;
   this.currentPressedItemName = "";
  }
  if(this.currentPressedElement != element){
   if(this.currentPressedElement != null)
    this.DoClearPressedState(this.currentPressedElement);
   var item = (element != null) ? element[ASPx.PressedItemKind] : null;
   if(item == null || item.enabled){
    this.currentPressedElement = element;
    this.currentPressedItemName = (item != null) ? item.name : "";
    if(this.currentPressedElement != null)
     this.DoSetPressedState(this.currentPressedElement);
   }
  }
 },
 SetCurrentFocusedElementBySrcElement: function(srcElement){
  var element = this.GetFocusedElement(srcElement);
  this.SetCurrentFocusedElement(element);
 },
 SetCurrentHoverElementBySrcElement: function(srcElement){
  var element = this.GetHoverElement(srcElement);
  this.SetCurrentHoverElement(element);
 },
 SetCurrentPressedElementBySrcElement: function(srcElement){
  var element = this.GetPressedElement(srcElement);
  this.SetCurrentPressedElement(element);
 },
 SetPressedElement: function (element) {
  this.SetCurrentHoverElement(null);
  this.SetCurrentPressedElementBySrcElement(element);
  this.savedCurrentPressedElement = this.currentPressedElement;
 },
 SelectElement: function (element) {
  var item = element[ASPx.SelectedItemKind];
  if(item)
   item.Apply(element);
 }, 
 SelectElementBySrcElement: function(srcElement){
  var element = this.GetSelectedElement(srcElement);
  if(element != null) this.SelectElement(element);
 }, 
 DeselectElement: function(element){
  var item = element[ASPx.SelectedItemKind];
  if(item)
   item.Cancel(element);
 }, 
 DeselectElementBySrcElement: function(srcElement){
  var element = this.GetSelectedElement(srcElement);
  if(element != null) this.DeselectElement(element);
 },
 SetElementEnabled: function(element, enable){
  if(enable)
   this.EnableElement(element);
  else
   this.DisableElement(element);
 },
 SetElementReadOnly: function(element, readOnly) {
  var element = this.GetReadOnlyElement(element);
  if (element != null) {
   var item = element[ASPx.ReadOnlyItemKind];
   if(item) {
    if(readOnly) {
     if(item.name == this.currentPressedItemName)
      this.SetCurrentPressedElement(null);
     if(item.name == this.currentHoverItemName)
      this.SetCurrentHoverElement(null);
    }
    if(readOnly)
     item.Apply(element);
    else
     item.Cancel(element);
   }
  }
 },
 SetElementWithChildNodesEnabled: function (parentName, enabled) {
  var procFunct = (enabled ? this.EnableElement : this.DisableElement);
  var childItems = this.disabledScheme[parentName];
  if (childItems && childItems.length > 0)
   for (var i = 0; i < childItems.length; i++) {
    procFunct.call(this, document.getElementById(childItems[i]));
   }
 },
 DisableElement: function (element) {
  var element = this.GetDisabledElement(element);
  if(element != null) {
   var item = element[ASPx.DisabledItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    this.BeforeDisabled.FireEvent(this, args);
    if(item.name == this.currentPressedItemName)
     this.SetCurrentPressedElement(null);
    if(item.name == this.currentHoverItemName)
     this.SetCurrentHoverElement(null);
    item.Apply(element);
    this.SetMouseStateItemsEnabled(item.name, item.postfixes, false);
    this.AfterDisabled.FireEvent(this, args);
   }
  }
 }, 
 EnableElement: function(element){
  var element = this.GetDisabledElement(element);
  if(element != null) {
   var item = element[ASPx.DisabledItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    this.BeforeEnabled.FireEvent(this, args);
    item.Cancel(element);
    this.SetMouseStateItemsEnabled(item.name, item.postfixes, true);
    this.AfterEnabled.FireEvent(this, args);
   }
  }
 }, 
 SetMouseStateItemsEnabled: function(name, postfixes, enabled){   
  if(postfixes && postfixes.length > 0){
   for(var i = 0; i < postfixes.length; i ++){
    this.SetItemsEnabled(this.hoverItems, name + postfixes[i], enabled);
    this.SetItemsEnabled(this.pressedItems, name + postfixes[i], enabled);
    this.SetItemsEnabled(this.focusedItems, name + postfixes[i], enabled);
   }
  }
  else{
   this.SetItemsEnabled(this.hoverItems, name, enabled);
   this.SetItemsEnabled(this.pressedItems, name, enabled);
   this.SetItemsEnabled(this.focusedItems, name, enabled);
  }  
 },
 SetItemsEnabled: function(items, name, enabled){   
  if(items[name])
   items[name].enabled = enabled;
 },
 OnFocusMove: function(evt){
  var element = ASPx.Evt.GetEventSource(evt);
  aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
 },
 OnMouseMove: function(evt, checkElementChanged){
  var srcElement = ASPx.Evt.GetEventSource(evt);
  if(checkElementChanged && srcElement == this.savedCurrentMouseMoveSrcElement) return;
  this.savedCurrentMouseMoveSrcElement = srcElement;
  if(ASPx.Browser.IE && !ASPx.Evt.IsLeftButtonPressed(evt) && this.savedCurrentPressedElement != null)
   this.ClearSavedCurrentPressedElement();
  if(this.savedCurrentPressedElement == null)
   this.SetCurrentHoverElementBySrcElement(srcElement);
  else{
   var element = this.GetPressedElement(srcElement);
   if(element != this.currentPressedElement){
    if(element == this.savedCurrentPressedElement)
     this.SetCurrentPressedElement(this.savedCurrentPressedElement);
    else
     this.SetCurrentPressedElement(null);
   }
  }
 },
 OnMouseDown: function(evt){
  if(!ASPx.Evt.IsLeftButtonPressed(evt)) return;
  var srcElement = ASPx.Evt.GetEventSource(evt);
  this.OnMouseDownOnElement(srcElement);
 },
 OnMouseDownOnElement: function (element) {
  if(this.GetPressedElement(element) == null) return;
  this.SetPressedElement(element);
 },
 OnMouseUp: function(evt){
  var srcElement = ASPx.Evt.GetEventSource(evt);
  this.OnMouseUpOnElement(srcElement);
 },
 OnMouseUpOnElement: function(element){
  if(this.savedCurrentPressedElement == null) return;
  this.ClearSavedCurrentPressedElement();
  this.SetCurrentHoverElementBySrcElement(element);
 },
 OnMouseOver: function(evt){
  var element = ASPx.Evt.GetEventSource(evt);
  if(element && element.tagName == "IFRAME")
   this.OnMouseMove(evt, true);
 },
 OnKeyDown: function(evt){
  var element = this.GetFocusedElement(ASPx.Evt.GetEventSource(evt));
  if(element != null && element == this.currentFocusedElement) {
   var item = element[ASPx.FocusedItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    args.htmlEvent = evt;
    this.FocusedItemKeyDown.FireEvent(this, args);
   }
  }
 },
 OnKeyUpOnElement: function(evt) {
  if(this.savedCurrentPressedElement != null && ASPx.Evt.IsActionKeyPressed(evt))
   this.ClearSavedCurrentPressedElement();
 },
 OnSelectStart: function(evt){
  if(this.savedCurrentPressedElement) {
   ASPx.Selection.Clear();
   return false;
  }
 },
 ClearSavedCurrentPressedElement: function() {
  this.savedCurrentPressedElement = null;
  this.SetCurrentPressedElement(null);
 },
 ClearCache: function(srcElement, kind) {
  if(srcElement[ASPx.CachedStatePrefix + kind])
   srcElement[ASPx.CachedStatePrefix + kind] = null;
 },
 ClearElementCache: function(srcElement) {
  this.ClearCache(srcElement, ASPx.FocusedItemKind);
  this.ClearCache(srcElement, ASPx.HoverItemKind);
  this.ClearCache(srcElement, ASPx.PressedItemKind);
  this.ClearCache(srcElement, ASPx.SelectedItemKind);
  this.ClearCache(srcElement, ASPx.DisabledItemKind);
 },
 LockForceRedrawAppearance: function() {
  this.forceRedrawAppearanceLockCount++;
 },
 UnlockForceRedrawAppearance: function() {
  this.forceRedrawAppearanceLockCount--;
 },
 IsForceRedrawAppearanceLocked: function() {
  return this.forceRedrawAppearanceLockCount > 0;
 }
});
var stateController = null;
function aspxGetStateController(){
 if(stateController == null)
  stateController = new ASPxStateController();
 return stateController;
}
function aspxAddStateItems(method, namePrefix, classes, disableApplyingStyleToLink){
 for(var i = 0; i < classes.length; i ++){
  for(var j = 0; j < classes[i][2].length; j ++) {
   var name = namePrefix;
   if(classes[i][2][j])
    name += "_" + classes[i][2][j];
   var postfixes = classes[i][3] || null;
   var imageObjs = (classes[i][4] && classes[i][4][j]) || null;
   var imagePostfixes = classes[i][5] || null;
   method.call(aspxGetStateController(), name, classes[i][0], classes[i][1], postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink, namePrefix);
  }
 }
}
ASPx.AddHoverItems = function(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddHoverItem, namePrefix, classes, disableApplyingStyleToLink);
};
ASPx.AddPressedItems = function(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddPressedItem, namePrefix, classes, disableApplyingStyleToLink);
};
ASPx.AddSelectedItems = function(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddSelectedItem, namePrefix, classes, disableApplyingStyleToLink);
};
ASPx.AddDisabledItems = function(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddDisabledItem, namePrefix, classes, disableApplyingStyleToLink);
};
ASPx.AddReadOnlyItems = function(namePrefix, classes, disableApplyingStyleToLink) {
 aspxAddStateItems(aspxGetStateController().AddReadOnlyItem, namePrefix, classes, disableApplyingStyleToLink);
};
function aspxRemoveStateItems(method, namePrefix, classes){
 for(var i = 0; i < classes.length; i ++){
  for(var j = 0; j < classes[i][0].length; j ++) {
   var name = namePrefix;
   if(classes[i][0][j])
    name += "_" + classes[i][0][j];
   method.call(aspxGetStateController(), name, classes[i][1], namePrefix);
  }
 }
}
ASPx.RemoveHoverItems = function(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveHoverItem, namePrefix, classes);
};
ASPx.RemovePressedItems = function(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemovePressedItem, namePrefix, classes);
};
ASPx.RemoveSelectedItems = function(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveSelectedItem, namePrefix, classes);
};
ASPx.RemoveDisabledItems = function(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveDisabledItem, namePrefix, classes);
};
ASPx.RemoveReadOnlyItems = function(namePrefix, classes) {
 aspxRemoveStateItems(aspxGetStateController().RemoveReadOnlyItem, namePrefix, classes);
};
ASPx.AddAfterClearFocusedState = function(handler){
 aspxGetStateController().AfterClearFocusedState.AddHandler(handler);
};
ASPx.AddAfterSetFocusedState = function(handler){
 aspxGetStateController().AfterSetFocusedState.AddHandler(handler);
};
ASPx.AddAfterClearHoverState = function(handler){
 aspxGetStateController().AfterClearHoverState.AddHandler(handler);
};
ASPx.AddAfterSetHoverState = function(handler){
 aspxGetStateController().AfterSetHoverState.AddHandler(handler);
};
ASPx.AddAfterClearPressedState = function(handler){
 aspxGetStateController().AfterClearPressedState.AddHandler(handler);
};
ASPx.AddAfterSetPressedState = function(handler){
 aspxGetStateController().AfterSetPressedState.AddHandler(handler);
};
ASPx.AddAfterDisabled = function(handler){
 aspxGetStateController().AfterDisabled.AddHandler(handler);
};
ASPx.AddAfterEnabled = function(handler){
 aspxGetStateController().AfterEnabled.AddHandler(handler);
};
ASPx.AddBeforeClearFocusedState = function(handler){
 aspxGetStateController().BeforeClearFocusedState.AddHandler(handler);
};
ASPx.AddBeforeSetFocusedState = function(handler){
 aspxGetStateController().BeforeSetFocusedState.AddHandler(handler);
};
ASPx.AddBeforeClearHoverState = function(handler){
 aspxGetStateController().BeforeClearHoverState.AddHandler(handler);
};
ASPx.AddBeforeSetHoverState = function(handler){
 aspxGetStateController().BeforeSetHoverState.AddHandler(handler);
};
ASPx.AddBeforeClearPressedState = function(handler){
 aspxGetStateController().BeforeClearPressedState.AddHandler(handler);
};
ASPx.AddBeforeSetPressedState = function(handler){
 aspxGetStateController().BeforeSetPressedState.AddHandler(handler);
};
ASPx.AddBeforeDisabled = function(handler){
 aspxGetStateController().BeforeDisabled.AddHandler(handler);
};
ASPx.AddBeforeEnabled = function(handler){
 aspxGetStateController().BeforeEnabled.AddHandler(handler);
};
ASPx.AddFocusedItemKeyDown = function(handler){
 aspxGetStateController().FocusedItemKeyDown.AddHandler(handler);
};
ASPx.SetHoverState = function(element){
 aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
};
ASPx.ClearHoverState = function(evt){
 aspxGetStateController().SetCurrentHoverElementBySrcElement(null);
};
ASPx.UpdateHoverState = function(evt){
 aspxGetStateController().OnMouseMove(evt, false);
};
ASPx.SetFocusedState = function(element){
 aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
};
ASPx.ClearFocusedState = function(evt){
 aspxGetStateController().SetCurrentFocusedElementBySrcElement(null);
};
ASPx.UpdateFocusedState = function(evt){
 aspxGetStateController().OnFocusMove(evt);
};
ASPx.AccessibilityMarkerClass = "dxalink";
ASPx.AssignAccessibilityEventsToChildrenLinks = function(container, clearFocusedStateOnMouseOut){
 var links = ASPx.GetNodesByPartialClassName(container, ASPx.AccessibilityMarkerClass);
 for(var i = 0; i < links.length; i++)
  ASPx.AssignAccessibilityEventsToLink(links[i], clearFocusedStateOnMouseOut);
};
ASPx.AssignAccessibilityEventsToLink = function(link, clearFocusedStateOnMouseOut) {
 if(!ASPx.ElementContainsCssClass(link, ASPx.AccessibilityMarkerClass))
  return;
 ASPx.AssignAccessibilityEventsToLinkCore(link, clearFocusedStateOnMouseOut);
};
ASPx.AssignAccessibilityEventsToLinkCore = function (link, clearFocusedStateOnMouseOut) {
 ASPx.Evt.AttachEventToElement(link, "focus", function (e) { ASPx.UpdateFocusedState(e); });
 var clearFocusedStateHandler = function (e) { ASPx.ClearFocusedState(e); };
 ASPx.Evt.AttachEventToElement(link, "blur", clearFocusedStateHandler);
 if(clearFocusedStateOnMouseOut)
  ASPx.Evt.AttachEventToElement(link, "mouseout", clearFocusedStateHandler);
};
ASPx.Evt.AttachEventToDocument("mousemove", function(evt) {
 if(ASPx.classesScriptParsed && ASPx.StateItemsExist)
  aspxGetStateController().OnMouseMove(evt, true);
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseDownEventName, function(evt) {
 if(ASPx.classesScriptParsed && ASPx.StateItemsExist)
  aspxGetStateController().OnMouseDown(evt);
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function(evt) {
 if(ASPx.classesScriptParsed && ASPx.StateItemsExist)
  aspxGetStateController().OnMouseUp(evt);
});
ASPx.Evt.AttachEventToDocument("mouseover", function(evt) {
 if(ASPx.classesScriptParsed && ASPx.StateItemsExist)
  aspxGetStateController().OnMouseOver(evt);
});
ASPx.Evt.AttachEventToDocument("keydown", function(evt) {
 if(ASPx.classesScriptParsed && ASPx.StateItemsExist)
  aspxGetStateController().OnKeyDown(evt);
});
ASPx.Evt.AttachEventToDocument("selectstart", function(evt) {
 if(ASPx.classesScriptParsed && ASPx.StateItemsExist)
  return aspxGetStateController().OnSelectStart(evt);
});
ASPx.GetStateController = aspxGetStateController;
ASPx.StateItem = ASPxStateItem;
})();
(function () {
 var ASPx = window.ASPx || {};
 ASPx.ASPxImageLoad = {};
 ASPx.ASPxImageLoad.dxDefaultLoadingImageCssClass = "dxe-loadingImage";
 ASPx.ASPxImageLoad.dxDefaultLoadingImageCssClassRegexp = new RegExp("dx\\w+-loadingImage");
 ASPx.ASPxImageLoad.OnLoad = function (image, customLoadingImage, isOldIE, customBackgroundImageUrl) {
  image.dxCustomBackgroundImageUrl = "";
  image.dxShowLoadingImage = true;
  image.dxCustomLoadingImage = customLoadingImage;
  if (customBackgroundImageUrl != "")
   image.dxCustomBackgroundImageUrl = "url('" + customBackgroundImageUrl + "')";
  ASPx.ASPxImageLoad.prepareImageBackground(image, isOldIE);
  ASPx.ASPxImageLoad.removeHandlers(image);
  image.className = image.className.replace(ASPx.ASPxImageLoad.dxDefaultLoadingImageCssClassRegexp, "");
 };
 ASPx.ASPxImageLoad.removeASPxImageBackground = function (image, isOldIE) {
  if (isOldIE) 
   image.style.removeAttribute("background-image");
  else 
   image.style.backgroundImage = "";
 };
 ASPx.ASPxImageLoad.prepareImageBackground = function (image, isOldIE) {
  ASPx.ASPxImageLoad.removeASPxImageBackground(image, isOldIE);
  if (image.dxCustomBackgroundImageUrl != "")
   image.style.backgroundImage = image.dxCustomBackgroundImageUrl;
 };
 ASPx.ASPxImageLoad.removeHandlers = function (image) {
  image.removeAttribute("onload");
  image.removeAttribute("onabort");
  image.removeAttribute("onerror");
 };
 window.ASPx = ASPx;
})();
(function module(ASPx) {
ASPx.modules.Controls = module;
var ASPxClientBeginCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(command){
  this.constructor.prototype.constructor.call(this);
  this.command = command;
 }
});
var ASPxClientGlobalBeginCallbackEventArgs = ASPx.CreateClass(ASPxClientBeginCallbackEventArgs, {
 constructor: function(control, command){
  this.constructor.prototype.constructor.call(this, command);
  this.control = control;
 }
});
var ASPxClientEndCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(command){
  this.constructor.prototype.constructor.call(this);
  this.command = command;
 }
});
var ASPxClientGlobalEndCallbackEventArgs = ASPx.CreateClass(ASPxClientEndCallbackEventArgs, {
 constructor: function(control){
  this.constructor.prototype.constructor.call(this);
  this.control = control;
 }
});
var ASPxClientCustomDataCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(result) {
  this.constructor.prototype.constructor.call(this);
  this.result = result;
 }
});
var ASPxClientCallbackErrorEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function (message, callbackId) {
  this.constructor.prototype.constructor.call(this);
  this.message = message;
  this.handled = false;
  this.callbackId = callbackId;
 }
});
var ASPxClientGlobalCallbackErrorEventArgs = ASPx.CreateClass(ASPxClientCallbackErrorEventArgs, {
 constructor: function (control, message, callbackId) {
  this.constructor.prototype.constructor.call(this, message, callbackId);
  this.control = control;
 }
});
var ASPxClientValidationCompletedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function (container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl) {
  this.constructor.prototype.constructor.call(this);
  this.container = container;
  this.validationGroup = validationGroup;
  this.invisibleControlsValidated = invisibleControlsValidated;
  this.isValid = isValid;
  this.firstInvalidControl = firstInvalidControl;
  this.firstVisibleInvalidControl = firstVisibleInvalidControl;
 }
});
var ASPxClientControlsInitializedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(isCallback) {
  this.isCallback = isCallback;
 }
});
var ASPxClientControlBeforePronounceEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(messageParts, control){
  this.constructor.prototype.constructor.call(this);
  this.messageParts = messageParts;
  this.control = control;
 }
});
var ASPxClientControlUnloadEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(control){
  this.constructor.prototype.constructor.call(this);
  this.control = control;
 }
});
var ASPxClientEndFocusEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(item) {
  this.constructor.prototype.constructor.call(this);
  this.item = item;
 }
});
var ASPxClientItemFocusedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(item) {
  this.constructor.prototype.constructor.call(this);
  this.item = item;
 }
});
var BeforeInitCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(callbackOwnerID){
  this.constructor.prototype.constructor.call(this);
  this.callbackOwnerID = callbackOwnerID;
 }
});
ASPx.createControl = function(type, name, windowName, properties, events, setupMethod, data){
 var globalName = windowName && windowName.length > 0 ? windowName : name;
 var dxo = new type(name);
 var haveWrapper = ASPx.Platform === "NETCORE" && dxo.createWrapper && !DevExpress.AspNetCore.Internal.BackwardCompatibility.useLegacyClientAPI;
 if(haveWrapper) {
  window[globalName] = dxo.createWrapper();
  dxo.aspNetCoreWrapperInstance = window[globalName];
 }
 else
  dxo.InitGlobalVariable(globalName);
 if(properties)
  dxo.SetProperties(properties);
 if(events)
  dxo.SetEvents(events);
 if(setupMethod)
  setupMethod.call(dxo);
 if(data)
  dxo.SetData(data);
 dxo.AfterCreate();
};
var ASPxClientControlBase = ASPx.CreateClass(null, {
 constructor: function(name){
  this.name = name;
  this.uniqueID = name;   
  this.globalName = name;
  this.stateObject = null;
  this.needEncodeState = true;
  this.encodeHtml = true;
  this.enabled = true;
  this.clientEnabled = true;
  this.savedClientEnabled = true;
  this.clientVisible = true;
  this.accessibilityCompliant = false;
  this.parseJSPropertiesOnCallbackError = false;
  this.autoPostBack = false;
  this.allowMultipleCallbacks = true;
  this.callBack = null;
  this.enableCallbackAnimation = false;
  this.enableSlideCallbackAnimation = false;
  this.slideAnimationDirection = null;
  this.beginCallbackAnimationProcessing = false;
  this.endCallbackAnimationProcessing = false;
  this.savedCallbackResult = null;
  this.savedCallbacks = null;
  this.isCallbackAnimationPrevented = false;
  this.lpDelay = 300;
  this.lpTimer = -1;
  this.requestCount = 0;
  this.enableSwipeGestures = false;
  this.disableSwipeGestures = false;
  this.supportGestures = false;
  this.repeatedGestureValue = 0;
  this.repeatedGestureCount = 0;
  this.isInitialized = false;
  this.initialFocused = false;
  this.leadingAfterInitCall = ASPxClientControl.LeadingAfterInitCallConsts.None; 
  this.serverEvents = [];
  this.loadingPanelElement = null;
  this.loadingDivElement = null;  
  this.hasPhantomLoadingElements = false;
  this.mainElement = null;
  this.touchUIMouseScroller = null;
  this.hiddenFields = {};
  this.scPrefix = "dx";
  this.callbackHandlersQueue = new ASPx.ControlCallbackHandlersQueue(this);
  this.callbackCommand = {};
  this.currentCallbackID = -1;
  this.Init = new ASPxClientEvent();
  this.BeginCallback = new ASPxClientEvent();
  this.EndCallback = new ASPxClientEvent();
  this.EndCallbackAnimationStart = new ASPxClientEvent();
  this.CallbackError = new ASPxClientEvent();
  this.CustomDataCallback = new ASPxClientEvent();
  this.BeforePronounce = new ASPxClientEvent();
  this.Unload = new ASPxClientEvent();
  aspxGetControlCollection().Add(this);
 },
 Initialize: function() {
  if(this.callBack != null)
   this.InitializeCallBackData();
  if (this.useCallbackQueue())
   this.callbackQueueHelper = new ASPx.ControlCallbackQueueHelper(this);
  ASPx.AccessibilityUtils.createAccessibleBackgrounds(this);
  if(this.accessibilityCompliant)
   ASPx.AccessibilityPronouncer.EnsureInitialize();
 },
 FinalizeInitialization: function() { },
 InlineInitialize: function() {
  this.savedClientEnabled = this.clientEnabled;
 },
 InitializeGestures: function() {
  if(this.isSwipeGesturesEnabled() && this.supportGestures) {
   ASPx.GesturesHelper.AddSwipeGestureHandler(this.name, 
    function() { return this.GetCallbackAnimationElement(); }.aspxBind(this), 
    function(evt) { return this.CanHandleGestureCore(evt); }.aspxBind(this), 
    function(value) { return this.AllowStartGesture(value); }.aspxBind(this),
    function(value) { return this.StartGesture(); }.aspxBind(this),
    function(value) { return this.AllowExecuteGesture(value); }.aspxBind(this),
    function(value) { this.ExecuteGesture(value); }.aspxBind(this),
    function(value) { this.CancelGesture(value); }.aspxBind(this),
    this.GetDefaultanimationEngineType(),
    this.rtl
   );
   if(ASPx.Browser.MSTouchUI)
    this.touchUIMouseScroller = ASPx.MouseScroller.Create(
     function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
     function() { return null; },
     function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
     function(element) { return this.NeedPreventTouchUIMouseScrolling(element); }.aspxBind(this),
     true
    );
  }
 },
 isSwipeGesturesEnabled: function() {
  return !this.disableSwipeGestures && (this.enableSwipeGestures || ASPx.Browser.TouchUI);
 },
 isSlideCallbackAnimationEnabled: function() {
  return this.enableSlideCallbackAnimation || this.isSwipeGesturesEnabled(); 
 },
 InitGlobalVariable: function(varName){
  if(!window) return;
  this.globalName = varName;
  window[varName] = this;
 },
 SetElementDisplay: function(element, value, checkCurrentStyle, makeInline) {
  ASPx.SetElementDisplay(element, value, checkCurrentStyle, makeInline);
 },
 SetProperties: function(properties, obj){
  if(!obj) obj = this;
  var isAspNetCoreWrapperInstanceExist = !!obj.aspNetCoreWrapperInstance;
  for(var name in properties){
   if(!properties.hasOwnProperty(name)) continue;
   obj[name] = properties[name];
   if(isAspNetCoreWrapperInstanceExist && name.indexOf("cp") === 0)
    obj.aspNetCoreWrapperInstance[name] = properties[name]; 
  }
 },
 SetEvents: function(events, obj){
  if(!obj) obj = this;
  for(var name in events){
   if(events.hasOwnProperty(name) && obj[name] && obj[name].AddHandler)
    obj[name].AddHandler(events[name]);
  }
 },
 SetData: function(data){
 },
 useCallbackQueue: function(){
  return false;
 },
 NeedPreventTouchUIMouseScrolling: function(element) {
  return false;
 },
 InitailizeFocus: function() {
  if(this.initialFocused && this.IsVisible())
   this.Focus();
 },
 AfterCreate: function() {
  this.AddDefaultStateControllerItems();
  this.InlineInitialize();
  this.InitializeGestures();
 },
 AfterInitialize: function() {
  this.initializeAriaDescriptor();
  this.InitailizeFocus();
  this.isInitialized = true;
  this.RaiseInit();
  if(this.savedCallbacks) {
   for(var i = 0; i < this.savedCallbacks.length; i++) 
    this.CreateCallbackInternal(this.savedCallbacks[i].arg, this.savedCallbacks[i].command, 
     false, this.savedCallbacks[i].callbackInfo);
   this.savedCallbacks = null;
  }
 },
 InitializeCallBackData: function() {
 },
 AtlasPreInitialize: function() {
 },
 AtlasInitialize: function() {
 },
 IsDOMDisposed: function() { 
  return !ASPx.IsExistsElement(this.GetMainElement());
 },
 initializeAriaDescriptor: function() {
  if(this.ariaDescription) {
   var descriptionObject = ASPx.Json.Eval(this.ariaDescription);
   if(descriptionObject) {
    this.ariaDescriptor = new AriaDescriptor(this, descriptionObject);
    this.applyAccessibilityAttributes(this.ariaDescriptor); 
   }
  }
 },
 applyAccessibilityAttributes: function() { },
 setAriaDescription: function(selector, argsList) {
  if(this.ariaDescriptor)
   this.ariaDescriptor.setDescription(selector, argsList || [[]]);
 },
 allowRestoreFocusOnCallbacks: function(){
  return this.accessibilityCompliant;
 },
 HtmlEncode: function(text) {
  return this.encodeHtml ? ASPx.Str.EncodeHtml(text) : text;
 },
 IsServerEventAssigned: function(eventName){
  return ASPx.Data.ArrayIndexOf(this.serverEvents, eventName) >= 0;
 },
 OnPost: function(args){
  this.SerializeStateHiddenField();
 },
 SerializeStateHiddenField: function() {
  this.UpdateStateObject();
  if(this.stateObject != null)
   this.UpdateStateHiddenField();
 },
 OnPostFinalization: function(args){
 },
 UpdateStateObject: function(){
 },
 UpdateStateObjectWithObject: function(obj){
  if(!obj) return;
  if(!this.stateObject)
   this.stateObject = { };
  for(var key in obj)
   if(obj.hasOwnProperty(key))
    this.stateObject[key] = obj[key];
 },
 UpdateStateHiddenField: function() {
  var stateHiddenField = this.GetStateHiddenField();
  if(stateHiddenField) {
   var stateObjectStr = ASPx.Json.ToJson(this.stateObject, !this.needEncodeState);
   stateHiddenField.value = this.needEncodeState ? ASPx.Str.EncodeHtml(stateObjectStr) : stateObjectStr;
  }
 },
 GetStateHiddenField: function() {
  return this.GetHiddenField(this.GetStateHiddenFieldName(), this.GetStateHiddenFieldID(), 
   this.GetStateHiddenFieldParent(), this.GetStateHiddenFieldOrigin());
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID;
 },
 GetStateHiddenFieldID: function() {
  return this.name + "_State";
 },
 GetStateHiddenFieldOrigin: function() {
  return this.GetMainElement();
 },
 GetStateHiddenFieldParent: function() {
  var element = this.GetStateHiddenFieldOrigin();
  return element ? element.parentNode : null;
 },
 GetHiddenField: function(name, id, parent, beforeElement) {
  var hiddenField = this.hiddenFields[id];
  if(!hiddenField || !ASPx.IsValidElement(hiddenField)) {
   if(parent) {
    var existingHiddenField = ASPx.GetElementById(this.GetStateHiddenFieldID());
    this.hiddenFields[id] = hiddenField = existingHiddenField || ASPx.CreateHiddenField(name, id);
    if(existingHiddenField)
     return existingHiddenField;
    if(beforeElement)
     parent.insertBefore(hiddenField, beforeElement);
    else
     parent.appendChild(hiddenField);
   }
  }
  return hiddenField;
 },
 GetChildElement: function(idPostfix){
  var mainElement = this.GetMainElement();
  if(idPostfix.charAt && idPostfix.charAt(0) !== "_")
   idPostfix = "_" + idPostfix;
  return mainElement ? ASPx.CacheHelper.GetCachedChildById(this, mainElement, this.name + idPostfix) : null;
 },
 getChildControl: function(idPostfix) {
  var result = null;
  var childControlId = this.getChildControlUniqueID(idPostfix);
  ASPx.GetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function(control) {
   if(control.uniqueID == childControlId)
    result = control;
  });
  return result;  
 },
 getChildControlUniqueID: function(idPostfix) {
  idPostfix = idPostfix.split("_").join("$");
  if(idPostfix.charAt && idPostfix.charAt(0) !== "$")
   idPostfix = "$" + idPostfix;
  return this.uniqueID + idPostfix;  
 },
 getInnerControl: function(idPostfix) {
  var name = this.name + idPostfix;
  var result = window[name];
  return result && Ident.IsASPxClientControl(result)
   ? result
   : null;
 },
 GetParentForm: function(){
  return ASPx.GetParentByTagName(this.GetMainElement(), "FORM");
 },
 GetMainElement: function(){
  if(!ASPx.IsExistsElement(this.mainElement))
   this.mainElement = ASPx.GetElementById(this.GetMainElementId());
  return this.mainElement;
 },
 GetMainElementId: function() {
  return this.name;
 },
 IsLoadingContainerVisible: function(){
  return this.IsVisible();
 },
 GetLoadingPanelElement: function(){
  return ASPx.GetElementById(this.name + "_LP");
 },
 GetClonedLoadingPanel: function(){
  return document.getElementById(this.GetLoadingPanelElement().id + "V"); 
 },
 CloneLoadingPanel: function(element, parent) {
  var clone = element.cloneNode(true);
  clone.id = element.id + "V";
  parent.appendChild(clone);
  return clone;
 },
 CreateLoadingPanelWithoutBordersInsideContainer: function(container) {
  var loadingPanel = this.CreateLoadingPanelInsideContainer(container, false, true, true);
  var contentStyle = ASPx.GetCurrentStyle(container);
  if(!loadingPanel || !contentStyle)
   return;
  var elements = [ ];
  var table = (loadingPanel.tagName == "TABLE") ? loadingPanel : ASPx.GetNodeByTagName(loadingPanel, "TABLE", 0);
  if(table != null)
   elements.push(table);
  else
   elements.push(loadingPanel);
  var cells = ASPx.GetNodesByTagName(loadingPanel, "TD");
  if(!cells) cells = [ ];
  for(var i = 0; i < cells.length; i++)
   elements.push(cells[i]);
  for(var i = 0; i < elements.length; i++) {
   var el = elements[i];
   el.style.backgroundColor = contentStyle.backgroundColor;
   ASPx.RemoveBordersAndShadows(el);
  }
 },
 CreateLoadingPanelInsideContainer: function(parentElement, hideContent, collapseHeight, collapseWidth) {
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  var element = this.GetLoadingPanelElement();
  if(element != null){
   var width = collapseWidth ? 0 : ASPx.GetClearClientWidth(parentElement);
   var height = collapseHeight ? 0 : ASPx.GetClearClientHeight(parentElement);
   if(hideContent){
    for(var i = parentElement.childNodes.length - 1; i > -1; i--){
     if(parentElement.childNodes[i].style)
      parentElement.childNodes[i].style.display = "none";
     else if(parentElement.childNodes[i].nodeType == 3) 
      parentElement.removeChild(parentElement.childNodes[i]);
    }
   }
   else
    parentElement.innerHTML = "";
   var table = document.createElement("TABLE");
   parentElement.appendChild(table);
   table.border = 0;
   table.cellPadding = 0;
   table.cellSpacing = 0;
   ASPx.SetStyles(table, {
    width: (width > 0) ? width : "100%",
    height: (height > 0) ? height : "100%"
   });
   var tbody = document.createElement("TBODY");
   table.appendChild(tbody);
   var tr = document.createElement("TR");
   tbody.appendChild(tr);
   var td = document.createElement("TD");
   tr.appendChild(td);
   td.align = "center";
   td.vAlign = "middle";
   element = this.CloneLoadingPanel(element, td);
   ASPx.SetElementDisplay(element, true);
   this.loadingPanelElement = element;
   return element;
  } else
   parentElement.innerHTML = "&nbsp;";
  return null;
 },
 CreateLoadingPanelWithAbsolutePosition: function(parentElement, offsetElement) {
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  if(!offsetElement)
   offsetElement = parentElement;
  var element = this.GetLoadingPanelElement();
  if(element != null) {
   element = this.CloneLoadingPanel(element, parentElement);
   ASPx.SetStyles(element, {
    position: "absolute"
   });
   ASPx.SetElementDisplay(element, true);
   ASPx.Evt.AttachEventToElement(element, ASPx.Evt.GetMouseWheelEventName(), ASPx.Evt.PreventEvent);
   this.SetLoadingPanelLocation(offsetElement, element);
   this.loadingPanelElement = element;
   return element;
  }
  return null;
 },
 CreateLoadingPanelInline: function(parentElement, centerInParent){
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  var element = this.GetLoadingPanelElement();
  if(element != null) {
   element = this.CloneLoadingPanel(element, parentElement);
   if(centerInParent){
    ASPx.SetElementDisplay(element, true);
    parentElement.style.textAlign = "center";
   }
   else
    ASPx.SetElementDisplay(element, true);
   this.loadingPanelElement = element;
   return element;
  }
  return null;
 },
 ShowLoadingPanel: function() {
 },
 ShowLoadingElements: function() {
  if(this.InCallback() || this.lpTimer > -1) return;
  this.ShowLoadingDiv();
  if(this.IsCallbackAnimationEnabled())
   this.StartBeginCallbackAnimation();
  else
   this.ShowLoadingElementsInternal();
 },
 ShowLoadingElementsInternal: function() {
  if(this.lpDelay > 0 && !this.IsCallbackAnimationEnabled()) 
   this.lpTimer = window.setTimeout(function() { 
    this.ShowLoadingPanelOnTimer(); 
   }.aspxBind(this), this.lpDelay);
  else {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
  }
 },
 GetLoadingPanelOffsetElement: function (baseElement) {
  if(this.IsCallbackAnimationEnabled()) {
   var element = this.GetLoadingPanelCallbackAnimationOffsetElement();
   if(element) {
    var container = typeof(ASPx.AnimationHelper) != "undefined" ? ASPx.AnimationHelper.findSlideAnimationContainer(element) : null;
    if(container)
     return container.parentNode.parentNode;
    else
     return element;
   }
  }
  return baseElement;
 },
 GetLoadingPanelCallbackAnimationOffsetElement: function () {
  return this.GetCallbackAnimationElement();
 },
 IsCallbackAnimationEnabled: function () {
  return (this.enableCallbackAnimation || this.isSlideCallbackAnimationEnabled()) && !this.isCallbackAnimationPrevented;
 },
 GetDefaultanimationEngineType: function() {
  return ASPx.AnimationEngineType.DEFAULT;
 },
 StartBeginCallbackAnimation: function () {
  this.beginCallbackAnimationProcessing = true;
  this.isCallbackFinished = false;
  var element = this.GetCallbackAnimationElement();
  if (element && this.isSlideCallbackAnimationEnabled() && this.slideAnimationDirection)
   ASPx.AnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeginCallbackAnimation.aspxBind(this), this.GetDefaultanimationEngineType(), this.rtl);
  else if(element && this.enableCallbackAnimation) 
   ASPx.AnimationHelper.fadeOut(element, this.FinishBeginCallbackAnimation.aspxBind(this));
  else
   this.FinishBeginCallbackAnimation();
 },
 CancelBeginCallbackAnimation: function() {
  if(this.beginCallbackAnimationProcessing) {
   this.beginCallbackAnimationProcessing = false;
   var element = this.GetCallbackAnimationElement();
   ASPx.AnimationHelper.cancelAnimation(element);
  }
 },
 FinishBeginCallbackAnimation: function () {
  this.beginCallbackAnimationProcessing = false;
  if(!this.isCallbackFinished)
   this.ShowLoadingElementsInternal();
  else {
   this.DoCallback(this.savedCallbackResult);
   this.savedCallbackResult = null;
  }
 },
 CheckBeginCallbackAnimationInProgress: function(callbackResult) {
  if(this.beginCallbackAnimationProcessing) {
   this.savedCallbackResult = callbackResult;
   this.isCallbackFinished = true;
   return true;
  }
  return false;
 },
 StartEndCallbackAnimation: function () {
  this.HideLoadingPanel();
  this.SetInitialLoadingDivOpacity();
  this.RaiseEndCallbackAnimationStart();
  this.endCallbackAnimationProcessing = true;
  var element = this.GetCallbackAnimationElement();
  if(element && this.isSlideCallbackAnimationEnabled() && this.slideAnimationDirection) 
   ASPx.AnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishEndCallbackAnimation.aspxBind(this), this.GetDefaultanimationEngineType(), this.rtl);
  else if(element && this.enableCallbackAnimation) 
   ASPx.AnimationHelper.fadeIn(element, this.FinishEndCallbackAnimation.aspxBind(this));
  else
   this.FinishEndCallbackAnimation();
  this.slideAnimationDirection = null;
 },
 FinishEndCallbackAnimation: function () {
  this.DoEndCallback();
  this.endCallbackAnimationProcessing = false;
  this.CheckRepeatGesture();
 },
 CheckEndCallbackAnimationNeeded: function() {
  if(!this.endCallbackAnimationProcessing && this.requestCount == 1) {
   this.StartEndCallbackAnimation();
   return true;
  }
  return false;
 },
 PreventCallbackAnimation: function() {
  this.isCallbackAnimationPrevented = true;
 },
 GetCallbackAnimationElement: function() {
  return null;
 },
 AssignSlideAnimationDirectionByPagerArgument: function(arg, currentPageIndex) {
  this.slideAnimationDirection = null;
  if(this.isSlideCallbackAnimationEnabled() && typeof(ASPx.AnimationHelper) != "undefined") {
   if(arg == PagerCommands.Next || arg == PagerCommands.Last)
    this.slideAnimationDirection = ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION;
   else if(arg == PagerCommands.First || arg == PagerCommands.Prev)
    this.slideAnimationDirection = ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION;
   else if(!isNaN(currentPageIndex) && arg.indexOf(PagerCommands.PageNumber) == 0) {
    var newPageIndex = parseInt(arg.substring(2));
    if (!isNaN(newPageIndex)) {
     var leftDir = this.rtl ? ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION : ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION;
     var rightDir = this.rtl ? ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION : ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION;
     this.slideAnimationDirection = newPageIndex < currentPageIndex ? leftDir : rightDir;
    }
   }
  }
 },
 TryShowPhantomLoadingElements: function () {
  if(this.hasPhantomLoadingElements && this.InCallback()) {
   this.hasPhantomLoadingElements = false;
   this.ShowLoadingDivAndPanel();
  }
 },
 ShowLoadingDivAndPanel: function () {
  this.ShowLoadingDiv();
  this.RestoreLoadingDivOpacity();
  this.ShowLoadingPanel();
 },
 HideLoadingElements: function() {
  this.CancelBeginCallbackAnimation();
  this.HideLoadingPanel();
  this.HideLoadingDiv();
 },
 ShowLoadingPanelOnTimer: function() {
  this.ClearLoadingPanelTimer();
  if(!this.IsDOMDisposed()) {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
  }
 },
 ClearLoadingPanelTimer: function() {
  this.lpTimer = ASPx.Timer.ClearTimer(this.lpTimer);  
 },
 HideLoadingPanel: function() {
  this.ClearLoadingPanelTimer();
  this.hasPhantomLoadingElements = false;
  if(ASPx.IsExistsElement(this.loadingPanelElement)) {
   ASPx.RemoveElement(this.loadingPanelElement);
   this.loadingPanelElement = null;
  }
 },
 SetLoadingPanelLocation: function(offsetElement, loadingPanel, x, y, offsetX, offsetY) {
  if(!ASPx.IsExists(x) || !ASPx.IsExists(y)){
   var x1 = ASPx.GetAbsoluteX(offsetElement);
   var y1 = ASPx.GetAbsoluteY(offsetElement);
   var x2 = x1;
   var y2 = y1;
   if(offsetElement == document.body) {
    x1 = 0;
    y1 = 0;
    x2 = ASPx.GetDocumentMaxClientWidth();
    y2 = ASPx.GetDocumentMaxClientHeight();
   }
   else{
    x2 += offsetElement.offsetWidth;
    y2 += offsetElement.offsetHeight;
   }
   if(x1 < ASPx.GetDocumentScrollLeft())
    x1 = ASPx.GetDocumentScrollLeft();
   if(y1 < ASPx.GetDocumentScrollTop())
    y1 = ASPx.GetDocumentScrollTop();
   if(x2 > ASPx.GetDocumentScrollLeft() + ASPx.GetDocumentClientWidth())
    x2 = ASPx.GetDocumentScrollLeft() + ASPx.GetDocumentClientWidth();
   if(y2 > ASPx.GetDocumentScrollTop() + ASPx.GetDocumentClientHeight())
    y2 = ASPx.GetDocumentScrollTop() + ASPx.GetDocumentClientHeight();
   x = x1 + ((x2 - x1 - loadingPanel.offsetWidth) / 2);
   y = y1 + ((y2 - y1 - loadingPanel.offsetHeight) / 2);
  }
  if(ASPx.IsExists(offsetX) && ASPx.IsExists(offsetY)){
   x += offsetX;
   y += offsetY;
  }
  x = ASPx.PrepareClientPosForElement(x, loadingPanel, true);
  y = ASPx.PrepareClientPosForElement(y, loadingPanel, false);
  if(ASPx.Browser.IE && ASPx.Browser.Version > 8) {
   x = Math.round(x);
   y = Math.round(y);
  }
  ASPx.SetStyles(loadingPanel, { left: x, top: y });
 },
 GetLoadingDiv: function(){
  return ASPx.GetElementById(this.name + "_LD");
 },
 CreateLoadingDiv: function(parentElement, offsetElement){
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingDiv();
  if(parentElement == null) 
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  if(!offsetElement)
   offsetElement = parentElement;
  var div = this.GetLoadingDiv();
  if(div != null){
   div = div.cloneNode(true);
   parentElement.appendChild(div);
   ASPx.SetElementDisplay(div, true);
   ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseDownEventName, ASPx.Evt.PreventEvent);
   ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseMoveEventName, ASPx.Evt.PreventEvent);
   ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseUpEventName, ASPx.Evt.PreventEvent);
   ASPx.Evt.AttachEventToElement(div, ASPx.Evt.GetMouseWheelEventName(), ASPx.Evt.PreventEvent);
   this.SetLoadingDivBounds(offsetElement, div);
   this.loadingDivElement = div;
   this.SetInitialLoadingDivOpacity();
   return div;
  }
  return null;
 },
 SetInitialLoadingDivOpacity: function() {
  if(!this.loadingDivElement) return;
  ASPx.Attr.SaveStyleAttribute(this.loadingDivElement, "opacity");
  ASPx.Attr.SaveStyleAttribute(this.loadingDivElement, "filter");
  ASPx.SetElementOpacity(this.loadingDivElement, 0.01);
 },
 RestoreLoadingDivOpacity: function() {
  if(!this.loadingDivElement) return;
  ASPx.Attr.RestoreStyleAttribute(this.loadingDivElement, "opacity");
  ASPx.Attr.RestoreStyleAttribute(this.loadingDivElement, "filter");
 },
 SetLoadingDivBounds: function(offsetElement, loadingDiv) {
  var absX = (offsetElement == document.body) ? 0 : ASPx.GetAbsoluteX(offsetElement);
  var absY = (offsetElement == document.body) ? 0 : ASPx.GetAbsoluteY(offsetElement);
  ASPx.SetStyles(loadingDiv, {
   left: ASPx.PrepareClientPosForElement(absX, loadingDiv, true),
   top: ASPx.PrepareClientPosForElement(absY, loadingDiv, false)
  });
  var width = (offsetElement == document.body) ? ASPx.GetDocumentWidth() : offsetElement.offsetWidth;
  var height = (offsetElement == document.body) ? ASPx.GetDocumentHeight() : offsetElement.offsetHeight;
  if(height < 0) 
   height = 0;
  ASPx.SetStyles(loadingDiv, { width: width, height: height });
  var correctedWidth = 2 * width - loadingDiv.offsetWidth;
  if(correctedWidth <= 0) correctedWidth = width;
  var correctedHeight = 2 * height - loadingDiv.offsetHeight;
  if(correctedHeight <= 0) correctedHeight = height;
  ASPx.SetStyles(loadingDiv, { width: correctedWidth, height: correctedHeight });
 },
 ShowLoadingDiv: function() {
 },
 HideLoadingDiv: function() {
  this.hasPhantomLoadingElements = false;
  if(ASPx.IsExistsElement(this.loadingDivElement)){
   ASPx.RemoveElement(this.loadingDivElement);
   this.loadingDivElement = null;
  }
 },
 CanHandleGesture: function(evt) {
  return false;
 },
 CanHandleGestureCore: function(evt) {
  var source = ASPx.Evt.GetEventSource(evt);
  if(ASPx.GetIsParent(this.loadingPanelElement, source) || ASPx.GetIsParent(this.loadingDivElement, source))
   return true; 
  var callbackAnimationElement = this.GetCallbackAnimationElement();
  if(!callbackAnimationElement)
   return false;
  var animationContainer = ASPx.AnimationHelper.getSlideAnimationContainer(callbackAnimationElement, false, false);
  if(animationContainer && ASPx.GetIsParent(animationContainer, source) && !ASPx.GetIsParent(animationContainer.childNodes[0], source))
   return true; 
  return this.CanHandleGesture(evt); 
 },
 AllowStartGesture: function() {
  return !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing;
 },
 StartGesture: function() {
 },
 AllowExecuteGesture: function(value) {
  return false;
 },
 ExecuteGesture: function(value) {
 },
 CancelGesture: function(value) {
  if(this.repeatedGestureCount === 0) {
   this.repeatedGestureValue = value;
   this.repeatedGestureCount = 1;
  }
  else {
   if(this.repeatedGestureValue * value > 0)
    this.repeatedGestureCount++;
   else
    this.repeatedGestureCount--;
   if(this.repeatedGestureCount === 0)
    this.repeatedGestureCount = 0;
  }
 },
 CheckRepeatGesture: function() {
  if(this.repeatedGestureCount !== 0) {
   if(this.AllowExecuteGesture(this.repeatedGestureValue))
    this.ExecuteGesture(this.repeatedGestureValue, this.repeatedGestureCount);
   this.repeatedGestureValue = 0;
   this.repeatedGestureCount = 0;
  }
 },
 AllowExecutePagerGesture: function (pageIndex, pageCount, value) {
  if(pageIndex < 0) return false;
  if(pageCount <= 1) return false;
  if(value > 0 && pageIndex === 0) return false;
  if(value < 0 && pageIndex === pageCount - 1) return false;
  return true;
 },
 ExecutePagerGesture: function(pageIndex, pageCount, value, count, method) {
  if(!count) count = 1;
  var pageIndex = pageIndex + (value < 0 ? count : -count);
  if(pageIndex < 0) pageIndex = 0;
  if(pageIndex > pageCount - 1) pageIndex = pageCount - 1;
  method(PagerCommands.PageNumber + pageIndex);
 },
 RaiseInit: function(){
  if(!this.Init.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.Init.FireEvent(this, args);
  }
 },
 RaiseBeginCallbackInternal: function(command){
  if(!this.BeginCallback.IsEmpty()){
   var args = new ASPxClientBeginCallbackEventArgs(command);
   this.BeginCallback.FireEvent(this, args);
  }
 },
 RaiseEndCallbackInternal: function(command) {
  if(!this.EndCallback.IsEmpty()){
   var args = new ASPxClientEndCallbackEventArgs(command);
   this.EndCallback.FireEvent(this, args);
  }
 },
 RaiseCallbackErrorInternal: function(message, callbackId) {
  if(!this.CallbackError.IsEmpty()) {
   var args = new ASPxClientCallbackErrorEventArgs(message, callbackId);
   this.CallbackError.FireEvent(this, args);
   if(args.handled)
    return { isHandled: true, errorMessage: args.message };
  }
 },
 RaiseBeginCallback: function(command){
  this.RaiseBeginCallbackInternal(command);    
  aspxGetControlCollection().RaiseBeginCallback(this, command);
 },
 RaiseEndCallback: function(command){
  this.RaiseEndCallbackInternal(command);
  aspxGetControlCollection().RaiseEndCallback(this, command);
 },
 RaiseCallbackError: function (message, callbackId) {
  var result = this.RaiseCallbackErrorInternal(message, callbackId);
  if(!result) 
   result = aspxGetControlCollection().RaiseCallbackError(this, message, callbackId);
  return result;
 },
 RaiseEndCallbackAnimationStart: function(){
  if(!this.EndCallbackAnimationStart.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.EndCallbackAnimationStart.FireEvent(this, args);
  }
 },
 RaiseBeforePronounce: function(message) {
  var args = new ASPxClientControlBeforePronounceEventArgs(message, this);
  if(!this.BeforePronounce.IsEmpty())
   this.BeforePronounce.FireEvent(this, args);
  return args;
 },
 RaiseUnload: function() {
  var args = new ASPxClientControlUnloadEventArgs(this);
  if(!this.Unload.IsEmpty())
   this.Unload.FireEvent(this, args);
 },
 SendMessageToAssistiveTechnology: function(message) {
  if(!this.accessibilityCompliant)
   return;
  this.PronounceMessageInternal(message, ASPx.AccessibilityPronouncerType.live);
 },
 PronounceMessageInternal: function(messageArg, type) {
  var message = messageArg;
  if(!ASPx.Ident.IsArray(messageArg))
   message = [messageArg];
  var args = this.RaiseBeforePronounce(message);
  ASPx.AccessibilityPronouncer.Pronounce(args, type);
 },
 IsVisible: function() {
  var element = this.GetMainElement();
  return ASPx.IsElementVisible(element);
 },
 IsDisplayedElement: function(element) {
  while(element && element.tagName != "BODY") {
   if(!ASPx.GetElementDisplay(element)) 
    return false;
   element = element.parentNode;
  }
  return true;
 },
 IsDisplayed: function() {
  return this.IsDisplayedElement(this.GetMainElement());
 },
 IsHiddenElement: function(element) {
  return element && element.offsetWidth == 0 && element.offsetHeight == 0;
 },
 IsHidden: function() {
  return this.IsHiddenElement(this.GetMainElement());
 },
 GetParentControl: function() {
  var mainElement = this.GetMainElement() || (this.GetCurrentWindowElement && this.GetCurrentWindowElement());
  var popupPostfix = ASPx.PCWIdSuffix + "-1";
  var result = null;
  ASPx.GetParent(mainElement, function(element) {
   if(element === mainElement || !element.id)
    return false;
   var controlName = element.id.replace(popupPostfix, "");
   result = ASPx.GetControlCollection().Get(controlName);
   return !!result;
  });
  return result;
 },
 findParentByType: function (type) {
  var ctrl = this;
  while (ctrl) {
   var parent = ctrl.GetParentControl();
   if (parent && parent instanceof type)
    return parent;
   ctrl = parent;
  }
  return null;
 },
 Focus: function() {
 },
 GetClientVisible: function(){
  return this.GetVisible();
 },
 SetClientVisible: function(visible){
  this.SetVisible(visible);
 },
 GetVisible: function(){
  return this.clientVisible;
 },
 SetVisible: function(visible){
  if(this.clientVisible != visible){
   this.clientVisible = visible;
   ASPx.SetElementDisplay(this.GetMainElement(), visible);
   if(visible) {
    this.AdjustControl();
    var mainElement = this.GetMainElement();
    if(mainElement)
     aspxGetControlCollection().AdjustControls(mainElement);
   }
  }
 },
 GetEnabled: function() {
  return this.clientEnabled;
 },
 SetEnabled: function(enabled) {
  this.clientEnabled = enabled;
  if(ASPxClientControl.setEnabledLocked)
   return;
  else
   ASPxClientControl.setEnabledLocked = true;
  this.savedClientEnabled = enabled;
  aspxGetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function(control) {
   if(ASPx.IsFunction(control.SetEnabled))
    control.SetEnabled(enabled && control.savedClientEnabled);
  });
  delete ASPxClientControl.setEnabledLocked;
 },
 InCallback: function() {
  return this.requestCount > 0;
 },
 DoBeginCallback: function(command) {
  this.RaiseBeginCallback(command || "");
  aspxGetControlCollection().Before_WebForm_InitCallback(this.name);
  if(typeof(WebForm_InitCallback) != "undefined" && WebForm_InitCallback) {
   __theFormPostData = "";
   __theFormPostCollection = [ ];
   this.ClearPostBackEventInput("__EVENTTARGET");
   this.ClearPostBackEventInput("__EVENTARGUMENT");
   WebForm_InitCallback();
   this.savedFormPostData = __theFormPostData;   
   this.savedFormPostCollection = __theFormPostCollection;
  }
 },
 ClearPostBackEventInput: function(id){
  var element = ASPx.GetElementById(id);
  if(element != null) element.value = "";
 },
 PerformDataCallback: function(arg, handler) {
  this.CreateCustomDataCallback(arg, "", handler);
 },
 sendCallbackViaQueue: function (prefix, arg, showLoadingPanel, context, handler, onBeforeSend) {
  if (!this.useCallbackQueue())
   return false;
  var context = context || this;
  var token = this.callbackQueueHelper.sendCallback(ASPx.FormatCallbackArg(prefix, arg), context, handler || context.OnCallback, prefix, onBeforeSend);
  if (showLoadingPanel)
   this.callbackQueueHelper.showLoadingElements();
  return token;
 },
 CreateCallback: function (arg, command, handler) {
  var callbackInfo = this.CreateCallbackInfo(ASPx.CallbackType.Common, handler || null);
  var callbackID = this.CreateCallbackByInfo(arg, command, callbackInfo);
  return callbackID;
 },
 CreateCustomDataCallback: function(arg, command, handler) {
  var callbackInfo = this.CreateCallbackInfo(ASPx.CallbackType.Data, handler);
  this.CreateCallbackByInfo(arg, command, callbackInfo);
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  if(!this.CanCreateCallback()) return;
  var callbackID;
  if(typeof(WebForm_DoCallback) != "undefined" && WebForm_DoCallback && ASPx.documentLoaded || ASPx.Platform === "NETCORE")
   callbackID = this.CreateCallbackInternal(arg, command, true, callbackInfo);
  else {
   if(!this.savedCallbacks)
    this.savedCallbacks = [];
   var callbackInfo = { arg: arg, command: command, callbackInfo: callbackInfo };
   if(this.allowMultipleCallbacks)
    this.savedCallbacks.push(callbackInfo);
   else
    this.savedCallbacks[0] = callbackInfo;
  }
  return callbackID;
 },
 CreateCallbackInternal: function(arg, command, viaTimer, callbackInfo) {
  var watcher = ASPx.ControlUpdateWatcher.getInstance();
  if(watcher && !watcher.CanSendCallback(this, arg)) {
   this.CancelCallbackInternal();
   return;
  }
  this.requestCount++;
  this.DoBeginCallback(command);
  if(typeof(arg) == "undefined")
   arg = "";
  if(typeof(command) == "undefined")
   command = "";
  var callbackID = this.SaveCallbackInfo(callbackInfo, command),
   customArgs = this.GetCustomCallbackArgs();
  if(viaTimer)
   window.setTimeout(function() { this.CreateCallbackCoreWithCustomArgs(arg, command, callbackID, customArgs); }.aspxBind(this), 0);
  else
   this.CreateCallbackCoreWithCustomArgs(arg, command, callbackID, customArgs);
  return callbackID;
 },
 CreateCallbackCoreWithCustomArgs: function(arg, command, callbackID, customArgs) {
  this.CreateCallbackCore(arg, command, callbackID);
 },
 GetCustomCallbackArgs: function() {
  return {};
 },
 CancelCallbackInternal: function() {
  this.CancelCallbackCore();
  this.HideLoadingElements();
 },
 CancelCallbackCore: function() {
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  var callBackMethod = this.GetCallbackMethod(command);
  __theFormPostData = this.savedFormPostData;
  __theFormPostCollection = this.savedFormPostCollection;
  callBackMethod.call(this, this.GetSerializedCallbackInfoByID(callbackID) + arg);
 },
 GetCallbackMethod: function(command){
  return this.callBack;
 },
 CanCreateCallback: function() {
  return !this.InCallback() || (this.allowMultipleCallbacks && !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing);
 },
 DoLoadCallbackScripts: function() {
  ASPx.ProcessScriptsAndLinks(this.name, true);
 },
 DoEndCallback: function() {
  if(this.IsCallbackAnimationEnabled() && this.CheckEndCallbackAnimationNeeded()) 
   return;
  this.requestCount--;
  if (this.requestCount < 1) 
   this.callbackHandlersQueue.executeCallbacksHandlers();
  if(this.HideLoadingPanelOnCallback() && this.requestCount < 1) 
   this.HideLoadingElements();
  if(this.isSwipeGesturesEnabled() && this.supportGestures) {
   ASPx.GesturesHelper.UpdateSwipeAnimationContainer(this.name);
   if(this.touchUIMouseScroller)
    this.touchUIMouseScroller.update();
  }
  this.isCallbackAnimationPrevented = false;
  this.OnCallbackFinalized();
  this.AssignEllipsisTooltips();
  var command = this.GetCallbackCommand();
  this.RaiseEndCallback(command);
  this.currentCallbackID = -1;
 },
 DoFinalizeCallback: function() {
 },
 OnCallbackFinalized: function() {
 },
 AssignEllipsisTooltips: function() { },
 GetCallbackCommand: function() {
  var result = "";
  if(this.currentCallbackID != -1) {
   var command = this.callbackCommand[this.currentCallbackID];
   if(command)
    result = command;
  }
  return result;
 },
 HideLoadingPanelOnCallback: function() {
  return true;
 },
 ShouldHideExistingLoadingElements: function() {
  return true;
 },
 EvalCallbackResult: function(resultString){
  return eval(resultString);
 },
 ParseJSProperties: function(resultObj) {
  if(resultObj.cp) {
   for(var name in resultObj.cp)
    if(resultObj.cp.hasOwnProperty(name)) {
     this[name] = resultObj.cp[name];
     if(this.aspNetCoreWrapperInstance)
      this.aspNetCoreWrapperInstance[name] = resultObj.cp[name]; 
    }
  }
 },
 DoCallback: function(result) {
  if(this.IsCallbackAnimationEnabled() && this.CheckBeginCallbackAnimationInProgress(result))
   return;
  result = ASPx.Str.Trim(result);
  if(result.indexOf(ASPx.CallbackResultPrefix) != 0) 
   this.ProcessCallbackGeneralError(result, false);
  else {
   var resultObj = null;
   try {
    resultObj = this.EvalCallbackResult(result);
   } 
   catch(e) {
   }
   if(resultObj) {
    this.currentCallbackID = resultObj.id;
    ASPx.CacheHelper.DropCache(this);
    if(resultObj.redirect) {
     this.ParseJSProperties(resultObj); 
     ASPx.Url.Redirect(resultObj.redirect);
    }
    else if(ASPx.IsExists(resultObj.generalError)) {
     this.ProcessCallbackGeneralError(resultObj.generalError, true);
    }
    else {
     var errorObj = resultObj.error;
     if(errorObj) { 
      if(this.parseJSPropertiesOnCallbackError)
       this.ParseJSProperties(resultObj);
      this.ProcessCallbackError(errorObj,resultObj.id);
     } else {
      this.ParseJSProperties(resultObj);
      var callbackInfo = this.DequeueCallbackInfo(resultObj.id);
      if(callbackInfo && callbackInfo.type == ASPx.CallbackType.Data)
       this.ProcessCustomDataCallback(resultObj.result, callbackInfo);
      else {
       if (this.useCallbackQueue() && this.callbackQueueHelper.getCallbackInfoById(resultObj.id))
        this.callbackQueueHelper.processCallback(resultObj.result, resultObj.id);
       else {
        this.ProcessCallback(resultObj.result, resultObj.id);
        if(callbackInfo && callbackInfo.handler) {
         var handlerInfo = { handler: callbackInfo.handler, result: resultObj.result.data };
         this.callbackHandlersQueue.addCallbackHandler(handlerInfo);
        }
       }
      }
     }
    }
   }
  }
  this.DoLoadCallbackScripts();
 },
 DoCallbackError: function(result) {
  this.HideLoadingElements();
  this.ProcessCallbackGeneralError(result, false); 
 },
 DoControlClick: function(evt) {
  this.OnControlClick(ASPx.Evt.GetEventSource(evt), evt);
 },
 ProcessCallback: function (result, callbackId) {
  this.OnCallback(result, callbackId);
 },
 ProcessCustomDataCallback: function(result, callbackInfo) {
  if(callbackInfo.handler != null)
   callbackInfo.handler(this, result);
  this.RaiseCustomDataCallback(result);
 },
 RaiseCustomDataCallback: function(result) {
  if(!this.CustomDataCallback.IsEmpty()) {
   var arg = new ASPxClientCustomDataCallbackEventArgs(result);
   this.CustomDataCallback.FireEvent(this, arg);
  }
 },
 OnCallback: function(result) {
 },
 CreateCallbackInfo: function(type, handler) {
  return { type: type, handler: handler };
 },
 GetSerializedCallbackInfoByID: function(callbackID) {
  return this.GetCallbackInfoByID(callbackID).type + callbackID + ASPx.CallbackSeparator;
 },
 SaveCallbackInfo: function(info, command) {
  var callbacks = this.GetActiveCallbacksInfo();
  var index = callbacks.indexOf(null);
  if(index === -1)
   index = callbacks.length;
  callbacks[index] = info;
  this.callbackCommand[index] = command;
  return index;
 },
 GetActiveCallbacksInfo: function() {
  var persistentProperties = this.GetPersistentProperties();
  if(!persistentProperties.activeCallbacks)
   persistentProperties.activeCallbacks = [ ];
  return persistentProperties.activeCallbacks;
 },
 GetPersistentProperties: function() {
  var storage = _aspxGetPersistentControlPropertiesStorage();
  var persistentProperties = storage[this.name];
  if(!persistentProperties) {
   persistentProperties = { };
   storage[this.name] = persistentProperties;
  }
  return persistentProperties;
 },
 GetCallbackInfoByID: function(callbackID) {
  return this.GetActiveCallbacksInfo()[callbackID];
 },
 DequeueCallbackInfo: function(index) {
  var activeCallbacksInfo = this.GetActiveCallbacksInfo();
  if(index < 0 || index >= activeCallbacksInfo.length)
   return null;
  var result = activeCallbacksInfo[index];
  activeCallbacksInfo[index] = null;
  return result;
 },
 ProcessCallbackError: function (errorObj, callbackId) {
  var data = ASPx.IsExists(errorObj.data) ? errorObj.data : null;
  var result = this.RaiseCallbackError(errorObj.message, callbackId);
  if(result.isHandled)
   this.OnCallbackErrorAfterUserHandle(result.errorMessage, data); 
  else
   this.OnCallbackError(result.errorMessage, data); 
 },
 OnCallbackError: function(errorMessage, data) {
  if(errorMessage)
   ASPx.ShowErrorAlert(errorMessage);
 },
 OnCallbackErrorAfterUserHandle: function(errorMessage, data) {
 },
 ProcessCallbackGeneralError: function(errorMessage, serverExceptionOnLastCallback) {
  this.serverExceptionOnLastCallback = serverExceptionOnLastCallback;
  var result = this.RaiseCallbackError(errorMessage);
  if(result.isHandled)
   this.OnCallbackGeneralErrorAfterUserHandle(result.errorMessage);
  else
   this.OnCallbackGeneralError(result.errorMessage);
 },
 OnCallbackGeneralError: function(errorMessage) {
  this.OnCallbackError(errorMessage, null);
 },
 OnCallbackGeneralErrorAfterUserHandle: function (errorMessage) {
 },
 SendPostBack: function(params, preventConvertToUpdatePanelCallback) {
  if(preventConvertToUpdatePanelCallback)
   this.sendMSAjaxCompatPostBack(params);
  else
   this.sendPostBackInternal(params);
 },
 sendPostBackInternal: function(params) {
  if(typeof(__doPostBack) != "undefined")
   __doPostBack(this.uniqueID, params);
  else{
   var form = this.GetParentForm();
   if(form) form.submit();
  }
 },
 sendMSAjaxCompatPostBack: function(params) {
  var rm = ASPx.GetMSAjaxRequestManager();
  var triggers = rm ? rm._postBackControlClientIDs : null;
  var needRegister = triggers && ASPx.Ident.IsArray(triggers) && ASPx.Data.ArrayIndexOf(triggers, this.name) == -1;
  if(needRegister)
   triggers.unshift(this.name);
  this.sendPostBackInternal(params);
  if(needRegister)
   triggers.shift();
 },
 IsValidInstance: function () {
  return aspxGetControlCollection().GetByName(this.name) === this;
 },
 OnDispose: function() { 
  var varName = this.globalName;
  if(varName && varName !== "" && window && window[varName] && window[varName] == this){
   try{
    delete window[varName];
   }
   catch(e){  }
  }
  if(this.callbackQueueHelper)
   this.callbackQueueHelper.detachEvents();
 },
 OnGlobalControlsInitialized: function(args) { 
 },
 OnGlobalBrowserWindowResized: function(args) { 
 },
 OnGlobalBeginCallback: function(args) { 
 },
 OnGlobalEndCallback: function(args) { 
 },
 OnGlobalCallbackError: function(args) { 
 },
 OnGlobalValidationCompleted: function(args) { 
 },
 AddDefaultStateControllerItems: function() {
  var states = this.scStates;
  if(!states) return;
  var postfix = this.scPostfix ? ("_" + this.scPostfix) : "";
  var mainElementId = this.GetMainElementId();
  if(states & 2)
   this.AddDefaultReadOnlyStateControllerItem(this.scPrefix + "ReadOnly" + postfix, mainElementId);
  if(states & 4)
   this.AddDefaultDisabledStateControllerItem(this.scPrefix + "Disabled" + postfix, mainElementId);
 },
 AddDefaultReadOnlyStateControllerItem: function(cssClass, mainElementId) { throw "Not implemented"; },
 AddDefaultDisabledStateControllerItem: function(cssClass, mainElementId) { throw "Not implemented"; },
 DOMContentLoaded: function() { },
 IsStateControllerEnabled: function() { return false; },
 InitializeDOM: function() {
  var mainElement = this.GetMainElement();
  if(mainElement)
   ASPx.SetElementInitializedFlag(mainElement);
 },
 IsDOMInitialized: function() {
  var mainElement = this.GetMainElement();
  return mainElement && ASPx.GetElementInitializedFlag(mainElement);
 },
 AdjustControl: function(nestedCall) { },
 OnBrowserWindowResizeInternal: function(e) { },
 RegisterInControlTree: function(tree) { }
});
ASPxClientControlBase.Cast = function(obj) {
 if(typeof obj == "string")
  return window[obj];
 return obj;
};
var persistentControlPropertiesStorage = null;
function _aspxGetPersistentControlPropertiesStorage() {
 if(persistentControlPropertiesStorage == null)
  persistentControlPropertiesStorage = { };
 return persistentControlPropertiesStorage;
}
var ELLIPSIS_MARKER_CLASS = "dx-ellipsis";
var ELLIPSIS_TOOLTIP_MARKER_ATTR = "dxEllipsisTitle";
var ASPxClientControl = ASPx.CreateClass(ASPxClientControlBase, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.rtl = false;
  this.enableEllipsis = false;
  this.isNative = false;
  this.isControlCollapsed = false;
  this.isInsideHierarchyAdjustment = false;
  this.controlOwner = null;
  this.adjustedSizes = { };
  this.dialogContentHashTable = { };
  this.renderIFrameForPopupElements = false;
  this.widthValueSetInPercentage = false;
  this.heightValueSetInPercentage = false;
  this.verticalAlignedElements = { };
  this.wrappedTextContainers = { };
  this.scrollPositionState = { };
  this.sizingConfig = {
   allowSetWidth: true,
   allowSetHeight: true,
   correction : false,
   adjustControl : false,
   supportPercentHeight: false,
   supportAutoHeight: false
  };
  this.percentSizeConfig = {
   width: -1,
   height: -1,
   markerWidth: -1,
   markerHeight: -1
  };  
 },
 querySelector: function(selector) { return this.querySelectorAll(selector)[0] || null; },
 querySelectorAll: function(selector) {
  return ASPx.CacheHelper.GetCachedElement(this, "querySelectorAll_" + selector,
   function() { return Array.prototype.slice.call(this.GetMainElement().querySelectorAll(selector)); });
 },
 createAccessKey: function (popupItem, getPopupElement, keyTipElement, key, onlyClick, manualStopProcessing) {
  return new ASPx.AccessKey(popupItem, getPopupElement, keyTipElement, key, onlyClick, manualStopProcessing);
 },
 InlineInitialize: function() {
  this.InitializeDOM();
  ASPxClientControlBase.prototype.InlineInitialize.call(this);
 },
 AfterCreate: function() { 
  ASPxClientControlBase.prototype.AfterCreate.call(this);
  if(!this.CanInitializeAdjustmentOnDOMContentLoaded() || ASPx.IsStartupScriptsRunning())
   this.InitializeAdjustment();
 },
 DOMContentLoaded: function() {
  if(this.CanInitializeAdjustmentOnDOMContentLoaded()) 
   this.InitializeAdjustment();
 },
 CanInitializeAdjustmentOnDOMContentLoaded: function() {
  return !ASPx.Browser.IE || ASPx.Browser.Version >= 10; 
 },
 InitializeAdjustment: function() {
  this.UpdateAdjustmentFlags();
  this.AdjustControl();
 },
 AfterInitialize: function() {
  this.AdjustControl();
  ASPxClientControlBase.prototype.AfterInitialize.call(this);
 },
 IsStateControllerEnabled: function(){
  return typeof(ASPx.GetStateController) != "undefined" && ASPx.GetStateController();
 },
 GetWidth: function() {
  return this.GetMainElement().offsetWidth;
 },
 GetHeight: function() {
  return this.GetMainElement().offsetHeight;
 },
 SetWidth: function(width) {
  if(this.sizingConfig.allowSetWidth)
   this.SetSizeCore("width", width, "GetWidth", false);
 },
 SetHeight: function(height) {
  if(this.sizingConfig.allowSetHeight)
   this.SetSizeCore("height", height, "GetHeight", false);
 },
 SetSizeCore: function(sizePropertyName, size, getFunctionName, corrected) {
  if(size < 0)
   return;
  this.GetMainElement().style[sizePropertyName] = size + "px";
  this.UpdateAdjustmentFlags(sizePropertyName);
  if(this.sizingConfig.adjustControl)
   this.AdjustControl(true);
  if(this.sizingConfig.correction && !corrected) {
   var realSize = this[getFunctionName]();
   if(realSize != size) {
    var correctedSize = size - (realSize - size);
    this.SetSizeCore(sizePropertyName, correctedSize, getFunctionName, true);
   }
  }
 },
 AdjustControl: function(nestedCall) {
  if(this.IsAdjustmentRequired() && (!ASPxClientControl.adjustControlLocked || nestedCall)) {
   ASPxClientControl.adjustControlLocked = true;
   try {
    if(!this.IsAdjustmentAllowed())
     return;
    this.AdjustControlCore();
    this.UpdateAdjustedSizes();
   } 
   finally {
    delete ASPxClientControl.adjustControlLocked;
   }
  }
  this.AssignEllipsisTooltips();
  this.TryShowPhantomLoadingElements();
 },
 ResetControlAdjustment: function () {
  this.adjustedSizes = { };
 },
 UpdateAdjustmentFlags: function(sizeProperty) {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementStyle = ASPx.GetCurrentStyle(mainElement);
   this.UpdatePercentSizeConfig([mainElementStyle.width, mainElement.style.width], [mainElementStyle.height, mainElement.style.height], sizeProperty);
  }
 },
 UpdatePercentSizeConfig: function(widths, heights, modifyStyleProperty) {
  switch(modifyStyleProperty) {
   case "width":
    this.UpdatePercentWidthConfig(widths);
    break;
   case "height":
    this.UpdatePercentHeightConfig(heights);
    break;
   default:
    this.UpdatePercentWidthConfig(widths);
    this.UpdatePercentHeightConfig(heights);
    break;
  }
  this.ResetControlPercentMarkerSize();
 },
 UpdatePercentWidthConfig: function(widths) {
  this.widthValueSetInPercentage = false;
  for(var i = 0; i < widths.length; i++) {
   if(this.IsPercentageWidth(widths[i])) {
    this.percentSizeConfig.width = widths[i];
    this.widthValueSetInPercentage = true;
    break;
   }
  }
 },
 IsPercentageWidth: function(width) { return ASPx.IsPercentageSize(width); },
 UpdatePercentHeightConfig: function(heights) {
  this.heightValueSetInPercentage = false;
    for(var i = 0; i < heights.length; i++) {
   if(ASPx.IsPercentageSize(heights[i])) {
    this.percentSizeConfig.height = heights[i];
    this.heightValueSetInPercentage = true;
    break;
   }
  }
 },
 GetAdjustedSizes: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) 
   return { width: mainElement.offsetWidth, height: mainElement.offsetHeight };
  return { width: 0, height: 0 };
 },
 IsAdjusted: function() {
  return (this.adjustedSizes.width && this.adjustedSizes.width > 0) && (this.adjustedSizes.height && this.adjustedSizes.height > 0);
 },
 IsAdjustmentRequired: function() {
  if(!this.IsAdjusted())
   return true;
  if(this.widthValueSetInPercentage)
   return true;
  if(this.heightValueSetInPercentage)
   return true;
  var sizes = this.GetAdjustedSizes();
  for(var name in sizes){
   if(this.adjustedSizes[name] !== sizes[name])
    return true;
  }
  return false;
 },
 IsAdjustmentAllowed: function() {
  var mainElement = this.GetMainElement();
  return mainElement && this.IsDisplayed() && !this.IsHidden() && this.IsDOMInitialized();
 },
 UpdateAdjustedSizes: function() {
  var sizes = this.GetAdjustedSizes();
  for(var name in sizes)
   if(sizes.hasOwnProperty(name))
    this.adjustedSizes[name] = sizes[name];
 },
 AdjustControlCore: function() {
 },
 AdjustAutoHeight: function() {
 },
 IsControlCollapsed: function() {
  return this.isControlCollapsed;
 },
 NeedCollapseControl: function() {
  return this.NeedCollapseControlCore() && this.IsAdjustmentRequired() && this.IsAdjustmentAllowed();
 },
 NeedCollapseControlCore: function() {
  return false;
 },
 CollapseEditor: function() {
 },
 CollapseControl: function() {
  this.SaveScrollPositions();
  var mainElement = this.GetMainElement(),
   marker = this.GetControlPercentSizeMarker();
  marker.style.height = this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight
   ? this.percentSizeConfig.height 
   : (mainElement.offsetHeight + "px");
  mainElement.style.display = "none";
  this.isControlCollapsed = true;
 },
 ExpandControl: function() {
  var mainElement = this.GetMainElement();
  mainElement.style.display = "";
  this.GetControlPercentSizeMarker().style.height = "0px";
  this.isControlCollapsed = false;
  this.RestoreScrollPositions();
 },
 CanCauseReadjustment: function() {
  return this.NeedCollapseControlCore();
 },
 IsExpandableByAdjustment: function() {
  return false;
 },
 HasFixedPosition: function() {
  return false;
 },
 SaveScrollPositions: function() {
  var mainElement = this.GetMainElement();
  this.scrollPositionState.outer = ASPx.GetOuterScrollPosition(mainElement.parentNode);
  this.scrollPositionState.inner = ASPx.GetInnerScrollPositions(mainElement);
 },
 RestoreScrollPositions: function() {
  ASPx.RestoreOuterScrollPosition(this.scrollPositionState.outer);
  ASPx.RestoreInnerScrollPositions(this.scrollPositionState.inner);
 },
 GetControlPercentSizeMarker: function() {
  if(this.percentSizeMarker === undefined) {
   this.percentSizeMarker = ASPx.CreateHtmlElementFromString("<div style='height:0px;font-size:0px;line-height:0;width:100%;'></div>");
   ASPx.InsertElementAfter(this.percentSizeMarker, this.GetMainElement());
  }
  return this.percentSizeMarker;
 },
 KeepControlPercentSizeMarker: function(needCollapse, needCalculateHeight) {
  var marker = this.GetControlPercentSizeMarker(),
   markerHeight;
  if(needCollapse)
   this.CollapseControl();
  if(this.widthValueSetInPercentage && marker.style.width !== this.percentSizeConfig.width)
   marker.style.width = this.percentSizeConfig.width;
  if(needCalculateHeight) {
   if(this.IsControlCollapsed())
    markerHeight = marker.style.height;
   marker.style.height = this.percentSizeConfig.height;
  }
  this.percentSizeConfig.markerWidth = marker.offsetWidth;
  if(needCalculateHeight) {
   this.percentSizeConfig.markerHeight = marker.offsetHeight;
   if(this.IsControlCollapsed())
    marker.style.height = markerHeight;
   else
    marker.style.height = "0px";
  }
  if(needCollapse)
   this.ExpandControl();
 },
 ResetControlPercentMarkerSize: function() {
  this.percentSizeConfig.markerWidth = -1;
  this.percentSizeConfig.markerHeight = -1;
 },
 GetControlPercentMarkerSize: function(hideControl, force) {
  var needCalculateHeight = this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight;
  if(force || this.percentSizeConfig.markerWidth < 1 || (needCalculateHeight && this.percentSizeConfig.markerHeight < 1))
   this.KeepControlPercentSizeMarker(hideControl && !this.IsControlCollapsed(), needCalculateHeight);
  return {
   width: this.percentSizeConfig.markerWidth,
   height: this.percentSizeConfig.markerHeight
  };
 },
 AssignEllipsisTooltips: function() {
  if(this.RequireAssignTooltips())
   this.AssignEllipsisTooltipsCore();
 },
 AssignEllipsisTooltipsCore: function(rootElement, reassingExistingTooltips) {
  var requirePaddingManipulation = ASPx.Browser.IE || ASPx.Browser.Edge || ASPx.Browser.Firefox;
  rootElement = rootElement || this.GetMainElement();
  var nodes = this.GetEllipsisNodes(rootElement);
  var nodeInfos = [];
  var nodesCount = nodes.length;
  for(var i = 0; i < nodesCount; i++) {
   var node = nodes[i];
   var info = { node: node };
   if(requirePaddingManipulation) {
    var style = ASPx.GetCurrentStyle(node);
    info.paddingLeft = node.style.paddingLeft;
    info.totalPadding = ASPx.GetLeftRightPaddings(node, style);
   }
   nodeInfos.push(info);
  }
  if(requirePaddingManipulation) {
   for(var i = 0; i < nodesCount; i++) {
    var info = nodeInfos[i];
    ASPx.SetStyles(info.node, { paddingLeft: info.totalPadding }, true);
   }
  }
  for(var i = 0; i < nodesCount; i++) {
   var info = nodeInfos[i];
   var node = info.node;
   info.isTextShortened = node.scrollWidth > node.clientWidth;
   info.hasTitle = ASPx.Attr.GetAttribute(node, "title") !== null;
   if(!info.hasTitle || reassingExistingTooltips)
    info.title = this.GetEllipsisTooltipText(node);
  }
  for(var i = 0; i < nodesCount; i++) {
   var info = nodeInfos[i];
   var node = info.node;
   if(info.isTextShortened && info.title) {
    ASPx.Attr.SetAttribute(node, "title", info.title);
    ASPx.Attr.SetAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR, true);
   }
   if(!info.isTextShortened && info.hasTitle)
    ASPx.Attr.RemoveAttribute(node, "title");
  }
  if(requirePaddingManipulation) {
   for(var i = 0; i < nodesCount; i++) {
    var info = nodeInfos[i];
    var node = info.node;
    node.style.paddingLeft = info.paddingLeft;
   }
  }
 },
 GetEllipsisNodes: function(element) {
  var ellipsibleNodes = ASPx.Data.CollectionToArray(ASPx.GetNodesByClassName(element, ELLIPSIS_MARKER_CLASS));
  if(ASPx.ElementHasCssClass(element, ELLIPSIS_MARKER_CLASS))
   ellipsibleNodes.push(element);
  return ellipsibleNodes.filter(function(node) {
   return !ASPx.Attr.IsExistsAttribute(node, "title") || ASPx.Attr.IsExistsAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR);
  });
 },
 GetEllipsisTooltipText: function(element) {
  return ASPx.GetInnerText(element);
 },
 RequireAssignTooltips: function() {
  return this.enableEllipsis && !ASPx.Browser.MobileUI;
 },
 RemoveEllipsisFromNode: function(node) {
  ASPx.RemoveClassNameFromElement(node, ELLIPSIS_MARKER_CLASS);
  this.RemoveEllipsisTooltip(node);
 },
 RemoveEllipsisTooltip: function(node) {
  if(ASPx.Attr.IsExistsAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR)) {
   ASPx.Attr.RemoveAttribute(node, "title");
   ASPx.Attr.RemoveAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR);
  }
 },
 OnBrowserWindowResize: function(e) {
 },
 OnBrowserWindowResizeInternal: function(e){
  if(this.BrowserWindowResizeSubscriber()) 
   this.OnBrowserWindowResize(e);
 },
 BrowserWindowResizeSubscriber: function() {
  return this.widthValueSetInPercentage || !this.IsAdjusted();
 },
 ShrinkWrappedText: function(getElements, key, reCorrect) {
  if(!ASPx.Browser.Safari) return;
  var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.wrappedTextContainers);
  for(var i = 0; i < elements.length; i++)
   this.ShrinkWrappedTextInContainer(elements[i], reCorrect);
 },
 ShrinkWrappedTextInContainer: function(container, reCorrect) {
  if(!ASPx.Browser.Safari || !container || (container.dxWrappedTextShrinked && !reCorrect) || container.offsetWidth === 0) return;
  ASPx.ShrinkWrappedTextInContainer(container);
  container.dxWrappedTextShrinked = true;
 },
 CorrectWrappedText: function(getElements, key, reCorrect) {
  var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.wrappedTextContainers);
  for(var i = 0; i < elements.length; i++)
   this.CorrectWrappedTextInContainer(elements[i], reCorrect);
 },
 CorrectWrappedTextInContainer: function(container, reCorrect) {
  if(!container || (container.dxWrappedTextCorrected && !reCorrect) || container.offsetWidth === 0) return;
  ASPx.AdjustWrappedTextInContainer(container);
  container.dxWrappedTextCorrected = true;
 },
 CorrectVerticalAlignment: function(alignMethod, getElements, key, reAlign) {
  var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.verticalAlignedElements);
  for(var i = 0; i < elements.length; i++)
   this.CorrectElementVerticalAlignment(alignMethod, elements[i], reAlign);
 },
 CorrectElementVerticalAlignment: function(alignMethod, element, reAlign) {
  if(!element || (element.dxVerticalAligned && !reAlign) || element.offsetHeight === 0) return;
  alignMethod(element);
  element.dxVerticalAligned = true;
 },
 ClearVerticalAlignedElementsCache: function() {
  ASPx.CacheHelper.DropCache(this.verticalAlignedElements);
 },
 ClearWrappedTextContainersCache: function() {
  ASPx.CacheHelper.DropCache(this.wrappedTextContainers);
 },
 AdjustPagerControls: function() {
  if(typeof(ASPx.GetPagersCollection) != "undefined")
   ASPx.GetPagersCollection().AdjustControls(this.GetMainElement());
 },
 RegisterInControlTree: function(tree) {
  var mainElement = this.GetMainElement();
  if(mainElement && mainElement.id)
   tree.createNode(mainElement.id, this);
 },
 GetItemElementName: function(element) {
  var name = "";
  if(element.id)
   name = element.id.substring(this.name.length + 1);
  return name;
 },
 GetLinkElement: function(element) {
  if(element == null) return null;
  return (element.tagName == "A") ? element : ASPx.GetNodeByTagName(element, "A", 0);
 },
 GetInternalHyperlinkElement: function(parentElement, index) {
  var element = ASPx.GetNodeByTagName(parentElement, "A", index);
  if(element == null) 
   element = ASPx.GetNodeByTagName(parentElement, "SPAN", index);
  return element;
 },
 OnControlClick: function(clickedElement, htmlEvent) {
 }
});
ASPxClientControl.Cast = function(obj) {
 if(typeof obj == "string")
  return window[obj];
 return obj;
};
ASPxClientControl.AdjustControls = function(container, collapseControls){
 aspxGetControlCollection().AdjustControls(container, collapseControls);
};
ASPxClientControl.GetControlCollection = function(){
 return aspxGetControlCollection();
};
ASPxClientControl.LeadingAfterInitCallConsts = {
 None: 0,
 Direct: 1,
 Reverse: 2
};
var ASPxClientComponent = ASPx.CreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 IsDOMDisposed: function() { 
  return false;
 }
});
var ASPxClientControlCollection = ASPx.CreateClass(ASPx.CollectionBase, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.prevWndWidth = "";
  this.prevWndHeight = "";
  this.requestCountInternal = 0; 
  this.BeforeInitCallback = new ASPxClientEvent();
  this.ControlsInitialized = new ASPxClientEvent();
  this.BrowserWindowResized = new ASPxClientEvent();
  this.BeginCallback = new ASPxClientEvent();
  this.EndCallback = new ASPxClientEvent();
  this.CallbackError = new ASPxClientEvent();
  this.ValidationCompleted = new ASPxClientEvent();
  aspxGetControlCollectionCollection().Add(this);
 },
 Add: function(element) {
  var existsElement = this.Get(element.name);
  if(existsElement && existsElement !== element) 
   this.Remove(existsElement);
  ASPx.CollectionBase.prototype.Add.call(this, element.name, element);
 },
 Remove: function(element) {
  if(element && element instanceof ASPxClientControl)
   element.OnDispose();
  ASPx.CollectionBase.prototype.Remove.call(this, element.name);
 },
 GetGlobal: function(name) {
  var result = window[name];
  return result && Ident.IsASPxClientControl(result)
   ? result
   : null;
 },
 GetByName: function(name){
  return this.Get(name) || this.GetGlobal(name);
 },
 GetCollectionType: function(){
  return ASPxClientControlCollection.BaseCollectionType;
 },
 GetControlsByPredicate: function(predicate) {
  var result = [];
  this.ForEachControl(function(control) {
   if(!predicate || predicate(control))
    result.push(control);
  });
  return result;
 },
 GetControlsByType: function(type) {
  return this.GetControlsByPredicate(function(control) { 
   return type && (control instanceof type);
  });
 },
 ForEachControl: function(action, context) {
  context = context || this;
  this.elementsMap.forEachEntry(function(name, control) {
   if(Ident.IsASPxClientControl(control) && (!this.filterPredicate || this.filterPredicate(control)))
    return action.call(context, control);
  }, context);
 },
 ProcessActionByPredicate: function(action, predicate) {
  try {
   this.filterPredicate = predicate;
   action(this);
  }
  finally {
   this.filterPredicate = null;
  }
 },
 adjustControlsInternal: function(container, context, collapseControls, adjustFunc) {
  context = context || this;
  var func = function(control) {
   adjustFunc.call(context, control);
  };
  ASPx.GetControlAdjuster().adjustControlsInHierarchy(this, func, container, collapseControls);
 },
 AdjustControls: function(container, collapseControls) {
  container = container || null;
  window.setTimeout(function() {
   this.AdjustControlsCore(container, collapseControls);
  }.aspxBind(this), 0);
 },
 AdjustControlsCore: function(container, collapseControls) {
  var adjustFunction = function(control) { control.AdjustControl(); };
  this.adjustControlsInternal(container, this, collapseControls, adjustFunction);
 },
 CollapseControls: function(container) {
  this.ProcessControlsInContainer(container, function(control) {
   if(control.isASPxClientEdit)
    control.CollapseEditor();
   else if(!!window.ASPxClientRibbon && control instanceof ASPxClientRibbon)
    control.CollapseControl();
  });
 },
 AtlasInitialize: function(isCallback) {
  this.ForEachControl(function(control) {
   control.AtlasPreInitialize();
  });
  ASPx.ProcessScriptsAndLinks("", isCallback);
  this.ForEachControl(function(control) {
   control.AtlasInitialize();
  });
 },
 DOMContentLoaded: function() {
  this.ForEachControl(function(control){
    control.DOMContentLoaded();
  });
 },
 OnDocumentUnload: function() {
  this.ForEachControl(function(control) {
   control.RaiseUnload();
  });
 },
 Initialize: function() {
  ASPx.GetPostHandler().Post.AddHandler(
   function(s, e) { this.OnPost(e); }.aspxBind(this)
  );
  ASPx.GetPostHandler().PostFinalization.AddHandler(
   function(s, e) { this.OnPostFinalization(e); }.aspxBind(this)
  );
  this.InitializeElements(false );
  if(typeof(Sys) != "undefined" && typeof(Sys.Application) != "undefined") {
   var checkIsInitialized = function() {
    if(Sys.Application.get_isInitialized())
     Sys.Application.add_load(aspxCAInit);
    else
     setTimeout(checkIsInitialized, 0);
   };
   checkIsInitialized();
  }
  this.InitWindowSizeCache();
 },
 FinalizeInitialization: function() {
  this.ForEachControl(function(control) {
   control.FinalizeInitialization();
  });
 },
 InitializeElements: function(isCallback) {
  this.ForEachControl(function(control){
   if(!control.isInitialized)
    control.Initialize();
  });
  this.AfterInitializeElementsLeadingCall();
  this.AfterInitializeElements();
  this.RaiseControlsInitialized(isCallback);
 },
 AfterInitializeElementsLeadingCall: function() {
  var controls = {};
  controls[ASPxClientControl.LeadingAfterInitCallConsts.Direct] = [];
  controls[ASPxClientControl.LeadingAfterInitCallConsts.Reverse] = [];
  this.ForEachControl(function(control) {
   if(control.leadingAfterInitCall != ASPxClientControl.LeadingAfterInitCallConsts.None && !control.isInitialized)
    controls[control.leadingAfterInitCall].push(control);
  });
  var directInitControls = controls[ASPxClientControl.LeadingAfterInitCallConsts.Direct],
   reverseInitControls = controls[ASPxClientControl.LeadingAfterInitCallConsts.Reverse];
  for(var i = 0, control; control = directInitControls[i]; i++)
   control.AfterInitialize();
  for(var i = reverseInitControls.length - 1, control; control = reverseInitControls[i]; i--)
   control.AfterInitialize();
 },
 AfterInitializeElements: function() {
  this.ForEachControl(function(control) {
   if(control.leadingAfterInitCall == ASPxClientControl.LeadingAfterInitCallConsts.None && !control.isInitialized)
    control.AfterInitialize();
  });
  ASPx.RippleHelper.Init();
 },
 DoFinalizeCallback: function() {
  this.ForEachControl(function(control){
   control.DoFinalizeCallback();
  });
 },
 ProcessControlsInContainer: function(container, processFunc, filterFunc) {
  this.ForEachControl(function(control){
   if((!filterFunc || filterFunc(control)) && (!container || this.IsControlInContainer(container, control)))
    processFunc(control);
  });
 },
 IsControlInContainer: function(container, control) {
  if(control.GetMainElement) {
   var mainElement = control.GetMainElement();
   if(mainElement && (mainElement != container)) {
    if(ASPx.GetIsParent(container, mainElement))
     return true;
   }
  }
  return false;
 },
 RaiseControlsInitialized: function(isCallback) {
  if(typeof(isCallback) == "undefined")
   isCallback = true;
  var args = new ASPxClientControlsInitializedEventArgs(isCallback);
  if(!this.ControlsInitialized.IsEmpty())  
   this.ControlsInitialized.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalControlsInitialized(args);
  });
 },
 RaiseBrowserWindowResized: function() {
  var args = new ASPxClientEventArgs();
  if(!this.BrowserWindowResized.IsEmpty())
   this.BrowserWindowResized.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalBrowserWindowResized(args);
  });
 },
 RaiseBeginCallback: function (control, command) {
  var args = new ASPxClientGlobalBeginCallbackEventArgs(control, command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalBeginCallback(args);
  });
  this.IncrementRequestCount();
 },
 RaiseEndCallback: function (control) {
  var args = new ASPxClientGlobalEndCallbackEventArgs(control);
  if (!this.EndCallback.IsEmpty()) 
   this.EndCallback.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalEndCallback(args);
  });
  this.DecrementRequestCount();
 },
 InCallback: function() {
  return this.requestCountInternal > 0;
 },
 RaiseCallbackError: function (control, message, callbackId) {
  var args = new ASPxClientGlobalCallbackErrorEventArgs(control, message, callbackId);
  if (!this.CallbackError.IsEmpty()) 
   this.CallbackError.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalCallbackError(args);
  });
  if(args.handled)
   return { isHandled: true, errorMessage: args.message };  
  return { isHandled: false, errorMessage: message };
 },
 RaiseValidationCompleted: function (container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl) {
  var args = new ASPxClientValidationCompletedEventArgs(container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl);
  if (!this.ValidationCompleted.IsEmpty()) 
   this.ValidationCompleted.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalValidationCompleted(args);
  });
  return args.isValid;
 },
 Before_WebForm_InitCallback: function(callbackOwnerID){
  var args = new BeforeInitCallbackEventArgs(callbackOwnerID);
  this.BeforeInitCallback.FireEvent(this, args);
 },
 InitWindowSizeCache: function(){
  this.prevWndWidth = ASPx.GetDocumentClientWidth();
  this.prevWndHeight = ASPx.GetDocumentClientHeight();
 },
 OnBrowserWindowResize: function(evt){
  var shouldIgnoreNestedEvents = ASPx.Browser.IE && ASPx.Browser.MajorVersion == 8;
  if(shouldIgnoreNestedEvents) {
   if(this.prevWndWidth === "" || this.prevWndHeight === "" || this.browserWindowResizeLocked)
    return;
   this.browserWindowResizeLocked = true;
  }
  this.OnBrowserWindowResizeCore(evt);
  if(shouldIgnoreNestedEvents)
   this.browserWindowResizeLocked = false;
 },
 OnBrowserWindowResizeCore: function(htmlEvent){
  var args = this.CreateOnBrowserWindowResizeEventArgs(htmlEvent);
  if(this.CalculateIsBrowserWindowSizeChanged()) {
   this.adjustControlsInternal(null, this, true, function(control) {
    if(control.IsDOMInitialized())
     control.OnBrowserWindowResizeInternal(args);
   });
   this.RaiseBrowserWindowResized();
  }
 },
 CreateOnBrowserWindowResizeEventArgs: function(htmlEvent){
  return {
   htmlEvent: htmlEvent,
   wndWidth: ASPx.GetDocumentClientWidth(),
   wndHeight: ASPx.GetDocumentClientHeight(),
   prevWndWidth: this.prevWndWidth,
   prevWndHeight: this.prevWndHeight
  };
 },
 CalculateIsBrowserWindowSizeChanged: function(){
  var wndWidth = ASPx.GetDocumentClientWidth();
  var wndHeight = ASPx.GetDocumentClientHeight();
  var isBrowserWindowSizeChanged = (this.prevWndWidth != wndWidth) || (this.prevWndHeight != wndHeight);
  if(isBrowserWindowSizeChanged){
   this.prevWndWidth = wndWidth;
   this.prevWndHeight = wndHeight;
   return true;
  }
  return false;
 },
 OnPost: function(args){
  this.ForEachControl(function(control) {
   control.OnPost(args);
  }, null);
 },
 OnPostFinalization: function(args){
  this.ForEachControl(function(control) {
   control.OnPostFinalization(args);
  }, null);
 },
 IncrementRequestCount: function() {
  this.requestCountInternal++;
 },
 DecrementRequestCount: function() {
  this.requestCountInternal--;
 },
 ResetRequestCount: function() {
  this.requestCountInternal = 0;
 }
});
ASPxClientControlCollection.BaseCollectionType = "Control";
var controlCollection = null;
function aspxGetControlCollection(){
 if(controlCollection == null) {
  controlCollection = new ASPxClientControlCollection();
  if(ASPx.loadControlCollectionPreloadHandlers)
   ASPx.loadControlCollectionPreloadHandlers(controlCollection);
 }
 return controlCollection;
}
var ControlCollectionCollection = ASPx.CreateClass(ASPx.CollectionBase, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
 },
 Add: function(element) {
  var key = element.GetCollectionType();
  if(!key) throw "The collection type isn't specified.";
  if(this.Get(key)) throw "The collection with type='" + key + "' already exists.";
  ASPx.CollectionBase.prototype.Add.call(this, key, element);
 },
 RemoveDisposedControls: function(){
  var baseCollection = this.Get(ASPxClientControlCollection.BaseCollectionType);
  var disposedControls = [];
  baseCollection.elementsMap.forEachEntry(function(name, control) {
   if(!ASPx.Ident.IsASPxClientControl(control)) return;
   if(control.IsDOMDisposed())
    disposedControls.push(control);
  });
  this.RemoveControls(disposedControls);
 },
 RemoveControls: function(controls){
  for(var i = 0; i < controls.length; i++) {
   this.elementsMap.forEachEntry(function(key, collection) {
    if(ASPx.Ident.IsASPxClientCollection(collection))
     collection.Remove(controls[i]);
   });
  }
 }
});
var controlCollectionCollection = null;
function aspxGetControlCollectionCollection(){
 if(controlCollectionCollection == null)
  controlCollectionCollection = new ControlCollectionCollection();
 return controlCollectionCollection;
}
var AriaDescriptionAttributes = {
 Role: "0",
 AriaLabel: "1",
 TabIndex: "2",
 AriaOwns: "3",
 AriaDescribedBy: "4",
 AriaDisabled: "5",
 AriaHasPopup: "6",
 AriaLevel: "7"
};
var AriaDescriptor = ASPx.CreateClass(null, {
 constructor: function(ownerControl, description) {
  this.ownerControl = ownerControl;
  this.rootElement = ownerControl.GetMainElement();
  this.description = description;
 },
 setDescription: function(name, argList) {
  var description = this.findChildDescription(name);
  if(description) {
   var elements = name ? this.rootElement.querySelectorAll(this.getDescriptionSelector(description)) : [this.rootElement];
   for(var i = 0; i < elements.length; i++)
    this.applyDescriptionToElement(elements[i], description, argList[i] || argList[0]);
  }
 },
 getDescriptionName: function(description) {
  return description.n;
 },
 getDescriptionSelector: function(description) {
  return description.s;
 },
 findChildDescription: function(name) {
  if(name === this.getDescriptionName(this.description))
   return this.description;
  var childCollection = this.description.c || [];
  for(var i = 0; i < childCollection.length; i++) {
   var childDescription = childCollection[i];
   if(this.getDescriptionName(childDescription) === name)
    return childDescription;
  }
  return null;
 },
 applyDescriptionToElement: function(element, description, args) {
  if(!description || !element)
   return;
  this.trySetAriaOwnsAttribute(element, description);
  this.trySetAriaDescribedByAttribute(element, description);
  this.trySetAttribute(element, description, AriaDescriptionAttributes.Role, "role");
  this.trySetAttribute(element, description, AriaDescriptionAttributes.TabIndex, "tabindex");
  this.trySetAttribute(element, description, AriaDescriptionAttributes.AriaLevel, "aria-level");
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaLabel, function(value) {
   ASPx.Attr.SetAttribute(element, "aria-label", ASPx.Str.ApplyReplacement(value, args));
  });
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaDisabled, function(value) {
   ASPx.Attr.SetAttribute(element, "aria-disabled", !!value); 
  });
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaHasPopup, function(value) {
   ASPx.Attr.SetAttribute(element, "aria-haspopup", !!value);
  });
 },
 trySetAriaDescribedByAttribute: function(element, description) {
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaDescribedBy, function(selectorInfo) {
   var descriptor = this.getNodesBySelector(element, selectorInfo.descriptorSelector)[0];
   var target = this.getNodesBySelector(element, selectorInfo.targetSelector)[0];
   if(!target || !descriptor)
    return;
   ASPx.Attr.SetAttribute(target, "aria-describedby", this.getNodeId(descriptor));
  });
 },
 trySetAriaOwnsAttribute: function(element, description) {
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaOwns, function(selector) {
   var ownedNodes = this.getNodesBySelector(element, selector);
   var ariaOwnsAttributeValue = "";
   for(var i = 0; i < ownedNodes.length; i++)
    ariaOwnsAttributeValue += (this.getNodeId(ownedNodes[i]) + (i != ownedNodes.length - 1 ? " " : ""));
   ASPx.Attr.SetAttribute(element, "aria-owns", ariaOwnsAttributeValue);
  });
 },
 trySetAttribute: function(element, description, ariaAttribute, attributeName) {
  this.executeOnDescription(description, ariaAttribute, function(value) { 
   ASPx.Attr.SetAttribute(element, attributeName, description[ariaAttribute]); 
  });
 },
 executeOnDescription: function(description, ariaDescAttr, callback) {
  var descInfo = description[ariaDescAttr];
  if(ASPx.IsExists(descInfo))
   callback.aspxBind(this)(descInfo);
 },
 getNodesBySelector: function(element, selector) {
  var id = element.id || "";
  var childNodes = element.querySelectorAll("#" + this.getNodeId(element) + " > " + selector);
  ASPx.Attr.SetOrRemoveAttribute(element, "id", id);
  return childNodes;
 },
 getNodeId: function(node) {
  if(!node.id)
   node.id = this.createRandomId();
  return node.id; 
 },
 createRandomId: function() {
  return "r" + ASPx.CreateGuid();
 }
});
PagerCommands = {
 Next : "PBN",
 Prev : "PBP",
 Last : "PBL",
 First : "PBF",
 PageNumber : "PN",
 PageSize : "PSP"
};
ASPx.callbackProcessed = false;
ASPx.Callback = function(result, context){ 
 var collection = aspxGetControlCollection();
 collection.DoFinalizeCallback();
 var control = collection.Get(context);
 if(control != null)
  control.DoCallback(result);
 ASPx.RippleHelper.ReInit();
 ASPx.callbackProcessed = true;
};
ASPx.CallbackError = function(result, context){
 var control = aspxGetControlCollection().Get(context);
 if(control != null)
  control.DoCallbackError(result, false);
 ASPx.callbackProcessed = true;
};
ASPx.CClick = function(name, evt) {
 var control = aspxGetControlCollection().Get(name);
 if(control != null) control.DoControlClick(evt);
};
function aspxCAInit() {
 var isAppInit = typeof(Sys$_Application$initialize) != "undefined" &&
  ASPx.FunctionIsInCallstack(arguments.callee, Sys$_Application$initialize, 10 );
 aspxGetControlCollection().AtlasInitialize(!isAppInit);
}
ASPx.Evt.AttachEventToElement(window, "resize", aspxGlobalWindowResize);
function aspxGlobalWindowResize(evt){
 aspxGetControlCollection().OnBrowserWindowResize(evt); 
}
ASPx.Evt.AttachEventToElement(window, "unload", aspxClassesUnload);
function aspxClassesUnload(evt) {
 aspxGetControlCollection().OnDocumentUnload();
}
ASPx.attachToLoad(aspxClassesDOMContentLoaded);
function aspxClassesDOMContentLoaded(evt){
 aspxGetControlCollection().DOMContentLoaded();
}
ASPx.GetControlCollection = aspxGetControlCollection;
ASPx.GetControlCollectionCollection = aspxGetControlCollectionCollection;
ASPx.GetPersistentControlPropertiesStorage = _aspxGetPersistentControlPropertiesStorage;
ASPx.PagerCommands = PagerCommands;
ASPx.ELLIPSIS_MARKER_CLASS = ELLIPSIS_MARKER_CLASS;
window.ASPxClientBeginCallbackEventArgs = ASPxClientBeginCallbackEventArgs;
window.ASPxClientGlobalBeginCallbackEventArgs = ASPxClientGlobalBeginCallbackEventArgs;
window.ASPxClientEndCallbackEventArgs = ASPxClientEndCallbackEventArgs;
window.ASPxClientGlobalEndCallbackEventArgs = ASPxClientGlobalEndCallbackEventArgs;
window.ASPxClientCallbackErrorEventArgs = ASPxClientCallbackErrorEventArgs;
window.ASPxClientGlobalCallbackErrorEventArgs = ASPxClientGlobalCallbackErrorEventArgs;
window.ASPxClientCustomDataCallbackEventArgs = ASPxClientCustomDataCallbackEventArgs;
window.ASPxClientValidationCompletedEventArgs = ASPxClientValidationCompletedEventArgs;
window.ASPxClientControlsInitializedEventArgs = ASPxClientControlsInitializedEventArgs;
window.ASPxClientControlBeforePronounceEventArgs = ASPxClientControlBeforePronounceEventArgs;
window.ASPxClientControlUnloadEventArgs = ASPxClientControlUnloadEventArgs;
window.ASPxClientEndFocusEventArgs = ASPxClientEndFocusEventArgs;
window.ASPxClientItemFocusedEventArgs = ASPxClientItemFocusedEventArgs;
window.ASPxClientControlCollection = ASPxClientControlCollection;
window.ASPxClientControlBase = ASPxClientControlBase;
window.ASPxClientControl = ASPxClientControl;
window.ASPxClientComponent = ASPxClientComponent;
})(ASPx);

(function () {
 var PositionAnimationTransition = ASPx.CreateClass(ASPx.AnimationTransitionBase, {
  constructor: function (element, options) {
   this.constructor.prototype.constructor.call(this, element, options);
   this.direction = options.direction;
   this.animationTransition = this.createAnimationTransition();
   AnimationHelper.appendWKAnimationClassNameIfRequired(this.element);
  },
  Start: function (to) {
   var from = this.GetValue();
   if(ASPx.AnimationUtils.CanUseCssTransform()) {
    from = this.convertPosToCssTransformPos(from);
    to = this.convertPosToCssTransformPos(to);
   }
   this.animationTransition.Start(from, to);
  },
  SetValue: function (value) {
   ASPx.AnimationUtils.SetTransformValue(this.element, value, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
  },
  GetValue: function () {
   return ASPx.AnimationUtils.GetTransformValue(this.element, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
  },
  createAnimationTransition: function () {
   var transition = ASPx.AnimationUtils.CanUseCssTransform() ? this.createTransformAnimationTransition() : this.createPositionAnimationTransition();
   transition.transition = ASPx.AnimationConstants.Transitions.POW_EASE_OUT;
   return transition;
  },
  createTransformAnimationTransition: function () {
   return ASPx.AnimationUtils.createCssAnimationTransition(this.element, {
    property: ASPx.AnimationUtils.CanUseCssTransform(),
    duration: this.duration,
    onComplete: this.onComplete
   });
  },
  createPositionAnimationTransition: function () {
   return AnimationHelper.createAnimationTransition(this.element, {
    property: this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION ? "top" : "left",
    unit: "px",
    duration: this.duration,
    onComplete: this.onComplete
   });
  },
  convertPosToCssTransformPos: function (position) {
   return ASPx.AnimationUtils.GetTransformCssText(position, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
  }
 });
 var AnimationHelper = {
  SLIDE_HORIZONTAL_DIRECTION: 0,
  SLIDE_VERTICAL_DIRECTION: 1,
  SLIDE_TOP_DIRECTION: 0,
  SLIDE_RIGHT_DIRECTION: 1,
  SLIDE_BOTTOM_DIRECTION: 2,
  SLIDE_LEFT_DIRECTION: 3,
  SLIDE_CONTAINER_CLASS: "dxAC",
  MAXIMUM_DEPTH: 3,
  createAnimationTransition: function (element, options) {
   if(options.onStep) 
    options.animationEngine = "js";
   switch (options.animationEngine) {
    case "js":
     return ASPx.AnimationUtils.createJsAnimationTransition(element, options);
    case "css":
     return ASPx.AnimationUtils.createCssAnimationTransition(element, options);
    default:
     return ASPx.AnimationUtils.CanUseCssTransition() ? ASPx.AnimationUtils.createCssAnimationTransition(element, options) :
      ASPx.AnimationUtils.createJsAnimationTransition(element, options);
   }
  },
  createMultipleAnimationTransition: function (element, options) {
   return ASPx.AnimationUtils.createMultipleAnimationTransition(element, options);
  },
  createSimpleAnimationTransition: function (options) {
   return ASPx.AnimationUtils.createSimpleAnimationTransition(options);
  },
  cancelAnimation: function (element) {
   ASPx.AnimationTransitionBase.Cancel(element);
  },
  fadeIn: function (element, onComplete, duration) {
   AnimationHelper.fadeTo(element, {
    from: 0, to: 1,
    onComplete: onComplete,
    duration: duration || ASPx.AnimationConstants.Durations.DEFAULT
   });
  },
  fadeOut: function (element, onComplete, duration) {
   AnimationHelper.fadeTo(element, {
    from: ASPx.GetElementOpacity(element), to: 0,
    onComplete: onComplete,
    duration: duration || ASPx.AnimationConstants.Durations.DEFAULT
   });
  },
  fadeTo: function (element, options) {
   options.property = "opacity";
   if(!options.duration)
    options.duration = ASPx.AnimationConstants.Durations.SHORT;
   var transition = AnimationHelper.createAnimationTransition(element, options);
   if(!ASPx.IsExists(options.from))
    options.from = transition.GetValue();
   transition.Start(options.from, options.to);
  },
  slideIn: function (element, direction, onComplete, animationEngineType, rtl) {
   AnimationHelper.setOpacity(element, 1);
   var animationContainer = AnimationHelper.getSlideAnimationContainer(element, true, true);
   var pos = AnimationHelper.getSlideInStartPos(animationContainer, direction, rtl);
   var transition = AnimationHelper.createSlideTransition(animationContainer, direction,
    function (el) {
     AnimationHelper.resetSlideAnimationContainerSize(animationContainer);
     if(onComplete)
      onComplete(el);
    }, animationEngineType, rtl);
   transition.Start(pos, 0);
  },
  slideOut: function (element, direction, onComplete, animationEngineType, rtl) {
   var animationContainer = AnimationHelper.getSlideAnimationContainer(element, true, true);
   var pos = AnimationHelper.getSlideOutFinishPos(animationContainer, direction, rtl);
   var transition = AnimationHelper.createSlideTransition(animationContainer, direction,
    function (el) {
     AnimationHelper.setOpacity(el.firstChild, 0);
     if(onComplete)
      onComplete(el);
    }, animationEngineType, rtl);
   transition.Start(pos);
  },
  slideTo: function (element, options) {
   if(!ASPx.IsExists(options.direction))
    options.direction = AnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
   var transition = new PositionAnimationTransition(element, options);
   transition.Start(options.to);
  },
  setOpacity: function (element, value) {
   ASPx.AnimationUtils.setOpacity(element, value);
  },
  appendWKAnimationClassNameIfRequired: function (element) {
   if(ASPx.AnimationUtils.CanUseCssTransform() && ASPx.Browser.WebKitFamily && !ASPx.ElementHasCssClass(element, "dx-wbv"))
    element.className += " dx-wbv";
  },
  findSlideAnimationContainer: function (element) {
   var container = element;
   for(var i = 0; i < AnimationHelper.MAXIMUM_DEPTH; i++) {
    if(container.tagName == "BODY")
     return null;
    if(ASPx.ElementHasCssClass(container, AnimationHelper.SLIDE_CONTAINER_CLASS))
     return container;
    container = container.parentNode;
   }
   return null;
  },
  createSlideAnimationContainer: function (element) {
   var rootContainer = document.createElement("DIV");
   ASPx.SetStyles(rootContainer, {
    className: AnimationHelper.SLIDE_CONTAINER_CLASS,
    overflow: "hidden"
   });
   var elementContainer = document.createElement("DIV");
   rootContainer.appendChild(elementContainer);
   var parentNode = element.parentNode;
   parentNode.insertBefore(rootContainer, element);
   elementContainer.appendChild(element);
   return rootContainer;
  },
  getSlideAnimationContainer: function (element, create, fixSize) {
   if(!element) return;
   var width = element.offsetWidth;
   var height = element.offsetHeight;
   var container;
   if(element.className == AnimationHelper.SLIDE_CONTAINER_CLASS)
    container = element;
   if(!container)
    container = AnimationHelper.findSlideAnimationContainer(element);
   if(!container && create)
    container = AnimationHelper.createSlideAnimationContainer(element);
   if(container && fixSize) {
    ASPx.SetStyles(container, {
     width: width, height: height
    });
    ASPx.SetStyles(container.firstChild, {
     width: width, height: height
    });
   }
   return container;
  },
  resetSlideAnimationContainerSize: function (container) {
   ASPx.SetStyles(container, {
    width: "", height: ""
   });
   ASPx.SetStyles(container.firstChild, {
    width: "", height: ""
   });
  },
  getModifyProperty: function (direction, rtl) {
   if(direction == AnimationHelper.SLIDE_TOP_DIRECTION || direction == AnimationHelper.SLIDE_BOTTOM_DIRECTION)
    return "marginTop";
   return rtl ? "margin-right" : "margin-left";
  },
  createSlideTransition: function (animationContainer, direction, complete, animationEngineType, rtl) {
   if(rtl == undefined)
    rtl = false;
   var animationEngine = "";
   switch(animationEngineType) {
    case AnimationEngineType.JS:
     animationEngine = "js";
     break;
    case AnimationEngineType.CSS:
     animationEngine = "css";
     break;
   }
   return AnimationHelper.createAnimationTransition(animationContainer.firstChild, {
    unit: "px",
    property: AnimationHelper.getModifyProperty(direction, rtl),
    onComplete: complete,
    animationEngine: animationEngine
   });
  },
  getSlideInStartPos: function (animationContainer, direction, rtl) {
   var dir = rtl ? -1 : 1;
   switch (direction) {
    case AnimationHelper.SLIDE_TOP_DIRECTION:
     return animationContainer.offsetHeight;
    case AnimationHelper.SLIDE_LEFT_DIRECTION:
     return animationContainer.offsetWidth * dir;
    case AnimationHelper.SLIDE_RIGHT_DIRECTION:
     return -animationContainer.offsetWidth * dir;
    case AnimationHelper.SLIDE_BOTTOM_DIRECTION:
     return -animationContainer.offsetHeight;
   }
  },
  getSlideOutFinishPos: function (animationContainer, direction, rtl) {
   var dir = rtl ? -1 : 1;
   switch (direction) {
    case AnimationHelper.SLIDE_TOP_DIRECTION:
     return -animationContainer.offsetHeight;
    case AnimationHelper.SLIDE_LEFT_DIRECTION:
     return -animationContainer.offsetWidth * dir;
    case AnimationHelper.SLIDE_RIGHT_DIRECTION:
     return animationContainer.offsetWidth * dir;
    case AnimationHelper.SLIDE_BOTTOM_DIRECTION:
     return animationContainer.offsetHeight;
   }
  }
 };
 var GestureHandler = ASPx.CreateClass(null, {
  constructor: function (getAnimationElement, canHandle, allowStart) {
   this.getAnimationElement = getAnimationElement;
   this.canHandle = canHandle;
   this.allowStart = allowStart;
   this.startMousePosX = 0;
   this.startMousePosY = 0;
   this.startTime = null;
   this.isEventsPrevented = false;
   this.savedElements = [];
  },
  OnSelectStart: function(evt) {
   ASPx.Evt.PreventEvent(evt); 
  },
  OnDragStart: function(evt) {
   ASPx.Evt.PreventEvent(evt);  
  },
  OnMouseDown: function (evt) {
   this.startMousePosX = ASPx.Evt.GetEventX(evt);
   this.startMousePosY = ASPx.Evt.GetEventY(evt);
   this.startTime = new Date();
  },
  OnMouseMove: function(evt) {
   if(!ASPx.Browser.MobileUI)
    ASPx.Selection.Clear();
   if(Math.abs(this.GetCurrentDistanceX(evt)) < GestureHandler.SLIDER_MIN_START_DISTANCE && Math.abs(this.GetCurrentDistanceY(evt)) < GestureHandler.SLIDER_MIN_START_DISTANCE)
    GesturesHelper.isExecutedGesture = false;
  },
  OnMouseUp: function (evt) {
  },
  CanHandleEvent: function (evt) {
   return !this.canHandle || this.canHandle(evt);
  },
  IsStartAllowed: function(value) {
   return !this.allowStart || this.allowStart(value);
  },
  RollbackGesture: function () {
  },
  GetRubberPosition: function (position) {
   return position / GestureHandler.FACTOR_RUBBER;
  },
  GetCurrentDistanceX: function (evt) {
   return ASPx.Evt.GetEventX(evt) - this.startMousePosX;
  },
  GetCurrentDistanceY: function (evt) {
   return ASPx.Evt.GetEventY(evt) - this.startMousePosY;
  },
  GetDistanceLimit: function () {
   return (new Date() - this.startTime) < GestureHandler.MAX_TIME_SPAN ? GestureHandler.MIN_DISTANCE_LIMIT : GestureHandler.MAX_DISTANCE_LIMIT;
  },
  GetContainerElement: function () {
  },
  AttachPreventEvents: function (evt) {
   if(!this.isEventsPrevented) {
    var element = ASPx.Evt.GetEventSource(evt);
    var container = this.GetContainerElement();
    while(element && element != container) {
     ASPx.Evt.AttachEventToElement(element, "mouseup", ASPx.Evt.PreventEvent);
     ASPx.Evt.AttachEventToElement(element, "click", ASPx.Evt.PreventEvent);
     this.savedElements.push(element);
     element = element.parentNode;
    }
    this.isEventsPrevented = true;
   }
  },
  DetachPreventEvents: function () {
   if(this.isEventsPrevented) {
    window.setTimeout(function () {
     while(this.savedElements.length > 0) {
      var element = this.savedElements.pop();
      ASPx.Evt.DetachEventFromElement(element, "mouseup", ASPx.Evt.PreventEvent);
      ASPx.Evt.DetachEventFromElement(element, "click", ASPx.Evt.PreventEvent);
     }
    }.aspxBind(this), 0);
    this.isEventsPrevented = false;
   }
  }
 });
 GestureHandler.MAX_DISTANCE_LIMIT = 70;
 GestureHandler.MIN_DISTANCE_LIMIT = 10;
 GestureHandler.MIN_START_DISTANCE = 0;
 GestureHandler.SLIDER_MIN_START_DISTANCE = 5;
 GestureHandler.MAX_TIME_SPAN = 300;
 GestureHandler.FACTOR_RUBBER = 4;
 GestureHandler.RETURN_ANIMATION_DURATION = 150;
 var SwipeSlideGestureHandler = ASPx.CreateClass(GestureHandler, {
  constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, move) {
   this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle);
   this.slideElement = this.getAnimationElement();
   this.container = this.slideElement.parentNode;
   this.direction = direction;
   this.backward = backward;
   this.forward = forward;
   this.rollback = rollback;
   this.slideElementSize = 0;
   this.containerElementSize = 0;
   this.startSliderElementPosition = 0;
   this.centeredSlideElementPosition = 0;
  },
  OnMouseDown: function (evt) {
   GestureHandler.prototype.OnMouseDown.call(this, evt);
   this.slideElementSize = this.GetElementSize();
   this.startSliderElementPosition = this.GetElementPosition();
   this.containerElementSize = this.GetContainerElementSize();
   if(this.slideElementSize <= this.containerElementSize)
    this.centeredSlideElementPosition = (this.containerElementSize - this.slideElementSize) / 2;
  },
  OnMouseMove: function (evt) {
   GestureHandler.prototype.OnMouseMove.call(this, evt);
   if(!ASPx.Browser.TouchUI && !ASPx.GetIsParent(this.container, ASPx.Evt.GetEventSource(evt))) {
    GesturesHelper.OnDocumentMouseUp(evt);
    return;
   }
   var distance = this.GetCurrentDistance(evt);
   if(Math.abs(distance) < GestureHandler.SLIDER_MIN_START_DISTANCE || ASPx.TouchUIHelper.isGesture)
    return;
   this.SetElementPosition(this.GetCalculatedPosition(distance));
   this.AttachPreventEvents(evt);
   ASPx.Evt.PreventEvent(evt);
  },
  GetCalculatedPosition: function (distance) {
   ASPx.AnimationTransitionBase.Cancel(this.slideElement);
   var position = this.startSliderElementPosition + distance,
    maxPosition = -(this.slideElementSize - this.containerElementSize),
    minPosition = 0;
   if(this.centeredSlideElementPosition > 0)
    position = this.GetRubberPosition(distance) + this.centeredSlideElementPosition;
   else if(position > minPosition)
    position = this.GetRubberPosition(distance);
   else if(position < maxPosition)
    position = this.GetRubberPosition(distance) + maxPosition;
   return position;
  },
  OnMouseUp: function (evt) {
   this.DetachPreventEvents();
   if(this.GetCurrentDistance(evt) != 0)
    this.OnMouseUpCore(evt);
  },
  OnMouseUpCore: function (evt) {
   var distance = this.GetCurrentDistance(evt);
   if(this.centeredSlideElementPosition > 0 || this.CheckSlidePanelIsOutOfBounds())
    this.PerformRollback();
   else
    this.PerformAction(distance);
  },
  PerformAction: function (distance) {
   if(Math.abs(distance) < this.GetDistanceLimit())
    this.PerformRollback();
   else if(distance < 0)
    this.PerformForward();
   else
    this.PerformBackward();
  },
  PerformBackward: function () {
   this.backward();
  },
  PerformForward: function () {
   this.forward();
  },
  PerformRollback: function () {
   this.rollback();
  },
  CheckSlidePanelIsOutOfBounds: function () {
   var minOffset = -(this.slideElementSize - this.containerElementSize), maxOffset = 0;
   var slideElementPos = this.GetElementPosition();
   if(slideElementPos > maxOffset || slideElementPos < minOffset)
    return true;
   return false;
  },
  GetContainerElement: function () {
   return this.container;
  },
  GetElementSize: function () {
   return this.IsHorizontalDirection() ? this.slideElement.offsetWidth : this.slideElement.offsetHeight;
  },
  GetContainerElementSize: function () {
   return this.IsHorizontalDirection() ? ASPx.GetClearClientWidth(this.container) : ASPx.GetClearClientHeight(this.container);
  },
  GetCurrentDistance: function (evt) {
   return this.IsHorizontalDirection() ? this.GetCurrentDistanceX(evt) : this.GetCurrentDistanceY(evt);
  },
  GetElementPosition: function () {
   return ASPx.AnimationUtils.GetTransformValue(this.slideElement, !this.IsHorizontalDirection());
  },
  SetElementPosition: function (position) {
   ASPx.AnimationUtils.SetTransformValue(this.slideElement, position, !this.IsHorizontalDirection());
  },
  IsHorizontalDirection: function () {
   return this.direction == AnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
  }
 });
 var SwipeSimpleSlideGestureHandler = ASPx.CreateClass(SwipeSlideGestureHandler, {
  constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
   this.constructor.prototype.constructor.call(this, getAnimationElement, direction, canHandle, backward, forward, rollback);
   this.container = this.slideElement;
   this.updatePosition = updatePosition;
   this.prevDistance = 0;
  },
  OnMouseDown: function (evt) {
   GestureHandler.prototype.OnMouseDown.call(this, evt);
   this.prevDistance = 0;
  },
  OnMouseUpCore: function (evt) {
   this.PerformAction(this.GetCurrentDistance(evt));
  },
  PerformAction: function (distance) {
   if(Math.abs(distance) < this.GetDistanceLimit())
    this.PerformRollback();
   else if(distance < 0)
    this.PerformForward();
   else
    this.PerformBackward();
  },
  GetCalculatedPosition: function (distance) {
   var position = distance - this.prevDistance;
   this.prevDistance = distance;
   return position;
  },
  SetElementPosition: function (position) {
   this.updatePosition(position);
  }
 });
 var SwipeGestureHandler = ASPx.CreateClass(GestureHandler, {
  constructor: function (getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType, rtl) {
   this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle, allowStart);
   this.start = start;
   this.allowComplete = allowComplete;
   this.complete = complete;
   this.cancel = cancel;
   this.animationTween = null;
   this.currentDistanceX = 0;
   this.currentDistanceY = 0;
   this.tryStartGesture = false;
   this.tryStartScrolling = false;
   this.animationEngineType = animationEngineType;
   this.rtl = rtl;
   this.UpdateAnimationContainer();
  },
  UpdateAnimationContainer: function () {
   this.animationContainer = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, false);
  },
  CanHandleEvent: function (evt) {
   if(GestureHandler.prototype.CanHandleEvent.call(this, evt))
    return true;
   return this.animationTween && this.animationContainer && ASPx.GetIsParent(this.animationContainer, ASPx.Evt.GetEventSource(evt));
  },
  OnMouseDown: function (evt) {
   GestureHandler.prototype.OnMouseDown.call(this, evt);
   if(this.animationTween)
    this.animationTween.Cancel();
   this.currentDistanceX = 0;
   this.currentDistanceY = 0;
   this.tryStartGesture = false;
   this.tryStartScrolling = false;
  },
  OnMouseMove: function (evt) {
   GestureHandler.prototype.OnMouseMove.call(this, evt);
   var isZoomGestureConflict = evt.touches && evt.touches.length > 1;
   if (isZoomGestureConflict)
    return false;
   this.currentDistanceX = this.GetCurrentDistanceX(evt);
   this.currentDistanceY = this.GetCurrentDistanceY(evt);
   if(this.rtl)
    this.currentDistanceX = -this.currentDistanceX;
   if(!this.animationTween && !this.tryStartScrolling && (Math.abs(this.currentDistanceX) >
    GestureHandler.MIN_START_DISTANCE || Math.abs(this.currentDistanceY) > GestureHandler.MIN_START_DISTANCE)) {
    if(Math.abs(this.currentDistanceY) < Math.abs(this.currentDistanceX)) {
     this.tryStartGesture = true;
     if(this.IsStartAllowed(this.currentDistanceX)) {
      this.animationContainer = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, true);
      this.animationTween = AnimationHelper.createSlideTransition(this.animationContainer, AnimationHelper.SLIDE_LEFT_DIRECTION,
       function () {
        AnimationHelper.resetSlideAnimationContainerSize(this.animationContainer);
        this.animationContainer = null;
        this.animationTween = null;
       }.aspxBind(this), this.animationEngineType, this.rtl);
      this.PerformStart(this.currentDistanceX);
      this.AttachPreventEvents(evt);
     }
    }
    else
     this.tryStartScrolling = true;
   }
   if(this.animationTween) {
    if(this.allowComplete && !this.allowComplete(this.currentDistanceX))
     this.currentDistanceX = this.GetRubberPosition(this.currentDistanceX);
    this.animationTween.SetValue(this.currentDistanceX);
   }
   if(!this.tryStartScrolling && !ASPx.TouchUIHelper.isGesture && evt.touches && evt.touches.length < 2)
    ASPx.Evt.PreventEvent(evt);
  },
  OnMouseUp: function (evt) {
   if(!this.animationTween) {
    if(this.tryStartGesture)
     this.PerformCancel(this.currentDistanceX);
   }
   else {
    if(Math.abs(this.currentDistanceX) < this.GetDistanceLimit())
     this.RollbackGesture();
    else {
     if(this.IsCompleteAllowed(this.currentDistanceX)) {
      this.PerformComplete(this.currentDistanceX);
      this.animationContainer = null;
      this.animationTween = null;
     }
     else
      this.RollbackGesture();
    }
   }
   this.DetachPreventEvents();
   this.tryStartGesture = false;
   this.tryStartScrolling = false;
  },
  PerformStart: function (value) {
   if(this.start)
    this.start(value);
  },
  IsCompleteAllowed: function (value) {
   return !this.allowComplete || this.allowComplete(value);
  },
  PerformComplete: function (value) {
   if(this.complete)
    this.complete(value);
  },
  PerformCancel: function (value) {
   if(this.cancel)
    this.cancel(value);
  },
  RollbackGesture: function () {
   this.animationTween.Start(this.currentDistanceX, 0);
  },
  ResetGestureElementPosition: function () {
   if (this.currentDistanceX === 0) return;
   var container = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement());
   var onComplete = function () { AnimationHelper.resetSlideAnimationContainerSize(container); };
   var animation = AnimationHelper.createSlideTransition(container, AnimationHelper.SLIDE_LEFT_DIRECTION, onComplete, this.animationEngineType, this.rtl);
   animation.Start(this.currentDistanceX, 0);
  },
  GetContainerElement: function () {
   return this.animationContainer;
  }
 });
 var GesturesHelper = {
  handlers: {},
  activeHandler: null,
  isAttachedEvents: false,
  isExecutedGesture: false,
  AddSwipeGestureHandler: function (id, getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType, rtl) {
   this.handlers[id] = new SwipeGestureHandler(getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType, rtl);
  },
  UpdateSwipeAnimationContainer: function (id) {
   if(this.handlers[id])
    this.handlers[id].UpdateAnimationContainer();
  },
  AddSwipeSlideGestureHandler: function (id, getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
   if(updatePosition)
    this.handlers[id] = new SwipeSimpleSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition);
   else
    this.handlers[id] = new SwipeSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback);
  },
  getParentDXEditorWithSwipeGestures: function(element) {
     return ASPx.GetParent(element, function(parent) {
      var parentObj = ASPx.GetControlCollection().Get(parent.id);
      return parentObj && parentObj.supportGestures && parentObj.isSwipeGesturesEnabled();
   });
  },
  canHandleMouseDown: function(evt) {
   if(!ASPx.Evt.IsLeftButtonPressed(evt))
    return false;
   var element = ASPx.Evt.GetEventSource(evt);
   var dxFocusedEditor = ASPx.Ident.scripts.ASPxClientEdit && ASPx.GetFocusedEditor();
   if(dxFocusedEditor && dxFocusedEditor.IsEditorElement(element)) {
    var elementParentDXEditorWithSwipeGestures = GesturesHelper.getParentDXEditorWithSwipeGestures(element);
    if(!elementParentDXEditorWithSwipeGestures || !dxFocusedEditor.IsEditorElement(elementParentDXEditorWithSwipeGestures))
     return false;
   }
   var isTextEditor = element.tagName == "TEXTAREA" || element.tagName == "INPUT" && ASPx.Attr.GetAttribute(element, "type") == "text";
   if(isTextEditor && document.activeElement == element)
    return false;
   return true;  
  },
  OnDocumentDragStart: function(evt) {
   if(GesturesHelper.activeHandler)
    GesturesHelper.activeHandler.OnDragStart(evt);
  },
  OnDocumentSelectStart: function(evt) {
   if(GesturesHelper.activeHandler)
    GesturesHelper.activeHandler.OnSelectStart(evt);
  },
  OnDocumentMouseDown: function (evt) {
   if(!GesturesHelper.canHandleMouseDown(evt))
    return;
   GesturesHelper.activeHandler = GesturesHelper.FindHandler(evt);
   if(GesturesHelper.activeHandler)
    GesturesHelper.activeHandler.OnMouseDown(evt);
  },
  OnDocumentMouseMove: function (evt) {
   if(GesturesHelper.activeHandler) {
    GesturesHelper.isExecutedGesture = true;
    GesturesHelper.activeHandler.OnMouseMove(evt);
   }
  },
  OnDocumentMouseUp: function (evt) {
   if(GesturesHelper.activeHandler) {
    GesturesHelper.activeHandler.OnMouseUp(evt);
    GesturesHelper.activeHandler = null;
    window.setTimeout(function () { GesturesHelper.isExecutedGesture = false; }, 0);
   }
  },
  AttachEvents: function () {
   if(!GesturesHelper.isAttachedEvents) {
    GesturesHelper.Attach(ASPx.Evt.AttachEventToElement);
    GesturesHelper.isAttachedEvents = true;
   }
  },
  DetachEvents: function () {
   if(GesturesHelper.isAttachedEvents) {
    GesturesHelper.Attach(ASPx.Evt.DetachEventFromElement);
    GesturesHelper.isAttachedEvents = false;
   }
  },
  Attach: function (changeEventsMethod) {
   var doc = window.document;
   changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseDownEventName, GesturesHelper.OnDocumentMouseDown);
   changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseMoveEventName, GesturesHelper.OnDocumentMouseMove);
   changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseUpEventName, GesturesHelper.OnDocumentMouseUp);
   if(!ASPx.Browser.MobileUI) {
    changeEventsMethod(doc, "selectstart", GesturesHelper.OnDocumentSelectStart);
    changeEventsMethod(doc, "dragstart", GesturesHelper.OnDocumentDragStart);
   }
  },
  FindHandler: function (evt) {
   var handlers = [];
   for(var id in GesturesHelper.handlers) {
    if(GesturesHelper.handlers.hasOwnProperty(id)) {
     var handler = GesturesHelper.handlers[id];
     if(handler.CanHandleEvent && handler.CanHandleEvent(evt))
      handlers.push(handler);
    }
   }
   if(!handlers.length)
    return null;
   handlers.sort(function (a, b) {
    return ASPx.GetIsParent(a.getAnimationElement(), b.getAnimationElement()) ? 1 : -1;
   });
   return handlers[0];
  },
  IsExecutedGesture: function () {
   return GesturesHelper.isExecutedGesture;
  }
 };
 GesturesHelper.AttachEvents();
 var AnimationEngineType = {
  "JS": 0,
  "CSS": 1,
  "DEFAULT" : 2
 };
 ASPx.AnimationEngineType = AnimationEngineType;
 ASPx.AnimationHelper = AnimationHelper;
 ASPx.GesturesHelper = GesturesHelper;
})();

(function() {
 ASPxClientPanelBase = ASPx.CreateClass(ASPxClientControl, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
   this.touchUIScroller = null;
  },
  Initialize: function(){
   ASPxClientControl.prototype.Initialize.call(this);
   this.touchUIScroller = ASPx.TouchUIHelper.makeScrollableIfRequired(this.GetMainElement());
  },
  getContentElement: function() {
   if(this.getAnimationContentContainerElement())
    return this.getAnimationContentContainerElement();
   if(this.getScrollContentContainerElement())
    return this.getScrollContentContainerElement();
   if(!ASPx.IsExistsElement(this.contentElement)){
    var element = this.GetMainElement();
    this.contentElement = element && element.tagName == "TABLE" ? element.rows[0].cells[0] : element;
   }
   return this.contentElement;
  },
  getAnimationContentContainerElement: function() {
   return null;
  },
  getScrollContentContainerElement: function() {
   return null;
  },
  GetContentHTML: function(){
   return this.GetContentHtml();
  },
  SetContentHTML: function(html){
   this.SetContentHtml(html);
  },
  GetContentHtml: function(){
   return this.getContentElement().innerHTML;
  },
  SetContentHtml: function(html){
   ASPx.SetInnerHtml(this.getContentElement(), html);
   if(this.touchUIScroller)
    this.touchUIScroller.ChangeElement(this.getContentElement());
  }
 });
 ASPxClientPanelBase.Cast = ASPxClientControl.Cast;
 var FixedPanels = {};
 var FixedPositionProperties;
 var InitFixedPositionProperties = function(){
  FixedPositionProperties = {};
  FixedPositionProperties["Top"] = { 
   documentPadding: "padding-top", documentMargin: "margin-top", documentMargin2: "margin-bottom", 
   contentEdge: "top", oppositeContentEdge: "bottom", size: "offsetHeight", animationSize: "height", oppositePanel: "Bottom" 
  };
  FixedPositionProperties["Bottom"] = { 
   documentPadding: "padding-bottom", documentMargin: "margin-top", documentMargin2: "margin-bottom", 
   contentEdge: "bottom", oppositeContentEdge: "top", size: "offsetHeight", animationSize: "height", oppositePanel: "Top"
  };
  FixedPositionProperties["Left"] = { 
   documentPadding: "padding-left", documentMargin: "margin-left", documentMargin2: "margin-right", 
   contentEdge: "left", oppositeContentEdge: "right", size: "offsetWidth", animationSize: "width", oppositePanel: "Right"
  };
  FixedPositionProperties["Right"] = { 
   documentPadding: "padding-right", documentMargin: "margin-left", documentMargin2: "margin-right", 
   contentEdge: "right", oppositeContentEdge: "left", size: "offsetWidth", animationSize: "width", oppositePanel: "Left"
  };
 };
 var ExpandDirectionProperties;
 var InitExpandDirectionProperties = function(){
  ExpandDirectionProperties = {};
  ExpandDirectionProperties["PopupToLeft"] = { 
   hAlign: ASPx.PopupUtils.OutsideLeftAlignIndicator, vAlign: ASPx.PopupUtils.TopSidesAlignIndicator, 
   size: "offsetWidth", animationSize: "width" 
  };
  ExpandDirectionProperties["PopupToRight"] = { 
   hAlign: ASPx.PopupUtils.OutsideRightAlignIndicator, vAlign: ASPx.PopupUtils.TopSidesAlignIndicator, 
   size: "offsetWidth", animationSize: "width" 
  };
  ExpandDirectionProperties["PopupToTop"] = { 
   hAlign: ASPx.PopupUtils.LeftSidesAlignIndicator, vAlign: ASPx.PopupUtils.AboveAlignIndicator, 
   size: "offsetHeight", animationSize: "height" 
  };
  ExpandDirectionProperties["PopupToBottom"] = { 
   hAlign: ASPx.PopupUtils.LeftSidesAlignIndicator, vAlign: ASPx.PopupUtils.BelowAlignIndicator, 
   size: "offsetHeight", animationSize: "height" 
  };
 };
 var CollapsiblePanelsAutoGenGroupCount = 0;
 var CollapsiblePanelsGroups = {};
 var ExpandedPanels = {};
 var DocumentProperties = {};
 var EXPANDED_SELECTOR = "dxpnl-expanded";
 var COLLAPSIBLE_SELECTOR = "dxpnl-collapsible";
 var CENTER_BTN_POSITION_SELECTOR = "dxpnl-cp";
 var EXPAND_BAR_ID = "_EB";
 var MODAL_ELEMENT_ID = "_M";
 var EXPAND_BUTTON_ID = "_EBB";
 var COLLAPSED_STATE_CLASS_NAME = "dxpnl-collapsedState";
 var HIDDEN_STATE_CLASS_NAME = "dxpnl-hiddenState";
 ASPxClientPanel = ASPx.CreateClass(ASPxClientPanelBase, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
   this.animationType = "none";
   this.fixedPosition = this.getFixedPosition();
   this.expandEffect = "Slide";
   this.expandOnPageLoad = false;
   this.groupName = "";
   this.fixedPositionOverlap = false;
   this.fixedPositionProperties = null;
   this.expandDirectionProperties = null;
   this.documentMarginsChanged = false;
   this.slideAnimationPosProperty = null;
   this.slideAnimationExpandBarSize = null;
   this.collapseWindowWidth = 0;
   this.collapseWindowHeight = 0;
   this.hideWindowWidth = 0;
   this.hideWindowHeight = 0;
   this.modalElement = null;
   this.modalElementOpacity = 0.7;
   this.modalShowAnimationDuration = ASPx.AnimationConstants.Durations.SHORT;
   this.modalHideAnimationDuration = ASPx.AnimationConstants.Durations.SHORT - 50;
   this.contentElement = null;
   this.expandBarElement = null;
   this.expandButtonElement = null;
   this.animationContentContainerElement = null;
   this.scrollContentContainerElement = null;
   this.Collapsed = new ASPxClientEvent();
   this.Expanded = new ASPxClientEvent();
  },
  InlineInitialize: function(){
   ASPxClientPanelBase.prototype.InlineInitialize.call(this);
   if(this.fixedPosition) {
    if(!FixedPositionProperties)
     InitFixedPositionProperties();
    this.fixedPositionProperties = FixedPositionProperties[this.fixedPosition];
   }
   if(this.expandEffect.indexOf("Popup") > -1){
    if(!ExpandDirectionProperties)
     InitExpandDirectionProperties();
    this.expandDirectionProperties = ExpandDirectionProperties[this.expandEffect];
   }
   if(this.isPositionFixed()){
    this.prepareModalElement();
    FixedPanels[this.fixedPosition] = this;
    var scrollContainer = this.getScrollContentContainerElement();
    if(scrollContainer && 
     (scrollContainer.style.overflow !== "" && scrollContainer.style.overflow !== "visible" ||
     scrollContainer.style.overflowX !== "" && scrollContainer.style.overflowX !== "visible" ||
     scrollContainer.style.overflowY !== "" && scrollContainer.style.overflowY !== "visible")){
     ASPx.Evt.AttachEventToElement(scrollContainer, "scroll",
      function (evt) {
       if(ASPx.Evt.GetEventSource(evt) != scrollContainer)
        return;
       if(typeof(ASPx.GetDropDownCollection) != "undefined")
        ASPx.GetDropDownCollection().ProcessControlsInContainer(scrollContainer, function(control) {
         control.HideDropDown();
        });
       if(typeof(ASPx.GetMenuCollection) != "undefined")
        ASPx.GetMenuCollection().HideAll();
      }.aspxBind(this));
    }
   }
   if(this.hideWindowWidth > 0 || this.hideWindowHeight > 0)
    this.createVisibilityCss();
   if(this.collapseWindowWidth > 0 || this.collapseWindowHeight > 0)
    this.createCollapsibilityCss();
   if(this.useAdaptivityClassNames())
    this.ensureAdaptivityClassNames();
   if(this.groupName == ""){
    this.groupName = "DXAutoGenExpandGroup" + CollapsiblePanelsAutoGenGroupCount;
    CollapsiblePanelsAutoGenGroupCount++;
   }
   if(!CollapsiblePanelsGroups[this.groupName])
    CollapsiblePanelsGroups[this.groupName] = [];
   CollapsiblePanelsGroups[this.groupName].push(this);
   var btnElement = this.getExpandButtonElement();
   if(btnElement){
    ASPx.Evt.AttachEventToElement(btnElement, ASPx.TouchUIHelper.touchMouseUpEventName,
     function (evt) {
      if(ASPx.Evt.IsLeftButtonPressed(evt))
       this.Toggle();
     }.aspxBind(this));
   }
   this.updateFixedPanelContext();
   if(!this.clientEnabled)
    this.SetEnabled(this.clientEnabled);
  },
  prepareModalElement: function() {
   if(!this.isModal()) return;
   var modalElement = this.getModalElement();
   this.modalElementOpacity = ASPx.GetCurrentStyle(modalElement).opacity;
   ASPx.Evt.AttachEventToElement(modalElement, ASPx.TouchUIHelper.touchMouseUpEventName,
    function(evt) {
     if(ASPx.Evt.IsLeftButtonPressed(evt))
      this.Collapse();
    }.aspxBind(this));
   modalElement.style.zIndex = ASPx.GetCurrentStyle(this.GetMainElement()).zIndex - 2;
  },
  AfterInitialize: function(){
   ASPxClientPanelBase.prototype.AfterInitialize.call(this);
   var barElement = this.getExpandBarElement();
   if(barElement && this.isExpandBarChangeVisibilityOnExpanding())
    ASPx.AddClassNameToElement(barElement, "h");
   if(this.expandOnPageLoad)
    this.Expand(true);
  },
  OnDispose: function () {
   if(FixedPanels[this.fixedPosition] === this)
    delete FixedPanels[this.fixedPosition];
   if(ASPx.Ident.IsArray(CollapsiblePanelsGroups[this.groupName])){
    ASPx.Data.ArrayRemove(CollapsiblePanelsGroups[this.groupName], this);
    if(CollapsiblePanelsGroups[this.groupName].length === 0)
     delete CollapsiblePanelsGroups[this.groupName];
   }
   if(ExpandedPanels[this.groupName] === this)
    delete ExpandedPanels[this.groupName];
   ASPxClientPanelBase.prototype.OnDispose.call(this);
  },
  AdjustControlCore: function() {
   this.updateExpandButtonPosition();
   this.updateFixedPanelContext();
  },
  GetAdjustedSizes: function() {
   var sizes = ASPxClientControl.prototype.GetAdjustedSizes.call(this);
   var expandBar = this.getExpandBarElement();
   if(expandBar) {
    sizes["expandBarWidth"] = expandBar.offsetWidth;
    sizes["expandBarHeight"] = expandBar.offsetHeight;
   }
   return sizes;
  },
  IsDisplayed: function() {
   if(ASPxClientPanelBase.prototype.IsDisplayed.call(this))
    return true;
   return this.IsDisplayedElement(this.getExpandBarElement());
  },
  IsHidden: function() {
   if(!ASPxClientPanelBase.prototype.IsHidden.call(this))
    return false;
   return this.IsHiddenElement(this.getExpandBarElement());
  },
  OnBrowserWindowResize: function(e) {
   if(this.useAdaptivityClassNames())
    this.ensureAdaptivityClassNames();
   this.onBrowserWindowResizeCore();
   window.setTimeout(function() {
    this.onBrowserWindowResizeCore();
   }.aspxBind(this), 0);
  },
  BrowserWindowResizeSubscriber: function() {
   return this.isPositionFixed() || this.getExpandBarElement() || this.useAdaptivityClassNames();
  },
  HasFixedPosition: function() {
   return this.isPositionFixed();
  },
  RegisterInControlTree: function(tree) {
   var mainNode = tree.createNode(null, this);
   this.registerElementInTree(this.GetMainElement(), tree, mainNode);
   this.registerElementInTree(this.getExpandBarElement(), tree, mainNode);
  },
  getSizeCore: function(element, sizeProperty){
   return element[sizeProperty];
  },
  getFixedSize: function(sizeProperty){
   return this.getSizeCore(this.getFixedElement(), sizeProperty);
  },
  getExpandedSize: function(sizeProperty){
   if(this.getExpandBarElement() && this.isElementDisplayed(this.getExpandBarElement()))
    return this.getSizeCore(this.GetMainElement(), sizeProperty);
   return 0;
  },
  GetWidth: function() {
   if(!this.getExpandBarElement()) 
    return ASPxClientControl.prototype.GetWidth.call(this);
   var width = 0;
   if(this.isElementDisplayed(this.getExpandBarElement()))
    width += this.getExpandBarElement().offsetWidth;
   if(this.isElementDisplayed(this.GetMainElement()) && (!this.IsExpandedInternal() || !this.isPopupExpanding()))
    width += this.GetMainElement().offsetWidth;
   return width;
  },
  GetHeight: function() {
   if(!this.getExpandBarElement()) 
    return ASPxClientControl.prototype.GetHeight.call(this);
   var height = 0;
   if(this.isElementDisplayed(this.getExpandBarElement()))
    height += this.getExpandBarElement().offsetHeight;
   if(this.isElementDisplayed(this.GetMainElement()) && (!this.IsExpandedInternal() || !this.isPopupExpanding()))
    height += this.GetMainElement().offsetHeight;
   return height;
  },
  SetVisible: function (value) {
   if(this.clientVisible != value) {
    ASPxClientPanelBase.prototype.SetVisible.call(this, value);
    var expandBarElement = this.getExpandBarElement();
    if(expandBarElement) ASPx.SetElementDisplay(expandBarElement, value);
    this.updateFixedPanelContext();
   }
  },
  onBrowserWindowResizeCore: function() {
   this.updateExpandButtonPosition();
   this.updateFixedPanelContext();
   this.checkCollapseContent();
  },
  registerElementInTree: function(element, tree, mainNode) {
   if(element && element.id) {
    var node = tree.createNode(element.id, null);
    tree.addRelatedNode(node, mainNode);
   }
  },
  updateFixedPanelContext: function(){
   if(!this.isPositionFixed()) return;
   this.updateDocumentPaddings();
   this.updateMainElementFixedPosition();
   this.updateFixedPanelsPosition();
  },
  updateExpandButtonPosition: function(){
   var expandButton = this.getExpandButtonElement();
   if(!expandButton) return;
   var isCenterPosition = expandButton.className.indexOf(CENTER_BTN_POSITION_SELECTOR) > -1;
   if(isCenterPosition && expandButton.offsetWidth > 0){
    expandButton.style.width = expandButton.offsetWidth + "px";
    ASPx.SetElementFloat(expandButton, "none");
   }
   var correctButtonPosition = false;
   if(this.fixedPosition == "Top" || this.fixedPosition == "Bottom")
    correctButtonPosition = true;
   else if(this.fixedPosition == "Left" || this.fixedPosition == "Right")
    correctButtonPosition = isCenterPosition;
   else if(this.hasVerticalOrientation())
    correctButtonPosition = isCenterPosition;
   else
    correctButtonPosition = true;
   if(correctButtonPosition) 
    this.CorrectVerticalAlignment(ASPx.AdjustVerticalMargins, this.getExpandButtonElement, "Btn", true);
  },
  updateDocumentPaddings: function(){
   if(!this.fixedPositionProperties) return;
   var size = this.getFixedSize(this.fixedPositionProperties.size);
   var expandedSize = 0;
   if(this.expandEffect == "Slide"){
    expandedSize = this.getExpandedSize(this.fixedPositionProperties.size);
    if(this.fixedPosition == "Right" || this.fixedPosition == "Bottom")
     expandedSize = -expandedSize;
   }
   if(!this.fixedPanelCoversViewPort(this.fixedPositionProperties.contentEdge, size))
    this.changeStyleSideAttribute(document.documentElement, "padding", this.fixedPositionProperties.documentPadding, size + "px");
   var documentMarginValue = this.getDocumentPropertyValue(this.fixedPositionProperties.documentMargin);
   var documentMargin2Value = this.getDocumentPropertyValue(this.fixedPositionProperties.documentMargin2);
   if(expandedSize != 0){
    ASPx.Attr.ChangeStyleAttribute(document.documentElement, this.fixedPositionProperties.documentMargin, (documentMarginValue + expandedSize) + "px");
    ASPx.Attr.ChangeStyleAttribute(document.documentElement, this.fixedPositionProperties.documentMargin2, (documentMargin2Value - expandedSize) + "px");
    this.documentMarginsChanged = true;
   }
   else if(this.documentMarginsChanged){
    ASPx.Attr.RestoreStyleAttribute(document.documentElement, this.fixedPositionProperties.documentMargin);
    ASPx.Attr.RestoreStyleAttribute(document.documentElement, this.fixedPositionProperties.documentMargin2);
    this.documentMarginsChanged = false;
   }
  },
  fixedPanelCoversViewPort: function(contentEdge, size) {
   return ((contentEdge === "top" || contentEdge === "bottom") && size >= window.innerHeight) ||
    ((contentEdge === "left" || contentEdge === "right") && size >= window.innerWidth);
  },
  changeStyleSideAttribute: function(element, baseAttr, attr, value){
   if(!ASPx.Browser.IE || ASPx.Browser.Version > 8)
    ASPx.Attr.ChangeStyleAttribute(element, attr, value);
   else{
    var style = ASPx.GetCurrentStyle(element);
    var top = (attr == baseAttr + "-top") ? value : style[baseAttr + "Top"];
    var right = (attr == baseAttr + "-right") ? value : style[baseAttr + "Right"];
    var bottom = (attr == baseAttr + "-bottom") ? value : style[baseAttr + "Bottom"];
    var left = (attr == baseAttr + "-left") ? value : style[baseAttr + "Left"];
    ASPx.Attr.ChangeStyleAttribute(element, baseAttr, top + " " + right + " " + bottom + " " + left);
   }
  },
  updateMainElementFixedPosition: function(){
   if(!this.fixedPositionProperties) return;
   var barElement = this.getExpandBarElement();
   if(barElement){
    var size = this.getSizeCore(barElement, this.fixedPositionProperties.size);
    ASPx.Attr.ChangeStyleAttribute(this.GetMainElement(), this.fixedPositionProperties.contentEdge, size + "px");
   }
  },
  updateFixedPanelsPosition: function() {
   this.updateFixedPanelsEdges(this.updateFixedPanelEdge);
   this.updateFixedPanelsEdges(this.updateFixedPanelOppositeEdge);
  },
  updateFixedPanelsEdges: function(method) {
   if(FixedPanels["Top"]){
    if(FixedPanels["Left"] && !FixedPanels["Top"].fixedPositionOverlap && FixedPanels["Left"].fixedPositionOverlap)
     method.call(FixedPanels["Left"], FixedPanels["Top"], FixedPanels["Right"]);
    if(FixedPanels["Right"] && !FixedPanels["Top"].fixedPositionOverlap && FixedPanels["Right"].fixedPositionOverlap)
     method.call(FixedPanels["Right"], FixedPanels["Top"], FixedPanels["Left"]);
   }
   if(FixedPanels["Bottom"]){
    if(FixedPanels["Left"] && !FixedPanels["Bottom"].fixedPositionOverlap && FixedPanels["Left"].fixedPositionOverlap)
     method.call(FixedPanels["Left"], FixedPanels["Bottom"], FixedPanels["Right"]);
    if(FixedPanels["Right"] && !FixedPanels["Bottom"].fixedPositionOverlap && FixedPanels["Right"].fixedPositionOverlap)
     method.call(FixedPanels["Right"], FixedPanels["Bottom"], FixedPanels["Left"]);
   }
   if(FixedPanels["Left"]){
    if(FixedPanels["Top"] && (!FixedPanels["Left"].fixedPositionOverlap || FixedPanels["Top"].fixedPositionOverlap))
     method.call(FixedPanels["Top"], FixedPanels["Left"], FixedPanels["Bottom"]);
    if(FixedPanels["Bottom"] && (!FixedPanels["Left"].fixedPositionOverlap || FixedPanels["Bottom"].fixedPositionOverlap))
     method.call(FixedPanels["Bottom"], FixedPanels["Left"], FixedPanels["Top"]);
   }
   if(FixedPanels["Right"]){
    if(FixedPanels["Top"] && (!FixedPanels["Right"].fixedPositionOverlap || FixedPanels["Top"].fixedPositionOverlap))
     method.call(FixedPanels["Top"], FixedPanels["Right"], FixedPanels["Bottom"]);
    if(FixedPanels["Bottom"] && (!FixedPanels["Right"].fixedPositionOverlap || FixedPanels["Bottom"].fixedPositionOverlap))
     method.call(FixedPanels["Bottom"], FixedPanels["Right"], FixedPanels["Top"]);
   }
  },
  updateFixedPanelEdge: function(panel){
   var size = this.getFixedSize(this.fixedPositionProperties.size);
   if(this.expandEffect == "Slide")
    size += this.getExpandedSize(this.fixedPositionProperties.size);
   this.updateFixedPanelEdgeCore(panel, this.fixedPositionProperties.contentEdge, size);
  },
  updateFixedPanelOppositeEdge: function(panel, opppositePanel){
   if(!this.IsExpandedInternal() && opppositePanel) return;
   if(this.expandEffect == "Slide") {
    var size = this.getExpandedSize(this.fixedPositionProperties.size);
    this.updateFixedPanelEdgeCore(panel, this.fixedPositionProperties.oppositeContentEdge, -size);
   }
  },
  updateFixedPanelEdgeCore: function(panel, edge, size){
   var mainElement = panel.GetMainElement();
   mainElement.style[edge] = size + "px";
   var expandBarElement = panel.getExpandBarElement();
   if(expandBarElement)
    expandBarElement.style[edge] = size + "px";
  },
  isPositionFixed: function(){
   return !!this.fixedPositionProperties;
  },
  getFixedPosition: function(){
   var cssClass = this.GetMainElement().className;
   if(cssClass.indexOf("dxpnl-edge t") > -1)
    return "Top";
   if(cssClass.indexOf("dxpnl-edge b") > -1)
    return "Bottom";
   if(cssClass.indexOf("dxpnl-edge l") > -1)
    return "Left";
   if(cssClass.indexOf("dxpnl-edge r") > -1)
    return "Right";
   return null;
  },
  isPopupExpanding: function(){
   return !!this.expandDirectionProperties;
  },
  isExpandBarChangeVisibilityOnExpanding: function(){
   return !this.isPopupExpanding() && !this.isPositionFixed() && CollapsiblePanelsGroups[this.groupName].length > 1;
  },
  createVisibilityCss: function() {
   var rules = [];
   rules.push({ selector: "#" + this.name, cssText: "display: none!important;" });
   rules.push({ selector: "#" + this.getExpandBarId(), cssText: "display: none!important;" });
   this.insertAdaptivityRules(rules, this.hideWindowWidth, this.hideWindowHeight, HIDDEN_STATE_CLASS_NAME);
  },
  createCollapsibilityCss: function() {
   var rules = [];
   rules.push({ selector: "#" + this.name, cssText: "display: none;" });
   rules.push({ selector: "#" + this.getExpandBarId() + ".dxpnl-bar", cssText: (this.isPositionFixed() ? "display: block;" : "display: table;") });
   rules.push({ selector: "#" + this.name + "." + EXPANDED_SELECTOR, cssText: "display: block!important;" });
   this.insertAdaptivityRules(rules, this.collapseWindowWidth, this.collapseWindowHeight, COLLAPSED_STATE_CLASS_NAME);
  },
  insertAdaptivityRules: function(rules, maxWindowWidth, maxWindowHeight, adaptivityClassName) {
   var styleSheet = ASPx.GetCurrentStyleSheet();
   if(!styleSheet) return;
   var mediaRule = "@media all and (max-width: " + maxWindowWidth + "px), (max-height: " + maxWindowHeight + "px) { ";
   for(var i = 0; i < rules.length; i++)
    mediaRule += rules[i].selector + "{" + rules[i].cssText + "}";
   mediaRule += "}";
   if(styleSheet.insertRule)
    styleSheet.insertRule(mediaRule, styleSheet.cssRules.length);
  },
  ensureAdaptivityClassNames: function() {
   this.ensureAdaptivityClassName(HIDDEN_STATE_CLASS_NAME, this.hideWindowWidth, this.hideWindowHeight);
   this.ensureAdaptivityClassName(COLLAPSED_STATE_CLASS_NAME, this.collapseWindowWidth, this.collapseWindowHeight);
  },
  ensureAdaptivityClassName: function(adaptivityClassName, maxWindowWidth, maxWindowHeight) {
   var currentDocumentWidth = ASPx.GetCurrentDocumentWidth();
   var currentDocumentHeight = ASPx.GetCurrentDocumentHeight();
   if(currentDocumentWidth <= maxWindowWidth || currentDocumentHeight <= maxWindowHeight)
    this.addAdaptivityClassName(adaptivityClassName);
   else
    this.removeAdaptivityClassName(adaptivityClassName);
  },
  addAdaptivityClassName: function(className) {
   ASPx.AddClassNameToElement(this.GetMainElement(), className);
   if(ASPx.IsExists(this.getExpandBarElement()))
    ASPx.AddClassNameToElement(this.getExpandBarElement(), className);
  },
  removeAdaptivityClassName: function(className) {
   ASPx.RemoveClassNameFromElement(this.GetMainElement(), className);
   if(ASPx.IsExists(this.getExpandBarElement()))
    ASPx.RemoveClassNameFromElement(this.getExpandBarElement(), className);
  },
  useAdaptivityClassNames: function() {
   return this.isIE8()
    && (this.hideWindowWidth > 0 || this.hideWindowHeight > 0 || this.collapseWindowWidth > 0 || this.collapseWindowHeight > 0);
  },
  isIE8: function() {
   return ASPx.Browser.IE && ASPx.Browser.Version === 8;
  },
  Toggle: function() {
   if(this.IsExpandedInternal()) 
    this.Collapse();
   else 
    this.Expand();
  },
  IsExpandable: function() {
   if(this.GetMainElement().className.indexOf(" " + COLLAPSIBLE_SELECTOR) > -1)
    return true;
   if(this.collapseWindowWidth > 0 || this.collapseWindowHeight > 0){
    var expandBarElement = this.getExpandBarElement();
    return expandBarElement && ASPx.GetCurrentStyle(expandBarElement).display !== "none";
   }
   return false;
  },
  IsExpanded: function() {
   if(this.IsExpandable())
    return this.IsExpandedInternal();
   return true;
  },
  IsExpandedInternal: function() {
   return this.GetMainElement().className.indexOf(" " + EXPANDED_SELECTOR) > -1;
  },
  Expand: function(preventAnimation) {
   if(ExpandedPanels[this.groupName] != this) {
    if(ExpandedPanels[this.groupName])
     ExpandedPanels[this.groupName].Collapse(preventAnimation);
    this.collapseOppositePanel(preventAnimation);
    this.collapseUnfixedPopupPanels();
    ExpandedPanels[this.groupName] = this;
    ASPx.GetStateController().SelectElementBySrcElement(this.GetMainElement());
    ASPx.GetStateController().SelectElementBySrcElement(this.getExpandButtonElement());
    if(this.isModal()) {
     var modalElement = this.getModalElement();
     ASPx.AnimationHelper.fadeTo(modalElement, { from: 0, to: this.modalElementOpacity, duration: this.modalShowAnimationDuration });
    }
    ASPx.GetControlCollection().AdjustControls(this.GetMainElement());
    if(this.isPopupExpanding() && !this.isPositionFixed())
     this.updateMainElementPosition(true);
    if(this.isExpandBarChangeVisibilityOnExpanding())
     this.slideAnimationExpandBarSize = this.getSlideAnimationSize(this.getExpandBarElement(), true);
    ASPx.GetStateController().SelectElementBySrcElement(this.getExpandBarElement());
    if(!preventAnimation && this.animationType == "slide")
     this.startSlideAnimation(this.GetMainElement(), false);
    else if(!preventAnimation && this.animationType == "fade")
     this.startFadeAnimation(this.GetMainElement(), false);
    else
     this.expandCore();
   }
  },
  Collapse: function(preventAnimation) {
   if(ExpandedPanels[this.groupName] == this) {
    ExpandedPanels[this.groupName] = null;
    this.collapseUnfixedPopupPanels();
    if(this.isExpandBarChangeVisibilityOnExpanding()){
     ASPx.GetStateController().DeselectElementBySrcElement(this.getExpandBarElement());
     this.slideAnimationExpandBarSize = this.getSlideAnimationSize(this.getExpandBarElement(), true);
     ASPx.GetStateController().SelectElementBySrcElement(this.getExpandBarElement());
    }
    if(this.isModal()) {
     var modalElement = this.getModalElement(),
      fromOpacity = ASPx.GetCurrentStyle(modalElement).opacity;
     ASPx.AnimationHelper.fadeTo(modalElement, { from: fromOpacity, to: 0, duration: this.modalHideAnimationDuration });
    }
    if(!preventAnimation && this.animationType == "slide")
     this.startSlideAnimation(this.GetMainElement(), true);
    else if(!preventAnimation && this.animationType == "fade")
     this.startFadeAnimation(this.GetMainElement(), true);
    else
     this.collapseCore();
   }
  },
  isModal: function() {
   return !!this.getModalElement();
  },
  expandCore: function() {
   if(this.isPositionFixed()) {
    this.updateFixedPanelContext();
   }
   this.raiseExpanded();
  },
  collapseCore: function() {
   ASPx.GetStateController().DeselectElementBySrcElement(this.GetMainElement());
   ASPx.GetStateController().DeselectElementBySrcElement(this.getExpandButtonElement());
   if(this.isPopupExpanding() && !this.isPositionFixed())
    this.updateMainElementPosition(false);
   ASPx.GetStateController().DeselectElementBySrcElement(this.getExpandBarElement());
   if(this.isPositionFixed()) {
    this.updateFixedPanelContext();
   }
   this.slideAnimationPosProperty = null;
   this.raiseCollapsed();
  },
  collapseOppositePanel: function(preventAnimation) {
   if(!this.fixedPositionProperties) return;
   if(FixedPanels[this.fixedPositionProperties.oppositePanel])
    FixedPanels[this.fixedPositionProperties.oppositePanel].Collapse(preventAnimation);
  },
  collapseUnfixedPopupPanels: function() {
   if(!this.isPositionFixed() || this.isPopupExpanding()) return;
   for(var groupName in ExpandedPanels){
    if(ExpandedPanels[groupName] && !ExpandedPanels[groupName].fixedPosition && ExpandedPanels[groupName].isPopupExpanding())
     ExpandedPanels[groupName].Collapse(true);
   }
  },
  saveOpacity: function(element) {
   if(!this.isIE8())
    ASPx.Attr.SaveStyleAttribute(element, "opacity");
   else if(ASPx.GetCurrentStyle(element).filter)
    ASPx.Attr.SaveStyleAttribute(element, "filter");
  },
  restoreOpacity: function(element) {
   if(!this.isIE8())
    ASPx.Attr.RestoreStyleAttribute(element, "opacity");
   else
    ASPx.Attr.RestoreStyleAttribute(element, "filter");
  },
  startFadeAnimation: function (element, isCollapsing) {
   this.saveOpacity(element);
   var onComplete =  function() { this.finishFadeAnimation(element, isCollapsing); }.aspxBind(this);
   if(isCollapsing)
    ASPx.AnimationHelper.fadeOut(element, onComplete, ASPx.AnimationConstants.Durations.SHORT);
   else
    ASPx.AnimationHelper.fadeIn(element, onComplete, ASPx.AnimationConstants.Durations.SHORT);
  },
  finishFadeAnimation: function (element, isCollapsing) {
   this.restoreOpacity(element);
   if(isCollapsing)
    this.collapseCore(); 
   else
    this.expandCore(); 
  },
  startSlideAnimation: function(element, isCollapsing) {
   var sizeProperty = this.getSlideAnimationSizeProperty();
   ASPx.Attr.ChangeStyleAttribute(element, "overflow", "auto");
   var offsetWidth = element.offsetWidth;
   var offsetHeight = element.offsetHeight;
   ASPx.Attr.RestoreStyleAttribute(element, "overflow");
   ASPx.Attr.SaveStyleAttribute(element, sizeProperty);
   if(element.style.overflow !== "")
    ASPx.Attr.ChangeStyleAttribute(element, "overflow", "hidden");
   else {
    ASPx.Attr.ChangeStyleAttribute(element, "overflow-x", "hidden");
    ASPx.Attr.ChangeStyleAttribute(element, "overflow-y", "hidden");
   }
   var contentContainer = this.getAnimationContentContainerElement();
   if(contentContainer) {
    if(contentContainer.style.overflow !== "")
     ASPx.Attr.ChangeStyleAttribute(contentContainer, "overflow", "hidden");
    else{
     ASPx.Attr.ChangeStyleAttribute(contentContainer, "overflow-x", "hidden");
     ASPx.Attr.ChangeStyleAttribute(contentContainer, "overflow-y", "hidden");
    }
    ASPx.Attr.ChangeStyleAttribute(contentContainer, "width", offsetWidth - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element) + "px");
    ASPx.Attr.ChangeStyleAttribute(contentContainer, "height", offsetHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element) + "px");
   }
   var transitionProperties = {
    duration: ASPx.AnimationConstants.Durations.SHORT, 
    onComplete: function() { this.finishSlideAnimation(element, isCollapsing); }.aspxBind(this)
   };
   if(this.isPositionFixed())
    transitionProperties.onStep = function() { this.performSlideAnimationStep(); }.aspxBind(this);
   var transition = ASPx.AnimationHelper.createMultipleAnimationTransition(element, transitionProperties);
   var size = this.getSlideAnimationSize(element, !this.isPositionFixed());
   var startSize = isCollapsing ? size : 0;
   var endSize = isCollapsing ? 0 : size;
   if(this.isExpandBarChangeVisibilityOnExpanding() && this.slideAnimationExpandBarSize){
    if(startSize == 0)
     startSize = this.slideAnimationExpandBarSize;
    if(endSize == 0)
     endSize = this.slideAnimationExpandBarSize;
   }
   var properties = {};
   properties[sizeProperty] = { from: startSize, to: endSize, unit: "px" };
   if(!isCollapsing) 
    ASPx.Attr.ChangeStyleAttribute(element, sizeProperty, startSize + "px");
   if(this.slideAnimationPosProperty){
    var position = parseInt(element.style[this.slideAnimationPosProperty]);
    var startPosition = isCollapsing ? position : position + size;
    var endPosition = isCollapsing ? position + size : position;
    properties[this.slideAnimationPosProperty] = { from: startPosition, to: endPosition, unit: "px" };
    if(!isCollapsing) 
     ASPx.Attr.ChangeStyleAttribute(element, this.slideAnimationPosProperty, startPosition + "px");
   }
   transition.Start(properties);
  },
  finishSlideAnimation: function(element, isCollapsing) {
   var sizeProperty = this.getSlideAnimationSizeProperty();
   ASPx.Attr.RestoreStyleAttribute(element, sizeProperty);
   ASPx.Attr.RestoreStyleAttribute(element, "overflow");
   ASPx.Attr.RestoreStyleAttribute(element, "overflow-x");
   ASPx.Attr.RestoreStyleAttribute(element, "overflow-y");
   var contentContainer = this.getAnimationContentContainerElement();
   if(contentContainer) {
    ASPx.Attr.RestoreStyleAttribute(contentContainer, "overflow");
    ASPx.Attr.RestoreStyleAttribute(contentContainer, "overflow-x");
    ASPx.Attr.RestoreStyleAttribute(contentContainer, "overflow-y");
    ASPx.Attr.RestoreStyleAttribute(contentContainer, "width");
    ASPx.Attr.RestoreStyleAttribute(contentContainer, "height");
   }
   if(isCollapsing)
    this.collapseCore(); 
   else
    this.expandCore(); 
  },
  performSlideAnimationStep: function() {
   this.updateFixedPanelContext();
  },
  getSlideAnimationSizeProperty: function() {
   if(this.fixedPositionProperties)
    return this.fixedPositionProperties.animationSize;
   else if(this.expandDirectionProperties)
    return this.expandDirectionProperties.animationSize;
   else 
    return this.hasVerticalOrientation() ? "width" : "height";
  },
  getSlideAnimationSize: function(element, fullSize) {
   var sizeProperty;
   if(this.fixedPositionProperties)
    sizeProperty = this.fixedPositionProperties.size;
   else if(this.expandDirectionProperties)
    sizeProperty = this.expandDirectionProperties.size;
   else
    sizeProperty = this.hasVerticalOrientation() ? "offsetWidth" : "offsetHeight";
   var size = this.getSizeCore(element, sizeProperty);
   if(fullSize) {
    if(sizeProperty == "offsetWidth")
     size -= ASPx.GetHorizontalBordersWidth(element);
    else
     size -= ASPx.GetVerticalBordersWidth(element);
   }
   else {
    if(sizeProperty == "offsetWidth")
     size -= ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element);
    else
     size -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element);
   }
   return size;
  },
  getSlideAnimationPosProperty: function(x, y) {
   if(this.expandEffect == "PopupToTop")
    return !y.isInverted ? "top" : null;
   if(this.expandEffect == "PopupToBottom")
    return y.isInverted ? "top" : null;
   if(this.expandEffect == "PopupToLeft")
    return !x.isInverted ? "left" : null;
   if(this.expandEffect == "PopupToRight")
    return y.isInverted ? "left" : null;
   return null;
  }, 
  hasVerticalOrientation: function() {
   var float = ASPx.GetElementFloat(this.GetMainElement());
   return (float === "left" || float === "right");
  },
  updateMainElementPosition: function(expanded) {
   if(!this.expandDirectionProperties) return;
   if(expanded)
    this.updateMainElementExpandedPosition(this.GetMainElement());
   else
    this.updateMainElementCollapsedPosition(this.GetMainElement());
  },
  updateMainElementExpandedPosition: function(element) {
   if(element.style.width === "100%")
    ASPx.Attr.ChangeStyleAttribute(element, "width", (element.parentNode.offsetWidth - ASPx.GetLeftRightMargins(element)) + "px");
   if(element.style.height === "100%")
    ASPx.Attr.ChangeStyleAttribute(element, "height", (element.parentNode.offsetHeight - ASPx.GetTopBottomMargins(element)) + "px");
   ASPx.Attr.ChangeStyleAttribute(element, "position", "absolute");
   var barElement = this.getExpandBarElement();
   var x = ASPx.PopupUtils.GetPopupAbsoluteX(element,
    barElement, this.expandDirectionProperties.hAlign, 0, 0, 0, false, false);
   var y = ASPx.PopupUtils.GetPopupAbsoluteY(element,
    barElement, this.expandDirectionProperties.vAlign, 0, 0, 0, true, false);
   ASPx.SetAbsoluteX(element, x.position);
   ASPx.SetAbsoluteY(element, y.position);
   this.slideAnimationPosProperty = this.getSlideAnimationPosProperty(x, y);
  },
  updateMainElementCollapsedPosition: function(element) {
   ASPx.Attr.RestoreStyleAttribute(element, "position");
   ASPx.Attr.RestoreStyleAttribute(element, "left");
   ASPx.Attr.RestoreStyleAttribute(element, "top");
   ASPx.Attr.RestoreStyleAttribute(element, "width");
   ASPx.Attr.RestoreStyleAttribute(element, "height");
  },
  checkCollapseContent: function(){
   if(!this.getExpandBarElement()) return;
   if(this.IsExpandedInternal()){
    if(CollapsiblePanelsGroups[this.groupName].length === 1 && !this.isElementDisplayed(this.getExpandBarElement()) && this.isElementDisplayed(this.GetMainElement()))
     this.Collapse(true);
    if(!this.isPositionFixed() && this.isPopupExpanding())
     this.Collapse(true);
   }
  },
  raiseCollapsed: function() {
   if(!this.Collapsed.IsEmpty()) {
    var args = new ASPxClientEventArgs();
    this.Collapsed.FireEvent(this, args);
   }
  },
  raiseExpanded: function() {
   if(!this.Expanded.IsEmpty()) {
    var args = new ASPxClientEventArgs();
    this.Expanded.FireEvent(this, args);
   }
  },
  getAnimationContentContainerElement: function() {
   if(!ASPx.IsExistsElement(this.animationContentContainerElement)) 
    this.animationContentContainerElement = ASPx.GetChildByClassName(this.GetMainElement(), "dxpnl-acc");
   return this.animationContentContainerElement;
  },
  getScrollContentContainerElement: function() {
   if (!ASPx.IsExistsElement(this.scrollContentContainerElement)) {
    var mainElement = this.GetMainElement();
    this.scrollContentContainerElement = ASPx.GetNodesByPartialClassName(this.GetMainElement(), "dxpnl-scc")[0];
    if (mainElement.tagName == "DIV" && this.scrollContentContainerElement && this.scrollContentContainerElement.parentNode != mainElement)
     this.scrollContentContainerElement = null;
   }
   return this.scrollContentContainerElement;
  },
  getExpandBarElement: function() {
   if(!ASPx.IsExistsElement(this.expandBarElement))
    this.expandBarElement = ASPx.GetElementById(this.getExpandBarId());
   return this.expandBarElement;
  },
  getExpandBarId: function() {
   return this.name + EXPAND_BAR_ID;
  },
  getModalElement: function() {
   if(!ASPx.IsExistsElement(this.modalElement))
    this.modalElement = ASPx.GetElementById(this.getModalELementId());
   return this.modalElement;
  },
  getModalELementId: function() {
   return this.name + MODAL_ELEMENT_ID;
  },
  getExpandButtonElement: function() {
   if(!ASPx.IsExistsElement(this.expandButtonElement))
    this.expandButtonElement = ASPx.GetElementById(this.name + EXPAND_BUTTON_ID);
   return this.expandButtonElement;
  },
  getFixedElement: function(){
   if(this.getExpandBarElement() && this.isElementDisplayed(this.getExpandBarElement()))
    return this.getExpandBarElement();
   else
    return this.GetMainElement();
  },
  getDocumentPropertyValue: function(attr){
   if(DocumentProperties[attr] === undefined){
    var currentStyle = ASPx.GetCurrentStyle(document.documentElement);
    var attrValue = parseInt(ASPx.Attr.GetAttribute(currentStyle, attr));
    DocumentProperties[attr] = !isNaN(attrValue) ? attrValue : 0;
   }
   return DocumentProperties[attr];
  },
  isElementDisplayed: function(element){
   return ASPx.GetCurrentStyle(element).display != "none";
  }
 });
 ASPxClientPanel.Cast = ASPxClientControl.Cast;
 window.ASPxClientPanelBase = ASPxClientPanelBase;
 window.ASPxClientPanel = ASPxClientPanel;
})();
(function () {
var PopupUtils = {
 NotSetAlignIndicator: "NotSet",
 InnerAlignIndicator: "Sides",
 OutsideLeftAlignIndicator: "OutsideLeft",
 LeftSidesAlignIndicator: "LeftSides",
 RightSidesAlignIndicator: "RightSides",
 OutsideRightAlignIndicator: "OutsideRight",
 CenterAlignIndicator: "Center",
 AboveAlignIndicator: "Above",
 TopSidesAlignIndicator: "TopSides",
 MiddleAlignIndicator: "Middle",
 BottomSidesAlignIndicator: "BottomSides",
 BelowAlignIndicator: "Below",
 WindowCenterAlignIndicator: "WindowCenter",
 LeftAlignIndicator: "Left",
 RightAlignIndicator: "Right",
 TopAlignIndicator: "Top",
 BottomAlignIndicator: "Bottom",
 WindowLeftAlignIndicator: "WindowLeft",
 WindowRightAlignIndicator: "WindowRight",
 WindowTopAlignIndicator: "WindowTop",
 WindowBottomAlignIndicator: "WindowBottom",
 IsAlignNotSet: function (align) {
  return align == PopupUtils.NotSetAlignIndicator;
 },
 IsInnerAlign: function (align) {
  return align.indexOf(PopupUtils.InnerAlignIndicator) != -1;
 },
 IsRightSidesAlign: function(align) {
  return align == PopupUtils.RightSidesAlignIndicator;
 },
 IsOutsideRightAlign: function(align) {
  return align == PopupUtils.OutsideRightAlignIndicator;
 },
 IsCenterAlign: function(align) {
  return align == PopupUtils.CenterAlignIndicator;
 },
 FindPopupElementById: function (id) {
  if(id == "")
   return null; 
  var popupElement = ASPx.GetElementById(id);
  if(!ASPx.IsExistsElement(popupElement)) {
   var idParts = id.split("_");
   var uniqueId = idParts.join("$");
   popupElement = ASPx.GetElementById(uniqueId);
  }
  return popupElement;
 },
 FindEventSourceParentByTestFunc: function (evt, testFunc) {
  return ASPx.GetParent(ASPx.Evt.GetEventSource(evt), testFunc);
 },
 PreventContextMenu: function (evt) {
  ASPx.Evt.PreventEventAndBubble(evt);
  if(ASPx.Browser.WebKitFamily)
   evt.returnValue = false;
 },
 GetDocumentClientWidthForPopup: function() {
  return ASPx.Browser.WebKitTouchUI ? document.body.offsetWidth : ASPx.GetDocumentClientWidth();
 },
 GetDocumentClientHeightForPopup: function() {
  return ASPx.Browser.WebKitTouchUI ? document.body.offsetHeight : ASPx.GetDocumentClientHeight();
 },
 AdjustPositionToClientScreen: function (element, pos, rtl, isX) {
  var min = isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop(),
   max = min + (isX ? ASPx.GetDocumentClientWidth() : ASPx.GetDocumentClientHeight());
  max -= (isX ? element.offsetWidth : element.offsetHeight);
  if(rtl && isX) {
   if(pos < min) pos = min;
   if(pos > max) pos = max;
  } else {
   if(pos > max) pos = max;
   if(pos < min) pos = min;
  }
  return pos;
 },
 GetPopupAbsoluteX: function(element, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn) {
  return PopupUtils.getPopupAbsolutePos(element, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn, false, false, true);
 },
 GetPopupAbsoluteY: function (element, popupElement, vAlign, vOffset, y, top, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders) {
  return PopupUtils.getPopupAbsolutePos(element, popupElement, vAlign, vOffset, y, top, false, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, false);
 },
 getPopupAbsolutePos: function(element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, isHorizontal) {
  var calculator = getPositionCalculator();
  calculator.applyParams(element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, isHorizontal);
  var position = calculator.getPopupAbsolutePos();
  calculator.disposeState();
  return position;
 },
 RemoveFocus: function (parent) {
  var div = document.createElement('div');
  div.tabIndex = "-1";
  PopupUtils.ConcealDivElement(div);
  parent.appendChild(div);
  if(ASPx.IsFocusable(div))
   div.focus();
  ASPx.RemoveElement(div);
 },
 ConcealDivElement: function (div) {
  div.style.position = "absolute";
  div.style.left = 0;
  div.style.top = 0;
  if(ASPx.Browser.WebKitFamily) {
   div.style.opacity = 0;
   div.style.width = 1;
   div.style.height = 1;
  } else {
   div.style.border = 0;
   div.style.width = 0;
   div.style.height = 0;
  }
 },
 InitAnimationProperties: function(element, onAnimStopCallString) {
  element.popuping = true;
  element.onAnimStopCallString = onAnimStopCallString;
 },
 InitAnimationDiv: function (element, x, y, onAnimStopCallString, skipSizeInit) {
  PopupUtils.InitAnimationProperties(element, onAnimStopCallString);
  PopupUtils.InitAnimationDivCore(element);
  if(!skipSizeInit) {
   ASPx.SetStyles(element, { width: "", height: "" });
   ASPx.SetStyles(element, { width: element.offsetWidth, height: element.offsetHeight });
  }
  ASPx.SetStyles(element, { left: x, top: y });
 },
 InitAnimationDivCore: function (element) {
  ASPx.SetStyles(element, {
   overflow: "hidden",
   position: "absolute"
  });
 },
 StartSlideAnimation: function (animationDivElement, element, iframeElement, duration, preventChangingWidth, preventChangingHeight) {
  if(iframeElement) {
   var endLeft = ASPx.PxToInt(iframeElement.style.left);
   var endTop = ASPx.PxToInt(iframeElement.style.top);
   var startLeft = ASPx.PxToInt(element.style.left) < 0 ? endLeft : animationDivElement.offsetLeft + animationDivElement.offsetWidth;
   var startTop = ASPx.PxToInt(element.style.top) < 0 ? endTop : animationDivElement.offsetTop + animationDivElement.offsetHeight;
   var properties = {
    left: { from: startLeft, to: endLeft, unit: "px" },
    top: { from: startTop, to: endTop, unit: "px" }
   };
   if(!preventChangingWidth)
    properties.width = { to: element.offsetWidth, unit: "px" };
   if(!preventChangingHeight)
    properties.height = { to: element.offsetHeight, unit: "px" };
   ASPx.AnimationHelper.createMultipleAnimationTransition(iframeElement, {
    duration: duration
   }).Start(properties);
  }
  ASPx.AnimationHelper.createMultipleAnimationTransition(element, {
   duration: duration,
   onComplete: function () { PopupUtils.AnimationFinished(animationDivElement, element); }
  }).Start({
   left: { to: 0, unit: "px" },
   top: { to: 0, unit: "px" }
  });
 },
 AnimationFinished: function (animationDivElement, element) {
  if(PopupUtils.StopAnimation(animationDivElement, element) && ASPx.IsExists(animationDivElement.onAnimStopCallString) &&
   animationDivElement.onAnimStopCallString !== "") {
   window.setTimeout(animationDivElement.onAnimStopCallString, 0);
  }
 },
 StopAnimation: function (animationDivElement, element) {
  if(animationDivElement.popuping) {
   ASPx.AnimationHelper.cancelAnimation(element);
   animationDivElement.popuping = false;
   animationDivElement.style.overflow = "visible";
   return true;
  }
  return false;
 },
 GetAnimationHorizontalDirection: function (popupPosition, horizontalAlign, verticalAlign, rtl) {
  if(PopupUtils.IsInnerAlign(horizontalAlign)
   && !PopupUtils.IsInnerAlign(verticalAlign)
   && !PopupUtils.IsAlignNotSet(verticalAlign))
   return 0;
  var toTheLeft = (horizontalAlign == PopupUtils.OutsideLeftAlignIndicator || horizontalAlign == PopupUtils.RightSidesAlignIndicator || (horizontalAlign == PopupUtils.NotSetAlignIndicator && rtl)) ^ popupPosition.isInverted;
  return toTheLeft ? 1 : -1;
 },
 GetAnimationVerticalDirection: function (popupPosition, horizontalAlign, verticalAlign) {
  if(PopupUtils.IsInnerAlign(verticalAlign)
   && !PopupUtils.IsInnerAlign(horizontalAlign)
   && !PopupUtils.IsAlignNotSet(horizontalAlign))
   return 0;
  var toTheTop = (verticalAlign == PopupUtils.AboveAlignIndicator || verticalAlign == PopupUtils.BottomSidesAlignIndicator) ^ popupPosition.isInverted;
  return toTheTop ? 1 : -1;
 },
 IsVerticalScrollExists: function () {
  var scrollIsNotHidden = ASPx.GetCurrentStyle(document.body).overflowY !== "hidden" && ASPx.GetCurrentStyle(document.documentElement).overflowY !== "hidden";
  return (scrollIsNotHidden && ASPx.GetDocumentHeight() > ASPx.GetDocumentClientHeight());
 },
 CoordinatesInDocumentRect: function (x, y) {
  var docScrollLeft = ASPx.GetDocumentScrollLeft();
  var docScrollTop = ASPx.GetDocumentScrollTop();
  return (x > docScrollLeft && y > docScrollTop &&
   x < ASPx.GetDocumentClientWidth() + docScrollLeft &&
   y < ASPx.GetDocumentClientHeight() + docScrollTop);
 },
 GetElementZIndexArray: function (element) {
  var currentElement = element;
  var zIndexesArray = [0];
  while(currentElement && currentElement.tagName != "BODY") {
   if(currentElement.style) {
    if(typeof (currentElement.style.zIndex) != "undefined" && currentElement.style.zIndex != "")
     zIndexesArray.unshift(currentElement.style.zIndex);
   }
   currentElement = currentElement.parentNode;
  }
  return zIndexesArray;
 },
 IsHigher: function (higherZIndexArrat, zIndexArray) {
  if(zIndexArray == null) return true;
  var count = (higherZIndexArrat.length >= zIndexArray.length) ? higherZIndexArrat.length : zIndexArray.length;
  for(var i = 0; i < count; i++)
   if(typeof (higherZIndexArrat[i]) != "undefined" && typeof (zIndexArray[i]) != "undefined") {
    var higherZIndexArrayCurrentElement = parseInt(higherZIndexArrat[i].toString());
    var zIndexArrayCurrentElement = parseInt(zIndexArray[i].toString());
    if(higherZIndexArrayCurrentElement != zIndexArrayCurrentElement)
     return higherZIndexArrayCurrentElement > zIndexArrayCurrentElement;
   } else return typeof (zIndexArray[i]) == "undefined";
  return true;
 },
 TestIsPopupElement: function (element) {
  return !!element.DXPopupElementControl;
 },
 adjustViewportScrollWrapper: function(wrapper, wrapperScroll, windowElement) {
  var document = wrapper.ownerDocument;
  var window = document.defaultView || document.parentWindow;
  var isWindowElementDisplayed = ASPx.IsElementDisplayed(windowElement);
  if(!isWindowElementDisplayed) {
   wrapper.style.cssText = "";
   wrapperScroll.style.cssText = "";
   return; 
  }
  var windowRect = windowElement.getBoundingClientRect();
  var yAxis = this.calculateViewPortScrollDataByAxis(wrapper.style.top, windowRect.top, windowElement.offsetHeight, window.innerHeight, wrapper.scrollTop);
  var xAxis = this.calculateViewPortScrollDataByAxis(wrapper.style.left, windowRect.left, windowElement.offsetWidth, window.innerWidth, wrapper.scrollLeft);
  this.prepareViewPortScrollData(xAxis, yAxis);
  ASPx.SetStyles(windowElement, {
   top: yAxis.windowOffset,
   left: xAxis.windowOffset
  });
  ASPx.SetStyles(wrapper, {
   width: xAxis.wrapperSize,
   height: yAxis.wrapperSize,
   position: "absolute",
   overflow: ASPx.Browser.MobileUI ? "scroll" : "auto",
   zIndex: windowElement.style.zIndex
  });
  ASPx.SetAbsoluteX(wrapper, ASPx.GetDocumentScrollLeft());
  ASPx.SetAbsoluteY(wrapper, ASPx.GetDocumentScrollTop());
  ASPx.SetStyles(wrapperScroll, {
   width: xAxis.wrapperScrollSize,
   height: yAxis.wrapperScrollSize,
   position: "absolute",
   overflow: "hidden"
  });
  wrapper.scrollLeft = xAxis.scrollSize;
  wrapper.scrollTop = yAxis.scrollSize;
 },
 calculateViewPortScrollDataByAxis: function(wrapperOffsetStyle, windowOffset, windowSize, viewPortSize, scrollSize) {
  var isWindowOffsetNegative = windowOffset < 0;
  windowOffset = isWindowOffsetNegative ? 0 : windowOffset;
  var wrapperScrollSize = Math.max(viewPortSize + Math.abs(Math.min(0, windowOffset)), windowSize + Math.abs(windowOffset));
  return { 
   windowOffset: isWindowOffsetNegative ? 0 : windowOffset,
   wrapperSize: viewPortSize,
   wrapperScrollSize: wrapperScrollSize,
   scrollSize: isWindowOffsetNegative ? scrollSize + Math.abs(windowOffset) : 0,
   hasScroll: wrapperScrollSize > viewPortSize
  };
 },
 prepareViewPortScrollData: function(xAxis, yAxis) {
  var scrollBarSize = ASPx.GetVerticalScrollBarWidth();
  if(yAxis.hasScroll && !xAxis.hasScroll) {
   xAxis.wrapperScrollSize = Math.min(xAxis.wrapperSize - scrollBarSize, xAxis.wrapperScrollSize);
  } else if(xAxis.hasScroll && !yAxis.hasScroll) {
   yAxis.wrapperScrollSize = Math.min(yAxis.wrapperSize - scrollBarSize, yAxis.wrapperScrollSize);
  } else if(yAxis.hasScroll && xAxis.hasScroll) {
   yAxis.wrapperScrollSize -= scrollBarSize;
   xAxis.wrapperScrollSize -= scrollBarSize;
  }
 }
};
PopupUtils.OverControl = {
 GetPopupElementByEvt: function (evt) {
  return PopupUtils.FindEventSourceParentByTestFunc(evt, PopupUtils.TestIsPopupElement);
 },
 OnMouseEvent: function (evt, mouseOver) {
  var popupElement = PopupUtils.OverControl.GetPopupElementByEvt(evt);
  if(mouseOver)
   popupElement.DXPopupElementControl.OnPopupElementMouseOver(evt, popupElement);
  else
   popupElement.DXPopupElementControl.OnPopupElementMouseOut(evt, popupElement);
 },
 OnMouseOut: function (evt) {
  PopupUtils.OverControl.OnMouseEvent(evt, false);
 },
 OnMouseOver: function (evt) {
  PopupUtils.OverControl.OnMouseEvent(evt, true);
 }
};
PopupUtils.BodyScrollHelper = (function () {
 var windowScrollLock = {},
  windowScroll = {},
  hideScrollbarsClassName = "dxpc-hideScrollbars",
  savedHtmlOverflow = "";
 function lockWindowScroll(windowId) {
  windowScrollLock[windowId] = true;
 }
 function unlockWindowScroll(windowId) {
  delete windowScrollLock[windowId];
 }
 function isLocked(windowId) {
  return !!windowScrollLock[windowId];
 }
 function isAnyWindowScrollLocked() {
  for(var key in windowScrollLock) 
   if (windowScrollLock.hasOwnProperty(key) && windowScrollLock[key] === true)
    return true;
  return false;
 }
 function replaceVerticalScrollByPadding() {
  var currentBodyStyle = ASPx.GetCurrentStyle(document.body),
   paddingWidth = ASPx.GetVerticalScrollBarWidth() + ASPx.PxToInt(currentBodyStyle.paddingRight);
  ASPx.Attr.ChangeStyleAttribute(document.body, "padding-right", paddingWidth + "px");
 }
 function needToChangeOverflowUsingStyle() {
  return ASPx.Browser.IE && ASPx.Browser.Version >= 11;
 }
 function changeOverflow() {
  if(needToChangeOverflowUsingStyle()) { 
   savedHtmlOverflow = document.documentElement.style.overflow;
   document.documentElement.style.overflow = "hidden";
  }
  else
   ASPx.Attr.ChangeStyleAttribute(document.documentElement, "overflow", "hidden");
  if(ASPx.GetCurrentStyle(document.body).overflowY === "scroll")
   ASPx.Attr.ChangeStyleAttribute(document.body, "overflow", "hidden");
  resetOverflowCache();
 }
 function restoreOverflow() {
  if(needToChangeOverflowUsingStyle()) { 
   document.documentElement.style.overflow = savedHtmlOverflow;
   savedHtmlOverflow = "";
  }
  else
   ASPx.Attr.RestoreStyleAttribute(document.documentElement, "overflow");
  ASPx.Attr.RestoreStyleAttribute(document.body, "overflow");
  resetOverflowCache();
 }
 function resetOverflowCache() {
  ASPx.verticalScrollIsNotHidden = null;
  ASPx.horizontalScrollIsNotHidden = null;
 }
 function saveScrollPosition(windowId) {
  windowScroll[windowId] = {
   x: window.pageXOffset,
   y: window.pageYOffset
  };
 }
 function restoreScrollPosition(windowId) {
  var currentWindowScroll = windowScroll[windowId];
  if(!!currentWindowScroll)
   window.scrollTo(currentWindowScroll.x, currentWindowScroll.y);
 }
 function restoreBodyScroll(windowId) {
  unlockWindowScroll(windowId);
  if(isAnyWindowScrollLocked())
   return;
  if(ASPx.Browser.IE) {
   ASPx.Attr.RestoreAttribute(document.body, "scroll");
   restoreOverflow();
   restoreScrollPosition(windowId);
  } else if(ASPx.Browser.WebKitTouchUI) {
   ASPx.Attr.RestoreStyleAttribute(document.body, "position");
   ASPx.Attr.RestoreStyleAttribute(document.body, "height");
   ASPx.Attr.RestoreStyleAttribute(document.body, "margin");
   ASPx.RemoveClassNameFromElement(document.documentElement, hideScrollbarsClassName);
   ASPx.Attr.RestoreStyleAttribute(document.body, "overflow");
   restoreScrollPosition(windowId);
  } else {
   restoreOverflow();
   restoreScrollPosition(windowId);
  }
  if(ASPx.Browser.Chrome)
   var dummy = document.documentElement.scrollTop; 
  ASPx.Attr.RestoreStyleAttribute(document.body, "padding-right");
  ASPx.Attr.RestoreStyleAttribute(document.body, "height");
  ASPx.Attr.RestoreStyleAttribute(document.body, "width");
 }
 return {
  RestoreIfLocked: function(windowId) {
   if(isLocked(windowId))
    restoreBodyScroll(windowId);
  },
  HideBodyScroll: function(windowId) {
   if(isAnyWindowScrollLocked()) { 
    lockWindowScroll(windowId);
    return;
   }
   lockWindowScroll(windowId);
   if(PopupUtils.IsVerticalScrollExists())
    replaceVerticalScrollByPadding();
   if(ASPx.Browser.IE) {
    saveScrollPosition(windowId);
    ASPx.Attr.ChangeAttribute(document.body, "scroll", "no");
    changeOverflow();
   } else if(ASPx.Browser.WebKitTouchUI) {
    saveScrollPosition(windowId);
    ASPx.Attr.ChangeStyleAttribute(document.body, "overflow", "hidden");
    ASPx.Attr.ChangeStyleAttribute(document.body, "position", "relative");
    ASPx.Attr.ChangeStyleAttribute(document.body, "height", "100%");
    ASPx.Attr.ChangeStyleAttribute(document.body, "margin", "0");
    ASPx.AddClassNameToElement(document.documentElement, hideScrollbarsClassName);
   } else {
    saveScrollPosition(windowId);
    changeOverflow();
    var documentHeight = ASPx.GetDocumentHeight();
    var documentWidth = ASPx.GetDocumentWidth();
    if(window.pageYOffset > 0 && ASPx.PxToInt(window.getComputedStyle(document.body, null)) != documentHeight)
     ASPx.Attr.ChangeStyleAttribute(document.body, "height", documentHeight + "px");
    if(window.pageXOffset > 0 && ASPx.PxToInt(window.getComputedStyle(document.body, null)) != documentWidth)
     ASPx.Attr.ChangeStyleAttribute(document.body, "width", documentWidth + "px");
   }
  },
  RestoreBodyScroll: restoreBodyScroll
 };
})();
var PositionAlignConsts = {
 NOT_SET: 0,
 OUTSIDE_START: 1,
 NEAR_BOUND_START: 2,
 INNER_START: 3,
 CENTER: 4,
 INNER_END: 5,
 NEAR_BOUND_END: 6,
 OUTSIDE_END: 7,
 WINDOW_CENTER: 8,
 WINDOW_START: 9,
 WINDOW_END: 10
};
var AlignIndicatorTable = {};
var PositionCalculator = ASPx.CreateClass(null, {
 constructor: function() {
  this.element = null;
  this.popupElement = null;
  this.align = 0;
  this.offset = 0;
  this.startPos = 0;
  this.startPosInit = 0;
  this.rtl = false;
  this.isPopupFullCorrectionOn = false;
  this.isHorizontal = true;
  this.size = 0;
  this.bodySize = 0;
  this.actualBodySize = 0;
  this.elementStartPos = 0;
  this.scrollStartPos = 0;
  this.isInverted = false;
  this.popupElementSize = 0;
  this.boundStartPos = 0;
  this.boundEndPos = 0;
  this.innerBoundStartPos = 0;
  this.innerBoundEndPos = 0;
  this.isMoreFreeSpaceLeft = false;
  this.nearBoundOverlapRate = 0.25;
  this.functionsTable = {};
  this.initializeFunctionsTable();
 },
 applyParams: function(element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, isHorizontal) {
  this.isHorizontal = isHorizontal;
  this.element = element;
  this.popupElement = popupElement;
  this.align = this.getAlignValueFromIndicator(align);
  this.offset = offset;
  this.startPos = startPos;
  this.startPosInit = startPosInit;
  this.rtl = rtl;
  this.isPopupFullCorrectionOn = isPopupFullCorrectionOn;
  this.ignoreAlignWithoutScrollReserve = ignoreAlignWithoutScrollReserve;
  this.ignorePopupElementBorders = ignorePopupElementBorders;
  this.calculateParams();
 },
 disposeState: function() {
  this.element = null;
  this.popupElement = null;
 },
 getPopupAbsolutePos: function() {
  if(this.isWindowAlign()) {
   var showAtPos = this.startPos != ASPx.InvalidPosition && !this.popupElement;
   if(showAtPos)
    this.align = PositionAlignConsts.NOT_SET;
   else
    return this.getWindowAlignPos();
  }
  if(this.popupElement)
   this.calculatePopupElement();
  else
   this.align = PositionAlignConsts.NOT_SET;
  return this.getPopupAbsolutePosCore();
 },
 initializeFunctionsTable: function() {
  var table = this.functionsTable;
  table[PositionAlignConsts.NOT_SET] = this.calculateNotSet;
  table[PositionAlignConsts.OUTSIDE_START] = this.calculateOutsideStart;
  table[PositionAlignConsts.INNER_START] = this.calculateInnerStart;
  table[PositionAlignConsts.CENTER] = this.calculateCenter;
  table[PositionAlignConsts.INNER_END] = this.calculateInnerEnd;
  table[PositionAlignConsts.OUTSIDE_END] = this.calculateOutsideEnd;
  table[PositionAlignConsts.NEAR_BOUND_START] = this.calculateNearBoundStart;
  table[PositionAlignConsts.NEAR_BOUND_END] = this.calculateNearBoundEnd;
  table[PositionAlignConsts.WINDOW_CENTER] = this.calculateWindowCenter;
  table[PositionAlignConsts.WINDOW_START] = this.calculateWindowStart;
  table[PositionAlignConsts.WINDOW_END] = this.calculateWindowEnd;
 },
 calculateParams: function() {
  this.size = this.getElementSize();
  if(this.isHorizontal) {
   this.bodySize = ASPx.GetDocumentClientWidth();
   this.elementStartPos = ASPx.GetAbsoluteX(this.popupElement) + this.getBorderCorrection();
   this.scrollStartPos = ASPx.GetDocumentScrollLeft();
  }
  else {
   this.bodySize = ASPx.GetDocumentClientHeight();
   this.elementStartPos = ASPx.GetAbsoluteY(this.popupElement) + this.getBorderCorrection();
   this.scrollStartPos = ASPx.GetDocumentScrollTop();
  }
 },
 getBorderCorrection: function() {
  if(!this.ignorePopupElementBorders)
   return 0;
  var style = getComputedStyle(this.popupElement);
  return ASPx.PxToInt(this.isHorizontal ? style.borderLeftWidth : style.borderTopWidth);
 },
 isWindowAlign: function() {
  return this.align == PositionAlignConsts.WINDOW_CENTER || this.align == PositionAlignConsts.WINDOW_START ||
   this.align == PositionAlignConsts.WINDOW_END;
 },
 getWindowAlignPos: function() {
  this.actualBodySize = ASPx.Browser.WebKitTouchUI ? this.getWindowInnerSize() : this.bodySize;
  return this.getPopupAbsolutePosCore();
 },
 getPopupAbsolutePosCore: function() {
  var calculationFunc = this.functionsTable[this.align];
  calculationFunc.call(this);
  return new ASPx.PopupPosition(this.startPos, this.isInverted);
 },
 calculateWindowCenter: function() {
  this.startPos = Math.max(Math.ceil(this.actualBodySize / 2 - this.size / 2), 0) + this.scrollStartPos + this.offset;
 },
 calculateWindowStart: function() {
  this.startPos = this.scrollStartPos + this.offset;
 },
 calculateWindowEnd: function() {
  this.startPos = this.scrollStartPos + this.actualBodySize - this.size + this.offset;
 },
 calculatePopupElement: function() {
  this.popupElementSize = this.getPopupElementSize();
  this.boundStartPos = this.elementStartPos - this.size;
  this.boundEndPos = this.elementStartPos + this.popupElementSize;
  this.innerBoundStartPos = this.elementStartPos;
  this.innerBoundEndPos = this.elementStartPos + this.popupElementSize - this.size;
  var hasLeftScrollReserve = this.boundStartPos >= 0;
  this.isMoreFreeSpaceLeft = (this.bodySize - (this.boundEndPos + this.size) < this.boundStartPos - 2 * this.scrollStartPos) && (!this.ignoreAlignWithoutScrollReserve || hasLeftScrollReserve);
 },
 calculateOutsideStart: function() {
  this.isInverted = this.isPopupFullCorrectionOn && (!(this.boundStartPos - this.scrollStartPos > 0 || this.isMoreFreeSpaceLeft));
  if(this.isInverted)
   this.startPos = this.boundEndPos - this.offset;
  else
   this.startPos = this.boundStartPos + this.offset;
 },
 calculateInnerStart: function() {
  this.startPos = this.innerBoundStartPos + this.offset;
  if(this.isPopupFullCorrectionOn)
   this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
 },
 calculateCenter: function() {
  this.startPos = this.elementStartPos + Math.round((this.popupElementSize - this.size) / 2) + this.offset;
 },
 calculateInnerEnd: function() {
  this.startPos = this.innerBoundEndPos + this.offset;
  if(this.isPopupFullCorrectionOn)
   this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
 },
 calculateOutsideEnd: function() {
  this.isInverted = this.isPopupFullCorrectionOn && (!(this.boundEndPos + this.size < this.bodySize + this.scrollStartPos || !this.isMoreFreeSpaceLeft));
  if(this.isInverted)
   this.startPos = this.boundStartPos - this.offset;
  else
   this.startPos = this.boundEndPos + this.offset;
 },
 calculateNotSet: function() {
  if(this.rtl)
   this.calculateNotSetRightToLeft();
  else
   this.calculateNotSetLeftToRight();
 },
 calculateNotSetLeftToRight: function() {
  if(!ASPx.IsValidPosition(this.startPos)) {
   if(this.popupElement)
    this.startPos = this.elementStartPos;
   else if(this.offset)
    this.startPos = 0;
   else
    this.startPos = this.startPosInit;
  }
  this.isInverted = this.isPopupFullCorrectionOn && (this.startPos - this.scrollStartPos + this.size > this.bodySize && this.startPos - this.scrollStartPos > this.bodySize / 2);
  if(this.isInverted)
   this.startPos = this.startPos - this.size - this.offset;
  else
   this.startPos = this.startPos + this.offset;
 },
 calculateNotSetRightToLeft: function() {
  if(!ASPx.IsValidPosition(this.startPos)) {
   if(this.popupElement)
    this.startPos = this.innerBoundEndPos;
   else if(this.offset)
    this.startPos = 0;
   else
    this.startPos = this.startPosInit;
  }
  else
   this.startPos -= this.size;
  this.isInverted = this.isPopupFullCorrectionOn && (this.startPos < this.scrollStartPos && this.startPos - this.scrollStartPos < this.bodySize / 2);
  if(this.isInverted)
   this.startPos = this.startPos + this.size + this.offset;
  else
   this.startPos = this.startPos - this.offset;
 },
 calculateNearBoundStart: function() {
  this.startPos = this.boundStartPos + this.offset + this.size * this.nearBoundOverlapRate;
  if(this.isPopupFullCorrectionOn)
   this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
 },
 calculateNearBoundEnd: function() {
  this.startPos = this.boundEndPos + this.offset - this.size * this.nearBoundOverlapRate;
  if(this.isPopupFullCorrectionOn)
   this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
 },
 getAlignValueFromIndicator: function(alignIndicator) {
  var alignValue = AlignIndicatorTable[alignIndicator];
  if(alignValue === undefined)
   throw "Incorrect align indicator.";
  return alignValue;
 },
 getElementSize: function() {
  return this.getCustomElementSize(this.element, false);
 },
 getPopupElementSize: function() {
  return this.getCustomElementSize(this.popupElement, this.ignorePopupElementBorders);
 },
 getCustomElementSize: function(customElement, ignoreBorders) {
  if(ignoreBorders) {
   return this.isHorizontal ? ASPx.GetClearClientWidth(customElement) : ASPx.GetClearClientHeight(customElement);
  }
  return this.isHorizontal ? ASPx.GetElementOffsetWidth(customElement) : ASPx.GetElementOffsetHeight(customElement);
 },
 getWindowInnerSize: function() {
  return this.isHorizontal ? window.innerWidth : window.innerHeight;
 }
});
var positionCalculator = null;
function getPositionCalculator() {
 if(positionCalculator == null)
  positionCalculator = new PositionCalculator();
 return positionCalculator;
}
function initializeAlignIndicatorTable() {
 AlignIndicatorTable[PopupUtils.NotSetAlignIndicator] = PositionAlignConsts.NOT_SET;
 AlignIndicatorTable[PopupUtils.OutsideLeftAlignIndicator] = PositionAlignConsts.OUTSIDE_START;
 AlignIndicatorTable[PopupUtils.AboveAlignIndicator] = PositionAlignConsts.OUTSIDE_START;
 AlignIndicatorTable[PopupUtils.LeftAlignIndicator] = PositionAlignConsts.NEAR_BOUND_START;
 AlignIndicatorTable[PopupUtils.TopAlignIndicator] = PositionAlignConsts.NEAR_BOUND_START;
 AlignIndicatorTable[PopupUtils.LeftSidesAlignIndicator] = PositionAlignConsts.INNER_START;
 AlignIndicatorTable[PopupUtils.TopSidesAlignIndicator] = PositionAlignConsts.INNER_START;
 AlignIndicatorTable[PopupUtils.CenterAlignIndicator] = PositionAlignConsts.CENTER;
 AlignIndicatorTable[PopupUtils.MiddleAlignIndicator] = PositionAlignConsts.CENTER;
 AlignIndicatorTable[PopupUtils.RightSidesAlignIndicator] = PositionAlignConsts.INNER_END;
 AlignIndicatorTable[PopupUtils.BottomSidesAlignIndicator] = PositionAlignConsts.INNER_END;
 AlignIndicatorTable[PopupUtils.RightAlignIndicator] = PositionAlignConsts.NEAR_BOUND_END;
 AlignIndicatorTable[PopupUtils.BottomAlignIndicator] = PositionAlignConsts.NEAR_BOUND_END;
 AlignIndicatorTable[PopupUtils.OutsideRightAlignIndicator] = PositionAlignConsts.OUTSIDE_END;
 AlignIndicatorTable[PopupUtils.BelowAlignIndicator] = PositionAlignConsts.OUTSIDE_END;
 AlignIndicatorTable[PopupUtils.WindowCenterAlignIndicator] = PositionAlignConsts.WINDOW_CENTER;
 AlignIndicatorTable[PopupUtils.WindowLeftAlignIndicator] = PositionAlignConsts.WINDOW_START;
 AlignIndicatorTable[PopupUtils.WindowTopAlignIndicator] = PositionAlignConsts.WINDOW_START;
 AlignIndicatorTable[PopupUtils.WindowRightAlignIndicator] = PositionAlignConsts.WINDOW_END;
 AlignIndicatorTable[PopupUtils.WindowBottomAlignIndicator] = PositionAlignConsts.WINDOW_END;
}
initializeAlignIndicatorTable();
ASPx.PopupPosition = function(position, isInverted) {
 this.position = position;
 this.isInverted = isInverted;
};
ASPx.PopupSize = function(width, height) {
 this.width = width;
 this.height = height;
};
ASPx.PopupUtils = PopupUtils;
ASPx.PositionCalculator = PositionCalculator;
})();
(function(){
 var ScrollingManager = ASPx.CreateClass(null, {
  constructor: function(owner, options) {
   this.owner = owner;
   this.scrollableArea = options.scrollableArea;
   this.orientation = options.orientation;
   this.animationDelay = 1;
   this.animationStep = 2;
   this.animationOffset = 5;
   this.animationAcceleration = 0;
   this.scrollSessionInterval = 10;
   this.stopScrolling = true;
   this.busy = false;
   this.currentAcceleration = 0;
   this.startPos = 0;
   this.onBeforeScrolling = options.onBeforeScrolling;
   this.onAfterScrolling = options.onAfterScrolling;
   this.emulationMode = options.forseEmulation === true || !ASPx.Browser.TouchUI;
   this.useMarginForPosition = options.useMarginForPosition;
   this.handleMouseWheel = !!options.handleMouseWheel;
   this.Initialize();
  },
  Initialize: function(){
   this.setParentNodeOverflow();
   if(this.emulationMode) {
    this.wrapper = new ScrollingManager.scrollWrapper(this.scrollableArea, this.useMarginForPosition);
   } else {
    this.wrapper = new ScrollingManager.scrollWrapperTouchUI(this.scrollableArea, function(direction){
     if(this.onAfterScrolling)
      this.onAfterScrolling(this, direction);
    }.aspxBind(this)); 
   }
   if(this.handleMouseWheel)
    ASPx.Evt.AttachEventToElement(this.scrollableArea, ASPx.Evt.GetMouseWheelEventName(), this.onMouseWheel.aspxBind(this));
  },
  onMouseWheel: function(e) {
   ASPx.Evt.PreventEvent(e);
   var delta = ASPx.Evt.GetWheelDelta(e);
   if(ASPx.Browser.Firefox)
    delta = delta / 0.03;
   this.DoScrollSessionToOffset(-delta);
  },
  setParentNodeOverflow: function() {
   if(ASPx.Browser.MSTouchUI){
    this.scrollableArea.parentNode.style.overflow = "auto";
    this.scrollableArea.parentNode.style["-ms-overflow-style"] = "-ms-autohiding-scrollbar";
   } 
  },
  GetScrolledAreaPosition: function() {
   return this.wrapper.GetScrollLeft() * this.orientation[0]
    + this.wrapper.GetScrollTop() * this.orientation[1];
  },
  SetScrolledAreaPosition: function(pos) {
   this.wrapper.SetScrollLeft(pos * this.orientation[0]);
   this.wrapper.SetScrollTop(pos * this.orientation[1]);
  },
  PrepareForScrollAnimation: function() {
   if(!this.scrollableArea)
    return;  
   this.currentAcceleration = 0;
   this.startPos = this.GetScrolledAreaPosition();
   this.busy = false;
  },
  GetAnimationStep: function(dir) {
   var step = dir * (this.animationStep + this.currentAcceleration);
   var newPos = this.GetScrolledAreaPosition() + step;
   var requiredPos = this.startPos + dir * this.animationOffset;
   if((dir == 1 && newPos >= requiredPos) || (dir == -1 && newPos <= requiredPos)) {
    step = requiredPos - this.GetScrolledAreaPosition();
   } 
   return step;
  },
  DoScrollSessionToOffset: function(offset) {
   var newScrollPos = this.GetScrolledAreaPosition() - offset;
   this.stopScrolling = false;
   if(this.onBeforeScrolling)
    this.onBeforeScrolling(this, offset);
   if(this.stopScrolling) return;
   this.SetScrolledAreaPosition(newScrollPos);
   if(this.onAfterScrolling)
    this.onAfterScrolling(this, offset); 
  },
  DoScrollSessionAnimation: function(direction) {
   if(!this.scrollableArea)
    return;
   this.SetScrolledAreaPosition(this.GetScrolledAreaPosition() + this.GetAnimationStep(direction));
   var self = this;
   if(!this.ShouldStopScrollSessionAnimation()) {
    this.busy = true;
    this.currentAcceleration += this.animationAcceleration;
    window.setTimeout(function() { self.DoScrollSessionAnimation(direction); }, this.animationDelay);
   } else {
    this.busy = false;
    if(this.onAfterScrolling)
     this.onAfterScrolling(this, -direction);   
    this.currentAcceleration = 0;
    window.setTimeout(function() { self.DoScroll(direction); }, this.scrollSessionInterval);
   }
  },
  ShouldStopScrollSessionAnimation: function() {
   return (Math.abs(this.GetScrolledAreaPosition() - this.startPos) >= Math.abs(this.animationOffset));
  },
  DoScroll: function(direction) {
   if(!this.scrollableArea)
    return; 
   if(!this.busy && !this.stopScrolling) {
    if(this.onBeforeScrolling)
     this.onBeforeScrolling(this, -direction);
    if(this.stopScrolling) return;
    this.PrepareForScrollAnimation();
    this.DoScrollSessionAnimation(direction);
   } 
  },
  StartScrolling: function(direction, delay, step) {
   this.stopScrolling = false;
   this.animationDelay = delay;
   this.animationStep = step;
   this.DoScroll(-direction);
  },
  StopScrolling: function() {
   this.stopScrolling = true;
  },
  IsStopped: function() {
   return this.stopScrolling;
  },
  IsInProgress: function() {
   return this.busy;
  }
 });
 var MouseScrollingManager = ASPx.CreateClass(ScrollingManager, {
  constructor: function(owner, options) {
   this.mouseEventsElement = options.mouseEventsElement;
   this.preventOuterScroll = options.preventOuterScroll;
   this.enableMouseScrollInternal = true;
   this.constructor.prototype.constructor.call(this, owner, options);
  },
  Initialize: function() {
   ASPx.ScrollingManager.prototype.Initialize.call(this);
   this.initializeMouseScroll();
  },
  initializeMouseScroll: function() {
   this.mouseDown = false;
   this.vx = 0;
   this.prevX = 0;
   this.scrollTime = null;
   this.mouseScrollAcceleration = 0.7;
   this.mouseScrollTimeStep = 30;
   ASPx.Evt.AttachEventToElement(this.mouseEventsElement, ASPx.TouchUIHelper.touchMouseDownEventName, this.startMouseScroll.aspxBind(this));
  },
  scrollToOffset: function(mouseOffset) {
   var newOffset = this.GetScrolledAreaPosition() - mouseOffset;
   if(this.getValidNewScrollOffset)
    newOffset = this.getValidNewScrollOffset(newOffset);
   this.SetScrolledAreaPosition(newOffset);
  },
  preventTextSelectionAndOuterDivScrollOnScroll: function(e) {
   if(this.preventOuterScroll)
    ASPx.Evt.PreventEvent(e);
   ASPx.Selection.Clear();
  },
  mouseScroll: function(e) {
   if(!this.mouseDown) return;
   this.preventTextSelectionAndOuterDivScrollOnScroll(e);
   var x = ASPx.Evt.GetEventX(e),
    dx = this.prevX - x,
    dt = new Date() - this.scrollTime;
   if(dt < 1) dt = 1;
   this.vx = dx / dt;
   this.scrollToOffset(dx);
   this.prevX = x;
   this.scrollTime = new Date();
  },
  startMouseScroll: function(e) {
   if(!this.enableMouseScrollInternal) return;
   this.detachMouseEvents();
   this.mouseMoveHandler = this.mouseScroll.aspxBind(this);
   this.mouseUpHandler = this.stopMouseScroll.aspxBind(this);
   ASPx.Evt.AttachEventToElement(document, ASPx.TouchUIHelper.touchMouseMoveEventName, this.mouseMoveHandler);
   ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, this.mouseUpHandler);
   this.mouseDown = true;
   window.clearTimeout(this.inertialStopTimerId);
   this.prevX = ASPx.Evt.GetEventX(e);
   this.scrollTime = new Date();
  },
  detachMouseEvents: function() {
   ASPx.Evt.DetachEventFromElement(document, ASPx.TouchUIHelper.touchMouseMoveEventName, this.mouseMoveHandler);
   ASPx.Evt.DetachEventFromDocument(ASPx.TouchUIHelper.touchMouseUpEventName, this.mouseUpHandler);
  },
  stopMouseScroll: function() {
   this.detachMouseEvents();
   this.mouseDown = false;
   this.inertialStopTimerId = window.setTimeout(function() {
    this.vx *= this.mouseScrollAcceleration;
    if(Math.abs(this.vx) < 0.1) {
     this.vx = 0;
     if(this.onAfterScrolling)
      this.onAfterScrolling(this);
     return;
    }
    var dx = Math.ceil(this.vx * this.mouseScrollTimeStep);
    this.scrollToOffset(dx);
    this.stopMouseScroll();
   }.aspxBind(this), this.mouseScrollTimeStep);
  }
 });
 ScrollingManager.scrollWrapper = function(scrollableArea, useMarginForPosition) {
  this.scrollableArea = scrollableArea;
  this.useMarginForPosition = useMarginForPosition;
  this.Initialize();
 };
 ScrollingManager.scrollWrapper.prototype = {
  Initialize: function() {
   if(this.useMarginForPosition) {
    this.leftScrollProperty = "margin-left";
    this.topScrollProperty = "margin-top";
   } else {
    this.scrollableArea.style.position = "relative";
    this.scrollableArea.parentNode.style.position = "relative";
    this.leftScrollProperty = "left";
    this.topScrollProperty = "top";
   }
  },
  GetScrollLeft: function() { return ASPx.PxToFloat(this.scrollableArea.style[this.leftScrollProperty]); },
  GetScrollTop: function() { return ASPx.PxToFloat(this.scrollableArea.style[this.topScrollProperty]); },
  SetScrollLeft: function(value) {
   this.scrollableArea.style[this.leftScrollProperty] = value + "px";
  },
  SetScrollTop: function(value) {
   this.scrollableArea.style[this.topScrollProperty] = value + "px";
  }
 };
 ScrollingManager.scrollWrapperTouchUI = function(scrollableArea, onScroll){
  this.scrollableArea = scrollableArea;
  this.scrollTimerId = -1;
  this.onScroll = onScroll;
  this.Initialize(onScroll);
 };
 ScrollingManager.scrollWrapperTouchUI.prototype = {
  Initialize: function(){
   var div = this.scrollableArea.parentNode;
   var timeout = ASPx.Browser.MSTouchUI ? 500 : 1000;
   var nativeScrollSupported = ASPx.TouchUIHelper.nativeScrollingSupported();
   this.onScrollCore = function(){
     ASPx.Timer.ClearTimer(this.scrollTimerId);
     if(this.onScrollLocked) return;
     this.scrollTimerId = window.setTimeout(this.onScrollByTimer, timeout);
    }.aspxBind(this);
   this.onScrollByTimer = function(){
     if(this.onScrollLocked) return;
     var direction = this.lastScrollTop < div.scrollTop ? 1 : -1;
     this.lastScrollTop = div.scrollTop;
     this.onScrollLocked = true;
     this.onScroll(direction);
     this.onScrollLocked = false;
    }.aspxBind(this);
   this.lastScrollTop = div.scrollTop;
   var onscroll = nativeScrollSupported ? this.onScrollCore : this.onScrollByTimer;
   ASPx.Evt.AttachEventToElement(div, "scroll", onscroll);
   if(ASPx.Browser.WebKitTouchUI)
    this.scrollExtender = ASPx.TouchUIHelper.MakeScrollable(div, {showHorizontalScrollbar: false});
  },
  GetScrollLeft: function(){ return -this.scrollableArea.parentNode.scrollLeft; },
  GetScrollTop:  function(){ return -this.scrollableArea.parentNode.scrollTop; },
  SetScrollLeft: function(value){ 
   this.onScrollLocked = true;
   this.scrollableArea.parentNode.scrollLeft = -value; 
   this.onScrollLocked = false;
  },
  SetScrollTop:  function(value){ 
   this.onScrollLocked = true;
   this.scrollableArea.parentNode.scrollTop  = -value; 
   this.onScrollLocked = false;
  }
 };
 ASPx.ScrollingManager = ScrollingManager;
 ASPx.MouseScrollingManager = MouseScrollingManager;
})();
(function() {
var Constants = {
 MIIdSuffix: "_DXI",
 MMIdSuffix: "_DXM",
 SBIdSuffix: "_DXSB",
 SBUIdEnd: "_U",
 SBDIdEnd: "_D",
 ATSIdSuffix: "_ATS",
 SampleCssClassNameForImageElement: "SAMPLE_CSS_CLASS",
 ImagePostfix: "Img",
 PopupImagePostfix: "PImg"
};
var SLIDE_DURATION_VALUE = 300;
var SIDE_MENU_ZINDEX_VALUE = 10000;
var MENU_PREFIX_CLASS_NAME = 'dxm';
var SLIDE_PANEL_EXPANDED_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-expanded';
var BREAD_CRUMBS_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-bread-crumbs';
var OVERLAY_PANEL_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-overlay';
var BURGER_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-side-menu-button';
var BACK_ICON_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-back-icon';
var NO_MAIN_POP_OUT_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-no-main-popout';
var TEMPORARY_VISIBILITY_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-temp-visibility';
var SIDE_MENU_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-side-menu-mode';
var PRE_HOVERED_ELEMENT_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-pre-hovered';
var PRE_SELECTED_ELEMENT_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-pre-selected';
var MenuItemInfo = ASPx.CreateClass(null, {
 constructor: function(menu, indexPath) {
  var itemElement = menu.GetItemElement(indexPath);
  this.clientHeight = itemElement.clientHeight;
  this.clientWidth = itemElement.clientWidth;
  this.clientTop = ASPx.GetClientTop(itemElement);
  this.clientLeft = ASPx.GetClientLeft(itemElement);
  this.offsetHeight = itemElement.offsetHeight;
  this.offsetWidth = itemElement.offsetWidth;
  this.offsetTop = 0;
  this.offsetLeft = 0;
 }
});
var MenuCssClasses = {};
MenuCssClasses.Prefix = "dxm-";
MenuCssClasses.Menu = "dxmLite";
MenuCssClasses.BorderCorrector = "dxmBrdCor";
MenuCssClasses.Disabled = MenuCssClasses.Prefix + "disabled";
MenuCssClasses.MainMenu = MenuCssClasses.Prefix + "main";
MenuCssClasses.PopupMenu = MenuCssClasses.Prefix + "popup";
MenuCssClasses.ItemTemplate = MenuCssClasses.Prefix + "tmpl";
MenuCssClasses.HorizontalMenu = MenuCssClasses.Prefix + "horizontal";
MenuCssClasses.VerticalMenu = MenuCssClasses.Prefix + "vertical";
MenuCssClasses.NoWrapMenu = MenuCssClasses.Prefix + "noWrap";
MenuCssClasses.AutoWidthMenu = MenuCssClasses.Prefix + "autoWidth";
MenuCssClasses.CalculateMenu = MenuCssClasses.Prefix + "calc";
MenuCssClasses.DX = "dx";
MenuCssClasses.Separator = MenuCssClasses.Prefix + "separator";
MenuCssClasses.Spacing = MenuCssClasses.Prefix + "spacing";
MenuCssClasses.AlignSpacing = MenuCssClasses.Prefix + "alignSpacing";
MenuCssClasses.Gutter = MenuCssClasses.Prefix + "gutter";
MenuCssClasses.WithoutImages = MenuCssClasses.Prefix + "noImages";
MenuCssClasses.Item = MenuCssClasses.Prefix + "item";
MenuCssClasses.ItemHovered = MenuCssClasses.Prefix + "hovered";
MenuCssClasses.ItemSelected = MenuCssClasses.Prefix + "selected";
MenuCssClasses.ItemChecked = MenuCssClasses.Prefix + "checked";
MenuCssClasses.ItemWithoutImage = MenuCssClasses.Prefix + "noImage";
MenuCssClasses.ItemWithSubMenu = MenuCssClasses.Prefix + "subMenu";
MenuCssClasses.ItemDropDownMode = MenuCssClasses.Prefix + "dropDownMode";
MenuCssClasses.ItemWithoutSubMenu = MenuCssClasses.Prefix + "noSubMenu"; 
MenuCssClasses.AdaptiveMenuItem = MenuCssClasses.Prefix + "ami";
MenuCssClasses.AdaptiveMenuItemSpacing = MenuCssClasses.Prefix + "amis";
MenuCssClasses.AdaptiveMenu = MenuCssClasses.Prefix + "am";
MenuCssClasses.AdaptiveMenuHiddenElement = MenuCssClasses.Prefix + "amhe";
MenuCssClasses.ContentContainer = MenuCssClasses.Prefix + "content";
MenuCssClasses.Image = MenuCssClasses.Prefix + "image";
MenuCssClasses.PopOutContainer = MenuCssClasses.Prefix + "popOut";
MenuCssClasses.PopOutImage = MenuCssClasses.Prefix + "pImage";
MenuCssClasses.ImageLeft = MenuCssClasses.Prefix + "image-l";
MenuCssClasses.ImageRight = MenuCssClasses.Prefix + "image-r";
MenuCssClasses.ImageTop = MenuCssClasses.Prefix + "image-t";
MenuCssClasses.ImageBottom = MenuCssClasses.Prefix + "image-b";
MenuCssClasses.ScrollArea = MenuCssClasses.Prefix + "scrollArea";
MenuCssClasses.ScrollUpButton = MenuCssClasses.Prefix + "scrollUpBtn";
MenuCssClasses.ScrollDownButton = MenuCssClasses.Prefix + "scrollDownBtn";
MenuCssClasses.ItemClearElement = MenuCssClasses.DX + "-clear";
MenuCssClasses.ItemTextElement = MenuCssClasses.DX + "-vam";
MenuCssClasses.SmallImage = MenuCssClasses.DX + "-small-image";
var MenuRenderHelper = ASPx.CreateClass(null, {
 constructor: function(menu) {
  this.menu = menu;
  this.itemLinkMode = "ContentBounds";
  this.elementsToHide = [];
 },
 InlineInitializeElements: function() {
  if(!this.menu.isPopupMenu)
   this.InlineInitializeMainMenuElements(this.menu.GetMainElement());
  else
   this.InlineInitializePopupMenuElements(this.menu.GetMainElement());
  var popupMenuElements = this.GetPopupMenuElements(this.menu.GetMainElement());
  for(var i = 0; i < popupMenuElements.length; i++) {
   if(popupMenuElements[i] == this.menu.GetMainElement()) continue;
   this.InlineInitializePopupMenuElements(popupMenuElements[i]);
  }
 },
 InlineInitializeScrollElements: function(indexPath, menuElement) {
  var scrollArea = ASPx.GetNodeByClassName(menuElement, MenuCssClasses.ScrollArea);
  if(scrollArea) scrollArea.id = this.menu.GetScrollAreaId(indexPath);
  this.InitializeScrollButton(menuElement, MenuCssClasses.ScrollUpButton, this.menu.GetScrollUpButtonId(indexPath));
  this.InitializeScrollButton(menuElement, MenuCssClasses.ScrollDownButton, this.menu.GetScrollDownButtonId(indexPath));
 },
 InitializeScrollButton: function(menuElement, buttonClassName, id) {
  var scrollButton = ASPx.GetNodeByClassName(menuElement, buttonClassName);
  if(!scrollButton) return;
  scrollButton.id = id;
  if(this.menu.NeedCreateItemsOnClientSide()) {
   ASPx.GetStateController().AddHoverItem(id, ["dxm-scrollBtnHovered"], [""]);
   ASPx.GetStateController().AddPressedItem(id, ["dxm-scrollBtnPressed"], [""]);
  }
 },
 InlineInitializeMainMenuElements: function(menuElement) {
  this.menu.CheckElementsCache(menuElement);
  var contentElement = this.GetContentElement(menuElement);
  if(contentElement.className.indexOf("dxm-ti") > 1)
   this.itemLinkMode = "TextAndImage";
  else if(contentElement.className.indexOf("dxm-t") > -1)
   this.itemLinkMode = "TextOnly";
  var itemElements = this.GetItemElements(menuElement);
  for(var i = 0; i < itemElements.length; i++)
   this.InlineInitializeItemElement(itemElements[i], "", i);
  this.InlineInitializeScrollElements("", menuElement);
 },
 InlineInitializePopupMenuElements: function(parentElement) {
  parentElement.style.position = "absolute";
  var indexPath = this.GetSubMenuIndexPathByMenuParentElement(parentElement);
  var borderCorrectorElement = ASPx.GetNodeByClassName(parentElement, MenuCssClasses.BorderCorrector);
  if(borderCorrectorElement != null) {
   borderCorrectorElement.id = this.menu.GetMenuBorderCorrectorElementId(indexPath);
   borderCorrectorElement.style.position = "absolute";
   parentElement.removeChild(borderCorrectorElement);
   parentElement.parentNode.appendChild(borderCorrectorElement);
  }
  this.InlineInitializePopupMenuMenuElement(parentElement, indexPath);
 },
 GetSubMenuIndexPathByMenuParentElement: function(element){
  return this.menu.GetMenuIndexPathById(element.id);
 },
 InlineInitializePopupMenuMenuElement: function(parentElement, indexPath) {
  var menuElement = ASPx.GetNodeByClassName(parentElement, MenuCssClasses.PopupMenu);
  menuElement.id = this.menu.GetMenuMainElementId(indexPath);
  this.InlineInitializePopupMenuContentElements(parentElement, menuElement, indexPath);
 },
 InlineInitializePopupMenuContentElements: function(parentElement, menuElement, indexPath) {
  this.menu.CheckElementsCache(menuElement);
  var contentElement = this.GetContentElement(menuElement);
  if(contentElement != null) {
   var itemElements = this.GetItemElements(menuElement);
   var parentIndexPath = parentElement == this.menu.GetMainElement() ? "" : indexPath;
   for(var i = 0; i < itemElements.length; i++) {
    var itemElementId = itemElements[i].id;
    if(itemElementId && aspxGetMenuCollection().GetMenu(itemElementId) != this.menu)
     continue;
    this.InlineInitializeItemElement(itemElements[i], parentIndexPath, i);
   }
  }
  this.InlineInitializeScrollElements(indexPath, menuElement);
 },
 HasSubMenuTemplate: function(menuElement) {
  var contentElement = this.GetContentElement(menuElement);
  return contentElement && (contentElement.tagName != "UL" || !ASPx.GetNodesByPartialClassName(contentElement, MenuCssClasses.ContentContainer).length);
 },
 InlineInitializeItemElement: function(itemElement, parentIndexPath, visibleIndex) {
  function getItemIndex(visibleIndex) {
   var itemData = parentItemData[Math.max(visibleIndex, 0)];
   return itemData.constructor == Array
    ? itemData[0]
    : itemData;
  }
  var parentItemData = this.menu.renderData[parentIndexPath],
   prepareItemOnClick = parentItemData[visibleIndex].constructor == Array,
   indexPathPrefix = parentIndexPath + (parentIndexPath != "" ? ASPx.ItemIndexSeparator : ""),
   indexPath = indexPathPrefix + getItemIndex(visibleIndex);
  itemElement.id = this.menu.GetItemElementId(indexPath);
  if(this.canAssignAccessibilityEventsToChildrenLinks())
   ASPx.AssignAccessibilityEventsToChildrenLinks(itemElement, true);
  if(this.canContainSeparators()) {
   var separatorElement = itemElement.previousSibling;
   if(separatorElement && separatorElement.className) {
    if(ASPx.ElementContainsCssClass(separatorElement, MenuCssClasses.Spacing))
     separatorElement.id = this.menu.GetItemIndentElementId(indexPath);
    else if(ASPx.ElementContainsCssClass(separatorElement, MenuCssClasses.Separator))
     separatorElement.id = this.menu.GetItemSeparatorElementId(indexPath);
   }
  }
  var contentElement = this.GetItemContentElement(itemElement);
  if(contentElement != null) {
   contentElement.id = this.menu.GetItemContentElementId(indexPath);
   if (this.canContainImageElement()) {
    var imageElement = ASPx.GetNodeByClassName(contentElement, MenuCssClasses.Image);
    if(imageElement == null) {
     var hyperLinkElement = ASPx.GetNodeByClassName(contentElement, MenuCssClasses.DX);
     if(hyperLinkElement != null)
      imageElement = ASPx.GetNodeByClassName(hyperLinkElement, MenuCssClasses.Image);
    }
    if(imageElement != null)
     imageElement.id = this.menu.GetItemImageId(indexPath);
   }
  }
  else
   prepareItemOnClick = false;
  this.InlineInitializeItemPopOutElement(itemElement, indexPath);
  if(prepareItemOnClick)
   this.InlineInitializeItemOnClick(itemElement, indexPath);
  if(ASPx.ElementContainsCssClass(itemElement, MenuCssClasses.ItemSelected)) 
   this.menu.serverSideSelectedItemPath = indexPath;
 },
 canAssignAccessibilityEventsToChildrenLinks: function () { return true; },
 canContainSeparators: function () { return true; },
 canContainImageElement: function () { return true; },
 InlineInitializeItemPopOutElement: function(itemElement, indexPath) {
  var popOutElement = this.GetItemPopOutElement(itemElement);
  if(popOutElement != null) {
   popOutElement.id = this.menu.GetItemPopOutElementId(indexPath);
   var popOutImageElement = ASPx.GetNodeByClassName(popOutElement, MenuCssClasses.PopOutImage);
   if(popOutImageElement != null)
    popOutImageElement.id = this.menu.GetItemPopOutImageId(indexPath);
  }
 },
 InlineInitializeItemOnClick: function(itemElement, indexPath) {
  var name = this.menu.name;
  var onclick = this.GetItemOnClick(name, itemElement, indexPath);
  if(this.menu.IsDropDownItem(indexPath)) {
   var contentElement = this.menu.GetItemContentElement(indexPath);
   var dropDownElement = this.menu.GetItemPopOutElement(indexPath);
   var dropDownOnclick = this.GetItemDropdownOnClick(name, itemElement, indexPath);
   this.AssignItemOnClickToElement(contentElement, this.itemLinkMode, onclick);
   this.AssignItemOnClickToElement(dropDownElement, this.itemLinkMode, dropDownOnclick);
  }
  else
   this.AssignItemOnClickToElement(itemElement, this.itemLinkMode, onclick);
 },
 AssignItemOnClickToElement: function(element, itemLinkMode, method) {
  switch(itemLinkMode){
   case "ContentBounds":
    this.AssignItemOnClickToElementCore(element, method);
    break;
   case "TextOnly":
    var textElement = ASPx.GetNodeByTagName(element, "A");
    if(!textElement)
     textElement = ASPx.GetNodeByTagName(element, "SPAN");
    if(textElement)
     this.AssignItemOnClickToElementCore(textElement, method);
    break;
   case "TextAndImage":
    var linkElement = ASPx.GetNodeByTagName(element, "A");
    if(linkElement)
     this.AssignItemOnClickToElementCore(linkElement, method);
    else{
     var textElement = ASPx.GetNodeByTagName(element, "SPAN");
     if(textElement)
      this.AssignItemOnClickToElementCore(textElement, method);
     var imageElement = ASPx.GetNodeByTagName(element, "IMG");
     if(imageElement)
      this.AssignItemOnClickToElementCore(imageElement, method);
    }
    break;
  }
 },
 AssignItemOnClickToElementCore: function(element, method) {
  ASPx.Evt.AttachEventToElement(element, "click", method);
 },
 GetItemOnClick: function(name, itemElement, indexPath) { 
  var menu = this.menu;
  var sendPostBackHandler = function() {
   menu.SendPostBack("CLICK:" + indexPath);
  };
  var itemClickHandler = function(e) {
   ASPx.MIClick(e, name, indexPath);
  };
  var itemLink = this.GetItemLinkElement(itemElement);
  var handler = menu.autoPostBack && !menu.IsClientSideEventsAssigned() && (!itemLink || itemLink.href === "")
   ? sendPostBackHandler
   : itemClickHandler;
  return function(e) {
   if(!itemElement.clientDisabled)
    handler(e);
  };
 },
 GetItemDropdownOnClick: function(name, itemElement, indexPath) {
  return function(e) {
   if(!itemElement.clientDisabled)
    ASPx.MIDDClick(e, name, indexPath);
  };
 },
 ChangeItemEnabledAttributes: function(itemElement, enabled, accessibilityCompliant) {
  if(!itemElement) return;
  itemElement.clientDisabled = !enabled;
  ASPx.Attr.ChangeStyleAttributesMethod(enabled)(itemElement, "cursor");
  var hyperLink = this.GetItemLinkElement(itemElement);
  if(hyperLink)
   this.ChangeItemLinkEnabledAttributes(hyperLink, itemElement, enabled, accessibilityCompliant);
 },
 ChangeItemLinkEnabledAttributes: function(hyperLink, itemElement, enabled, accessibilityCompliant) {
  if(accessibilityCompliant) {
   var action = enabled ? ASPx.Attr.RemoveAttribute : ASPx.Attr.SetAttribute;
   action(hyperLink, "aria-disabled", "true");
  }
  ASPx.Attr.ChangeAttributesMethod(enabled)(hyperLink, "href");
  if(accessibilityCompliant && !enabled && itemElement.enabled)
   hyperLink.href = ASPx.AccessibilityEmptyUrl;
 },
 GetPopupMenuElements: function(menuElement) {
  return ASPx.GetChildNodesByTagName(menuElement.parentNode, "DIV");
 },
 GetContentElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "contentElement", 
   function() {
    var contentElement = ASPx.GetNodeByTagName(menuElement, "DIV", 0);
    if(contentElement && contentElement.className == MenuCssClasses.DX && contentElement.parentNode == menuElement) 
     return contentElement;
    contentElement = ASPx.GetNodeByTagName(menuElement, "UL", 0);
    if(contentElement)
     return contentElement;
    return ASPx.GetNodeByTagName(menuElement, "TABLE", 0); 
   }, menuElement);
 },
 GetItemElements: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElements(this, "itemElements", 
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodesByClassName(contentElement, MenuCssClasses.Item) : null;
   }, menuElement);
 },
 GetSpacingElements: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElements(this, "spacingElements", 
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodesByClassName(contentElement, MenuCssClasses.Spacing) : null;
   }, menuElement);
 },
 GetAlignSpacingElements: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElements(this, "alignSpacingElements",
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodesByClassName(contentElement, MenuCssClasses.AlignSpacing) : null;
   }, menuElement);
 },
 GetSeparatorElements: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElements(this, "separatorElements", 
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodesByClassName(contentElement, MenuCssClasses.Separator) : null;
   }, menuElement);
 },
 GetItemContentElement: function(itemElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "contentElement", 
   function() {
    return ASPx.GetNodeByClassName(itemElement, MenuCssClasses.ContentContainer);
   }, itemElement);
 },
 GetItemPopOutElement: function(itemElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "popOutElement", 
   function() {
    return ASPx.GetNodeByClassName(itemElement, MenuCssClasses.PopOutContainer);
   }, itemElement);
 },
 GetAdaptiveMenuItemElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "adaptiveMenuItemElement", 
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodeByClassName(contentElement, this.menu.getAdaptiveMenuItemCssClass()) : null;
   }, menuElement);
 },
 GetAdaptiveMenuItemSpacingElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "adaptiveMenuItemSpacingElement", 
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodeByClassName(contentElement, this.menu.getAdaptiveMenuItemSpacingCssClass()) : null;
   }, menuElement);
 },
 GetAdaptiveMenuElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "adaptiveMenuElement", 
   function() {
    var adaptiveItemElement = this.GetAdaptiveMenuItemElement(menuElement);
    if(adaptiveItemElement){
     var adaptiveItemIndexPath = this.menu.GetIndexPathById(adaptiveItemElement.id);
     var adaptiveMenuParentElement = this.menu.GetMenuElement(adaptiveItemIndexPath);
     if(adaptiveMenuParentElement) 
      return this.menu.GetMenuMainElement(adaptiveMenuParentElement);
    }
    return null;
   }, menuElement);
 },
 GetAdaptiveMenuContentElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "adaptiveMenuContentElement", 
   function() {
    var adaptiveMenuElement = this.GetAdaptiveMenuElement(menuElement);
    return adaptiveMenuElement ? this.GetContentElement(adaptiveMenuElement) : null;
   }, menuElement);
 },
 GetItemLinkElement: function(itemElement) {
  return ASPx.GetNodeByTagName(itemElement, "A", 0);
 },
 CalculateMenuControl: function(menuElement, recalculate) {
  if(menuElement.offsetWidth === 0) return;
  this.PrecalculateMenuPopOuts(menuElement);
  var isVertical = this.menu.IsVertical("");
  var isAutoWidth = ASPx.ElementContainsCssClass(menuElement, MenuCssClasses.AutoWidthMenu);
  var isNoWrap = ASPx.ElementContainsCssClass(menuElement, MenuCssClasses.NoWrapMenu);
  var contentElement = this.GetContentElement(menuElement);
  if(this.menu.enableAdaptivity) 
   this.CalculateAdaptiveMainMenu(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, recalculate);
  else
   this.CalculateMainMenu(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, recalculate);
 },
 CalculateMainMenu: function(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, recalculate) {
  var itemElements = this.GetItemElements(menuElement);
  this.PrecalculateMenuItems(menuElement, itemElements, recalculate);
  this.CalculateMenuItemsAutoWidth(menuElement, itemElements, isVertical, isAutoWidth);
  this.CalculateMinSize(menuElement, contentElement, itemElements, isVertical, isAutoWidth, isNoWrap, recalculate);
  this.CalculateMenuItems(menuElement, contentElement, itemElements, isVertical, recalculate);
  this.CalculateSeparatorsAndSpacers(menuElement, itemElements, contentElement, isVertical);
 },
 PrecalculateMenuPopOuts: function(menuElement) {
  if(menuElement.popOutsPreCalculated) return;
  var elements = this.GetItemElements(menuElement);
  for(var i = 0; i < elements.length; i++) {
   var popOutElement = this.GetItemPopOutElement(elements[i]);
   if (popOutElement)
    popOutElement.style.display = "block";
  }
  menuElement.popOutsPreCalculated = true;
 },
 PrecalculateMenuItems: function(menuElement, itemElements, recalculate) {
  if(!recalculate) return;
  for(var i = 0; i < itemElements.length; i++) {
   var itemContentElement = this.GetItemContentElement(itemElements[i]);
   if(!itemContentElement || itemContentElement.offsetWidth === 0) continue;
   ASPx.SetElementFloat(itemContentElement, "");
   ASPx.Attr.RestoreStyleAttribute(itemContentElement, "padding-left");
   ASPx.Attr.RestoreStyleAttribute(itemContentElement, "padding-right");
     this.ReCalculateMenuItemContent(itemElements[i], itemContentElement);
  }
 },
 ReCalculateMenuItemContent: function(itemElement, itemContentElement) {
  for(var j = 0; j < itemElement.childNodes.length; j++) {
   var child = itemElement.childNodes[j];
   if(!child.offsetWidth) continue;
   if(child !== itemContentElement) {
    if(ASPx.Browser.IE && ASPx.Browser.Version == 8)
     ASPx.Attr.RestoreStyleAttribute(child, "margin");
    else{
     ASPx.Attr.RestoreStyleAttribute(child, "margin-top");
     ASPx.Attr.RestoreStyleAttribute(child, "margin-bottom");
    }
   }
  }
 },
 CalculateMenuItemsAutoWidth: function(menuElement, itemElements, isVertical, isAutoWidth) {
  if(!isAutoWidth) return;
  for(var i = 0; i < itemElements.length; i++) 
   ASPx.Attr.RestoreStyleAttribute(itemElements[i], "width");
  if(!isVertical) {
   var autoWidthItemCount = 0;
   var adaptiveItemCssClass = this.menu.getAdaptiveMenuItemCssClass();
   for(var i = 0; i < itemElements.length; i++) {
    if(ASPx.GetElementDisplay(itemElements[i]) && !ASPx.ElementHasCssClass(itemElements[i], adaptiveItemCssClass))
     autoWidthItemCount++;
   }
   for(var i = 0; i < itemElements.length; i++) {
    if(autoWidthItemCount > 0 && !ASPx.ElementHasCssClass(itemElements[i], adaptiveItemCssClass) && (itemElements[i].style.width === "" || itemElements[i].autoWidth)) {
     ASPx.Attr.ChangeStyleAttribute(itemElements[i], "width", (100 / autoWidthItemCount) + "%");
     itemElements[i].autoWidth = true;
    }
   }
  }
 },
 CalculateMenuItems: function(menuElement, contentElement, itemElements, isVertical, recalculate) {
  if(contentElement.itemsCalculated && recalculate)
   contentElement.itemsCalculated = false;
  if(menuElement.offsetWidth === 0) return;
  if(contentElement.style.margin === "0px auto")
   ASPx.SetStyles(contentElement, { float: "none" }); 
  var menuWidth = ASPx.GetCurrentStyle(menuElement).width;
  var menuRequireItemCorrection = isVertical && menuWidth;
  this.ApplyItemsVerticalAlignment(menuElement, itemElements);
  for(var i = 0; i < itemElements.length; i++) {
   if(!itemElements[i].style.width && !menuRequireItemCorrection) continue;
   if(ASPx.IsPercentageSize(itemElements[i].style.width) && contentElement.style.width === "")
    contentElement.style.width = "100%"; 
   var itemContentElement = this.GetItemContentElement(itemElements[i]);
   if(!itemContentElement || itemContentElement.offsetWidth === 0) continue;
   if(!contentElement.itemsCalculated) {
    ASPx.Attr.RestoreStyleAttribute(itemContentElement, "padding-left");
    ASPx.Attr.RestoreStyleAttribute(itemContentElement, "padding-right");
    ASPx.SetElementFloat(itemContentElement, "none");
    var itemContentCurrentStyle = ASPx.GetCurrentStyle(itemContentElement);
    if(!isVertical || (itemContentCurrentStyle.textAlign != "center" && menuWidth)) {
     var originalPaddingLeft = parseInt(itemContentCurrentStyle.paddingLeft);
     var originalPaddingRight = parseInt(itemContentCurrentStyle.paddingRight);
     var leftChildrenWidth = 0, rightChildrenWidth = 0;
     for(var j = 0; j < itemElements[i].childNodes.length; j++) {
      var child = itemElements[i].childNodes[j];
      if(!child.offsetWidth) continue;
      if(child !== itemContentElement) {
       if(ASPx.GetElementFloat(child) === "right")
        rightChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
       else if(ASPx.GetElementFloat(child) === "left")
        leftChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
      }
     }
     if(leftChildrenWidth > 0 || rightChildrenWidth > 0){
      ASPx.Attr.ChangeStyleAttribute(itemContentElement, "padding-left", (leftChildrenWidth + originalPaddingLeft) + "px");
      ASPx.Attr.ChangeStyleAttribute(itemContentElement, "padding-right", (rightChildrenWidth + originalPaddingRight) + "px");
     }
    }
   }
   ASPx.AdjustWrappedTextInContainer(itemContentElement);
   this.CalculateMenuItemContent(itemElements[i], itemContentElement);
  }
  contentElement.itemsCalculated = true;
 },
 ApplyItemsVerticalAlignment: function(menuElement, itemElements) {
  var menuAlignmentInProgressClassName = "miva";
  ASPx.AddClassNameToElement(menuElement, menuAlignmentInProgressClassName);
  if(!ASPx.IsExists(itemElements))
   itemElements = this.GetItemElements(menuElement);
  for(var i = 0; i < itemElements.length; i++) {
   var itemContentElement = this.GetItemContentElement(itemElements[i]);
   if(itemContentElement && itemContentElement.offsetWidth !== 0 && itemContentElement.style.verticalAlign)
    this.CalculateItemContentLineHeight(itemElements[i], itemContentElement);
  }
  ASPx.RemoveClassNameFromElement(menuElement, menuAlignmentInProgressClassName);
 },
 CalculateItemContentLineHeight: function(itemElement, itemContentElement) {
  var lineHeight = 0;
  var maxHeight = itemElement.getBoundingClientRect().height - this.GetBordersAndPaddingSummaryHeight(itemElement);
  if(itemContentElement && itemContentElement.offsetHeight != maxHeight)
   lineHeight = maxHeight - this.GetBordersAndPaddingSummaryHeight(itemContentElement);
  if(lineHeight > 0) {
   var link = this.GetItemLinkElement(itemElement);
   if(link)
    ASPx.SetStyles(link, { lineHeight: lineHeight }, false);
   else
    ASPx.SetStyles(itemContentElement, { lineHeight: lineHeight }, false);
  }
 },
 GetBordersAndPaddingSummaryHeight: function(element) {
  var elementStyle = getComputedStyle(element);
  return ASPx.GetVerticalBordersWidth(element, elementStyle) + ASPx.PxToFloat(elementStyle.paddingTop) + ASPx.PxToFloat(elementStyle.paddingBottom);
 },
 CalculateMenuItemContent: function(itemElement, itemContentElement) {
  var itemContentFound = false;
  for(var j = 0; j < itemElement.childNodes.length; j++) {
   var child = itemElement.childNodes[j];
   if(!child.offsetWidth) continue;
   var contentHeight = itemContentElement.offsetHeight;
   if(child !== itemContentElement) {
    if(itemContentFound){
     if(ASPx.Browser.IE && ASPx.Browser.Version == 8)
      ASPx.Attr.ChangeStyleAttribute(child, "margin", "-" + contentHeight + "px 0 0");
     else
      ASPx.Attr.ChangeStyleAttribute(child, "margin-top", "-" + contentHeight + "px");
    }
    else{
     if(ASPx.Browser.IE && ASPx.Browser.Version == 8)
      ASPx.Attr.ChangeStyleAttribute(child, "margin", "0 0 -" + contentHeight + "px");
     else
      ASPx.Attr.ChangeStyleAttribute(child, "margin-bottom", "-" + contentHeight + "px");
    }
   }
   else
    itemContentFound = true;
  }
 },
 CalculateSubMenu: function(parentElement, recalculate) {
  var menuElement = this.menu.GetMenuMainElement(parentElement);
  var contentElement = this.GetContentElement(menuElement);
  if(!parentElement.isSubMenuCalculated || recalculate) {
   menuElement.style.width = "";
   menuElement.style.display = "table";
   menuElement.style.borderSpacing = "0px";
   parentElement.isSubMenuCalculated = true;
   if(contentElement.tagName === "UL") {
    if(contentElement.offsetWidth > 0) {
     if(ASPx.Browser.IE && ASPx.ElementHasCssClass(menuElement, this.menu.getAdaptiveMenuCssClass()))
      menuElement.style.width = "0px";
     menuElement.style.width = contentElement.offsetWidth + "px";
     menuElement.style.display = "";
     if(ASPx.IsPercentageSize(contentElement.style.width))
      contentElement.style.width = menuElement.style.width;
    }
    else
     parentElement.isSubMenuCalculated = false;
   }
  }
  this.CalculateSubMenuItems(menuElement, contentElement, recalculate);
 },
 CalculateSubMenuItems: function(menuElement, contentElement, recalculate) {
  var itemElements = this.GetItemElements(menuElement);
  this.PrecalculateMenuItems(menuElement, itemElements, recalculate);
  this.CalculateMenuItems(menuElement, contentElement, itemElements, true, recalculate);
 },
 ResetMinSize: function() {
  var menuElement = this.menu.GetMainElement();
  if(!menuElement.isMinSizeCalculated || this.menu.isVertical) return;
  var itemElements = this.GetItemElements(menuElement);
  var contentElement = this.GetContentElement(menuElement);
  if(!!contentElement.adaptiveInfo)
   itemElements = itemElements.concat(contentElement.adaptiveInfo.elements);
  for(var i = 0; i < itemElements.length; i++)
   this.ResetItemMinSize(itemElements[i]);
  menuElement.isMinSizeCalculated = false;
 },
 ResetItemMinSize: function(itemElement) {
  itemElement.style.minWidth = "";
  itemElement.isMinSizeCalculated = false;
 },
 CalculateMinSize: function(menuElement, contentElement, itemElements, isVertical, isAutoWidth, isNoWrap, recalculate) {
  if(menuElement.isMinSizeCalculated && !recalculate) return;
  if(isVertical) {
   menuElement.style.minWidth = "";
   if(!this.menu.IsSidePanelExpanded()) {
    ASPx.Attr.ChangeStyleAttribute(contentElement, "width", "1px");
    for(var i = 0; i < itemElements.length; i++) {
     var itemContentElement = this.GetItemContentElement(itemElements[i]);
     if(!itemContentElement || itemElements[i].offsetWidth === 0) continue;
     this.CalculateItemMinSize(itemElements[i], recalculate);
    }
    ASPx.Attr.RestoreStyleAttribute(contentElement, "width");
   }
  }
  else {
   ASPx.RemoveClassNameFromElement(menuElement, MenuCssClasses.NoWrapMenu);
   ASPx.RemoveClassNameFromElement(menuElement, MenuCssClasses.AutoWidthMenu);
   if(isAutoWidth || isNoWrap)
    menuElement.style.minWidth = "";
   ASPx.Attr.ChangeStyleAttribute(menuElement, "width", "1px");
   for(var i = 0; i < itemElements.length; i++) {
    var itemContentElement = this.GetItemContentElement(itemElements[i]);
    if((!itemContentElement || itemElements[i].offsetWidth === 0) && !ASPx.ElementHasCssClass(itemElements[i], MenuCssClasses.ItemTemplate)) continue;
    var textContainer = ASPx.GetNodeByTagName(itemContentElement, "SPAN", 0);
    if(textContainer && ASPx.GetCurrentStyle(textContainer).whiteSpace !== "nowrap")
     ASPx.AdjustWrappedTextInContainer(itemContentElement);
    this.CalculateItemMinSize(itemElements[i], recalculate);
   }
   if(isAutoWidth)
    ASPx.AddClassNameToElement(menuElement, MenuCssClasses.AutoWidthMenu);
   if(isNoWrap)
    ASPx.AddClassNameToElement(menuElement, MenuCssClasses.NoWrapMenu);
   if(isAutoWidth || isNoWrap)
    menuElement.style.minWidth = (contentElement.offsetWidth + ASPx.GetLeftRightBordersAndPaddingsSummaryValue(menuElement)) + "px";
   ASPx.Attr.RestoreStyleAttribute(menuElement, "width");
  }
  menuElement.isMinSizeCalculated = true;
 },
 CalculateItemMinSize: function(itemElement, recalculate) {
  if(itemElement.isMinSizeCalculated && !recalculate) return;
  var sizeCorrection = ASPx.Browser.HardwareAcceleration ? 1 : 0;
  itemElement.style.minWidth = "";
  var childrenWidth = 0;
  if(ASPx.ElementHasCssClass(itemElement, MenuCssClasses.ItemTemplate)) {
   ASPx.Attr.ChangeStyleAttribute(itemElement, "display", "table");
   childrenWidth += itemElement.clientWidth + sizeCorrection;
   ASPx.Attr.RestoreStyleAttribute(itemElement, "display");
   if(ASPx.Browser.Edge && ASPx.Browser.MajorVersion >= 16)
    var dummy = itemElement.clientWidth;
  } 
  else {
   for(var j = 0; j < itemElement.childNodes.length; j++) {
    var child = itemElement.childNodes[j];
    if(!child.offsetWidth) continue;
    var float = ASPx.GetElementFloat(child);
    if(float === "none") {
     childrenWidth = child.offsetWidth;
     break;
    }
    else
     childrenWidth += child.offsetWidth + sizeCorrection;
   }
  }
  itemElement.style.minWidth = childrenWidth + "px";
  itemElement.isMinSizeCalculated = true;
 },
 CalculateSeparatorsAndSpacers: function(menuElement, itemElements, contentElement, isVertical, isAutoWidth, isNoWrap) {
  var spacerElements = this.GetSpacingElements(menuElement);
  var spacerAndSeparatorElements = spacerElements.concat(this.GetSeparatorElements(menuElement));
  for(var i = 0; i < spacerAndSeparatorElements.length; i++)
   ASPx.Attr.RestoreStyleAttribute(spacerAndSeparatorElements[i], "height");
  if(!isVertical && itemElements) {
   var menuHeight = 0;
   if(!isAutoWidth && !isNoWrap) {
    for(var i=0; i < itemElements.length; i++) {
     var newHeight = itemElements[i].getBoundingClientRect().height;
     if(newHeight > menuHeight)
      menuHeight = newHeight;
    }
   }
   for(var i = 0; i < spacerAndSeparatorElements.length; i++){
    var separatorHeight = menuHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(spacerAndSeparatorElements[i]) - ASPx.GetTopBottomMargins(spacerAndSeparatorElements[i]);
    ASPx.Attr.ChangeStyleAttribute(spacerAndSeparatorElements[i], "height", separatorHeight + "px");
   }
   for(var i = 0; i < spacerElements.length; i++){
    if(!ASPx.ElementContainsCssClass(spacerElements[i], this.menu.getAdaptiveMenuItemSpacingCssClass()))
     spacerElements[i].style.minWidth = spacerElements[i].style.width; 
   }
   this.calculateAlignSpacings(menuElement, contentElement);
  }
 },
 calculateAlignSpacings: function(menuElement, contentElement) {
  var separatorElements = this.GetAlignSpacingElements(menuElement),
   separatorsCount = separatorElements.length;
  if(separatorsCount === 0) return;
  ASPx.Data.ForEach(separatorElements, function(separator) {
   separator.style.width = "0";
  });
  var unit = this.menu.enableAdaptivity ? "%" : "px";
  var width = this.menu.enableAdaptivity ? 100 / separatorsCount :
   (ASPx.GetClearClientWidth(menuElement) - contentElement.offsetWidth) / separatorsCount;
  ASPx.Data.ForEach(separatorElements, function(separator) {
   separator.style.width = width + unit;
  });
  if(!this.menu.enableAdaptivity)
   separatorElements[0].style.width = (width - 1) + unit;
 },
 CalculateAdaptiveMainMenu: function(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, recalculate) {
  var adaptiveItemElement = this.GetAdaptiveMenuItemElement(menuElement);
  if(!adaptiveItemElement) return;
  var adaptiveItemSpacing = this.GetAdaptiveMenuItemSpacingElement(menuElement);
  if(adaptiveItemSpacing) adaptiveItemSpacing.style.width = "";
  var adaptiveMenuElement = this.GetAdaptiveMenuElement(menuElement);
  if(!adaptiveMenuElement) return;
  var adaptiveMenuContentElement = this.GetAdaptiveMenuContentElement(menuElement);
  if(!contentElement.adaptiveInfo)
   this.InitAdaptiveInfo(contentElement);
  var wasAdaptivity = contentElement.adaptiveInfo.hasAdaptivity;
  if(wasAdaptivity) {
   var previousSibling = this.GetAdaptiveItemElementPreviousSibling(adaptiveItemSpacing || adaptiveItemElement);
   this.RestoreAdaptiveItems(previousSibling, contentElement, isVertical);
  }
  if(!isVertical) {
   ASPx.SetElementDisplay(adaptiveItemElement, true);
   if(adaptiveItemSpacing) ASPx.SetElementDisplay(adaptiveItemSpacing, true);
   ASPx.AddClassNameToElement(menuElement, MenuCssClasses.CalculateMenu);
   ASPx.RemoveClassNameFromElement(menuElement, MenuCssClasses.NoWrapMenu);
   menuElement.style.minWidth = "";
   var adaptiveItemWidth = adaptiveItemElement.offsetWidth;
   if(isAutoWidth) {
    ASPx.Attr.ChangeStyleAttribute(contentElement, "display", "none");
    ASPx.Attr.ChangeStyleAttribute(menuElement, "min-width", "");
   }
   var menuWidth = menuElement.offsetWidth - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(menuElement) - adaptiveItemWidth;
   if(isAutoWidth) {
    ASPx.Attr.RestoreStyleAttribute(contentElement, "display");
    ASPx.Attr.RestoreStyleAttribute(menuElement, "min-width");
   }
   var additionalWidth = adaptiveItemWidth;
   if(adaptiveItemSpacing) {
    menuWidth -= adaptiveItemSpacing.offsetWidth;
    additionalWidth += adaptiveItemSpacing.offsetWidth;
   }
   var hasAdaptivity = this.HideAdaptiveItems(menuWidth, additionalWidth, contentElement, adaptiveMenuContentElement);
   contentElement.adaptiveInfo.hasAdaptivity = hasAdaptivity;
   this.SetAdaptiveItemElementVisibility(adaptiveItemElement, adaptiveItemSpacing, hasAdaptivity);
   contentElement.style.width = hasAdaptivity ? "100%" : "";
   if(hasAdaptivity){
    ASPx.CacheHelper.DropCache(adaptiveMenuElement);
    this.CalculateSubMenu(adaptiveMenuElement, true);
    this.CalculateSeparatorsAndSpacers(adaptiveMenuElement, null, adaptiveMenuContentElement, true);
   }
   if(isNoWrap) {
    ASPx.AddClassNameToElement(menuElement, MenuCssClasses.NoWrapMenu);
    if(adaptiveItemSpacing) adaptiveItemSpacing.style.width = hasAdaptivity ? "100%" : "";
   }
   ASPx.RemoveClassNameFromElement(menuElement, MenuCssClasses.CalculateMenu);
  }
  else {
   this.SetAdaptiveItemElementVisibility(adaptiveItemElement, adaptiveItemSpacing, false);
  }
  if(wasAdaptivity || contentElement.adaptiveInfo.hasAdaptivity)
   ASPx.CacheHelper.DropCache(menuElement);
  this.CalculateMainMenu(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, wasAdaptivity || contentElement.adaptiveInfo.hasAdaptivity || recalculate);
 },
 InitAdaptiveInfo: function(contentElement) {
  if(contentElement.adaptiveInfo) return;
  contentElement.adaptiveInfo = { };
  contentElement.adaptiveInfo.elements = this.CreateAdaptiveElementsArray(contentElement);
  contentElement.adaptiveInfo.hasAdaptivity = false;
 },
 GetAdaptiveItemElementByIndex: function(adaptiveInfo, index) {
  return adaptiveInfo.elements[index];
 },
 GetAdaptiveItemElementParent: function(adaptiveInfo, index) {
  return undefined;
 },
 GetAdaptiveItemElementPreviousSibling: function(defaultPreviousSibling) {
  return defaultPreviousSibling;
 },
 RestoreAdaptiveItems: function(previousSibling, contentElement, isVertical) {
  this.SetLastSeparatorsVisible(true, contentElement);
  for(var i = 0; i < contentElement.adaptiveInfo.elements.length; i++) {
   var element = this.GetAdaptiveItemElementByIndex(contentElement.adaptiveInfo, i);
   if(ASPx.Browser.IE)
    ASPx.RemoveElement(element);
   var isReplacedIndent = !element.parent;
   if(isReplacedIndent)
    ASPx.RemoveElement(ASPx.GetElementById(element.id));
   var itemParentElement = this.GetAdaptiveItemElementParent(contentElement.adaptiveInfo, i) || contentElement;
   itemParentElement.insertBefore(element, previousSibling);
   ASPx.Attr.RestoreStyleAttribute(element, "width");
   if(!isVertical)
    this.SetItemItemPopOutImageHorizontal(element);
   if(ASPx.ElementContainsCssClass(element, MenuCssClasses.Separator) || ASPx.ElementContainsCssClass(element, MenuCssClasses.Spacing))
    ASPx.RemoveClassNameFromElement(element, MenuCssClasses.AdaptiveMenuHiddenElement);
  }
  if(this.menu.GetRootItem()) {
   for(var i = this.elementsToHide.length - 1; i >= 0; i--) {
    if(!this.elementsToHide[i]) continue;
    var indexPath = this.elementsToHide[i].indexPath;
    if(this.menu.GetItemByIndexPath(indexPath).GetVisible())
     this.menu.UpdateItemCssClasses(indexPath, true);
    this.elementsToHide[i] = null;
   }
  }
  this.elementsToHide = [];
 },
 SetLastSeparatorsVisible: function(isVisible, contentElement) {
  var elements = ASPx.GetChildElementNodes(contentElement);
  for(var i = 0; i < elements.length; i++) {
   var element = elements[i];
   if(ASPx.ElementContainsCssClass(element, MenuCssClasses.Separator) || ASPx.ElementContainsCssClass(element, MenuCssClasses.Spacing))
    ASPx.RemoveClassNameFromElement(element, MenuCssClasses.AdaptiveMenuHiddenElement);
   else
    break;
  }
 },
 CreateAdaptiveElementsArray: function(contentElement) {
  var result = [];
  var elements = ASPx.GetChildElementNodes(contentElement);
  for(var i = 0; i < elements.length; i++) {
   if(this.CheckElementIsAdaptive(elements[i]))
    result.push(elements[i]);
  }
  return result;
 },
 SetItemItemPopOutImageHorizontal: function(element) {
  var popOutElements = ASPx.GetNodesByPartialClassName(element, "dxWeb_mVerticalPopOut");
  for(var i = 0; i < popOutElements.length; i++)
   popOutElements[i].className = popOutElements[i].className.replace("Vertical", "Horizontal");
 },
 CheckElementIsAdaptive: function(element) {
  return !ASPx.ElementHasCssClass(element, this.menu.getAdaptiveMenuItemCssClass()) && !ASPx.ElementHasCssClass(element, this.menu.getAdaptiveMenuItemSpacingCssClass());
 },
 CheckAdaptiveItemsWidth: function(contentElement, menuWidth, additionalWidth) {
  var itemsWidth = 0;
  var elements = ASPx.GetChildElementNodes(contentElement);
  for(var i = 0; i < elements.length; i++) {
   var element = elements[i];
   if(this.CheckElementIsAdaptive(element) && element.offsetWidth > 0)
    itemsWidth += this.GetAdaptiveElementWidth(element);
   if(itemsWidth > menuWidth + additionalWidth)
    return false;
  }
  return true;
 },
 GetAdaptiveElementWidth: function(element) {
  return element.style.minWidth !== "" ? parseInt(element.style.minWidth) + ASPx.GetHorizontalBordersWidth(element) : element.offsetWidth;
 },
 HideAdaptiveItems: function(menuWidth, additionalWidth, contentElement, adaptiveMenuContentElement) {
  if(this.CheckAdaptiveItemsWidth(contentElement, menuWidth, additionalWidth))
   return false;
  this.elementsToHide = [];
  var elementsToHide = this.elementsToHide;
  var adaptiveItemSpacingCssClass = this.menu.getAdaptiveMenuItemSpacingCssClass();
  var addToHide = function(index, indexPath, itemElement, separatorElement, indentElement, insteadSeparatorElement) {
   if(!itemElement) return;
   if(separatorElement && ASPx.ElementHasCssClass(separatorElement, adaptiveItemSpacingCssClass))
    separatorElement = null;
   if(indentElement && ASPx.ElementHasCssClass(indentElement, adaptiveItemSpacingCssClass))
    indentElement = null;
   elementsToHide[index] = { indexPath: indexPath, itemElement: itemElement, separatorElement: separatorElement, indentElement: indentElement, insteadSeparatorElement: insteadSeparatorElement };
   ASPx.Attr.ChangeStyleAttribute(itemElement, "display", "none");
   if(separatorElement) {
    var elementForHide = insteadSeparatorElement || separatorElement;
    ASPx.Attr.ChangeStyleAttribute(elementForHide, "display", "none");
   }
   if(indentElement)
    ASPx.Attr.ChangeStyleAttribute(indentElement, "display", "none");
  };
  for(var i = 0; i < this.menu.adaptiveItemsOrder.length; i++){
   var indexPath = this.menu.adaptiveItemsOrder[i],
    index = parseInt(indexPath, 10),
    itemToKeepSeparator = this.menu.GetRootItem() ? this.GetItemForKeepSeparator(index) : null,
    insteadSeparatorElement = itemToKeepSeparator ? this.menu.GetItemIndentElement(itemToKeepSeparator.indexPath) : null;
   addToHide(index, indexPath, this.menu.GetItemElement(indexPath), this.menu.GetItemSeparatorElement(indexPath), this.menu.GetItemIndentElement(indexPath), insteadSeparatorElement);
   var actualAdditionalWidth = this.NeedShowAdaptiveItemForHiddenElements(elementsToHide) ? 0 : additionalWidth;
   if(this.CheckAdaptiveItemsWidth(contentElement, menuWidth, actualAdditionalWidth))
    break;
  }
  var hasImages = false;
  for(var i = 0; i < elementsToHide.length; i++) {
   if(!elementsToHide[i]) continue;
   ASPx.Attr.RestoreStyleAttribute(elementsToHide[i].itemElement, "display");
   if(elementsToHide[i].separatorElement) {
    var elementForRestore = elementsToHide[i].insteadSeparatorElement || elementsToHide[i].separatorElement;
    ASPx.Attr.RestoreStyleAttribute(elementForRestore, "display");
   }
   if(elementsToHide[i].indentElement)
    ASPx.Attr.RestoreStyleAttribute(elementsToHide[i].indentElement, "display");
   this.menu.UpdateItemCssClasses(elementsToHide[i].indexPath, false);
   if(elementsToHide[i].separatorElement) {
    if(this.menu.GetRootItem())
     this.KeepSeparatorInRoot(i);
    adaptiveMenuContentElement.appendChild(elementsToHide[i].separatorElement);
   }
   else if(this.menu.GetRootItem())
    this.InsertSeparatorInAdaptiveMenu(i, elementsToHide[i].indexPath);
   if(elementsToHide[i].indentElement)
    adaptiveMenuContentElement.appendChild(elementsToHide[i].indentElement);
   adaptiveMenuContentElement.appendChild(elementsToHide[i].itemElement);
   this.PrepareHiddenAdaptiveItemElement(elementsToHide[i].itemElement);
   if(ASPx.GetNodeByClassName(elementsToHide[i].itemElement, "dxm-image"))
    hasImages = true;
  }
  for(var i = 0; i < elementsToHide.length; i++) {
   if(!elementsToHide[i]) continue;
   if(elementsToHide[i].separatorElement) 
    ASPx.AddClassNameToElement(elementsToHide[i].separatorElement, MenuCssClasses.AdaptiveMenuHiddenElement);
   if(elementsToHide[i].indentElement) 
    ASPx.AddClassNameToElement(elementsToHide[i].indentElement, MenuCssClasses.AdaptiveMenuHiddenElement);
   break;
  }
  this.SetLastSeparatorsVisible(false, contentElement);
  this.PrepareAdaptiveMenuContentElement(adaptiveMenuContentElement, hasImages);
  return elementsToHide.length > 0;
 },
 PrepareHiddenAdaptiveItemElement: function(itemElement) {
  ASPx.Attr.ChangeStyleAttribute(itemElement, "width", "auto");
  this.SetItemPopOutImageVertical(itemElement);
 },
 PrepareAdaptiveMenuContentElement: function(contentElement, hasImages) {
  if(hasImages)
   ASPx.RemoveClassNameFromElement(contentElement, MenuCssClasses.WithoutImages);
  else
   ASPx.AddClassNameToElement(contentElement, MenuCssClasses.WithoutImages);
 },
 SetAdaptiveItemElementVisibility: function(adaptiveItemElement, adaptiveItemSpacing, visible) {
  ASPx.SetElementDisplay(adaptiveItemElement, visible);
  if(adaptiveItemSpacing)
   ASPx.SetElementDisplay(adaptiveItemSpacing, visible);
 },
 NeedShowAdaptiveItemForHiddenElements: function(elementsToHide) {
  return true;
 },
 KeepSeparatorInRoot: function(index) {
  var nextItemInGroup = this.GetItemForKeepSeparator(index);
  if(nextItemInGroup) {
   var separatorElement = this.elementsToHide[index].separatorElement;
   this.ReplaceIndentElement(nextItemInGroup.indexPath, separatorElement);
  }
 },
 InsertSeparatorInAdaptiveMenu: function(index, indexPath) {
  var itemWithSeparator = this.GetItemWithSeparatorForAdaptiveMenu(index);
  if(itemWithSeparator) {
   var separatorElement = this.menu.GetItemSeparatorElement(itemWithSeparator.indexPath);
   if(!separatorElement) return;
   this.elementsToHide[index].indentElement = this.ReplaceIndentElement(indexPath, separatorElement);
  }
 },
 ReplaceIndentElement: function(indexPath, separatorElement) {
  var itemElement = this.menu.GetItemElement(indexPath),
   itemIndent = this.menu.GetItemIndentElement(indexPath),
   newIndentElement = separatorElement.cloneNode(true),
   parentNode = itemElement.parentNode;
  newIndentElement.id = this.menu.GetItemIndentElementId(indexPath);
  if(itemIndent)
   itemIndent.parentNode.removeChild(itemIndent);
  parentNode.insertBefore(newIndentElement, itemElement);
  return newIndentElement;
 },
 GetItemForKeepSeparator: function(index) {
  var rootItem = this.menu.GetRootItem(),
   nextItemInGroup = this.menu.GetNextVisibleItemInGroup(rootItem, index, true);
  if(nextItemInGroup && this.IsItemInAdaptiveMenu(nextItemInGroup.index)) {
   while(nextItemInGroup && this.IsItemInAdaptiveMenu(nextItemInGroup.index))
    nextItemInGroup = this.menu.GetNextVisibleItemInGroup(rootItem, nextItemInGroup.index, true);
  }
  return nextItemInGroup;
 },
 GetItemWithSeparatorForAdaptiveMenu: function(index) {
  var rootItem = this.menu.GetRootItem(),
   prevItemInGroup = this.menu.GetPrevVisibleItemInGroup(rootItem, index);
  if(prevItemInGroup && !this.IsItemInAdaptiveMenu(prevItemInGroup.index) && !this.menu.IsItemBeginsGroup(prevItemInGroup)) {
   while(prevItemInGroup && !this.IsItemInAdaptiveMenu(prevItemInGroup.index) && !this.menu.IsItemBeginsGroup(prevItemInGroup))
    prevItemInGroup = this.menu.GetPrevVisibleItemInGroup(rootItem, prevItemInGroup.index);
  }
  return prevItemInGroup && !this.IsItemInAdaptiveMenu(prevItemInGroup.index) ? prevItemInGroup : null;
 },
 IsItemInAdaptiveMenu: function(index) {
  return this.elementsToHide.length >= index ? !!this.elementsToHide[index] : false;
 },
 SetItemPopOutImageVertical: function(element) {
  var popOutElements = ASPx.GetNodesByPartialClassName(element, "dxWeb_mHorizontalPopOut");
  for(var i = 0; i < popOutElements.length; i++)
   popOutElements[i].className = popOutElements[i].className.replace("Horizontal", "Vertical");
 },
 ChangeItemsPopOutImages: function(menuElement, isVertical) {
  var itemElements = this.GetItemElements(menuElement);
  for(var i = 0; i < itemElements.length; i++){
   if(isVertical)
    this.SetItemPopOutImageVertical(itemElements[i]);
   else
    this.SetItemItemPopOutImageHorizontal(itemElements[i]);
  }
 },
 ChangeOrientaion: function(menuElement, isVertical) {
  var oldCssSelector = isVertical ? MenuCssClasses.HorizontalMenu : MenuCssClasses.VerticalMenu;
  var newCssSelector = isVertical ? MenuCssClasses.VerticalMenu : MenuCssClasses.HorizontalMenu;
  menuElement.className = menuElement.className.replace(oldCssSelector, newCssSelector);
  this.ChangeItemsPopOutImages(menuElement, isVertical);
  this.CalculateMenuControl(menuElement, true);
  this.ChangeItemsPopOutImages(menuElement, isVertical);
 }
});
var MenuScrollingManager = ASPx.CreateClass(ASPx.ScrollingManager, {
 constructor: function(menuScrollHelper) {
  this.constructor.prototype.constructor.call(this, menuScrollHelper, {
   scrollableArea: menuScrollHelper.scrollingAreaElement,
   orientation: [0, 1],
   onBeforeScrolling: function(manager, direction) {
    manager.owner.OnBeforeScrolling(direction);
   },
   onAfterScrolling: function(manager, direction) {
    manager.owner.OnAfterScrolling(direction);
   },
   forseEmulation: false,
   useMarginForPosition: true,
   handleMouseWheel: menuScrollHelper.handleMouseWheel
  });
 },
 setParentNodeOverflow: function() { 
  if(ASPx.Browser.MSTouchUI) {
   this.scrollableArea.parentNode.style.overflow = "auto";
   this.scrollableArea.parentNode.style["-ms-overflow-style"] = "none";
  }  
 }
});
var MenuScrollHelper = ASPx.CreateClass(null, {
 constructor: function(menu, indexPath) {
  this.menu = menu;
  this.indexPath = indexPath;
  this.scrollingAreaElement = null;
  this.manager = null;
  this.initialized = false;
  this.visibleItems = [];
  this.itemsHeight = 0;
  this.scrollHeight = 0;
  this.scrollUpButtonHeight = 0;
  this.scrollDownButtonHeight = 0;
  this.scrollAreaHeight = null;
  this.scrollUpButtonVisible = false;
  this.scrollDownButtonVisible = false;
  this.handleMouseWheel = true;
 },
 Initialize: function() {
  if(this.initialized && !this.menu.NeedCreateItemsOnClientSide()) return;
  this.scrollingAreaElement = this.menu.GetScrollContentItemsContainer(this.indexPath);
  this.manager = new MenuScrollingManager(this);
  this.ShowScrollButtons();
  var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
  if(scrollUpButton) {
   this.scrollUpButtonHeight = this.GetScrollButtonHeight(scrollUpButton);
   ASPx.Selection.SetElementSelectionEnabled(scrollUpButton, false);
  }
  var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
  if(scrollDownButton) {
   this.scrollDownButtonHeight = this.GetScrollButtonHeight(scrollDownButton);
   ASPx.Selection.SetElementSelectionEnabled(scrollDownButton, false);
  }
  if(ASPx.Browser.WebKitTouchUI) {
   var preventDefault = function(event) { event.preventDefault(); };
   ASPx.Evt.AttachEventToElement(scrollUpButton, "touchstart", preventDefault);
   ASPx.Evt.AttachEventToElement(scrollDownButton, "touchstart", preventDefault);
  }
  this.HideScrollButtons();
  this.initialized = true;
 },
 GetScrollButtonHeight: function(button) {
  var style = ASPx.GetCurrentStyle(button);
  return button.offsetHeight + ASPx.PxToInt(style.marginTop) + ASPx.PxToInt(style.marginBottom);
 },
 FillVisibleItemsList: function() {
  var index = 0;
  this.visibleItems = [];
  while(true) {
   var childIndexPath = (this.indexPath != "" ? this.indexPath + ASPx.ItemIndexSeparator : "") + index;
   var itemElement = this.menu.GetItemElement(childIndexPath);
   if(itemElement == null)
    break;
   if(ASPx.GetElementDisplay(itemElement))
    this.visibleItems.push(itemElement);
   index++;
  }
 },
 CanCalculate: function() {
  return this.scrollingAreaElement && ASPx.IsElementDisplayed(this.scrollingAreaElement);
 },
 Calculate: function(scrollHeight) {
  if(!this.CanCalculate()) return;
  this.FillVisibleItemsList();
  this.itemsHeight = 0;
  this.scrollHeight = scrollHeight;
  var itemsContainer = this.menu.GetScrollContentItemsContainer(this.indexPath);
  if(itemsContainer) this.itemsHeight = itemsContainer.offsetHeight;
  this.SetPosition(0);
  this.CalculateScrollingElements(-1);
 },
 GetPosition: function() {
  return -this.manager.GetScrolledAreaPosition();
 },
 SetPosition: function(pos) {
  this.manager.SetScrolledAreaPosition(-pos);
 },
 CalculateScrollingElements: function(direction) {
  if(this.itemsHeight <= this.scrollHeight) {
   this.scrollUpButtonVisible = false;
   this.scrollDownButtonVisible = false;
   this.scrollAreaHeight = null;
   this.SetPosition(0);
  }
  else {
   var scrollTop = this.GetPosition();
   this.scrollAreaHeight = this.scrollHeight;
   if(direction > 0) {
    var showScrollUpButton = !this.scrollUpButtonVisible;
    this.scrollUpButtonVisible = true;
    this.scrollAreaHeight -= this.scrollUpButtonHeight;
    this.scrollDownButtonVisible = this.itemsHeight - this.scrollAreaHeight - scrollTop > this.scrollDownButtonHeight;
    if(this.scrollDownButtonVisible) {
     this.scrollAreaHeight -= this.scrollDownButtonHeight;
     if(showScrollUpButton)
      this.SetPosition(this.GetPosition() + this.scrollUpButtonHeight);
    }
    else {
     this.SetPosition(this.itemsHeight - this.scrollAreaHeight);
    }
   }
   else {
    this.scrollDownButtonVisible = true;
    this.scrollAreaHeight -= this.scrollDownButtonHeight;
    this.scrollUpButtonVisible = scrollTop > this.scrollUpButtonHeight;
    if(this.scrollUpButtonVisible)
     this.scrollAreaHeight -= this.scrollUpButtonHeight;
    else
     this.SetPosition(0);
   }
   if(this.scrollAreaHeight < 1) this.scrollAreaHeight = 1;
  }
  this.UpdateScrollingElements();
 },
 UpdateScrollingElements: function() {
  this.UpdateScrollAreaHeight();
  this.UpdateScrollButtonsVisibility();
 },
 UpdateScrollAreaHeight: function() {
  var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
  if(scrollAreaElement)
   scrollAreaElement.style.height = (this.scrollAreaHeight) ? (this.scrollAreaHeight + "px") : "";
 },
 UpdateScrollButtonsVisibility: function() {
  var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
  if(scrollUpButton) ASPx.SetElementDisplay(scrollUpButton, this.scrollUpButtonVisible);
  var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
  if(scrollDownButton) ASPx.SetElementDisplay(scrollDownButton, this.scrollDownButtonVisible);
 },
 ChangeScrollButtonsVisibility: function(visible) {
  this.scrollUpButtonVisible = visible;
  this.scrollDownButtonVisible = visible;
  this.UpdateScrollButtonsVisibility();
 },
 ShowScrollButtons: function() {
  this.ChangeScrollButtonsVisibility(true);
 },
 HideScrollButtons: function() {
  this.ChangeScrollButtonsVisibility(false);
 },
 ResetScrolling: function() {
  if(!this.initialized)
   return;
  this.HideScrollButtons();
  this.SetPosition(0);
  this.scrollAreaHeight = null;
  this.UpdateScrollAreaHeight();
 },
 GetScrollAreaHeight: function() {
  var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
  if(scrollAreaElement)
   return scrollAreaElement.offsetHeight;
  return 0;
 },
 OnAfterScrolling: function(direction) {
  this.CalculateScrollingElements(direction);
 },
 OnBeforeScrolling: function(direction) {
  var scrollButton = (direction > 0) ? this.menu.GetScrollDownButtonElement(this.indexPath) :
   this.menu.GetScrollUpButtonElement(this.indexPath);
  if(!scrollButton || !ASPx.GetElementDisplay(scrollButton))
   this.manager.StopScrolling();
 },
 StartScrolling: function(direction, delay, step) {
  this.manager.StartScrolling(direction, delay, step);
 },
 StopScrolling: function() {
  this.manager.StopScrolling();
 }
});
MenuScrollHelper.GetMenuByScrollButtonId = function(id) {
 var menuName = aspxGetMenuCollection().GetMenuNameBySuffixes(id, [Constants.SBIdSuffix]);
 return aspxGetMenuCollection().Get(menuName);
};
var ASPxClientMenuBase = ASPx.CreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.renderData = null;
  this.renderHelper = this.CreateRenderHelper();
  this.sampleItemsFlags = {
   TextOnly: 0,
   SubItems: 1,
   Image: 2,
   NavigateUrl: 4,
   DropDownMode: 8,
   CheckBox: 16,
   ImageClassName: 32,
   Svg: 64
  };
  this.rootMenuSample = null;
  this.dropElementsCache = false;
  this.allowSelectItem = false;
  this.allowCheckItems = false;
  this.allowMultipleCallbacks = false;
  this.appearAfter = 300;
  this.slideAnimationDuration = 60;
  this.disappearAfter = 500;
  this.enableAnimation = true;
  this.enableAdaptivity = false;
  this.adaptiveItemsOrder = [];
  this.enableSubMenuFullWidth = false;
  this.checkedItems = [];
  this.isVertical = true;
  this.itemCheckedGroups = [];
  this.itemCheckedGroups.groupNames = {};
  this.lockHoverEvents = false;
  this.popupToLeft = false;
  this.popupCount = 0;
  this.rootItem = null;
  this.showSubMenus = false;
  this.savedCallbackHoverItem = null;
  this.savedCallbackHoverElement = null;
  this.selectedItemIndexPath = "";
  this.checkedState = null;
  this.scrollInfo = [];
  this.scrollHelpers = {};
  this.scrollVertOffset = 1;
  this.keyboardHelper = null;
  this.isContextMenu = false;
  this.accessibleFocusElement = null;
  this.rootSubMenuFIXOffset = 0;
  this.rootSubMenuFIYOffset = 0;
  this.rootSubMenuLIXOffset = 0;
  this.rootSubMenuLIYOffset = 0;
  this.rootSubMenuXOffset = 0;
  this.rootSubMenuYOffset = 0;
  this.subMenuFIXOffset = 0;
  this.subMenuFIYOffset = 0;
  this.subMenuLIXOffset = 0;
  this.subMenuLIYOffset = 0;
  this.subMenuXOffset = 0;
  this.subMenuYOffset = 0;
  this.maxHorizontalOverlap = -3;
  this.sizingConfig.allowSetHeight = false;
  this.ItemClick = new ASPxClientEvent();
  this.ItemMouseOver = new ASPxClientEvent();
  this.ItemMouseOut = new ASPxClientEvent();
  this.PopUp = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  aspxGetMenuCollection().Add(this);
 },
 SetData: function(data) {
  if(data.items)
   this.CreateItems(data.items);
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  if(!this.NeedCreateItemsOnClientSide())
   this.renderHelper.InlineInitializeElements();
  else
   this.renderHelper.InlineInitializeScrollElements("", this.GetMainElement());
  this.InitializeInternal(true);
  if(this.IsCallbacksEnabled()) {
   this.showSubMenus = this.GetLoadingPanelElement() != null;
   this.CreateCallback("DXMENUCONTENT");
  }
  else
   this.showSubMenus = true;
  this.popupToLeft = this.rtl;
 },
 InitializeInternal: function(inline) {
  if(!this.NeedCreateItemsOnClientSide()) {
   this.InitializeCheckedItems();
   this.InitializeSelectedItem();
  }
  this.InitializeEnabledAndVisible(!inline || !this.IsCallbacksEnabled());
  if(!this.IsCallbacksEnabled())
   this.InitializeScrollableMenus();
  this.InitializeKeyboardHelper();
 },
 InitializeEnabledAndVisible: function(recursive) {
  if(this.rootItem == null) return;
  for(var i = 0; i < this.rootItem.items.length; i++)
   this.rootItem.items[i].InitializeEnabledAndVisible(recursive);
 },
 InitializeScrollableMenus: function() {
  var info = eval(this.scrollInfo);
  this.scrollHelpers = {};
  for(var i = 0; i < info.length; i++)
   this.InitializeScrollableMenu(info[i]);
 },
 InitializeScrollableMenu: function(indexPath) {
  if(!this.scrollHelpers[indexPath])
   this.scrollHelpers[indexPath] = new MenuScrollHelper(this, indexPath);
 },
 GetScrollHelper: function(indexPath) {
  var scrollsEnabledOnServer = this.scrollInfo.length > 0;
  if(this.NeedCreateItemsOnClientSide() && scrollsEnabledOnServer)
   this.InitializeScrollableMenu(indexPath);
  return this.scrollHelpers[indexPath];
 },
 InitializeKeyboardHelper: function() {
  this.keyboardHelper = new ASPxMenuKeyboardHelper(this);
 },
 InitializeMenuSamples: function() {
  this.rootMenuSample = this.GetSampleNode(this.samples.root);
  this.samples.spacing = this.GetSampleNode(this.samples.spacing);
  this.samples.separator = this.GetSampleNode(this.samples.separator);
  this.InitializeItemsSamples(this.samples.rootItems);
  if(this.samples.submenu) {
   this.samples.submenu = this.GetSampleNode(this.samples.submenu);
   this.InitializeItemsSamples(this.samples.submenuItems);
  }
 },
 InitializeItemsSamples: function(itemsSamples) {
  for(var sampleProperty in itemsSamples) {
   if(itemsSamples.hasOwnProperty(sampleProperty)) {
    itemsSamples[sampleProperty] = itemsSamples[sampleProperty].replace(/DXFAKE/, "");
    itemsSamples[sampleProperty] = this.GetSampleNode(itemsSamples[sampleProperty]);
   }
  }
 },
 CheckElementsCache: function(menuElement){
  if(this.dropElementsCache) {
   ASPx.CacheHelper.DropCache(menuElement);
   this.dropElementsCache = false;
  }
 },
 NeedCreateItemsOnClientSide: function() {
  return false;
 },
 IsClientSideEventsAssigned: function() {
  return !this.ItemClick.IsEmpty()
   || !this.ItemMouseOver.IsEmpty()
   || !this.ItemMouseOut.IsEmpty()
   || !this.PopUp.IsEmpty()
   || !this.CloseUp.IsEmpty()
   || !this.Init.IsEmpty();
 },
 IsCallbacksEnabled: function() {
  return ASPx.IsFunction(this.callBack);
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 },
 CreateRenderHelper: function(){
  return new MenuRenderHelper(this);
 },
 IsSidePanelExpanded: function() {
  return false;
 },
 GetMenuElementId: function(indexPath) {
  return this.name + Constants.MMIdSuffix + indexPath + "_";
 },
 GetMenuMainElementId: function(indexPath) {
  return this.name + "_DXME" + indexPath + "_";
 },
 GetMenuBorderCorrectorElementId: function(indexPath) {
  return this.name + "_DXMBC" + indexPath + "_";
 },
 GetMenuIFrameElementId: function(indexPath) {
  return this.name + "_DXMIF" + this.GetMenuLevel(indexPath);
 },
 GetScrollAreaId: function(indexPath) {
  return this.name + "_DXSA" + indexPath;
 },
 GetMenuTemplateContainerID: function(indexPath) {
  return this.name + "_MTCNT" + indexPath;
 },
 GetItemTemplateContainerID: function(indexPath) {
  return this.name + "_ITCNT" + indexPath;
 },
 GetScrollUpButtonId: function(indexPath) {
  return this.name + Constants.SBIdSuffix + indexPath + Constants.SBUIdEnd;
 },
 GetScrollDownButtonId: function(indexPath) {
  return this.name + Constants.SBIdSuffix + indexPath + Constants.SBDIdEnd;
 },
 GetItemElementId: function(indexPath) {
  return this.name + Constants.MIIdSuffix + indexPath + "_";
 },
 GetItemContentElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "T";
 },
 GetItemPopOutElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "P";
 },
 GetItemImageId: function(indexPath) {
  return this.GetItemElementId(indexPath) + Constants.ImagePostfix;
 },
 GetItemPopOutImageId: function(indexPath) {
  return this.GetItemElementId(indexPath) + Constants.PopupImagePostfix;
 },
 GetItemIndentElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "II";
 },
 GetItemSeparatorElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "IS";
 },
 GetMenuElement: function (indexPath) { 
  if(indexPath == "")
   return this.GetMainElement();
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetMenuElementId(indexPath));
 },
 GetMenuIFrameElement: function(indexPath) {
  var elementId = this.GetMenuIFrameElementId(indexPath);
  var element = ASPx.GetElementById(elementId);
  if(!element && this.renderIFrameForPopupElements)
   return this.CreateIFrameElement(elementId);
  return element;
 },
 CreateIFrameElement: function(elementId) {
  var element = document.createElement("IFRAME");
  ASPx.Attr.SetAttribute(element, "id", elementId);
  ASPx.Attr.SetAttribute(element, "src", "javascript:false");
  ASPx.Attr.SetAttribute(element, "scrolling", "no");
  ASPx.Attr.SetAttribute(element, "frameborder", "0");
  if(this.accessibilityCompliant)
   ASPx.Attr.SetAttribute(element, "title", ASPx.AccessibilitySR.AccessibilityIFrameTitle);
  element.style.position = "absolute";
  element.style.display = "none";
  element.style.zIndex = "19997";
  element.style.filter = "progid:DXImageTransform.Microsoft.Alpha(Style=0, Opacity=0)";
  ASPx.InsertElementAfter(element, this.GetMainElement());
  return element;
 },
 GetMenuBorderCorrectorElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetMenuBorderCorrectorElementId(indexPath));
 },
 GetMenuMainElement: function(element) {
  var indexPath = this.GetIndexPathById(element.id, true);
  return ASPx.CacheHelper.GetCachedElement(this, "menuMainElement" + indexPath, 
   function() { 
    var shadowTable = ASPx.GetElementById(this.GetMenuMainElementId(indexPath));
    return shadowTable != null ? shadowTable : element;
   });
 },
 GetScrollAreaElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetScrollAreaId(indexPath));
 },
 GetScrollContentItemsContainer: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElement(this, "scrollContentItemsContainer" + indexPath, 
   function() { 
    return ASPx.GetNodeByTagName(this.GetScrollAreaElement(indexPath), "UL", 0);
   });
 },
 GetScrollUpButtonElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetScrollUpButtonId(indexPath));
 },
 GetScrollDownButtonElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetScrollDownButtonId(indexPath));
 },
 GetItemElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetItemElementId(indexPath));
 },
 GetItemTemplateElement: function(indexPath) { 
  return this.GetItemTextTemplateContainer(indexPath);
 },
 GetItemTemplateContainer: function(indexPath) {
  return this.GetItemElement(indexPath);
 },
 GetItemTextTemplateContainer: function(indexPath) {
  return this.GetItemContentElement(indexPath);
 },
 GetItemContentElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetItemContentElementId(indexPath));
 },
 GetItemPopOutElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetItemPopOutElementId(indexPath));
 },
 GetPopOutElements: function() {
  return ASPx.GetNodesByClassName(this.GetMainElement().parentNode, "dxm-popOut");
 },
 GetPopOutImages: function() {
  return ASPx.GetNodesByClassName(this.GetMainElement().parentNode, "dxm-pImage");
 },
 GetSubMenuXPosition: function(indexPath, isVertical) {
  var itemElement = this.GetItemElement(indexPath);
  var pos = ASPx.GetAbsoluteX(itemElement) + (isVertical ? itemElement.clientWidth + itemElement.clientLeft : 0);
  if(ASPx.Browser.WebKitFamily && !this.IsParentElementPositionStatic(indexPath))
   pos -= document.body.offsetLeft;
  return pos;
 },
 GetSubMenuYPosition: function(indexPath, isVertical) {
  var position = 0;
  var element = this.GetItemElement(indexPath);
  if(element != null) {
   if(isVertical) {
    position = ASPx.GetAbsoluteY(element); 
   }
   else {
    if(ASPx.Browser.Opera && ASPx.Browser.Version >= 9 || ASPx.Browser.AndroidDefaultBrowser)
     position = ASPx.GetAbsoluteY(element) + element.offsetHeight - ASPx.GetClientTop(element);
    else
     position = ASPx.GetAbsoluteY(element) + element.clientHeight + ASPx.GetClientTop(element);
   }
  }
  if(ASPx.Browser.WebKitFamily && !this.IsParentElementPositionStatic(indexPath))
   position -= document.body.offsetTop;
  return position;
 },
 GetClientSubMenuXPosition: function(element, x, indexPath, isVertical) {
  var docClientWidth = ASPx.GetDocumentClientWidth();
  if(isVertical)
   return this.GetClientSubMenuXPositionVerticalCore(element, x, indexPath, isVertical, docClientWidth);
  return this.GetClientSubMenuXPositionHorizontalCore(element, x, indexPath, isVertical, docClientWidth);
 },
 GetClientSubMenuXPositionVerticalCore: function(element, x, indexPath, isVertical, docClientWidth) {
  var itemInfo = new MenuItemInfo(this, indexPath);
  var itemWidth = itemInfo.clientWidth;
  var subMenuWidth = this.GetMenuMainElement(element).offsetWidth;
  var left = x - ASPx.GetDocumentScrollLeft();
  var right = left + subMenuWidth;
  var toLeftX = x - subMenuWidth - itemWidth;
  var toLeftLeft = left - subMenuWidth - itemWidth;
  if(this.IsCorrectionDisableMethodRequired(indexPath))
   return this.GetCorrectionDisabledResult(x, toLeftX);
  if(this.popupToLeft) {
   if(toLeftLeft > this.maxHorizontalOverlap)
    return toLeftX;
   if(docClientWidth - right > this.maxHorizontalOverlap || !this.rtl) {
    this.popupToLeft = false;
    return x;
   }
   return ASPx.InvalidPosition;
  }
  else {
   if(docClientWidth - right > this.maxHorizontalOverlap)
    return x;
   if(toLeftLeft > this.maxHorizontalOverlap || this.rtl) {
    this.popupToLeft = true;
    return toLeftX;
   }
   return ASPx.InvalidPosition;
  }
 },
 GetClientSubMenuXPositionHorizontalCore: function(element, x, indexPath, isVertical, docClientWidth) {
  var itemInfo = new MenuItemInfo(this, indexPath);
  var itemOffsetWidth = itemInfo.offsetWidth;
  var subMenuWidth = this.GetMenuMainElement(element).offsetWidth;
  var left = x - ASPx.GetDocumentScrollLeft();
  if(this.popupToLeft) {
   var rtlX = left - subMenuWidth + itemOffsetWidth;
   return rtlX < 0 ? 0 : rtlX;
  }
  else {
   if(docClientWidth - (left + subMenuWidth) < 0) {
    x = docClientWidth - subMenuWidth;
    if(x < 0)
     x = 0;
    return x;
   }
   return x;
  }
 },
 GetClientSubMenuYPosition: function(element, y, indexPath, isVertical) {
  var itemInfo = new MenuItemInfo(this, indexPath);
  var itemHeight = itemInfo.offsetHeight;
  var subMenuHeight = this.GetMenuMainElement(element).offsetHeight;
  var menuItemTop = y - ASPx.GetDocumentScrollTop();
  var subMenuBottom = menuItemTop + subMenuHeight;
  var docClientHeight = ASPx.GetDocumentClientHeight();
  var clientSubMenuYPos = y;
  if(isVertical) {
   var notEnoughSpaceToShowDown = subMenuBottom > docClientHeight;
   var menuItemBottom = menuItemTop + itemHeight;
   if(menuItemBottom > docClientHeight) {
    menuItemBottom = docClientHeight;
    itemHeight = menuItemBottom - menuItemTop;
   }
   var notEnoughSpaceToShowUp = menuItemBottom < subMenuHeight;
   var subMenuIsFitToDisplayFrames = docClientHeight >= subMenuHeight;
   if(!subMenuIsFitToDisplayFrames) clientSubMenuYPos = y - menuItemTop;
   else if(notEnoughSpaceToShowDown) {
    if(notEnoughSpaceToShowUp) {
     var docClientBottom = ASPx.GetDocumentScrollTop() + docClientHeight;
     clientSubMenuYPos = docClientBottom - subMenuHeight;
    } else
     clientSubMenuYPos = y + itemHeight - subMenuHeight;
   }
  }
  else {
   if(this.IsHorizontalSubmenuNeedInversion(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight))
    clientSubMenuYPos = y - subMenuHeight - itemHeight;
  }
  return clientSubMenuYPos;
 },
 IsHorizontalSubmenuNeedInversion: function(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight) {
  return subMenuBottom > docClientHeight && menuItemTop - subMenuHeight - itemHeight > docClientHeight - subMenuBottom;
 },
 IsCorrectionDisableMethodRequired: function(indexPath) {
  return false;
 },
 HasChildren: function(indexPath) {
  return (this.GetMenuElement(indexPath) != null);
 },
 IsVertical: function(indexPath) {
  return true;
 },
 IsRootItem: function(indexPath) {
  return this.GetMenuLevel(indexPath) <= 1;
 },
 IsParentElementPositionStatic: function(indexPath) {
  return this.IsRootItem(indexPath);
 },
 GetItemIndexPath: function(indexes) {
  return aspxGetMenuCollection().GetItemIndexPath(indexes);
 },
 GetItemIndexes: function(indexPath) {
  return aspxGetMenuCollection().GetItemIndexes(indexPath);
 },
 GetItemIndexPathById: function(id) {
  return aspxGetMenuCollection().GetIndexPathById(id, Constants.MIIdSuffix);
 },
 GetMenuIndexPathById: function(id) {
  return aspxGetMenuCollection().GetIndexPathById(id, Constants.MMIdSuffix);
 },
 GetScrollButtonIndexPathById: function(id) {
  return aspxGetMenuCollection().GetIndexPathById(id, Constants.SBIdSuffix);
 },
 GetIndexPathById: function(id, checkMenu) {
  var indexPath = this.GetItemIndexPathById(id);
  if(indexPath == "" && checkMenu)
   indexPath = this.GetMenuIndexPathById(id);
  return indexPath;
 },
 GetMenuLevelInternal: function(indexPath) {
  if(indexPath == "")
   return 0;
  else {
   var indexes = this.GetItemIndexes(indexPath);
   return indexes.length;
  }
 },
 GetMenuLevel: function(indexPath) {
  var level = this.GetMenuLevelInternal(indexPath);
  if(this.IsAdaptiveMenuItem(indexPath))
   level ++;
  return level;
 },
 IsAdaptiveMenuItem: function(indexPath){
  var level = this.GetMenuLevelInternal(indexPath);
  while(level > 1){
   indexPath = this.GetParentIndexPath(indexPath);
   level = this.GetMenuLevelInternal(indexPath);
  }
  var itemElement = this.GetItemElement(indexPath);
  if(itemElement && ASPx.GetParentByClassName(itemElement, this.getAdaptiveMenuCssClass()))
   return true;
  return false;
 },
 IsAdaptiveItem: function(indexPath){
  var itemElement = this.GetItemElement(indexPath);
  if(itemElement && ASPx.ElementContainsCssClass(itemElement, this.getAdaptiveMenuItemCssClass()))
   return true;
  return false;
 },
 GetParentIndexPath: function(indexPath) {
  var indexes = this.GetItemIndexes(indexPath);
  indexes.length--;
  return (indexes.length > 0) ? this.GetItemIndexPath(indexes) : "";
 },
 IsLastElement: function(element) {
  return element && (!element.nextSibling || !element.nextSibling.tagName);
 },
 IsLastItem: function(indexPath) {
  var itemElement = this.GetItemElement(indexPath);
  return this.IsLastElement(itemElement);
 },
 IsFirstElement: function(element) {
  return element && (!element.previousSibling || !element.previousSibling.tagName);
 },
 IsFirstItem: function(indexPath) {
  var itemElement = this.GetItemElement(indexPath);
  return this.IsFirstElement(itemElement);
 },
 IsItemElement: function(element) {
  return ASPx.ElementContainsCssClass(element, MenuCssClasses.Item);
 },
 GetPreviousItem: function(itemPath, isItemNameUsed) {
  var indexPath = itemPath;
  if(isItemNameUsed) {
   var indexPath = this.GetMenuIndexPathById(itemPath);
   if(indexPath == "")
    indexPath = this.GetItemIndexPathById(itemPath);
  }
  var currentItem = this.GetItemByIndexPath(indexPath),
   previousItem = null;
  if(currentItem) {
   for(var i = currentItem.index - 1; i >= 0 && previousItem === null; i--) {
    if(currentItem.parent.items[i].GetVisible())
     previousItem = currentItem.parent.items[i];
   }
  }
  return previousItem;
 },
 GetClientSubMenuPos: function(element, indexPath, pos, isVertical, isXPos) {
  if(!ASPx.IsValidPosition(pos)) {
   pos = isXPos ? this.GetSubMenuXPosition(indexPath, isVertical) : this.GetSubMenuYPosition(indexPath, isVertical);
  }
  var clientPos = isXPos ? this.GetClientSubMenuXPosition(element, pos, indexPath, isVertical) : this.GetClientSubMenuYPosition(element, pos, indexPath, isVertical);
  var isInverted = pos != clientPos;
  if(clientPos !== ASPx.InvalidPosition){
   var offset = isXPos ? this.GetSubMenuXOffset(indexPath) : this.GetSubMenuYOffset(indexPath);
   clientPos += isInverted ? -offset : offset;
   clientPos -= ASPx.GetPositionElementOffset(this.GetMenuElement(indexPath), isXPos);
  }
  return new ASPx.PopupPosition(clientPos, isInverted);
 },
 GetSubMenuXOffset: function(indexPath) {
  if(indexPath == "")
   return 0;
  else if(this.IsRootItem(indexPath)) {
   if(this.IsFirstItem(indexPath))
    return this.rootSubMenuFIXOffset;
   else if(this.IsLastItem(indexPath))
    return this.rootSubMenuLIXOffset;
   else
    return this.rootSubMenuXOffset;
  }
  else {
   if(this.IsFirstItem(indexPath))
    return this.subMenuFIXOffset;
   else if(this.IsLastItem(indexPath))
    return this.subMenuLIXOffset;
   else
    return this.subMenuXOffset;
  }
 },
 GetSubMenuYOffset: function(indexPath) {
  if(indexPath == "")
   return 0;
  else if(this.IsRootItem(indexPath)) {
   if(this.IsFirstItem(indexPath))
    return this.rootSubMenuFIYOffset;
   else if(this.IsLastItem(indexPath))
    return this.rootSubMenuLIYOffset;
   else
    return this.rootSubMenuYOffset;
  }
  else {
   if(this.IsFirstItem(indexPath))
    return this.subMenuFIYOffset;
   else if(this.IsLastItem(indexPath))
    return this.subMenuLIYOffset;
   else
    return this.subMenuYOffset;
  }
 },
 CalculateSubMenuPosition: function(element, x, y, indexPath, enableAnimation) {
  var isVertical = this.IsVertical(indexPath);
  var horizontalPopupPosition = this.GetClientSubMenuPos(element, indexPath, x, isVertical, true);
  if(horizontalPopupPosition.position === ASPx.InvalidPosition) {
   isVertical = !isVertical;
   horizontalPopupPosition = this.GetClientSubMenuPos(element, indexPath, x, isVertical, true);
  }
  var verticalPopupPosition = this.GetClientSubMenuPos(element, indexPath, y, isVertical, false);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  var toTheLeft = horizontalPopupPosition.isInverted;
  var toTheTop = verticalPopupPosition.isInverted;
  clientY += this.GetScrollingCorrection(element, indexPath, clientY);
  verticalPopupPosition.position = clientY;
  var parentElement = this.GetItemContentElement(indexPath);
  var prevParentPos = ASPx.GetAbsoluteX(parentElement);
  ASPx.SetStyles(element, {
   left: clientX, top: clientY
  });
  if(ASPx.Browser.IE && ASPx.IsElementRightToLeft(document.body)) {
   ASPx.SetElementDisplay(element, false);
   ASPx.SetElementDisplay(element, true);
  }
  clientX += ASPx.GetAbsoluteX(parentElement) - prevParentPos;
  if(enableAnimation) {
   this.StartAnimation(element, indexPath, horizontalPopupPosition, verticalPopupPosition, isVertical);
  }
  else {
   ASPx.SetStyles(element, { left: clientX, top: clientY });
   ASPx.SetElementVisibility(element, true);
   if(this.enableSubMenuFullWidth)
    this.ApplySubMenuFullWidth(element);
   this.DoShowPopupMenuIFrame(element, clientX, clientY, ASPx.InvalidDimension, ASPx.InvalidDimension, indexPath);
   this.DoShowPopupMenuBorderCorrector(element, clientX, clientY, indexPath, toTheLeft, toTheTop);
  }
 },
 StartScrolling: function(buttonId, delay, step) {
  var indexPath = this.GetScrollButtonIndexPathById(buttonId);
  var level = this.GetMenuLevel(indexPath);
  aspxGetMenuCollection().DoHidePopupMenus(null, level, this.name, false, "");
  var direction = (buttonId.lastIndexOf(Constants.SBDIdEnd) == buttonId.length - Constants.SBDIdEnd.length) ? 1 : -1;
  var scrollHelper = this.GetScrollHelper(indexPath);
  if(scrollHelper) scrollHelper.StartScrolling(direction, delay, step);
 },
 StopScrolling: function(buttonId) {
  var indexPath = this.GetScrollButtonIndexPathById(buttonId);
  var scrollHelper = this.GetScrollHelper(indexPath);
  if(scrollHelper) scrollHelper.StopScrolling();
 },
 ClearAppearTimer: function() {
  aspxGetMenuCollection().ClearAppearTimer();
 },
 ClearDisappearTimer: function() {
  aspxGetMenuCollection().ClearDisappearTimer();
 },
 IsAppearTimerActive: function() {
  return aspxGetMenuCollection().IsAppearTimerActive();
 },
 IsDisappearTimerActive: function() {
  return aspxGetMenuCollection().IsDisappearTimerActive();
 },
 IsAdaptiveItemAnimationActive: function() {
  return this.inSubmenuShowAnimation;
 },
 GetAppearAfter: function(indexPath) {
  return this.appearAfter;
 },
 SetAppearTimer: function(indexPath, preventSubMenu) {
  aspxGetMenuCollection().SetAppearTimer(this.name, indexPath, this.GetAppearAfter(indexPath), preventSubMenu);
 },
 GetDisappearAfter: function() {
  return this.disappearAfter;
 },
 SetDisappearTimer: function() {
  aspxGetMenuCollection().SetDisappearTimer(this.name, this.GetDisappearAfter());
 },
 IsDropDownItem: function(indexPath) {
  return ASPx.ElementContainsCssClass(this.GetItemElement(indexPath), MenuCssClasses.ItemDropDownMode);
 },
 DoItemClick: function(indexPath, hasItemLink, htmlEvent) {
  aspxGetMenuCollection().LockMenusVisibility();
  var processOnServer = this.RaiseItemClick(indexPath, htmlEvent);
  if(processOnServer && !hasItemLink) {
   if(ASPx.Browser.IE || ASPx.Browser.Edge) { 
    var activeElement = document.activeElement;
    if(activeElement)
     activeElement.blur();
   }
   this.SendPostBack("CLICK:" + indexPath);
  }
  else {
   this.ClearDisappearTimer();
   this.ClearAppearTimer();
   if(this.CanCloseSubMenuOnClick(indexPath) && (!this.HasChildren(indexPath) || this.IsDropDownItem(indexPath)))
    aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
   else if(this.IsItemEnabled(indexPath) && !this.IsDropDownItem(indexPath))
    this.ShowSubMenu(indexPath);
  }
  aspxGetMenuCollection().UnlockMenusVisibility();
 },
 CanCloseSubMenuOnClick: function(indexPath) {
  return true;
 },
 HasContent: function(mainCell) {
  for(var i = 0; i < mainCell.childNodes.length; i++)
   if(mainCell.childNodes[i].tagName)
    return true;
  return false;
 },
 DoShowPopupMenu: function(element, x, y, indexPath) {
  var parent = this.GetItemByIndexPath(indexPath);
  var menuElement = this.GetMenuMainElement(element);
  var popupMenuHasVisibleContent = menuElement && (this.renderHelper.HasSubMenuTemplate(menuElement) || 
   ASPx.ElementContainsCssClass(menuElement, this.getAdaptiveMenuCssClass())) ||
   parent && this.HasVisibleItems(parent);
  if(popupMenuHasVisibleContent === false)
   return;
  if(element && this.IsCallbacksEnabled())
   this.ShowLoadingPanelInMenu(element);
  if(ASPx.GetElementVisibility(element))
   ASPx.SetStyles(element, { left: ASPx.InvalidPosition, top: ASPx.InvalidPosition });
  ASPx.SetElementDisplay(element, true);
  if(parent) {
   for(var i = 0; i < parent.GetItemCount() ; i++) {
    var item = parent.GetItem(i);
    this.SetPopOutElementVisible(item.indexPath, this.HasVisibleItems(item));
   }
  }
  this.renderHelper.CalculateSubMenu(element, false);
  if(this.popupCount == 0) this.popupToLeft = this.rtl;
  this.RaisePopUp(indexPath);
  this.CalculateSubMenuPosition(element, x, y, indexPath, this.enableAnimation);
  aspxGetMenuCollection().RegisterVisiblePopupMenu(this.name, element.id);
  this.popupCount++;
  ASPx.GetControlCollection().AdjustControls(element);
  this.CorrectVerticalAlignment(ASPx.AdjustHeight, this.GetPopOutElements, "PopOut");
  this.CorrectVerticalAlignment(ASPx.AdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
 },
 ShowLoadingPanelInMenu: function(element) {
  var lpParent = this.GetMenuMainElement(element);
  if(lpParent && !this.HasContent(lpParent))
   this.CreateLoadingPanelInsideContainer(lpParent);
 },
 GetScrollSubMenuYCorrection: function(element, scrollHelper, clientY) {
  var absoluteClientY = clientY + ASPx.GetPositionElementOffset(element);
  var excessTop = this.GetScrollExcessTop(absoluteClientY);
  var excessBottom = this.GetScrollExcessBottom(element, absoluteClientY);
  var correction = 0;
  if(excessTop > 0)
   correction += excessTop + this.scrollVertOffset;
  if(excessBottom > 0 && (absoluteClientY + correction == ASPx.GetDocumentScrollTop())) {
   excessBottom += this.scrollVertOffset;
   correction += this.scrollVertOffset;
  }
  this.PrepareScrolling(element, scrollHelper, excessTop, excessBottom);
  return correction;
 },
 GetScrollExcessTop: function(clientY) {
  return ASPx.GetDocumentScrollTop() - clientY;
 },
 GetScrollExcessBottom: function(element, clientY) {
  ASPx.SetElementDisplay(element, false);
  var docHeight = ASPx.GetDocumentClientHeight();
  ASPx.SetElementDisplay(element, true);
  return clientY + element.offsetHeight - ASPx.GetDocumentScrollTop() - docHeight;
 },
 PrepareScrolling: function(element, scrollHelper, excessTop, excessBottom) {
  scrollHelper.Initialize();
  var corrector = element.offsetHeight - scrollHelper.GetScrollAreaHeight() + this.scrollVertOffset;
  if(excessTop > 0)
   scrollHelper.Calculate(element.offsetHeight - excessTop - corrector);
  if(excessBottom > 0)
   scrollHelper.Calculate(element.offsetHeight - excessBottom - corrector);
 },
 ApplySubMenuFullWidth: function(element) {
  ASPx.SetStyles(element, { left: 0, right: 0, width: "auto" });
  var menuElement = this.GetMenuMainElement(element);
  ASPx.SetStyles(menuElement, { width: "100%", "box-sizing": "border-box" });
  var templateElement = ASPx.GetChildByClassName(menuElement, "dx");
  if(templateElement) ASPx.SetStyles(templateElement, { width: "100%" });
 },
 DoShowPopupMenuIFrame: function(element, x, y, width, height, indexPath) {
  if(!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(!iFrame) {
   iFrame = this.GetMenuIFrameElement(indexPath);
   element.overflowElement = iFrame;
  }
  if(iFrame) {
   var menuElement = this.GetMenuMainElement(element);
   if(width < 0)
    width = menuElement.offsetWidth;
   if(height < 0)
    height = menuElement.offsetHeight;
   ASPx.SetStyles(iFrame, {
    width: width, height: height,
    left: x, top: y, display: ""
   });
  }
 },
 DoShowPopupMenuBorderCorrector: function(element, x, y, indexPath, toTheLeft, toTheTop) {
  var borderCorrectorElement = this.GetMenuBorderCorrectorElement(indexPath);
  if(borderCorrectorElement) {
   var params = this.GetPopupMenuBorderCorrectorPositionAndSize(element, x, y, indexPath, toTheLeft, toTheTop);
   var itemCell = this.GetItemContentElement(indexPath);
   var popOutImageCell = this.GetItemPopOutElement(indexPath);
   if(ASPx.Browser.IE && ASPx.Browser.MajorVersion == 9) { 
    var isVertical = this.IsVertical(indexPath);
    var itemBoundCoord = itemCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
    var itemBorderWidth = ASPx.PxToInt(ASPx.GetCurrentStyle(itemCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
    if(popOutImageCell != null) {
     var popOutImageBoundCoord = popOutImageCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
     if(popOutImageBoundCoord > itemBoundCoord) {
      itemBoundCoord = popOutImageBoundCoord;
      itemBorderWidth = ASPx.PxToInt(ASPx.GetCurrentStyle(popOutImageCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
     }
    }
    var menu = this.GetMainElement();
    itemBoundCoord -= Math.min(menu.getBoundingClientRect()[isVertical ? 'top' : 'left'], ASPx.GetPositionElementOffset(menu, !isVertical));
    if(isVertical) {
     var bottomsDifference = this.GetItemElement(indexPath).getBoundingClientRect().bottom -
      this.GetMenuElement(indexPath).getBoundingClientRect().bottom;
     itemBoundCoord -= bottomsDifference > 0 && bottomsDifference;
    }
    var borderCorrectorBoundCoord = isVertical ? params.top + params.height : params.left + params.width;
    if(itemBoundCoord - borderCorrectorBoundCoord != itemBorderWidth) {
     borderCorrectorBoundCoord = itemBoundCoord - itemBorderWidth;
     if(isVertical)
      params.height = borderCorrectorBoundCoord - params.top;
     else
      params.width = borderCorrectorBoundCoord - params.left;
    }
   }
   ASPx.SetStyles(borderCorrectorElement, {
    width: params.width, height: params.height,
    left: params.left, top: params.top,
    display: "", visibility: "visible"
   });
   element.borderCorrectorElement = borderCorrectorElement;
  }
 },
 GetPopupMenuBorderCorrectorPositionAndSize: function(element, x, y, indexPath, toTheLeft, toTheTop) {
  var result = {};
  var itemInfo = new MenuItemInfo(this, indexPath);
  var menuXOffset = ASPx.GetClientLeft(this.GetMenuMainElement(element));
  var menuYOffset = ASPx.GetClientTop(this.GetMenuMainElement(element));
  var menuElement = this.GetMenuMainElement(element);
  var menuClientWidth = menuElement.clientWidth;
  var menuClientHeight = menuElement.clientHeight;
  if(this.IsVertical(indexPath)) {
   var commonClientHeight = itemInfo.clientHeight < menuClientHeight
    ? itemInfo.clientHeight
    : menuClientHeight;
   result.width = menuXOffset;
   result.height = commonClientHeight + itemInfo.clientTop - menuYOffset;
   result.left = x;
   if(toTheLeft)
    result.left += menuClientWidth + menuXOffset;
   result.top = y + menuYOffset;
   if(toTheTop)
    result.top += menuClientHeight - result.height;
  }
  else {
   var itemWidth = itemInfo.clientWidth;
   if(this.IsDropDownItem(indexPath))
    itemWidth = this.GetItemContentElement(indexPath).clientWidth;
   var commonClientWidth = itemWidth < menuClientWidth
    ? itemWidth
    : menuClientWidth;
   result.width = commonClientWidth + itemInfo.clientLeft - menuXOffset;
   result.height = menuYOffset;
   result.left = x + menuXOffset;
   if(toTheLeft)
    result.left += menuClientWidth - result.width;
   result.top = y;
   if(toTheTop)
    result.top += menuClientHeight + menuYOffset;
  }
  return result;
 },
 DoHidePopupMenu: function(evt, element) {
  this.DoHidePopupMenuBorderCorrector(element);
  this.DoHidePopupMenuIFrame(element);
  var menuElement = this.GetMenuMainElement(element);
  ASPx.PopupUtils.StopAnimation(element, menuElement);
  ASPx.SetElementVisibility(element, false);
  ASPx.SetElementDisplay(element, false);
  this.CancelSubMenuItemHoverItem(element);
  aspxGetMenuCollection().UnregisterVisiblePopupMenu(this.name, element.id);
  this.popupCount--;
  var indexPath = this.GetIndexPathById(element.id, true);
  this.DoResetScrolling(element, indexPath);
  this.RaiseCloseUp(indexPath);
 },
 DoResetScrolling: function(element, indexPath) {
  var scrollHelper = this.GetScrollHelper(indexPath);
  if(scrollHelper) {
   element.style.height = "";
   scrollHelper.ResetScrolling();
  }
 },
 DoHidePopupMenuIFrame: function(element) {
  if(!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(iFrame)
   ASPx.SetElementDisplay(iFrame, false);
 },
 DoHidePopupMenuBorderCorrector: function(element) {
  var borderCorrectorElement = element.borderCorrectorElement;
  if(borderCorrectorElement) {
   ASPx.SetElementVisibility(borderCorrectorElement, false);
   ASPx.SetElementDisplay(borderCorrectorElement, false);
   element.borderCorrectorElement = null;
  }
 },
 MarkPrecedingItem: function(currentItemName, className, isItemNameUsed) {
  this.MarkPrecedingItemCore(currentItemName, className, true, isItemNameUsed);
 },
 UnmarkPrecedingItem: function(currentItemName, className, isItemNameUsed) {
  this.MarkPrecedingItemCore(currentItemName, className, false, isItemNameUsed);
 },
 MarkPrecedingItemCore: function(currentItemName, className, addClass, isItemNameUsed) {
  var previousItem = this.GetPreviousItem(currentItemName, isItemNameUsed);
  if(previousItem) {
   var element = this.GetItemElement(previousItem.indexPath);
   if(addClass)
    ASPx.AddClassNameToElement(element, className);
   else
    ASPx.RemoveClassNameFromElement(element, className);
  }
 },
 SetHoverElement: function(element) {
  if(!this.IsStateControllerEnabled()) return;
  this.lockHoverEvents = true;
  ASPx.GetStateController().SetCurrentHoverElementBySrcElement(element);
  this.lockHoverEvents = false;
 },
 ApplySubMenuItemHoverItem: function(element, hoverItem, hoverElement) {
  if(!element.hoverItem && ASPx.GetElementDisplay(element)) {
   var newHoverItem = hoverItem.Clone();
   element.hoverItem = newHoverItem;
   element.hoverElement = hoverElement;
   newHoverItem.Apply(hoverElement);
  }
 },
 CancelSubMenuItemHoverItem: function(element) {
  if(element.hoverItem) {
   element.hoverItem.Cancel(element.hoverElement);
   element.hoverItem = null;
   element.hoverElement = null;
  }
 },
 ShowSubMenu: function(indexPath) {
  var element = this.GetMenuElement(indexPath);
  if(element != null) {
   var level = this.GetMenuLevel(indexPath);
   aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false, this.getExceptIdsForShowSubMenu(indexPath, element.id));
   if(!this.isSubMenuElementVisible(element) && this.IsItemEnabled(indexPath))
    this.DoShowPopupMenu(element, ASPx.InvalidPosition, ASPx.InvalidPosition, indexPath);
  }
  this.ClearAppearTimer();
 },
 getExceptIdsForShowSubMenu: function (itemIndexPath, exceptId) {
  return [exceptId];
 },
 isSubMenuElementVisible: function(subMenuElement) {
  return ASPx.GetElementDisplay(subMenuElement);
 },
 SelectItem: function(indexPath) {
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   ASPx.GetStateController().SelectElementBySrcElement(element);
   if(this.sideMenuModeOn)
    this.MarkPrecedingItem(indexPath, PRE_SELECTED_ELEMENT_CLASS_NAME, false);
  }
 },
 DeselectItem: function(indexPath) {
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   var hoverItem = null;
   var hoverElement = null;
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement && menuElement.hoverItem) {
    hoverItem = menuElement.hoverItem;
    hoverElement = menuElement.hoverElement;
    this.CancelSubMenuItemHoverItem(menuElement);
   }
   ASPx.GetStateController().DeselectElementBySrcElement(element);
   if(menuElement != null && hoverItem != null)
    this.ApplySubMenuItemHoverItem(menuElement, hoverItem, hoverElement);
   if(this.sideMenuModeOn)
    this.UnmarkPrecedingItem(indexPath, PRE_SELECTED_ELEMENT_CLASS_NAME, false);
  }
 },
 InitializeSelectedItem: function() {
  if(!this.allowSelectItem && !this.HasServerSideSelectedItem()) return;
  this.SelectItem(this.GetSelectedItemIndexPath());
  this.InitializeServerSideSelectedItem();
 },
 InitializeServerSideSelectedItem: function() {
  if(!this.allowSelectItem && this.sideMenuModeOn && this.HasServerSideSelectedItem())
   this.MarkPrecedingItem(this.serverSideSelectedItemPath, PRE_SELECTED_ELEMENT_CLASS_NAME, false);
 },
 HasServerSideSelectedItem: function() {
  return typeof (this.serverSideSelectedItemPath) !== "undefined";
 },
 GetSelectedItemIndexPath: function() {
  return this.selectedItemIndexPath;
 },
 SetSelectedItemInternal: function(indexPath, modifyHotTrackSelection) {
  if(modifyHotTrackSelection)
   this.SetHoverElement(null);
  this.DeselectItem(this.selectedItemIndexPath);
  this.selectedItemIndexPath = indexPath;
  var item = this.GetItemByIndexPath(indexPath);
  if(item == null || item.GetEnabled())
   this.SelectItem(this.selectedItemIndexPath);
  if(modifyHotTrackSelection) {
   var element = this.GetItemContentElement(indexPath);
   if(element != null)
    this.SetHoverElement(element);
  }
 },
 InitializeCheckedItems: function() {
  if(!this.allowCheckItems) return;
  var indexPathes = this.checkedState.split(";");
  for(var i = 0; i < indexPathes.length; i++) {
   if(indexPathes[i] != "") {
    this.checkedItems.push(indexPathes[i]);
    this.SelectItem(indexPathes[i]);
   }
  }
 },
 ChangeCheckedItem: function(indexPath) {
  this.SetHoverElement(null);
  var itemsGroup = this.GetItemsGroup(indexPath);
  if(itemsGroup != null) {
   if(itemsGroup.length > 1) {
    if(!this.IsCheckedItem(indexPath)) {
     for(var i = 0; i < itemsGroup.length; i++) {
      if(itemsGroup[i] == indexPath) continue;
      if(this.IsCheckedItem(itemsGroup[i])) {
       ASPx.Data.ArrayRemove(this.checkedItems, itemsGroup[i]);
       this.DeselectItem(itemsGroup[i]);
      }
     }
     this.SelectItem(indexPath);
     this.checkedItems.push(indexPath);
    }
   }
   else {
    if(this.IsCheckedItem(indexPath)) {
     ASPx.Data.ArrayRemove(this.checkedItems, indexPath);
     this.DeselectItem(indexPath);
    }
    else {
     this.SelectItem(indexPath);
     this.checkedItems.push(indexPath);
    }
   }
  }
  var element = this.GetItemContentElement(indexPath);
  if(element != null)
   this.SetHoverElement(element);
 },
 GetItemsGroup: function(indexPath) {
  for(var i = 0; i < this.itemCheckedGroups.length; i++) {
   if(ASPx.Data.ArrayIndexOf(this.itemCheckedGroups[i], indexPath) > -1)
    return this.itemCheckedGroups[i];
  }
  return null;
 },
 IsCheckedItem: function(indexPath) {
  return ASPx.Data.ArrayIndexOf(this.checkedItems, indexPath) > -1;
 },
 UpdateStateObject: function(){
  this.UpdateStateObjectWithObject({ selectedItemIndexPath: this.selectedItemIndexPath, checkedState: this.GetCheckedState() });
 },
 GetCheckedState: function() {
  var state = "";
  for(var i = 0; i < this.checkedItems.length; i++) {
   state += this.GetCheckedItemInfo(this.checkedItems[i]);
   if(i < this.checkedItems.length - 1)
    state += ";";
  }
  return state;
 },
 GetCheckedItemInfo: function(itemIndexPath) {
  return itemIndexPath;
 },
 GetAnimationVerticalDirection: function(indexPath, popupPosition, isVertical) {
  var verticalDirection = (this.IsRootItem(indexPath) && !isVertical) ? -1 : 0;
  if(popupPosition.isInverted) verticalDirection *= -1;
  return verticalDirection;
 },
 GetAnimationHorizontalDirection: function(indexPath, popupPosition, isVertical) {
  var horizontalDirection = (this.IsRootItem(indexPath) && !isVertical) ? 0 : -1;
  if(popupPosition.isInverted) horizontalDirection *= -1;
  return horizontalDirection;
 },
 StartAnimation: function(animationDivElement, indexPath, horizontalPopupPosition, verticalPopupPosition, isVertical) {
  this.inSubmenuShowAnimation = true;
  var element = this.GetMenuMainElement(animationDivElement);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  ASPx.PopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY, this.OnAnimationFinished.aspxBind(this), false);
  var verticalDirection = this.GetAnimationVerticalDirection(indexPath, verticalPopupPosition, isVertical);
  var horizontalDirection = this.GetAnimationHorizontalDirection(indexPath, horizontalPopupPosition, isVertical);
  var yPos = verticalDirection * element.offsetHeight;
  var xPos = horizontalDirection * element.offsetWidth;
  ASPx.SetStyles(element, { left: xPos, top: yPos });
  ASPx.SetElementVisibility(animationDivElement, true);
  if(this.enableSubMenuFullWidth)
   this.ApplySubMenuFullWidth(animationDivElement);
  this.DoShowPopupMenuIFrame(animationDivElement, clientX, clientY, 0, 0, indexPath);
  this.DoShowPopupMenuBorderCorrector(animationDivElement, clientX, clientY, indexPath,
   horizontalPopupPosition.isInverted, verticalPopupPosition.isInverted);
  ASPx.PopupUtils.StartSlideAnimation(animationDivElement, element, this.GetMenuIFrameElement(indexPath), this.slideAnimationDuration, this.enableSubMenuFullWidth, false);
 },
 OnAnimationFinished: function() {
  window.setTimeout(function() { this.inSubmenuShowAnimation = false; }.aspxBind(this), 100);
 },
 OnItemClick: function(indexPath, evt) {
  var sourceElement = ASPx.Evt.GetEventSource(evt);
  var clickedLinkElement = ASPx.GetParentByTagName(sourceElement, "A");
  var isLinkClicked = (clickedLinkElement != null && clickedLinkElement.href != ASPx.AccessibilityEmptyUrl);
  var element = this.GetItemContentElement(indexPath);
  var linkElement = (element != null) ? (element.tagName === "A" ? element : ASPx.GetNodeByTagName(element, "A", 0)) : null;
  if(linkElement != null && linkElement.href == ASPx.AccessibilityEmptyUrl)
   linkElement = null;
  if(this.allowSelectItem)
   this.SetSelectedItemInternal(indexPath, true);
  if(this.allowCheckItems || this.canCheckItem(element))
   this.ChangeCheckedItem(indexPath);
  this.DoItemClick(indexPath, isLinkClicked || (linkElement != null), evt);
  if(!isLinkClicked && linkElement != null && !(ASPx.Browser.WebKitTouchUI && this.HasChildren(indexPath)))
   ASPx.Url.NavigateByLink(linkElement);
 },
 canCheckItem: function (itemElement) {
  return false;
 },
 OnItemDropDownClick: function(indexPath, evt) {
  if(this.IsItemEnabled(indexPath)) {
   if(this.IsAdaptiveItem(indexPath))
    this.toggleAdaptiveSubmenu(indexPath);
   else
    this.keyboardHelper.ShowSubMenuAccessible(indexPath);
  }
 },
 toggleAdaptiveSubmenu: function(indexPath) {
  var element = this.GetMenuElement(indexPath);
  if(ASPx.GetElementDisplay(element) && !this.IsAdaptiveItemAnimationActive())
   this.DoHidePopupMenu(null, element);
  else
   this.keyboardHelper.ShowSubMenuAccessible(indexPath);
 },
 AfterItemOverAllowed: function(hoverItem) {
  return hoverItem.name != "" && !this.lockHoverEvents;
 },
 OnAfterItemOver: function(hoverItem, hoverElement) {
  if(!this.AfterItemOverAllowed(hoverItem)) return;
  if(!this.showSubMenus) {
   this.savedCallbackHoverItem = hoverItem;
   this.savedCallbackHoverElement = hoverElement;
   return;
  }
  this.ClearDisappearTimer();
  this.ClearAppearTimer();
  var indexPath = this.GetMenuIndexPathById(hoverItem.name);
  if(indexPath == "") {
   indexPath = this.GetItemIndexPathById(hoverItem.name);
   var canShowSubMenu = true;
   if(this.IsDropDownItem(indexPath)) {
    var popOutImageElement = this.GetItemPopOutElement(indexPath);
    if(popOutImageElement != null && popOutImageElement != hoverElement) {
     hoverItem.needRefreshBetweenElements = true;
     canShowSubMenu = false;
    }
   }
   var preventSubMenu = !(canShowSubMenu && hoverItem.enabled && hoverItem.kind == ASPx.HoverItemKind);
   this.SetAppearTimer(indexPath, preventSubMenu);
   this.RaiseItemMouseOver(indexPath);
  }
 },
 OnBeforeItemOver: function(hoverItem, hoverElement) {
  if(ASPx.Browser.NetscapeFamily && ASPx.IsExists(hoverElement.offsetParent) &&
    hoverElement.offsetParent.style.borderCollapse == "collapse") {
   hoverElement.offsetParent.style.borderCollapse = "separate";
   hoverElement.offsetParent.style.borderCollapse = "collapse";
  }
  var indexPath = this.GetItemIndexPathById(hoverItem.name);
  var element = this.GetMenuElement(indexPath);
  if(element) this.CancelSubMenuItemHoverItem(element);
 },
 OnItemOverTimer: function(indexPath, preventSubMenu) {
  var element = this.GetMenuElement(indexPath);
  if(element == null || preventSubMenu) {
   var level = this.GetMenuLevel(indexPath);
   aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false, this.getExceptIdsForItemOverTimer(indexPath));
  }
  if(this.IsAppearTimerActive() && !preventSubMenu) {
   this.ClearAppearTimer();
   if(this.GetItemContentElement(indexPath) != null || this.GetItemPopOutElement(indexPath) != null) {
    this.ShowSubMenu(indexPath);
   }
  }
 },
 getExceptIdsForItemOverTimer: function (indexPath) { return [""]; },
 OnBeforeItemDisabled: function(disabledItem, disabledElement) {
  this.ClearAppearTimer();
  var indexPath = this.GetItemIndexPathById(disabledElement.id);
  if(indexPath != "") {
   var element = this.GetMenuElement(indexPath);
   if(element != null) this.DoHidePopupMenu(null, element);
  }
 },
 OnAfterItemOut: function(hoverItem, hoverElement, newHoverElement) {
  if(!this.showSubMenus) {
   this.savedCallbackHoverItem = null;
   this.savedCallbackHoverElement = null;
  }
  if(hoverItem.name == "" || this.lockHoverEvents) return;
  if(hoverItem.IsChildElement(newHoverElement)) return;
  var indexPath = this.GetItemIndexPathById(hoverItem.name);
  var element = this.GetMenuElement(indexPath);
  this.ClearDisappearTimer();
  this.ClearAppearTimer();
  if(element == null || !ASPx.GetIsParent(element, newHoverElement))
   this.SetDisappearTimer();
  if(element != null)
   this.ApplySubMenuItemHoverItem(element, hoverItem, hoverElement);
  if(indexPath != "")
   this.RaiseItemMouseOut(indexPath);
 },
 OnItemOutTimer: function() {
  if(this.IsDisappearTimerActive()) {
   this.ClearDisappearTimer();
   if(aspxGetMenuCollection().CheckFocusedElement())
    this.SetDisappearTimer();
   else
    this.OnHideByItemOut();
  }
 },
 OnHideByItemOut: function() {
  aspxGetMenuCollection().DoHidePopupMenus(null, 0, this.name, true, "");
 },
 TryFocusItem: function(itemIndex) {
  var item = this.GetItem(itemIndex);
  if(item.GetVisible() && item.GetEnabled()) {
   this.FocusItemByIndexPath(item.GetIndexPath());
   return true;
  }
  return false;
 },
 Focus: function() {
  if(this.rootItem != null) { 
   for(var i = 0; i < this.GetItemCount() ; i++) {
    if(this.TryFocusItem(i))
     return true;
   }
  }
  else
   this.keyboardHelper.FocusNextItem("-1");
 },
 FocusLastItem: function() {
  if(this.rootItem != null) { 
   for(var i = this.GetItemCount() - 1; i >= 0; i--) {
    if(this.TryFocusItem(i))
     return true;
   }
  }
  else
   this.keyboardHelper.FocusPrevItem(this.GetItemCount() - 1);
 },
 FocusItemByIndexPath: function(indexPath) {
  this.keyboardHelper.FocusItemByIndexPath(indexPath);
 },
 OnFocusedItemKeyDown: function(evt, focusedItem) {
  this.keyboardHelper.OnFocusedItemKeyDown(evt, focusedItem);
 },
 ProcessLostFocus: function(evt) {
  if(!this.isContextMenu || !this.accessibilityCompliant) return;
  if(this.accessibleFocusElement)
   this.accessibleFocusElement.focus();
  this.Hide();
  if(evt)
   ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnCallback: function(result) {
  ASPx.InitializeScripts(); 
  this.InitializeScrollableMenus();
  for (var indexPath in result) {
   if(result.hasOwnProperty(indexPath)) {
    var menuElement = this.GetMenuElement(indexPath);
    if(menuElement) {
     var menuResult = result[indexPath];
     if(aspxGetMenuCollection().IsSubMenuVisible(menuElement.id))
      this.ShowPopupSubMenuAfterCallback(menuElement, menuResult);
     else
      this.SetSubMenuInnerHtml(menuElement, menuResult);
    }
   }
  }
  this.ClearVerticalAlignedElementsCache();
  this.CorrectVerticalAlignment(ASPx.AdjustHeight, this.GetPopOutElements, "PopOut");
  this.CorrectVerticalAlignment(ASPx.AdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
  this.InitializeInternal(false);
  if(!this.showSubMenus) {
   this.showSubMenus = true;
   if(this.savedCallbackHoverItem != null && this.savedCallbackHoverElement != null)
    this.OnAfterItemOver(this.savedCallbackHoverItem, this.savedCallbackHoverElement);
   this.savedCallbackHoverItem = null;
   this.savedCallbackHoverElement = null;
  }
 },
 SetSubMenuInnerHtml: function(menuElement, html) {
  ASPx.SetInnerHtml(this.GetMenuMainElement(menuElement), html);
  this.dropElementsCache = true;
  this.renderHelper.InlineInitializePopupMenuMenuElement(menuElement, this.GetIndexPathById(menuElement.id, true));
  this.renderHelper.CalculateSubMenu(menuElement, true);
 },
 ShowPopupSubMenuAfterCallback: function(element, callbackResult) {
  var indexPath = this.GetIndexPathById(element.id, true);
  var currentX = ASPx.PxToInt(element.style.left);
  var currentY = ASPx.PxToInt(element.style.top);
  var showedToTheTop = this.ShowedToTheTop(element, indexPath);
  var showedToTheLeft = this.ShowedToTheLeft(element, indexPath);
  ASPx.SetStyles(element, {
   left: ASPx.InvalidPosition, top: ASPx.InvalidPosition
  });
  this.SetSubMenuInnerHtml(element, callbackResult);
  var vertPos = this.GetClientSubMenuPos(element, indexPath, ASPx.InvalidPosition, this.IsVertical(indexPath), false);
  var clientY = vertPos.position;
  var toTheTop = vertPos.isInverted;
  if(!this.IsVertical(indexPath) && showedToTheTop != toTheTop) {
   clientY = currentY;
   toTheTop = showedToTheTop;
  }
  clientY += this.GetScrollingCorrection(element, indexPath, clientY);
  ASPx.SetStyles(element, { left: currentX, top: clientY });
  if(this.enableSubMenuFullWidth)
   this.ApplySubMenuFullWidth(element);
  this.DoShowPopupMenuIFrame(element, currentX, clientY, ASPx.InvalidDimension, ASPx.InvalidDimension, indexPath);
  this.DoShowPopupMenuBorderCorrector(element, currentX, clientY, indexPath, showedToTheLeft, toTheTop);
  ASPx.GetControlCollection().AdjustControls(element);
 },
 GetScrollingCorrection: function(element, indexPath, clientY) {
  var scrollHelper = this.GetScrollHelper(indexPath);
  if(scrollHelper) {
   var yClientCorrection = this.GetScrollSubMenuYCorrection(element, scrollHelper, clientY);
   if(yClientCorrection > 0)
    return yClientCorrection;
  }
  return 0;
 },
 ShowedToTheTop: function(element, indexPath) {
  var currentY = ASPx.PxToInt(element.style.top);
  var parentBottomY = this.GetSubMenuYPosition(indexPath, this.IsVertical(indexPath));
  return currentY < parentBottomY;
 },
 ShowedToTheLeft: function(element, indexPath) {
  var currentX = ASPx.PxToInt(element.style.left);
  var parentX = this.GetSubMenuXPosition(indexPath, this.IsVertical(indexPath));
  return currentX < parentX;
 },
 CreateItems: function(items) {
  if (items.length == 0)
   return;
  if(this.NeedCreateItemsOnClientSide())
   this.CreateClientItems(items);
  else
   this.CreateServerItems(items);
 },
 AddItem: function(item) {
  this.CreateClientItems([item]);
 },
 CreateClientItems: function(items) {
  this.PreInitializeClientMenuItems();
  this.rootItem.CreateItems(items);
  this.RenderItems(this.rootItem.items);
  this.InitializeClientItems();
 },
 CreateServerItems: function(items) {
  this.CreateRootItemIfRequired();
  this.rootItem.CreateItems(items);
 },
 PreInitializeClientMenuItems: function() {
  if(!this.rootMenuSample)
   this.InitializeMenuSamples();
  this.CreateRootItemIfRequired();
  if(!this.renderData)
   this.CreateRenderData();
 },
 InitializeClientItems: function() {
  this.dropElementsCache = true;
  this.renderHelper.InlineInitializeElements();
  this.ApplyItemsProperties(this.rootItem.items);
  this.InitializeEnabledAndVisible(true);
  if(this.isPopupMenu)
   this.renderHelper.CalculateSubMenu(this.GetMainElement(), true);
  else
   this.renderHelper.CalculateMenuControl(this.GetMainElement(), true);
 },
 ApplyItemsProperties: function(items) {
  var itemsCount = items.length;
  if(itemsCount == 0)
   return;
  for(var i = 0; i < itemsCount; i++) {
   var item = items[i];
   this.ApplyItemProperties(item);
   this.ApplyItemsProperties(item.items);
  }
 },
 ApplyItemProperties: function(item) {
  var indexPath = item.GetIndexPath();
  if(item.imageUrl)
   this.SetItemImageUrl(indexPath, item.imageUrl);
  if(item.imageClassName) {
   this.AddItemImageClassName(indexPath, item.imageClassName);
   this.AddItemAdditionalImageClassName(indexPath, item.imageClassName);
  }
  if(item.navigateUrl)
   this.SetItemNavigateUrl(indexPath, item.navigateUrl, item.target);
  if(item.tooltip != "")
   this.SetItemTooltip(indexPath, item.tooltip);
  this.FindTextNode(indexPath).parentNode.innerHTML = this.HtmlEncode(item.text);
  this.SetItemChecked(indexPath, item.checked);
  if(item.textTemplate)
   this.SetItemTextTemplate(indexPath, item.textTemplate);
 },
 ProcessItemGroupName: function(item, groupName) {
  if(this.allowSelectItem || !groupName)
   return;
  this.allowCheckItems = true;
  var groupNames = this.itemCheckedGroups.groupNames;
  if(groupNames[groupName])
   groupNames[groupName].push(item.indexPath);
  else {
   groupNames[groupName] = [item.indexPath];
   this.itemCheckedGroups.push(groupNames[groupName]);
  }
  item.checkedGroup = groupNames[groupName];
 },
 CreateRootItemIfRequired: function() {
  if(!this.rootItem) {
   var itemType = this.GetClientItemType();
   this.rootItem = new itemType(this, null, 0, "");
  }
 },
 ClearRootMenuElement: function() {
  var wrapperElement = this.GetMainElement().parentNode;
  wrapperElement.innerHTML = "";
  wrapperElement.appendChild(this.rootMenuSample.cloneNode(true));
  this.renderHelper.InlineInitializeScrollElements("", this.GetMainElement());
 }, 
 NeedAppendToRenderData: function(item) {
  return this.NeedCreateItemsOnClientSide() && item.visible || typeof(item.visible) == "undefined";
 },
 ClearItems: function() {
  this.PreInitializeClientMenuItems();
  this.ClearRootMenuElement();
  this.ClearRenderData();
  this.rootItem.items = [];
  this.checkedItems = [];
 },
 GetSampleNode: function(sampleHtml) {
  return ASPx.CreateHtmlElementFromString(sampleHtml);
 },
 GetParentItem: function(rootItemIndexPath) {
  if(!rootItemIndexPath)
   return this.rootItem;
  return this.GetItemByIndexPath(rootItemIndexPath);
 },
 RenderItems: function(items) {
  for(var i=0; i < items.length; i++) {
   var item = items[i];
   this.RenderItemIfRequired(item);
   this.RenderItems(item.items);
  }
 },
 RenderItemIfRequired: function(item) {
  if(!this.GetItemElement(item.indexPath)) {
   var isRootItem = !this.GetItemElement(item.parent.indexPath);
   var rootMenuElement = this.GetOrRenderRootItem(item, isRootItem);
   this.RenderItemInternal(rootMenuElement, item, isRootItem);
   this.ApplyStylesToRenderItem(item, isRootItem);
  }
 },
 ApplyStylesToRenderItem: function(item, isRootItem) {
  var styles = JSON.parse(JSON.stringify(isRootItem ? this.samples.itemsStyles : this.samples.subitemsStyles));
  var hoverStyle = styles.hover;
  var disabledStyle = styles.disable;
  var selectedStyle = styles.select;
  var checkedStyle = styles.check;
  var itemElementId = this.GetItemElementId(item.indexPath);
  if(item.styles && item.styles.ho) {
   var itemHover = item.styles.ho;
   if(!!itemHover.style)
    hoverStyle.cssTexts[0] = itemHover.style;
   if(!!itemHover.cssClass)
    hoverStyle.classNames[0] += " " + itemHover.cssClass;
  }
  if(item.styles && item.styles.st) {
   var itemElement = this.GetItemElement(item.indexPath);
   var style = item.styles.st;
   itemElement.setAttribute("style", style.style);
   if(!!style.cssClass)
    ASPx.AddClassNameToElement(itemElement, style.cssClass);
  }
  ASPx.GetStateController().AddHoverItem(itemElementId, hoverStyle.classNames || [MenuCssClasses.ItemHovered], hoverStyle.cssTexts || [""], hoverStyle.postfixes || [""], item.imageHottrackSrc ? [item.imageHottrackSrc] : null, [Constants.ImagePostfix, Constants.PopupImagePostfix], false);
  ASPx.GetStateController().AddDisabledItem(itemElementId, disabledStyle.classNames || [MenuCssClasses.Disabled], disabledStyle.cssTexts || [""], disabledStyle.postfixes || [""], null, null, false);
  if(selectedStyle && this.allowSelectItem)
   ASPx.GetStateController().AddSelectedItem(itemElementId, selectedStyle.classNames || [MenuCssClasses.ItemSelected], selectedStyle.cssTexts || [""], selectedStyle.postfixes || [""], null, null, false);
  else if (checkedStyle && this.allowCheckItems && item.checkedGroup.length) {
   var checkedClassName = null;
   if(!item.imageClassName)
    checkedClassName = [this.samples.checkedClassName];
   ASPx.GetStateController().AddSelectedItem(itemElementId, checkedStyle.classNames || [MenuCssClasses.ItemChecked], checkedStyle.cssTexts || [""], checkedStyle.postfixes || [""], checkedClassName, ['Img'], false);
  }
 },
 GetOrRenderRootItem: function(item, isRootItem) {
  if(!isRootItem) {
   var rootMenuElement = this.GetMenuElement(item.parent.indexPath);
   return rootMenuElement ? rootMenuElement : this.RenderSubMenuItem(item.parent.indexPath);
  } else
   return this.GetMenuElement("");
 },
 RenderItemInternal: function(rootItem, item, isRootItem) {
  var contentElement = this.renderHelper.GetContentElement(rootItem);
  var element = this.CreateItemElement(item, isRootItem);
  this.RenderSeparatorElementIfRequired(contentElement, item);
  this.RenderSpaceElementIfRequired(contentElement, item);
  contentElement.appendChild(element);
 },
 RenderSeparatorElementIfRequired: function(rootItem, item) {
  if(item.beginGroup && item.index > 0) {
   var separatorElement = this.CreateSeparatorElement(item.indexPath);
   rootItem.appendChild(separatorElement);
  }
 },
 RenderSpaceElementIfRequired: function(rootItem, item) {
  if(!item.beginGroup && item.index > 0 && rootItem.childNodes.length > 0) {
   if(this.samples.spacing) {
    var spacingElement = this.CreateSpacingElement(item.indexPath);
    rootItem.appendChild(spacingElement);
   }
  }
 },
 RenderSubMenuItem: function(indexPath) {
  var subMenuElement = this.CreateSubMenuElement(indexPath);
  this.GetMainElement().parentElement.appendChild(subMenuElement);
  return subMenuElement;
 },
 HasSeparatorOnCurrentPosition: function(itemElements, position) {
  return itemElements[position - 1 > 0 ? position - 1 : 0].className.indexOf(MenuCssClasses.Separator) > -1;
 },
 CreateItemElement: function(item, isRootItem) {
  var itemSample = isRootItem ? this.GetRootItemSample(item) : this.GetSubitemSample(item);
  var itemElement = itemSample.cloneNode(true);
  itemElement.id = this.GetItemElementId(item.indexPath);
  return itemElement;
 },
 GetRootItemSample: function(item) {
  return this.GetItemSample(this.samples.rootItems, item);
 },
 GetSubitemSample: function(item) {
  return this.GetItemSample(this.samples.submenuItems, item);
 },
 GetItemSample: function(samples, item) {
  var key = this.sampleItemsFlags.TextOnly;
  if(item.items.length > 0)
   key = key | this.sampleItemsFlags.SubItems;
  if(item.imageUrl)
   key = key | this.sampleItemsFlags.Image;
  if(item.navigateUrl)
   key = key | this.sampleItemsFlags.NavigateUrl;
  if(item.dropDownMode)
   key = key | this.sampleItemsFlags.DropDownMode;
  if(item.checkedGroup.length)
   key = key | this.sampleItemsFlags.CheckBox;
  if(item.imageClassName)
   key = key | this.sampleItemsFlags.ImageClassName;
  if(item.isSvg)
   key = key | this.sampleItemsFlags.Svg;
  return samples[key];
 },
 CreateSpacingElement: function(indexPath) {
  var item = this.samples.spacing.cloneNode();
  item.id = this.GetItemIndentElementId(indexPath);
  return item;
 },
 CreateSeparatorElement: function(indexPath) {
  var item = this.samples.separator.cloneNode(true);
  item.id = this.GetItemSeparatorElementId(indexPath);
  return item;
 },
 CreateSubMenuElement: function(indexPath) {
  var subMenu = this.samples.submenu.cloneNode(true);
  subMenu.id =  this.name + Constants.MMIdSuffix + indexPath + "_";
  return subMenu;
 },
 AppendToRenderData: function(rootItemIndexPath, index) {
  if(rootItemIndexPath) {
   if(!this.renderData[rootItemIndexPath])
    this.renderData[rootItemIndexPath] = [[index]];
   this.renderData[rootItemIndexPath][index] = [index];
  } else {
   this.renderData[""].push([[index]]);
  }
 },
 CreateRenderData: function() {
  this.renderData = {"" : []};
 },
 ClearRenderData: function() {
  this.renderData = null;
 },
 GetClientItemType: function() {
  return ASPxClientMenuItem;
 },
 GetItemByIndexPath: function(indexPath) {
  var item = this.rootItem;
  if(indexPath != "" && item != null) {
   var indexes = this.GetItemIndexes(indexPath);
   for(var i = 0; i < indexes.length; i++)
    item = item.GetItem(indexes[i]);
  }
  return item;
 },
 GetLinkElementByIndexPath: function(indexPath) {
  var itemElement = this.GetItemElement(indexPath);
  return this.renderHelper.GetItemLinkElement(itemElement);
 },
 SetItemChecked: function(indexPath, checked) {
  var itemsGroup = this.GetItemsGroup(indexPath);
  if(itemsGroup != null) {
   if(!checked && this.IsCheckedItem(indexPath)) {
    ASPx.Data.ArrayRemove(this.checkedItems, indexPath);
    this.DeselectItem(indexPath);
   }
   else if(checked && !this.IsCheckedItem(indexPath)) {
    if(itemsGroup.length > 1) {
     for(var i = 0; i < itemsGroup.length; i++) {
      if(itemsGroup[i] == indexPath) continue;
      if(this.IsCheckedItem(itemsGroup[i])) {
       ASPx.Data.ArrayRemove(this.checkedItems, itemsGroup[i]);
       this.DeselectItem(itemsGroup[i]);
      }
     }
    }
    this.SelectItem(indexPath);
    this.checkedItems.push(indexPath);
   }
   if(this.accessibilityCompliant) {
    var link = this.GetLinkElementByIndexPath(indexPath);
    if(link)
     ASPx.Attr.SetAttribute(link, "aria-checked", checked ? "true" : "false");
   }
  }
 },
 ChangeItemEnabledAttributes: function(indexPath, enabled) {
  this.renderHelper.ChangeItemEnabledAttributes(this.GetItemElement(indexPath), enabled, this.accessibilityCompliant);
 },
 IsItemEnabled: function(indexPath) {
  var item = this.GetItemByIndexPath(indexPath);
  return (item != null) ? item.GetEnabled() : true;
 },
 SetItemEnabled: function(indexPath, enabled, initialization) {
  if(indexPath == "" || !this.GetItemByIndexPath(indexPath).enabled) return;
  if(!enabled) {
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.DeselectItem(indexPath);
  }
  if(!initialization || !enabled)
   this.ChangeItemEnabledStateItems(indexPath, enabled);
  this.ChangeItemEnabledAttributes(indexPath, enabled);
  if(enabled) {
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.SelectItem(indexPath);
  }
 },
 ChangeItemEnabledStateItems: function(indexPath, enabled) {
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemElement(indexPath);
  if(element)
   ASPx.GetStateController().SetElementEnabled(element, enabled);
 },
 GetItemImageUrl: function(indexPath) {
  var image = this.GetItemImage(indexPath);
  if(image)
   return image.src;
  return "";
 },
 SetItemImageUrl: function(indexPath, url) {
  var image = this.GetItemImage(indexPath);
  if(image)
   image.src = url;
 },
 AddItemImageClassName: function(indexPath, className) {
  var image = this.GetItemImage(indexPath);
  if(image) {
   var accessibilityElement = image.parentNode;
   if(accessibilityElement.tagName == "SPAN")
    ASPx.AddClassNameToElement(accessibilityElement, className);
   else
    ASPx.AddClassNameToElement(image, className);
  }
  else {
   var svgElement = this.getSvgElement(indexPath);
   if(svgElement) {
    ASPx.AddClassNameToElement(svgElement, className);
    var useElement = ASPx.GetNodeByTagName(svgElement, "use", 0);
    useElement.setAttributeNS('http://www.w3.org/1999/xlink', 'href', "#" + className);
   }
  }
 },
 AddItemAdditionalImageClassName: function(indexPath) {
 },
 getSvgElement: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   var svgElement = ASPx.GetNodeByTagName(element, "svg", 0);
   if(svgElement != null) {
    return svgElement;
   }
  }
 },
 GetItemImage: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   var img = ASPx.GetNodeByTagName(element, "IMG", 0);
   if(img != null)
    return img;
  }
 },
 GetItemNavigateUrl: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null && element.tagName === "A")
   return ASPx.Attr.GetAttribute(element, "savedhref") || element.href;
  if(element != null) {
   var link = ASPx.GetNodeByTagName(element, "A", 0);
   if(link != null)
    return ASPx.Attr.GetAttribute(link, "savedhref") || link.href;
  }
  return "";
 },
 SetUrl: function(link, url, target) {
  if(link != null) {
   if(ASPx.Attr.IsExistsAttribute(link, "savedhref"))
    ASPx.Attr.SetAttribute(link, "savedhref", url);
   else if(ASPx.Attr.IsExistsAttribute(link, "href"))
    link.href = url;
   if(!!target)
    link.target = target;
  }
 },
 SetItemNavigateUrl: function(indexPath, url, target) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   if(element.tagName === "A")
    this.SetUrl(element, url, target);
   else {
    this.SetUrl(ASPx.GetNodeByTagName(element, "A", 0), url, target);
    this.SetUrl(ASPx.GetNodeByTagName(element, "A", 1), url, target);
   }
  }
 },
 FindTextNode: function(indexPath) {
  var contentElement = this.GetItemContentElement(indexPath);
  if(contentElement) {
   var link = this.GetLinkElementByIndexPath(indexPath);
   if(link)
    return ASPx.GetNormalizedTextNode(link);
   var spans = contentElement.querySelectorAll("span"),
    titleSpan = spans[spans.length - 1];
   if(titleSpan)
    return ASPx.GetNormalizedTextNode(titleSpan);
   return ASPx.GetNormalizedTextNode(contentElement);
  }
  return null;
 },
 GetItemText: function(indexPath) {
  var textNode = this.FindTextNode(indexPath);
  return textNode
   ? ASPx.Str.Trim(textNode.nodeValue) 
   : "";
 },
 SetItemText: function(indexPath, text) {
  var textNode = this.FindTextNode(indexPath);
  if(textNode) {
   textNode.nodeValue = text;
   var menuElement = this.GetMenuElement(this.GetParentIndexPath(indexPath));
   if(menuElement && (!this.IsRootItem(indexPath) || this.isPopupMenu))
    this.renderHelper.CalculateSubMenu(menuElement, true);
   if(this.IsRootItem(indexPath) && !this.isPopupMenu) {
    var itemElement = this.GetItemElement(indexPath);
    if(itemElement)
     this.renderHelper.CalculateItemMinSize(itemElement, true);
   }
   this.AdjustControl();
  }
 },
 SetItemTextTemplate: function(indexPath, textTemplate) {
  var contentElement = this.GetItemContentElement(indexPath),
   textElement = ASPx.GetChildByClassName(contentElement, MenuCssClasses.ItemTextElement, 1),
   container = document.createElement("DIV");
  container.innerHTML = textTemplate;
  contentElement.replaceChild(container.firstChild, textElement);
 },
 SetItemTooltip: function(indexPath, tooltip) {
  var itemElement = this.GetItemElement(indexPath);
  if(itemElement && tooltip)
   itemElement.title = tooltip;
 },
 SetItemVisible: function(indexPath, visible, initialization) {
  var item = this.GetItemByIndexPath(indexPath);
  if(indexPath == "" || !item.visible) return;
  if(visible && initialization) return;
  var element = this.GetItemElement(indexPath);
  if(element != null)
   this.SetElementDisplay(element, visible);
  this.SetIndentsVisiblility(indexPath);
  var parentIndexPath = this.GetParentIndexPath(indexPath);
  if(this.isPopupMenu && this.inPopUpHandler)
   this.postponeSetItemVisible(parentIndexPath);
  else
   this.SetSeparatorsVisiblility(parentIndexPath);
  if(!this.IsItemInAdaptiveMenu(item))
   this.UpdateItemCssClasses(indexPath, visible);
  var parent = this.GetItemByIndexPath(indexPath).parent;
  var parentHasVisibleItems = this.HasVisibleItems(parent);
  if(this.IsRootItem(indexPath) && !this.isPopupMenu) {
   if(this.clientVisible)
    this.SetElementDisplay(this.GetMainElement(), parentHasVisibleItems);
  }
  else
   this.SetPopOutElementVisible(parent.indexPath, parentHasVisibleItems);
  if(this.GetMenuLevel(parentIndexPath) !== 0 || this.isPopupMenu && !this.inPopUpHandler)
   this.calculateSubMenuByIndexPath(parentIndexPath);
  if(this.IsRootItem(indexPath) && !this.isPopupMenu) 
   this.renderHelper.CalculateMenuControl(this.GetMainElement(), true);
 },
 SetElementDisplay: function (element, visible) {
  ASPx.SetElementDisplay(element, visible);
 },
 prepareSideMenuCssClasses: function(addClass) {
  if(this.sideMenuModeOn) {
   this.MarkPrecedingItemCore(this.GetSelectedItemIndexPath(), PRE_SELECTED_ELEMENT_CLASS_NAME, addClass, false);
   if(this.hoverItemName)
    this.MarkPrecedingItemCore(this.hoverItemName, PRE_HOVERED_ELEMENT_CLASS_NAME, addClass, true);
  }
 },
 calculateSubMenuByIndexPath: function(indexPath) {
  var menuElement = this.GetMenuElement(indexPath);
  if(menuElement)
   this.renderHelper.CalculateSubMenu(menuElement, true);
 },
 postponeSetItemVisible: function(indexPath) {
  if(!this.postponedIndexPath)
   this.postponedIndexPath = [];
  for(var i = 0; i < this.postponedIndexPath.length; i++) {
   if(this.postponedIndexPath[i] === indexPath)
    return;
  }
  this.postponedIndexPath.push(indexPath);
 },
 postponedSetItemVisible: function() {
  if(!!this.postponedIndexPath && this.postponedIndexPath.length > 0)
   ASPx.Data.ForEach(this.postponedIndexPath, function(indexPath) {
    this.SetSeparatorsVisiblility(indexPath);
    this.calculateSubMenuByIndexPath(indexPath);
   }.aspxBind(this));
  this.postponedIndexPath = [];
 },
 SetIndentsVisiblility: function(indexPath) {
  var parent = this.GetItemByIndexPath(indexPath).parent;
  for(var i = 0; i < parent.GetItemCount(); i++) {
   var item = parent.GetItem(i);
   var separatorVisible = this.HasPrevVisibleItems(parent, i) && item.GetVisible();
   var element = this.GetItemIndentElement(item.GetIndexPath());
   if(element != null) ASPx.SetElementDisplay(element, separatorVisible);
  }
 },
 SetSeparatorsVisiblility: function(indexPath) {
  var parent = this.GetItemByIndexPath(indexPath);
  for(var i = 0; i < parent.GetItemCount(); i++) {
   var item = parent.GetItem(i);
   var separatorVisible = this.HasPrevVisibleItems(parent, i) && (item.GetVisible() || this.HasNextVisibleItemInGroup(parent, i));
   var element = this.GetItemSeparatorElement(item.GetIndexPath());
   if(element != null) ASPx.SetElementDisplay(element, separatorVisible);
  }
 },
 UpdateItemCssClasses: function(indexPath, visible) {
 },
 SetPopOutElementVisible: function(indexPath, visible) {
  var popOutElement = this.GetItemPopOutElement(indexPath);
  if(popOutElement)
   popOutElement.style.display = visible ? 'block' : 'none';
 },
 GetPrevVisibleItemInGroup: function(parent, index, skipItemsInAdaptiveMenu) {
  if(this.IsItemBeginsGroup(parent.GetItem(index)))
   return null;
  for(var i = index - 1; i >= 0; i--) {
   var item = parent.GetItem(i);
   if(item.GetVisible() && !this.IsAdaptiveItem(item.indexPath) && (!skipItemsInAdaptiveMenu || !this.IsItemInAdaptiveMenu(item)))
    return item;
   if(this.IsItemBeginsGroup(item))
    return null;
  }
  return null;
 },
 GetNextVisibleItemInGroup: function(parent, index, skipItemsInAdaptiveMenu) {
  for(var i = index + 1; i < parent.GetItemCount(); i++) {
   var item = parent.GetItem(i);
   if(this.IsItemBeginsGroup(item))
    return null;
   if(item.GetVisible() && !this.IsAdaptiveItem(item.indexPath) && (!skipItemsInAdaptiveMenu || !this.IsItemInAdaptiveMenu(item)))
    return item;
  }
  return null;
 },
 HasNextVisibleItemInGroup: function(parent, index, skipItemsInAdaptiveMenu) {
  return !!this.GetNextVisibleItemInGroup(parent, index, skipItemsInAdaptiveMenu);
 },
 IsItemBeginsGroup: function(item) {
  var itemSeparator = this.GetItemSeparatorElement(item.GetIndexPath());
  return itemSeparator && ASPx.ElementContainsCssClass(itemSeparator, this.getSeparatorCssClass());
 },
 getSeparatorCssClass: function() {
  return MenuCssClasses.Separator;
 },
 getAdaptiveMenuItemCssClass: function() {
  return MenuCssClasses.AdaptiveMenuItem;
 },
 getAdaptiveMenuItemSpacingCssClass: function() {
  return MenuCssClasses.AdaptiveMenuItemSpacing;
 },
 getAdaptiveMenuCssClass: function() {
  return MenuCssClasses.AdaptiveMenu;
 },
 IsItemInAdaptiveMenu: function(item) {
  return this.enableAdaptivity ? this.renderHelper.IsItemInAdaptiveMenu(item.index) : false;
 },
 HasVisibleItems: function(parent) {
  for(var i = 0; i < parent.GetItemCount() ; i++) {
   if(parent.GetItem(i).GetVisible())
    return true;
  }
  return false;
 },
 HasNextVisibleItems: function(parent, index, skipItemsInAdaptiveMenu) {
  for(var i = index + 1; i < parent.GetItemCount() ; i++) {
   var item = parent.GetItem(i);
   if(item.GetVisible() && (!skipItemsInAdaptiveMenu || !this.IsItemInAdaptiveMenu(item)))
    return true;
  }
  return false;
 },
 HasPrevVisibleItems: function(parent, index, skipItemsInAdaptiveMenu) {
  for(var i = index - 1; i >= 0; i--) {
   var item = parent.GetItem(i);
   if(item.GetVisible() && (!skipItemsInAdaptiveMenu || !this.IsItemInAdaptiveMenu(item)))
    return true;
  }
  return false;
 },
 NeedCollapseControlCore: function() {
  return this.enableAdaptivity || ASPxClientControl.prototype.NeedCollapseControlCore.call(this);
 },
 GetItemIndentElement: function(indexPath) {
  return ASPx.GetElementById(this.GetItemIndentElementId(indexPath));
 },
 GetItemSeparatorElement: function(indexPath) {
  return ASPx.GetElementById(this.GetItemSeparatorElementId(indexPath));
 },
 CreateItemClickEventArgs: function(processOnServer, item, htmlElement, htmlEvent) {
  return new ASPxClientMenuItemClickEventArgs(processOnServer, item, htmlElement, htmlEvent);
 },
 CreateItemMouseEventArgs: function(item, htmlElement) {
  return new ASPxClientMenuItemMouseEventArgs(item, htmlElement);
 },
 CreateItemEventArgs: function(item) {
  return new ASPxClientMenuItemEventArgs(item);
 },
 RaiseItemClick: function(indexPath, htmlEvent) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ItemClick");
  if(!this.ItemClick.IsEmpty()) {
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemElement(indexPath);
   var args = this.CreateItemClickEventArgs(processOnServer, item, htmlElement, htmlEvent);
   this.ItemClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseItemMouseOver: function(indexPath) {
  if(!this.ItemMouseOver.IsEmpty()) {
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = this.CreateItemMouseEventArgs(item, htmlElement);
   this.ItemMouseOver.FireEvent(this, args);
  }
 },
 RaiseItemMouseOut: function(indexPath) {
  if(!this.ItemMouseOut.IsEmpty()) {
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = this.CreateItemMouseEventArgs(item, htmlElement);
   this.ItemMouseOut.FireEvent(this, args);
  }
 },
 RaisePopUp: function(indexPath) {
  var item = this.GetItemByIndexPath(indexPath);
  if(!this.PopUp.IsEmpty()) {
   var args = this.CreateItemEventArgs(item);
   this.inPopUpHandler = true;
   this.PopUp.FireEvent(this, args);
   this.inPopUpHandler = false;
   this.postponedSetItemVisible();
  }
 },
 RaiseCloseUp: function(indexPath) {
  var item = this.GetItemByIndexPath(indexPath);
  if(!this.CloseUp.IsEmpty()) {
   var args = this.CreateItemEventArgs(item);
   this.CloseUp.FireEvent(this, args);
  }
 },
 SetEnabled: function(enabled) {
  for(var i = this.GetItemCount() - 1; i >= 0; i--) {
   var item = this.GetItem(i);
   item.SetEnabled(enabled);
  }
 },
 SetVisible: function(visible) {
  ASPxClientControl.prototype.SetVisible.call(this, visible);
  if(visible && !this.HasVisibleItems(this))
   ASPx.SetElementDisplay(this.GetMainElement(), false);
 },
 GetItemCount: function() {
  return (this.rootItem != null) ? this.rootItem.GetItemCount() : 0;
 },
 GetItem: function(index) {
  return (this.rootItem != null) ? this.rootItem.GetItem(index) : null;
 },
 GetItemByName: function(name) {
  return (this.rootItem != null) ? this.rootItem.GetItemByName(name) : null;
 },
 GetSelectedItem: function() {
  var indexPath = this.GetSelectedItemIndexPath();
  if(indexPath != "")
   return this.GetItemByIndexPath(indexPath);
  return null;
 },
 SetSelectedItem: function(item) {
  var indexPath = (item != null) ? item.GetIndexPath() : "";
  this.SetSelectedItemInternal(indexPath, false);
 },
 GetRootItem: function() {
  return this.rootItem;
 }
});
ASPxClientMenuBase.GetMenuCollection = function() {
 return aspxGetMenuCollection();
};
var ASPxMenuKeyboardHelper = ASPx.CreateClass(null, {
 constructor: function(menu) {
  this.menu = menu;
  this.accessibilityCompliant = menu.accessibilityCompliant;
  this.isContextMenu = menu.isContextMenu;
  this.rtl = menu.rtl;
 },
 OnFocusedItemKeyDown: function(evt, focusedItem) {
  var indexPath = this.menu.GetItemIndexPathById(focusedItem.name);
  if(!this.IsAllowedItemAction(evt, focusedItem.enabled, indexPath))
   ASPx.Evt.PreventEventAndBubble(evt);
  else
   this.OnFocusedItemKeyDownInternal(evt, indexPath);
 },
 OnFocusedItemKeyDownInternal: function(evt, indexPath) {
  if(!indexPath)
   return;
  var keyKode = ASPx.Evt.GetKeyCode(evt);
  switch (keyKode) {
   case ASPx.Key.Tab:
    this.OnTab(indexPath, evt);
    break;
   case ASPx.Key.Down:
    this.OnArrowDown(indexPath, evt);
    break;
   case ASPx.Key.Up:
    this.OnArrowUp(indexPath, evt);
    break;
   case ASPx.Key.Left:
    if(this.rtl)
     this.OnArrowRight(indexPath, evt);
    else
     this.OnArrowLeft(indexPath, evt);
    break;
   case ASPx.Key.Right:
    if(this.rtl)
     this.OnArrowLeft(indexPath, evt);
    else
     this.OnArrowRight(indexPath, evt);
    break;
   case ASPx.Key.Esc:
    this.OnEscape(indexPath, evt);
    break;
   case ASPx.Key.Space: break;
   case ASPx.Key.Enter: break;
   case ASPx.Key.Shift: break;
   case ASPx.Key.Alt: break;
   case ASPx.Key.Ctrl: break;
   default:
    ASPx.Evt.PreventEventAndBubble(evt);
    break;
  }
 },
 OnTab: function(indexPath, evt) {
  var isRootItem = this.IsRootItem(indexPath);
  if(isRootItem && !this.accessibilityCompliant) return;
  if(this.IsLostFocus(indexPath, evt))
   this.menu.ProcessLostFocus(evt);
  else
   this.ProcessTab(indexPath, evt);
 },
 ProcessTab: function(indexPath, evt) {
  if(this.IsRootItem(indexPath))
   this.FocusRootItem(indexPath, evt);
  else
   this.FocusSubmenuItem(indexPath, evt);
 },
 OnArrowDown: function(indexPath, evt) {
  if(this.menu.IsVertical(indexPath))
   this.FocusNextItem(indexPath);
  else
   this.ShowSubMenuAccessible(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnArrowUp: function(indexPath, evt) {
  if(this.menu.IsVertical(indexPath))
   this.FocusPrevItem(indexPath);
  else
   this.ShowSubMenuAccessible(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnArrowLeft: function(indexPath, evt) {
  var isVertical = this.menu.IsVertical(indexPath);
  if(isVertical) {
   var isRootItem = this.IsRootItem(indexPath);
   if(isRootItem)
    this.FocusPrevItem(indexPath);
   else
    this.FocusItemByIndexPathAccessible(this.GetLeftParentIndexPath(indexPath));
  } else
   this.FocusPrevItem(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnArrowRight: function(indexPath, evt) {
  var isVertical = this.menu.IsVertical(indexPath);
  if(isVertical) {
   var hasChildren = this.menu.HasChildren(indexPath);
   if(hasChildren)
    this.ShowSubMenuAccessible(indexPath);
   else
    this.FocusItemByIndexPathAccessible(this.GetRightRootParentIndexPath(indexPath));
  }
  else
   this.FocusNextItem(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnEscape: function(indexPath, evt) {
  var needPreventEvent = true;
  if(this.IsRootItem(indexPath)) {
   aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
   this.menu.ProcessLostFocus(evt);
  }
  else {
   var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
   this.FocusItemByIndexPathAccessible(parentIndexPath);
   var element = this.menu.GetMenuElement(parentIndexPath);
   if(element != null)
    this.menu.DoHidePopupMenu(null, element);
   else
    needPreventEvent = false;
  }
  if(needPreventEvent)
   ASPx.Evt.PreventEventAndBubble(evt);
 },
 IsLostFocus: function(indexPath, evt) {
  var keyCode = ASPx.Evt.GetKeyCode(evt);
  var isRootItem = this.IsRootItem(indexPath); 
  if(keyCode !== ASPx.Key.Tab || !isRootItem)
   return false;
  var canPrevItemGetFocus = evt.shiftKey && this.GetPrevSiblingIndexPath(indexPath);
  var canNextItemGetFocus = !evt.shiftKey && this.GetNextSiblingIndexPath(indexPath);
  return !canPrevItemGetFocus && !canNextItemGetFocus;
 },
 FocusRootItem: function(indexPath, evt) {
  if(evt.shiftKey)
   this.FocusPrevItem(indexPath, evt);
  else
   this.FocusNextItem(indexPath, evt);
  var isFocusElementChanged = ASPx.Evt.GetEventSource(evt) !== document.activeElement;
  if(isFocusElementChanged)
   ASPx.Evt.PreventEventAndBubble(evt);
 },
 FocusSubmenuItem: function(indexPath, evt) {
  if(evt.shiftKey)
   this.FocusPreviousSubmenuItem(indexPath, evt);
  else
   this.FocusNextSubmenuItem(indexPath, evt);
 },
 FocusPreviousSubmenuItem: function(indexPath, evt) {
  if(!this.GetPrevSiblingIndexPath(indexPath)) {
   var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
   this.FocusItemByIndexPathAccessible(parentIndexPath);
  } else
   this.FocusPrevItem(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 FocusNextSubmenuItem: function(indexPath, evt) {
  var nextIndexPath = this.GetNextIndexPath(indexPath);
  if(nextIndexPath) {
   var isLevelChanged = this.IsLevelChanged(indexPath, nextIndexPath);
   this.FocusItemCore(nextIndexPath, isLevelChanged); 
   ASPx.Evt.PreventEventAndBubble(evt);
  } else
   this.menu.ProcessLostFocus(evt);
 },
 GetNextIndexPath: function(indexPath) {
  var result = this.GetNextSiblingIndexPath(indexPath);
  if(!result) {
   var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
   if(parentIndexPath)
    result = this.GetNextIndexPath(parentIndexPath);
  }
  return result;
 },
 GetRightRootParentIndexPath: function(indexPath) {
  var parentIndexPath = this.GetParentRootIndexPath(indexPath);
  return this.GetNextFocusableItemIndexPath(parentIndexPath);
 },
 GetLeftParentIndexPath: function(indexPath) {
  var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
  if(!this.menu.IsVertical(parentIndexPath))
   parentIndexPath = this.GetPrevFocusableItemIndexPath(parentIndexPath);
  return parentIndexPath;
 },
 GetParentRootIndexPath: function(indexPath) {
  while(!this.IsRootItem(indexPath))
   indexPath = this.menu.GetParentIndexPath(indexPath);
  return indexPath;
 },
 ShowSubMenuAccessible: function(indexPath) {
  var newIndexPath = this.GetFirstChildIndexPath(indexPath),
   element = this.menu.GetMenuElement(indexPath);
  if(element && !this.menu.isSubMenuElementVisible(element))
   this.menu.ShowSubMenu(indexPath);
  if(!!newIndexPath)
   this.FocusItemByIndexPathAccessible(newIndexPath);
 },
 FocusItemByIndexPathAccessible: function(indexPath) {
  this.FocusItemCore(indexPath, true);
 },
 IsAllowedItemAction: function(evt, isEnabled, indexPath) {
  var isVertical = this.menu.IsVertical(indexPath);
  return !this.accessibilityCompliant ||
      isEnabled ||
      this.IsAllowedFocusMoving(evt) ||
      this.IsAllowedHorizontalFocusMoving(evt, isVertical) ||
      this.IsAllowedVerticalFocusMoving(evt, isVertical);
 },
 IsAllowedFocusMoving: function(evt) {
  return evt.keyCode == ASPx.Key.Tab || evt.keyCode == ASPx.Key.Esc;
 },
 IsAllowedHorizontalFocusMoving: function(evt, isVertical) {
  return !isVertical && (evt.keyCode == ASPx.Key.Left || evt.keyCode == ASPx.Key.Right);
 },
 IsAllowedVerticalFocusMoving: function(evt, isVertical) {
  return isVertical && (evt.keyCode == ASPx.Key.Up || evt.keyCode == ASPx.Key.Down);
 },
 FocusItemByIndexPath: function(indexPath) {
  var link = this.menu.GetLinkElementByIndexPath(indexPath);
  if(link != null) {
   if(this.accessibilityCompliant && !link.href)
    link.href = ASPx.AccessibilityEmptyUrl;
   ASPx.SetFocus(link);
  } else
   this.FocusTemplateItemActionElement(indexPath);
 },
 FocusTemplateItemActionElement: function(indexPath) {
  var element = this.menu.GetItemElement(indexPath);
  var focusableElement = ASPx.FindFirstChildActionElement(element);
  if(focusableElement)
   ASPx.SetFocus(focusableElement);
  else {
   var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
   this.tryFocusColorPickerByIndexPath(parentIndexPath);
  }
 },
 tryFocusColorPickerByIndexPath: function(indexPath) {
  var colorPicker = this.getColorPickerByIndexPath(indexPath);
  if(colorPicker)
   colorPicker.Focus();
 },
 getColorPickerByIndexPath: function(indexPath) {
  var menuItem = this.menu.GetItemByIndexPath(indexPath);
  return menuItem.colorPicker;
 },
 PronounceItemDescription: function(indexPath) {
  var link = this.menu.GetLinkElementByIndexPath(indexPath);
  var span = ASPx.GetNodeByTagName(link, "SPAN", 0);
  if(!link) return;
  if(!!span && !span.id) {
   var spanID = this.GetAccessibilityTextSpanID(indexPath);
   span.id = spanID;
   ASPx.Attr.SetAttribute(link, "aria-describedby", spanID);
  }
  ASPx.Attr.SetAttribute(link, "aria-label", this.GetAccessibilityItemDescription(indexPath));
 },
 RemoveAccessibilityDescription: function(indexPath) {
  var link = this.menu.GetLinkElementByIndexPath(indexPath);
  if(link && ASPx.Attr.GetAttribute(link, "aria-label"))
   ASPx.Attr.RemoveAttribute(link, "aria-label");
 },
 GetAccessibilityTextSpanID: function(indexPath) {
  return this.name + Constants.ATSIdSuffix + indexPath;
 },
 GetAccessibilityItemDescription: function(indexPath) {
  var descriptionParts = [];
  descriptionParts.push(this.menu.IsVertical(indexPath) ? ASPx.AccessibilitySR.MenuVerticalText : ASPx.AccessibilitySR.MenuHorizontalText);
  descriptionParts.push(this.IsRootItem(indexPath) ? ASPx.AccessibilitySR.MenuBarText : ASPx.AccessibilitySR.MenuText);
  descriptionParts.push(this.menu.GetMenuLevel(indexPath));
  descriptionParts.push(ASPx.AccessibilitySR.MenuLevelText);
  return descriptionParts.join(' ');
 },
 FocusNextItem: function(indexPath) {
  var newIndexPath = this.GetNextFocusableItemIndexPath(indexPath);
  if(newIndexPath)
   this.FocusItemCore(newIndexPath, false);
 },
 FocusPrevItem: function(indexPath) {
  var newIndexPath = this.GetPrevFocusableItemIndexPath(indexPath);
  if(newIndexPath)
   this.FocusItemCore(newIndexPath, false);
 },
 FocusItemCore: function(indexPath, needDescription) {
  if(this.accessibilityCompliant) {
   if(needDescription)
    this.PronounceItemDescription(indexPath);
   else
    this.RemoveAccessibilityDescription(indexPath);
  }
  this.FocusItemByIndexPath(indexPath);
 },
 GetNextFocusableItemIndexPath: function(indexPath) {
  var newIndexPath = this.GetNextSiblingIndexPath(indexPath);
  if(newIndexPath == null)
   newIndexPath = this.GetFirstSiblingIndexPath(indexPath);
  if(indexPath != newIndexPath)
   return newIndexPath;
 },
 GetPrevFocusableItemIndexPath: function(indexPath) {
  var newIndexPath = this.GetPrevSiblingIndexPath(indexPath);
  if(newIndexPath == null)
   newIndexPath = this.GetLastSiblingIndexPath(indexPath);
  if(indexPath != newIndexPath)
   return newIndexPath;
 },
 GetFirstChildIndexPath: function(indexPath) {
  var indexes = this.menu.GetItemIndexes(indexPath);
  indexes[indexes.length] = 0;
  var newIndexPath = this.menu.GetItemIndexPath(indexes);
  return this.GetFirstSiblingIndexPath(newIndexPath);
 },
 GetFirstSiblingIndexPath: function(indexPath) {
  var indexes = this.menu.GetItemIndexes(indexPath);
  var i = 0;
  while(true) {
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.menu.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsFocusableItem(newIndexPath))
    return newIndexPath;
   i++;
  }
  return null;
 },
 GetLastSiblingIndexPath: function(indexPath) {
  var indexes = this.menu.GetItemIndexes(indexPath);
  var parentItem = this.menu.GetItemByIndexPath(this.menu.GetParentIndexPath(indexPath));
  var i = parentItem ? parentItem.GetItemCount() - 1 : 0;
  while(true) {
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.menu.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsFocusableItem(newIndexPath))
    return newIndexPath;
   i--;
  }
  return null;
 },
 GetNextSiblingIndexPath: function(indexPath) {
  if(this.menu.IsLastItem(indexPath)) return null;
  var indexes = this.menu.GetItemIndexes(indexPath);
  var i = indexes[indexes.length - 1] + 1;
  while(true) {
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.menu.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsFocusableItem(newIndexPath))
    return newIndexPath;
   i++;
  }
  return null;
 },
 GetPrevSiblingIndexPath: function(indexPath) {
  if(this.menu.IsFirstItem(indexPath)) return null;
  var indexes = this.menu.GetItemIndexes(indexPath);
  var i = indexes[indexes.length - 1] - 1;
  while(true) {
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.menu.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsFocusableItem(newIndexPath))
    return newIndexPath;
   i--;
  }
  return null;
 },
 IsItemExist: function(indexPath) {
  return !!this.menu.GetItemByIndexPath(indexPath);
 },
 IsItemVisible: function(indexPath) {
  var item = this.menu.GetItemByIndexPath(indexPath);
  return item ? item.GetVisible() : false;
 },
 IsFocusableItem: function(indexPath) {
  return this.IsItemVisible(indexPath) && (this.menu.IsItemEnabled(indexPath) || this.IsItemAccessibleEnabled(indexPath));
 },
 IsRootItem: function(indexPath) {
  return this.menu.IsRootItem(indexPath);
 },
 IsItemAccessibleEnabled: function(indexPath) {
  var item = this.menu.GetItemByIndexPath(indexPath);
  return this.accessibilityCompliant && item && item.enabled;
 },
 IsLevelChanged: function(firstIndexPath, secondIndexPath) {
  return this.menu.GetMenuLevel(firstIndexPath) !== this.menu.GetMenuLevel(secondIndexPath);
 }
});
var ASPxClientMenuCollection = ASPx.CreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.appearTimerID = -1;
  this.disappearTimerID = -1;
  this.currentShowingPopupMenuName = null;
  this.visibleSubMenusMenuName = "";
  this.visibleSubMenuIds = [];
  this.overXPos = -1;
  this.overYPos = -1;
 },
 GetCollectionType: function(){
  return "Menu";
 },
 Remove: function(element) {
  if(element.name === this.visibleSubMenusMenuName) {
   this.visibleSubMenusMenuName = "";
   this.visibleSubMenuIds = [ ];
  }
  ASPxClientControlCollection.prototype.Remove.call(this, element);
 },
 RegisterVisiblePopupMenu: function(name, id) {
  this.visibleSubMenuIds.push(id);
  this.visibleSubMenusMenuName = name;
 },
 UnregisterVisiblePopupMenu: function(name, id) {
  ASPx.Data.ArrayRemove(this.visibleSubMenuIds, id);
  if(this.visibleSubMenuIds.length == 0)
   this.visibleSubMenusMenuName = "";
 },
 IsSubMenuVisible: function(subMenuId) {
  for(var i = 0; i < this.visibleSubMenuIds.length; i++) {
   if(this.visibleSubMenuIds[i] == subMenuId)
    return true;
  }
  return false;
 },
 GetMenu: function(id) {
  return this.Get(this.GetMenuName(id));
 },
 GetMenuName: function(id) {
  return this.GetMenuNameBySuffixes(id, [Constants.MMIdSuffix, Constants.MIIdSuffix]);
 },
 GetMenuNameBySuffixes: function(id, idSuffixes) {
  for(var i = 0; i < idSuffixes.length; i++) {
   var pos = id.lastIndexOf(idSuffixes[i]);
   if(pos > -1)
    return id.substring(0, pos);
  }
  return id;
 },
 ClearCurrentShowingPopupMenuName: function() {
  this.SetCurrentShowingPopupMenuName(null);
 },
 SetCurrentShowingPopupMenuName: function(value) {
  this.currentShowingPopupMenuName = value;
 },
 NowPopupMenuIsShowing: function() {
  return this.currentShowingPopupMenuName != null;
 },
 GetMenuLevelById: function(id) {
  var indexPath = this.GetIndexPathById(id, Constants.MMIdSuffix);
  var menu = this.GetMenu(id);
  return menu.GetMenuLevel(indexPath);
 },
 GetIndexPathById: function(id, idSuffix) {
  var pos = id.lastIndexOf(idSuffix);
  if(pos > -1) {
   id = id.substring(pos + idSuffix.length);
   pos = id.lastIndexOf("_");
   if(pos > -1)
    return id.substring(0, pos);
  }
  return "";
 },
 GetItemIndexPath: function(indexes) {
  var indexPath = "";
  for(var i = 0; i < indexes.length; i++) {
   indexPath += indexes[i];
   if(i < indexes.length - 1)
    indexPath += ASPx.ItemIndexSeparator;
  }
  return indexPath;
 },
 GetItemIndexes: function(indexPath) {
  var indexes = indexPath.split(ASPx.ItemIndexSeparator);
  for(var i = 0; i < indexes.length; i++)
   indexes[i] = parseInt(indexes[i]);
  return indexes;
 },
 ClearAppearTimer: function() {
  this.appearTimerID = ASPx.Timer.ClearTimer(this.appearTimerID);
 },
 ClearDisappearTimer: function() {
  this.disappearTimerID = ASPx.Timer.ClearTimer(this.disappearTimerID);
 },
 IsAppearTimerActive: function() {
  return this.appearTimerID > -1;
 },
 IsDisappearTimerActive: function() {
  return this.disappearTimerID > -1;
 },
 SetAppearTimer: function(name, indexPath, timeout, preventSubMenu) {
  var menu = aspxGetMenuCollection().Get(name);
  if(menu && !menu.sideMenuModeOn)
   this.appearTimerID = window.setTimeout(function() {
    var menu = aspxGetMenuCollection().Get(name);
    if(menu != null) menu.OnItemOverTimer(indexPath, preventSubMenu);
   }, timeout);
 },
 SetDisappearTimer: function(name, timeout) {
  var menu = aspxGetMenuCollection().Get(name);
  if(menu && !menu.sideMenuModeOn)
   this.disappearTimerID = window.setTimeout(function() {
    var menu = aspxGetMenuCollection().Get(name);
    if(menu != null)
     menu.OnItemOutTimer();
   }, timeout);
 },
 GetMouseDownMenuLevel: function(evt) {
  var srcElement = ASPx.Evt.GetEventSource(evt);
  for(var i = this.visibleSubMenuIds.length - 1; i >= 0; i--) {
   var element = ASPx.GetParentById(srcElement, this.visibleSubMenuIds[i]);
   if(element != null)
    return this.GetMenuLevelById(this.visibleSubMenuIds[i]) + 1;
  }
  if(this.visibleSubMenusMenuName != "") {
   var element = ASPx.GetParentById(srcElement, this.visibleSubMenusMenuName);
   if(element != null) return 1;
  }
  if(ASPx.GetParentByClassName(srcElement, MenuCssClasses.AdaptiveMenuItem))
   return 1;
  return -1;
 },
 CheckFocusedElement: function() {
  var isValid = false;
  try {
   var activeElement = document.activeElement;
   if(activeElement != null) {
    for(var i = 0; i < this.visibleSubMenuIds.length; i++) {
     var menuElement = ASPx.GetElementById(this.visibleSubMenuIds[i]);
     if(menuElement != null && ASPx.GetIsParent(menuElement, activeElement)) {
      var tagName = activeElement.tagName;
      if(tagName != "A" || 
         !ASPx.ElementHasCssClass(activeElement, MenuCssClasses.ContentContainer) || 
         this.GetMenu(this.visibleSubMenusMenuName).accessibilityCompliant)
          isValid = true;
      break;
     }
    }
   }
  } catch (e) {
  }
  return isValid;
 },
 LockMenusVisibility: function() {
  this.visibilityLocked = true;
  this.visibilityLockedIds = [];
  for(var i = this.visibleSubMenuIds.length - 1; i >= 0 ; i--)
   this.visibilityLockedIds.push(this.visibleSubMenuIds[i]);
 },
 UnlockMenusVisibility: function() {
  this.visibilityLocked = false;
  this.visibilityLockedIds = [];
 },
 CanHideSubMenu: function(subMenuId) {
  return !this.visibilityLocked || this.visibilityLocked && this.visibilityLockedIds.indexOf(subMenuId) > -1;
 },
 DoHidePopupMenus: function(evt, level, name, leavePopups, exceptIds) {
  exceptIds = typeof exceptIds === 'string' ? [exceptIds] : (exceptIds || []);
  for(var i = this.visibleSubMenuIds.length - 1; i >= 0 ; i--) {
   var subMenuId = this.visibleSubMenuIds[i];
   if(this.CanHideSubMenu(subMenuId)) {
    var menu = this.GetMenu(subMenuId);
    if(menu != null && !menu.sideMenuModeOn) {
     var menuLevel = this.GetMenuLevelById(subMenuId);
     if((!leavePopups || menuLevel > 0) && ASPx.Data.ArrayIndexOf(exceptIds, subMenuId) === -1) {
      if(menuLevel > level || (menu.name != name && name != "")) {
       var element = ASPx.GetElementById(subMenuId);
       if(element != null)
        menu.DoHidePopupMenu(evt, element);
      }
     }
    }
   }
  }
 },
 DoShowAtCurrentPos: function(name, indexPath) {
  var pc = this.Get(name);
  var element = pc.GetMainElement();
  if(pc != null && !ASPx.GetElementDisplay(element))
   pc.DoShowPopupMenu(element, this.overXPos, this.overYPos, indexPath);
 },
 SaveCurrentMouseOverPos: function(evt, popupElement) {
  if(!this.NowPopupMenuIsShowing()) return;
  var currentShowingPopupMenu = this.Get(this.currentShowingPopupMenuName);
  if(currentShowingPopupMenu.popupElement == popupElement)
   if(!currentShowingPopupMenu.IsMenuVisible()) {
    this.overXPos = ASPx.Evt.GetEventX(evt);
    this.overYPos = ASPx.Evt.GetEventY(evt);
   }
 },
 OnMouseDown: function(evt) {
  var menuLevel = this.GetMouseDownMenuLevel(evt);
  this.DoHidePopupMenus(evt, menuLevel, "", false, "");
  if (ASPx.Browser.TouchUI && menuLevel == -1) 
   ASPx.SetHoverState(null);
 },
 RecalculateAll: function() {
  var visibleSubMenusLength = this.visibleSubMenuIds.length;
  for(var i = 0; i < visibleSubMenusLength; i++) {
   var menu = this.GetMenu(this.visibleSubMenuIds[i]);
   if(menu != null) {
    var element = ASPx.GetElementById(this.visibleSubMenuIds[i]);
    if(element != null) {
     var indexPath = this.GetIndexPathById(this.visibleSubMenuIds[i], Constants.MMIdSuffix);
     menu.CalculateSubMenuPosition(element, ASPx.InvalidPosition, ASPx.InvalidPosition, indexPath, false);
    }
   }
  }
 },
 HideAll: function() {
  this.DoHidePopupMenus(null, -1, "", false, "");
 },
 IsAnyMenuVisible: function() {
  return this.visibleSubMenuIds.length != 0;
 }
});
var menuCollection = null;
function aspxGetMenuCollection() {
 if(menuCollection == null)
  menuCollection = new ASPxClientMenuCollection();
 return menuCollection;
}
var ASPxClientMenuItem = ASPx.CreateClass(null, {
 constructor: function(menu, parent, index, name) {
  this.menu = menu;
  this.parent = parent;
  this.index = index;
  this.name = name;
  this.indexPath = "";
  this.text = "";
  this.imageUrl = "";
  this.imageClassName = "";
  this.tooltip = "";
  this.target = "";
  this.beginGroup = false;
  this.dropDownMode = false;
  if(parent) {
   this.indexPath = this.CreateItemIndexPath(parent);
  }
  this.enabled = true;
  this.clientEnabled = true;
  this.visible = true;
  this.clientVisible = true;
  this.items = [];
  this.colorPicker = null;
  this.checkedGroup = [];
  this.checked = false;
 },
 CreateItemIndexPath: function(parent) {
  return parent.indexPath ? parent.indexPath + ASPx.ItemIndexSeparator + this.index.toString() : this.index.toString();
 },
 CreateItems: function(itemsProperties) {
  for(var i = 0, len = itemsProperties.length; i < len; i++) {
   var itemProperties = itemsProperties[i],
    item = this.CreateItemInternal(itemProperties);
   if(itemProperties.items && itemProperties.items.length > 0)
    item.CreateItems(itemProperties.items);
  }
 },
 CreateItemInternal: function(itemProperties) {
  var itemName = itemProperties.name || "";
  var index = this.items.length;
  var itemType = this.menu.GetClientItemType();
  var item = new itemType(this.menu, this, index, itemName);
  if(ASPx.IsExists(itemProperties.text))
   item.text = itemProperties.text;
  if(ASPx.IsExists(itemProperties.imageUrl))
   item.imageUrl = itemProperties.imageUrl;
  if(ASPx.IsExists(itemProperties.imageHottrackSrc))
   item.imageHottrackSrc = itemProperties.imageHottrackSrc;
  if(ASPx.IsExists(itemProperties.imageClassName))
   item.imageClassName = itemProperties.imageClassName;
  if(ASPx.IsExists(itemProperties.navigateUrl))
   item.navigateUrl = itemProperties.navigateUrl;
  if(ASPx.IsExists(itemProperties.beginGroup))
   item.beginGroup = itemProperties.beginGroup;
  if(ASPx.IsExists(itemProperties.enabled) && !this.menu.NeedCreateItemsOnClientSide())
   item.enabled = itemProperties.enabled;
  if((ASPx.IsExists(itemProperties.clientEnabled) && !itemProperties.clientEnabled) || (ASPx.IsExists(itemProperties.enabled) && !itemProperties.enabled))
   item.clientEnabled = false;
  if(ASPx.IsExists(itemProperties.visible))
   item.visible = itemProperties.visible;
  if(ASPx.IsExists(itemProperties.clientVisible))
   item.clientVisible = itemProperties.clientVisible;
  if(ASPx.IsExists(itemProperties.groupName)) {
   this.menu.ProcessItemGroupName(item, itemProperties.groupName);
   item.checked = !!itemProperties.checked;
  }
  if(ASPx.IsExists(itemProperties.tooltip))
   item.tooltip = itemProperties.tooltip;
  if(ASPx.IsExists(itemProperties.target))
   item.target = itemProperties.target;
  if(ASPx.IsExists(itemProperties.dropDownMode))
   item.dropDownMode = itemProperties.dropDownMode;
  if(ASPx.IsExists(itemProperties.textTemplate))
   item.textTemplate = itemProperties.textTemplate;
  if(ASPx.IsExists(itemProperties.styles))
   item.styles = itemProperties.styles;
  if(ASPx.IsExists(itemProperties.isSvg))
   item.isSvg = itemProperties.isSvg;
  if(this.menu.NeedAppendToRenderData(item))
   this.menu.AppendToRenderData(this.indexPath, index);
  this.items.push(item);
  return item;
 },
 GetIndexPath: function() {
  return this.indexPath;
 },
 GetItemCount: function() {
  return this.items.length;
 },
 GetItem: function(index) {
  return (0 <= index && index < this.items.length) ? this.items[index] : null;
 },
 GetItemByName: function(name) {
  for(var i = 0; i < this.items.length; i++)
   if(this.items[i].name == name) return this.items[i];
  for(var i = 0; i < this.items.length; i++) {
   var item = this.items[i].GetItemByName(name);
   if(item != null) return item;
  }
  return null;
 },
 GetChecked: function() {
  var indexPath = this.GetIndexPath();
  return this.menu.IsCheckedItem(indexPath);
 },
 SetChecked: function(value) {
  var indexPath = this.GetIndexPath();
  this.menu.SetItemChecked(indexPath, value);
 },
 GetEnabled: function() {
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(value) {
  if(this.clientEnabled != value) {
   this.clientEnabled = value;
   this.menu.SetItemEnabled(this.GetIndexPath(), value, false);
  }
 },
 GetImage: function() {
  return this.menu.GetItemImage(this.GetIndexPath());
 },
 GetImageUrl: function() {
  return this.menu.GetItemImageUrl(this.GetIndexPath());
 },
 SetImageUrl: function(value) {
  var indexPath = this.GetIndexPath();
  this.menu.SetItemImageUrl(indexPath, value);
 },
 GetNavigateUrl: function() {
  var indexPath = this.GetIndexPath();
  return this.menu.GetItemNavigateUrl(indexPath);
 },
 SetNavigateUrl: function(value) {
  var indexPath = this.GetIndexPath();
  this.menu.SetItemNavigateUrl(indexPath, value);
 },
 GetText: function() {
  var indexPath = this.GetIndexPath();
  return this.menu.GetItemText(indexPath);
 },
 SetText: function(value) {
  var indexPath = this.GetIndexPath();
  this.menu.SetItemText(indexPath, value);
 },
 GetVisible: function() {
  return this.visible && this.clientVisible;
 },
 SetVisible: function(value) {
  if(this.clientVisible != value) {
   this.setClientVisibleInternal(value);
   this.menu.SetItemVisible(this.GetIndexPath(), value, false);
  }
 },
 InitializeEnabledAndVisible: function(recursive) {
  this.menu.SetItemEnabled(this.GetIndexPath(), this.clientEnabled, true);
  this.menu.SetItemVisible(this.GetIndexPath(), this.clientVisible, true);
  if(recursive) {
   for(var i = 0; i < this.items.length; i++)
    this.items[i].InitializeEnabledAndVisible(recursive);
  }
 },
 setClientVisibleInternal: function(value) {
  this.menu.prepareSideMenuCssClasses(false);
  this.clientVisible = value;
  this.menu.prepareSideMenuCssClasses(true);
 },
 GetOwnProperties: function() {
  return {
   menuItem: this,
   focusableElement: this.GetFocusableElement()
  };
 },
 GetFocusableElement: function() {
  return this.menu.GetLinkElementByIndexPath(this.indexPath);
 }
});
var subMenuStack = function() {
 this.stack = [];
 this.hasItems = function() {
  return this.stack.length > 1;
 };
 this.count = function() {
  return this.stack.length;
 };
 this.last = function() {
  return this.stack[this.stack.length - 1].element;
 };
 this.push = function(element, text) {
  this.stack.push({element: element, text: text});
 };
 this.pop = function() {
  return this.stack.pop().element;
 };
 this.text = function() {
  return this.stack[this.stack.length - 1].text;
 };
};
var appearPanelAction = ASPx.CreateClass({
 constructor: function(menu) {
  this.menu = menu;
  this.expanded = false;
  this.cashedHtmlOverflow = '';
  this.bodyLeftMargin = 0;
  this.clearWidth = 0;
  this.animationInProgress = false;
  this.panel = this.menu.GetMainElement().parentNode;
  this.burgerButton = this.createBurgerButton();
  this.overlayPanel = this.createOverlayElement();
  this.afterCollapsePanel = new ASPxClientEvent();
  ASPx.Evt.AttachEventToElement(this.burgerButton, 'click', function() { this.toggleExpanded(); }.bind(this), true);
  ASPx.Evt.AttachEventToElement(this.overlayPanel, 'click', function() { this.toggleExpanded(); }.bind(this), true);
 },
 get isLeftPosition() {
  return this.menu.position == 'left';
 },
 createBurgerButton: function() {
  var button = document.createElement('DIV');
  button.className = BURGER_CLASS_NAME;
  if(!!this.menu.hamburgerClass)
   ASPx.AddClassNameToElement(button, this.menu.hamburgerClass);
  var line = document.createElement('DIV');
  button.appendChild(line);
  this.panel.parentNode.appendChild(button);
  return button;
 },
 createOverlayElement: function() {
  var panel = document.createElement('DIV');
  panel.className = OVERLAY_PANEL_CLASS_NAME;
  this.panel.parentNode.appendChild(panel);
  return panel;
 },
 toggleExpanded: function() {
  this.setExpanded(!this.getExpanded());
 },
 getExpanded: function() {
  return this.expanded;
 },
 setExpanded: function(value) {
  if(this.expanded != value && !this.isAnimationInProgress()) {
   this.expanded = value;
   this.setExpandedCore();
  }
 },
 setExpandedCore: function() {
  if(this.expanded) {
   this.prepareForAnimateIn();
   this.animateIn();
  }
  else
   this.animateOut();
 },
 collapse: function() {
  this.expanded = false;
  this.rollbackAfterAnimateOut();
 },
 isAnimationInProgress: function() {
  return !!this.animationInProgress;
 },
 prepareForAnimateIn: function() {
  this.prepareDocument();
  this.prepareOverlayPanel();
  this.prepareSlidePanel();
 },
 prepareDocument: function() {
  this.cashedHtmlOverflow = document.documentElement.style.overflow;
  document.documentElement.style.overflow = 'hidden';
 },
 prepareOverlayPanel: function() {
  ASPx.SetStyles(this.overlayPanel, {
   opacity: '0',
   zIndex: SIDE_MENU_ZINDEX_VALUE,
   display: 'block'
  });
  ASPx.SetStyles(this.overlayPanel, {
   marginLeft: -ASPx.GetAbsoluteX(this.overlayPanel),
   marginTop: -ASPx.GetAbsoluteY(this.overlayPanel),
  });
 },
 prepareSlidePanel: function() {
  ASPx.SetStyles(this.panel, { display: 'block', width: '100%', zIndex: SIDE_MENU_ZINDEX_VALUE + 1 });
  this.menu.AdjustControl();
  var size = this.menu.calculateMaxSize();
  this.clearWidth = size.width;
  var width = size.width;
  var overflowY = '';
  if(size.height > window.innerHeight) {
   overflowY = 'scroll';
   width = size.width + ASPx.GetVerticalScrollBarWidth();
  }
  ASPx.SetStyles(this.panel, { 
   className: this.panel.className + ' ' + SLIDE_PANEL_EXPANDED_CLASS_NAME,
   overflowY: overflowY,
   width: width
  });
 },
 createTransition: function(element, obj) {
  return transition = ASPx.AnimationHelper.createAnimationTransition(element, {
   property: obj.property, unit: obj.unit, duration: SLIDE_DURATION_VALUE, transition: ASPx.AnimationConstants.Transitions.POW_EASE_OUT, onComplete: obj.onComplete
  });
 },
 getInTransitions: function() {
  var arr = [];
  arr.push({
   trans: this.createTransition(this.panel, { property: this.isLeftPosition ? 'left' : 'right', unit: 'px' }),
   start: -this.panel.offsetWidth,
   end: 0
  });
  arr.push({
   trans: this.createTransition(this.overlayPanel, {
    property: 'opacity',
    onComplete: function() {
     this.animationInProgress = false;
    }.aspxBind(this)
   }),
   start: 0,
   end: 100
  });
  return arr;
 },
 getOutTransitions: function() {
  var arr = [];
  arr.push({
   trans: this.createTransition(this.panel, { property: this.isLeftPosition ? 'left' : 'right', unit: 'px' }),
   start: 0,
   end: -this.panel.offsetWidth
  });
  arr.push({
   trans: this.createTransition(this.overlayPanel, {
    property: 'opacity',
    onComplete: function() {
     window.setTimeout(function() {
      this.rollbackAfterAnimateOut();
      this.animationInProgress = false;
     }.aspxBind(this), 0);
    }.aspxBind(this)
   }),
   start: 100,
   end: 0
  });
  return arr;
 },
 animateIn: function() {
  this.animate(this.getInTransitions());
 },
 animateOut: function() {
  this.animate(this.getOutTransitions());
 },
 animate: function(transitions) {
  this.animationInProgress = true;
  for(var i = 0, obj; obj = transitions[i]; i++)
   obj.trans.Start(obj.start, obj.end);
 },
 resetPanelStyle: function() {
  ASPx.SetStyles(this.panel, {
   className: this.panel.className.replace(SLIDE_PANEL_EXPANDED_CLASS_NAME, ''),
   left: '', width: '', display: '', zIndex: ''
  });
 },
 resetOverlayPanelStyle: function() {
  ASPx.SetStyles(this.overlayPanel, {
   display: '',
   zIndex: '',
   marginLeft: 0,
   marginTop: 0
  });
 },
 rollbackAfterAnimateOut: function() {
  this.resetPanelStyle();
  this.resetOverlayPanelStyle();
  document.documentElement.style.overflow = this.cashedHtmlOverflow;
  this.afterCollapsePanel.FireEvent();
 }
});
var appearPanelWithShiftBodyAction = ASPx.CreateClass(appearPanelAction, {
 constructor: function(menu) {
  this.cashedBodyMargin = '';
  this.cashedBodyWidth = '';
  this.constructor.prototype.constructor.call(this, menu);
 },
 getInTransitions: function() {
  var arr = appearPanelAction.prototype.getInTransitions.call(this);
  arr.push({
   trans: this.createTransition(document.body, { property: 'marginLeft', unit: 'px' }),
   start: this.bodyLeftMargin,
   end: (this.isLeftPosition ? 1 : -1) * (this.bodyLeftMargin + this.panel.offsetWidth)
  });
  return arr;
 },
 getOutTransitions: function() {
  var arr = appearPanelAction.prototype.getOutTransitions.call(this);
  arr.push({
   trans: this.createTransition(document.body, { property: 'marginLeft', unit: 'px' }),
   start: (this.isLeftPosition ? 1 : -1) * (this.bodyLeftMargin + this.panel.offsetWidth),
   end: this.bodyLeftMargin
  });
  return arr;
 },
 prepareForAnimateIn: function() {
  this.bodyLeftMargin = ASPx.PxToInt(ASPx.GetCurrentStyle(document.body).marginLeft);
  this.cashedBodyWidth = document.body.style.width;
  this.cashedBodyMargin = document.body.style.marginLeft;
  document.body.style.width = document.body.offsetWidth + 'px';
  appearPanelAction.prototype.prepareForAnimateIn.call(this);
 },
 rollbackAfterAnimateOut: function() {
  document.body.style.width = this.cashedBodyWidth;
  document.body.style.marginLeft = this.cashedBodyMargin;
  appearPanelAction.prototype.rollbackAfterAnimateOut.call(this);
 }
});
var ASPxClientMenu = ASPx.CreateClass(ASPxClientMenuBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isVertical = false;
  this.orientationChanged = false;
  this.firstSubMenuDirection = "Auto";
  this.enableSideMenu = false;
  this.sideMenuWindowInnerWidth = ASPx.MaxMobileWindowWidth;
  this.enableCollapseToIcons = false;
  this.collapseToIconsWindowInnerWidth = ASPx.MaxMobileWindowWidth;
  this.showPopOutImages = false;
  this.sideMenuModeOn = false;
  this.iconsViewModeOn = false;
  this.position = 'left'; 
  this.expandMode = 0; 
  this.direction = this.position == 'left' ? 1 : -1;
  this.appearAction = null;
  this.subMenuStack = null;
  this.breadCrumb = null;
 },
 InlineInitialize: function() {
  var mainElement = this.GetMainElement();
  if(this.enableSideMenu) {
   mainElement.parentNode.className += ' dxm-' + this.position;
   this.subMenuStack = new subMenuStack();
   this.subMenuStack.push(this.GetMainElement());
   this.appearAction = this.createAppearAction();
   this.breadCrumb = this.createBreadCrumbs();
   this.updateBreadCrumbsText('TEMP'); 
   this.switchMenuView(true);
  }
  this.switchBetweenTextAndIcons();
  this.renderHelper.ApplyItemsVerticalAlignment(mainElement);
  ASPxClientMenuBase.prototype.InlineInitialize.call(this);
 },
 BrowserWindowResizeSubscriber: function() {
  return ASPxClientMenuBase.prototype.BrowserWindowResizeSubscriber.call(this) || this.enableSideMenu || this.enableCollapseToIcons;
 },
 SetData: function(data){
  ASPxClientMenuBase.prototype.SetData.call(this, data);
  if(data.adaptiveModeData)
   this.SetAdaptiveMode(data.adaptiveModeData);
 },
 IsVertical: function(indexPath) {
  return this.isVertical || !this.IsRootItem(indexPath) || this.IsAdaptiveMenuItem(indexPath);
 },
 IsSidePanelExpanded: function() {
  return this.enableSideMenu && this.appearAction.getExpanded();
 },
 IsCorrectionDisableMethodRequired: function(indexPath) {
  return (indexPath.indexOf("i") == -1) && (this.firstSubMenuDirection == "RightOrBottom" || this.firstSubMenuDirection == "LeftOrTop");
 },
 SetAdaptiveMode: function(data) {
  this.enableAdaptivity = true;
  if(ASPx.Ident.IsArray(data))
   this.adaptiveItemsOrder = data;
  else
   for(var i = data - 1; i >= 0; i--)
    this.adaptiveItemsOrder.push(i.toString());
 }, 
 OnBrowserWindowResize: function(e) {
  if(this.KeyboardIsShownOnAndroid(e)) return;
  this.switchMenuView();
  this.switchBetweenTextAndIcons();
  this.AdjustControl();
 },
 KeyboardIsShownOnAndroid: function(e) {
  if(ASPx.Browser.AndroidMobilePlatform &&
   e && e.prevWndWidth !== undefined && e.wndWidth !== undefined && e.prevWndWidth === e.wndWidth) {
   var activeElement = document.activeElement;
   return !!activeElement && activeElement.tagName === "INPUT";
  }
  return false;
 },
 AdjustControlCore: function() {
  this.CorrectVerticalAlignment(ASPx.ClearHeight, this.GetPopOutElements, "PopOut", true);
  this.CorrectVerticalAlignment(ASPx.ClearVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
  if(this.orientationChanged){
   this.renderHelper.ChangeOrientaion(this.GetMainElement(), this.isVertical);
   this.orientationChanged = false;
  }
  else
   this.renderHelper.CalculateMenuControl(this.GetMainElement());
  this.CorrectVerticalAlignment(ASPx.AdjustHeight, this.GetPopOutElements, "PopOut", true);
  this.CorrectVerticalAlignment(ASPx.AdjustVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
 },
 GetCorrectionDisabledResult: function(x, toLeftX) {
  switch (this.firstSubMenuDirection) {
   case "RightOrBottom": {
    this.popupToLeft = false;
    return x;
   }
   case "LeftOrTop": {
    this.popupToLeft = true;
    return toLeftX;
   }
  }
 },
 IsHorizontalSubmenuNeedInversion: function(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight) {
  if(this.firstSubMenuDirection == "Auto")
   return ASPxClientMenuBase.prototype.IsHorizontalSubmenuNeedInversion.call(this, subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight);
  return this.firstSubMenuDirection == "LeftOrTop";
 },
 createAppearAction: function() {
  var appearAction = this.expandMode == 0 ? new appearPanelWithShiftBodyAction(this) : new appearPanelAction(this);
  appearAction.afterCollapsePanel.AddHandler(function() {
   while(this.subMenuStack.hasItems())
    this.performBack(true);
   ASPx.SetStyles(this.subMenuStack.last(), { left: '', opacity: '', display: '' });
   ASPx.RemoveElement(this.breadCrumb);
  }.aspxBind(this));
  return appearAction;
 },
 createBreadCrumbs: function() {
  var element = document.createElement('DIV');
  element.className = BREAD_CRUMBS_CLASS_NAME;
  ASPx.Evt.AttachEventToElement(element, 'click', function() { this.performBack(); }.bind(this), true);
  var breadCrumbsBackImage = document.createElement('IMG');
  breadCrumbsBackImage.src = ASPx.EmptyImageUrl;
  breadCrumbsBackImage.className = BACK_ICON_CLASS_NAME;
  element.appendChild(breadCrumbsBackImage);
  var breadCrumbsTitle = document.createElement('SPAN');
  element.appendChild(breadCrumbsTitle);
  return element;
 },
 updateBreadCrumbsText: function() {
  var text = this.subMenuStack.text();
  if(text)
   this.breadCrumb.children[1].innerHTML = this.subMenuStack.text();
 },
 calculateMaxSize: function() {
  var mainElement = this.GetMainElement();
  var cachedWidth = mainElement.style.width;
  mainElement.style.width = '';
  var size = { width: mainElement.offsetWidth, height: mainElement.offsetHeight };
  this.foreachSubMenus(function(item, element) {
   if(!element) return;
   element.className += ' ' + TEMPORARY_VISIBILITY_CLASS_NAME;
   if(element.offsetWidth > size.width)
    size.width = element.offsetWidth;
   if(element.offsetHeight > size.height)
    size.height = element.offsetHeight;
   element.className = element.className.replace(' ' + TEMPORARY_VISIBILITY_CLASS_NAME, '');
  }.bind(this));
  mainElement.style.width = cachedWidth;
  return size;
 },
 foreachSubMenus: function(menuItem, callback) {
  if(arguments.length == 1) {
   callback = menuItem;
   menuItem = this.GetRootItem();
  }
  for(var i = 0, item; item = menuItem.items[i]; i++)
   this.foreachSubMenus(item, callback);
  if(menuItem.indexPath && menuItem.items.length)
   callback(menuItem, this.GetMenuElement(menuItem.indexPath));
 },
 switchMenuView: function(force) {
  if(this.enableSideMenu) {
   aspxGetMenuCollection().DoHidePopupMenus(null, 0, this.name, true, "");
   var prevSideMenuOn = this.sideMenuModeOn;
   this.sideMenuModeOn = window.innerWidth < this.sideMenuWindowInnerWidth;
   if(this.sideMenuModeOn != prevSideMenuOn || force)
    this.switchMenuViewCore();
  }
 },
 switchBetweenTextAndIcons: function() {
  if(this.enableCollapseToIcons) {
   var newIconsViewModeOn = window.innerWidth <= this.collapseToIconsWindowInnerWidth;
   if(this.iconsViewModeOn != newIconsViewModeOn)
    this.ToggleRootItemsCollapsed();
  }
 },
 ToggleRootItemsCollapsed: function() {
  this.iconsViewModeOn = !this.iconsViewModeOn;
  ASPx.ToggleClassNameToElement(this.GetMainElement(), "dxm-onlyIcons", this.iconsViewModeOn);
  if(this.isInitialized) {
   this.renderHelper.ResetMinSize();
   this.renderHelper.CalculateMenuControl(this.GetMainElement(), true);
  }
 },
 switchMenuViewCore: function() {
  if(this.sideMenuModeOn)
   this.switchToSideMenuView();
  else
   this.switchToDefaultMenuView();
 },
 switchToSideMenuView: function() {
  this.SetOrientation('Vertical');
  this.switchSideMenuClass();
  if(!this.showPopOutImages) {
   var mainElement = this.GetMainElement();
   this.replacePopupOutImages(MenuCssClasses.ItemWithoutSubMenu, MenuCssClasses.ItemWithSubMenu);
   mainElement.className = mainElement.className.replace(NO_MAIN_POP_OUT_CLASS_NAME, '');
  }
 },
 switchToDefaultMenuView: function() {
  if(!this.showPopOutImages) {
   var mainElement = this.GetMainElement();
   this.replacePopupOutImages(MenuCssClasses.ItemWithSubMenu, MenuCssClasses.ItemWithoutSubMenu);
   if(mainElement.className.indexOf(NO_MAIN_POP_OUT_CLASS_NAME) == -1)
    mainElement.className += ' ' + NO_MAIN_POP_OUT_CLASS_NAME;
  }
  this.SetOrientation('Horizontal');
  this.switchSideMenuClass();
  this.appearAction.collapse();
 },
 switchSideMenuClass: function() {
  var rootElement = this.GetMainElement().parentNode.parentNode;
  if(this.sideMenuModeOn) {
   if(rootElement.className.indexOf(SIDE_MENU_CLASS_NAME) == -1)
    rootElement.className += ' ' + SIDE_MENU_CLASS_NAME;
  }
  else
   rootElement.className = rootElement.className.replace(' ' + SIDE_MENU_CLASS_NAME, '');
 },
 replacePopupOutImages: function(firstClass, secondClass) {
  var elements = this.renderHelper.GetItemElements(this.GetMainElement());
  for(var i = 0, item = null; item = elements[i]; i++) {
   if(item.className.indexOf(firstClass))
    item.className = item.className.replace(firstClass, secondClass);
  }
 },
 CalculateSubMenuPosition: function(element, x, y, indexPath, enableAnimation) {
  if(this.sideMenuModeOn)
   this.performForward(indexPath);
  else
   ASPxClientMenuBase.prototype.CalculateSubMenuPosition.call(this, element, x, y, indexPath, enableAnimation);
 },
 startPanelAnimation: function(element, props, onComplete) {
  ASPx.AnimationHelper.createMultipleAnimationTransition(element, {
   duration: SLIDE_DURATION_VALUE,
   transition: ASPx.AnimationConstants.Transitions.POW_EASE_OUT,
   onComplete: onComplete
  }).Start(props);
 },
 changeBreadCrumbsParent: function(parent) {
  if(this.subMenuStack.count() == 1 && !parent.querySelector('.' + BREAD_CRUMBS_CLASS_NAME))
   parent.appendChild(this.breadCrumb);
 },
 performForward: function(indexPath) {
  var element = this.GetMenuElement(indexPath);
  if(element != null) {
   var currentSubMenu = this.subMenuStack.last();
   var currentSubMenuWidth = currentSubMenu.offsetWidth;
   var nextSubMenu = this.GetMenuElement(indexPath);
   this.setSubMenuVisible(nextSubMenu);
   this.changeBreadCrumbsParent(nextSubMenu);
   this.subMenuStack.push(nextSubMenu, this.GetItemByIndexPath(indexPath).GetText());
   this.updateBreadCrumbsText();
   this.setSubMenuSize(indexPath, nextSubMenu);
   this.startPanelAnimation(currentSubMenu, {
    left: { from: 0, to: this.direction * -(currentSubMenuWidth / 3), unit: "px" },
    opacity: { from: 1, to: 0 }
   }, function(el) { el.style.display = 'none'; el.style.opacity = ''; });
   window.setTimeout(function() {
    this.startPanelAnimation(nextSubMenu, {
     left: { from: this.direction * currentSubMenuWidth, to: 0, unit: "px" },
     opacity: { from: 0, to: 1 }
    }, function(element) { this.onNextSubmenuAnimationEnd(element); }.bind(this));
   }.bind(this), SLIDE_DURATION_VALUE / 3);
  }
 },
 setSubMenuVisible: function(subMenu) {
  ASPx.SetStyles(subMenu, {
   top: '', display: '', visibility: '', opacity: 0
  });
 },
 setSubMenuSize: function(indexPath, subMenu) {
  var menuElement = this.GetMenuElement(indexPath);
  menuElement.style.width = this.appearAction.clearWidth + 'px';
  subMenu.children[0].style.top = this.breadCrumb.offsetHeight + 'px';
 },
 onNextSubmenuAnimationEnd: function(element) {
  if(element.children.length > 1)
   element.parentNode.appendChild(this.breadCrumb);
 },
 performBack: function(skipAnimation) {
  if(this.subMenuStack.hasItems()) {
   var currentSubMenu = this.subMenuStack.pop();
   var prevSubMenu = this.subMenuStack.last();
   if(skipAnimation)
    this.performBackWithoutAnimation(currentSubMenu, prevSubMenu);
   else
    this.performBackWithAnimation(currentSubMenu, prevSubMenu);
  }
 },
 performBackWithoutAnimation: function(currentSubMenu, prevSubMenu) {
  this.DoHidePopupMenu(null, currentSubMenu);
 },
 performBackWithAnimation: function(currentSubMenu, prevSubMenu) {
  this.updateBreadCrumbsText();
  this.changeBreadCrumbsParent(currentSubMenu);
  var width = currentSubMenu.offsetWidth;
  prevSubMenu.style.opacity = '0';
  prevSubMenu.style.display = '';
  this.startPanelAnimation(currentSubMenu, {
   left: { from: 0, to: this.direction * (width / 3), unit: "px" },
   opacity: { from: 1, to: 0 }
  }, function(el) { el.style.opacity = ''; el.style.display = 'none'; this.DoHidePopupMenu(null, el); }.bind(this));
  window.setTimeout(function() {
   this.startPanelAnimation(prevSubMenu, {
    left: { from: this.direction * -width, to: 0, unit: "px" },
    opacity: { from: 0, to: 1 }
   });
  }.bind(this), SLIDE_DURATION_VALUE / 3);
 },
 GetOrientation: function() {
  return this.isVertical ? "Vertical" : "Horizontal";
 },
 SetOrientation: function(orientation) {
  var isVertical = orientation === "Vertical";
  if(this.isVertical !== isVertical){
   this.isVertical = isVertical;
   this.orientationChanged = true;
   this.ResetControlAdjustment();
   this.AdjustControl();
  }
 },
 ToggleSideMenu: function() {
  if(this.sideMenuModeOn)
   this.appearAction.toggleExpanded();
 }
});
ASPx.Ident.scripts.ASPxClientMenu = true;
ASPxClientMenu.Cast = ASPxClientControl.Cast;
var ASPxClientMenuExt = ASPx.CreateClass(ASPxClientMenu, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 NeedCreateItemsOnClientSide: function() {
  return true;
 }
});
var ASPxClientMenuItemEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(item) {
  this.constructor.prototype.constructor.call(this);
  this.item = item;
 }
});
var ASPxClientMenuItemMouseEventArgs = ASPx.CreateClass(ASPxClientMenuItemEventArgs, {
 constructor: function(item, htmlElement) {
  this.constructor.prototype.constructor.call(this, item);
  this.htmlElement = htmlElement;
 }
});
var ASPxClientMenuItemClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, item, htmlElement, htmlEvent) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.item = item;
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseDownEventName, function(evt) {
 return aspxGetMenuCollection().OnMouseDown(evt);
});
function aspxAMIMOver(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnAfterItemOver(args.item, args.element);
}
function aspxBMIMOver(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnBeforeItemOver(args.item, args.element);
}
function aspxAMIMOut(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnAfterItemOut(args.item, args.element, args.toElement);
}
function aspxMSBOver(source, args) {
 var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
 if(menu != null) menu.ClearDisappearTimer();
}
ASPx.AddAfterSetFocusedState(aspxAMIMOver);
ASPx.AddAfterClearFocusedState(aspxAMIMOut);
ASPx.AddAfterSetHoverState(aspxAMIMOver);
ASPx.AddAfterClearHoverState(aspxAMIMOut);
ASPx.AddBeforeSetFocusedState(aspxBMIMOver);
ASPx.AddBeforeSetHoverState(aspxBMIMOver);
ASPx.AddAfterSetHoverState(aspxMSBOver);
ASPx.AddAfterSetPressedState(aspxMSBOver);
ASPx.AddBeforeDisabled(function(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null)
  menu.OnBeforeItemDisabled(args.item, args.element);
});
ASPx.AddFocusedItemKeyDown(function(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null)
  menu.OnFocusedItemKeyDown(args.htmlEvent, args.item);
});
ASPx.AddAfterClearHoverState(function(source, args) {
 var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
 if(menu != null) menu.SetDisappearTimer();
});
ASPx.AddAfterSetPressedState(function(source, args) {
 var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
 if(menu) menu.StartScrolling(args.element.id, 1, 4);
});
ASPx.AddAfterClearPressedState(function(source, args) {
 var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
 if(menu) menu.StopScrolling(args.element.id);
});
if(!ASPx.Browser.TouchUI) {
 ASPx.AddAfterSetHoverState(function(source, args) {
  var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
  if(menu) menu.StartScrolling(args.element.id, 15, 1);
  if(!menu)
   menu = aspxGetMenuCollection().GetMenu(args.item.name);
  if(menu && menu.sideMenuModeOn && menu.IsItemElement(args.element)) {
   menu.hoverItemName = args.item.name;
   menu.MarkPrecedingItem(args.item.name, PRE_HOVERED_ELEMENT_CLASS_NAME, true);
  }
 });
 ASPx.AddAfterClearHoverState(function(source, args) {
  var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
  if(menu) menu.StopScrolling(args.element.id);
  if(!menu)
   menu = aspxGetMenuCollection().GetMenu(args.item.name);
  if(menu && menu.sideMenuModeOn && menu.IsItemElement(args.element)) {
   menu.hoverItemName = null;
   menu.UnmarkPrecedingItem(args.item.name, PRE_HOVERED_ELEMENT_CLASS_NAME, true);
  }
 });
}
ASPx.MIClick = function(evt, name, indexPath) {
 if(ASPx.TouchUIHelper.isMouseEventFromScrolling) return;
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemClick(indexPath, evt);
};
ASPx.MIDDClick = function(evt, name, indexPath) {
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemDropDownClick(indexPath, evt);
 if(!ASPx.Browser.NetscapeFamily)
  evt.cancelBubble = true;
};
ASPx.GetMenuCollection = aspxGetMenuCollection;
ASPx.MenuRenderHelper = MenuRenderHelper;
ASPx.MenuItemClasses = MenuCssClasses;
window.ASPxClientMenuBase = ASPxClientMenuBase;
window.ASPxClientMenuCollection = ASPxClientMenuCollection;
window.ASPxClientMenuItem = ASPxClientMenuItem;
window.ASPxClientMenu = ASPxClientMenu;
window.ASPxClientMenuExt = ASPxClientMenuExt;
window.ASPxClientMenuItemEventArgs = ASPxClientMenuItemEventArgs;
window.ASPxClientMenuItemMouseEventArgs = ASPxClientMenuItemMouseEventArgs;
window.ASPxClientMenuItemClickEventArgs = ASPxClientMenuItemClickEventArgs;
})();

(function() {
ASPx.currentDragHelper = null;
var currentCursorTargets = null;
var DragHelper = ASPx.CreateClass(null, {
 constructor: function(e, root, clone){
  if(ASPx.currentDragHelper != null) ASPx.currentDragHelper.cancelDrag();
  this.dragArea = 5;
  this.clickX = ASPx.Evt.GetEventX(e);
  this.clickY = ASPx.Evt.GetEventY(e);
  this.centerClone = false;
  this.cachedCloneWidth = -1;
  this.cachedCloneHeight = -1;
  this.cachedOriginalX = -1;
  this.cachedOriginalY = -1;
  this.canDrag = true; 
  if(typeof(root) == "string") 
   root = ASPx.GetParentByTagName(ASPx.Evt.GetEventSource(e), root);
  this.source = e ? ASPx.Evt.GetEventSource(e) : null;
  this.obj = root && root != null ? root : ASPx.Evt.GetEventSource(e);
  this.clone = clone;
  this.dragObj = null; 
  this.additionalObj = null;
  this.onDoClick = null;
  this.onEndDrag = null;
  this.onCancelDrag = null;
  this.onDragDivCreating = null;
  this.onDragDivCreated = null;
  this.onCloneCreating = null;
  this.onCloneCreated = null;
  this.dragDiv = null;
  ASPx.currentDragHelper = this;
  this.clearSelectionOnce = false;
  this.PreventContextMenuOnLongTap();
 }, 
 drag: function(e) {
  if(!this.canDrag) return;
  ASPx.Selection.Clear();
  if(!this.isDragging()) {
   if(!this.isOutOfDragArea(e)) 
    return;
   this.startDragCore(e);
  }
  if(ASPx.Browser.IE && !ASPx.Evt.IsLeftButtonPressed(e)) {
   this.cancelDrag(e);
   return;
  }
  if(!ASPx.Browser.IE)
   ASPx.Selection.SetElementSelectionEnabled(document.body, false);
  this.dragCore(e);
 },
 startDragCore: function(e) {  
  this.dragObj = this.clone != true ? this.obj : this.createClone(e);
 },
 dragCore: function(e) { 
  this.updateDragDivPosition(e);
 },
 endDrag: function(e) { 
  if(!this.isDragging() && !this.isOutOfDragArea(e)) {
   if(this.onDoClick)
    this.onDoClick(this, e);
  } else {
   if(this.onEndDrag)
    this.onEndDrag(this, e);
  }
  this.cancelDrag();
 },
 cancel: function(){
  this.cancelDrag();
 },
 cancelDrag: function() {
  if(this.dragDiv != null) {
   document.body.removeChild(this.dragDiv);
   this.dragDiv = null;
  }
  if(this.onCancelDrag)
   this.onCancelDrag(this);
  ASPx.currentDragHelper = null;
  if(!ASPx.Browser.IE)
   ASPx.Selection.SetElementSelectionEnabled(document.body, true);
 },
 isDragging: function() {    
  return this.dragObj != null;
 },
 updateDragDivPosition: function(e) {
  if(this.centerClone) {
   this.dragDiv.style.left = ASPx.Evt.GetEventX(e) - this.cachedCloneWidth / 2 + "px";
   ASPx.SetAbsoluteY(this.dragDiv, ASPx.Evt.GetEventY(e) - this.cachedCloneHeight / 2);
  } else {
   this.dragDiv.style.left = this.cachedOriginalX + ASPx.Evt.GetEventX(e) - this.clickX + "px";
   ASPx.SetAbsoluteY(this.dragDiv, this.cachedOriginalY + ASPx.Evt.GetEventY(e) - this.clickY);
  }
 },
 createClone: function(e) {
  this.dragDiv = document.createElement("div");
  if(this.onDragDivCreating)
   this.onDragDivCreating(this, this.dragDiv);
  var clone = this.creatingClone();  
  this.dragDiv.appendChild(clone);
  document.body.appendChild(this.dragDiv);
  this.dragDiv.style.position = "absolute";    
  this.dragDiv.style.cursor = "move";
  this.dragDiv.style.borderStyle = "none";
  this.dragDiv.style.padding = "0";
  this.dragDiv.style.margin = "0";
  this.dragDiv.style.backgroundColor = "transparent";
  this.dragDiv.style.zIndex = 20000; 
  if(this.onCloneCreated)
   this.onCloneCreated(clone);
  this.cachedCloneWidth = clone.offsetWidth;
  this.cachedCloneHeight = clone.offsetHeight;
  if(!this.centerClone) {  
   this.cachedOriginalX = ASPx.GetAbsoluteX(this.obj);
   this.cachedOriginalY = ASPx.GetAbsoluteY(this.obj);
  }
  this.dragDiv.style.width = this.cachedCloneWidth + "px";
  this.dragDiv.style.height = this.cachedCloneHeight + "px";
  if(this.onDragDivCreated)
   this.onDragDivCreated(this, this.dragDiv);
  this.updateDragDivPosition(e);
  return this.dragDiv;
 },
 creatingClone: function() {
  var clone = this.obj.cloneNode(true);
  var scripts = ASPx.GetNodesByTagName(clone, "SCRIPT");
  for(var i = scripts.length - 1; i >= 0; i--)
   ASPx.RemoveElement(scripts[i]);
  ASPx.RippleHelper.RemoveRippleContainer(clone);
  if(!this.onCloneCreating) return clone;
  return this.onCloneCreating(clone);
 },
 addElementToDragDiv: function(element) {
  if(this.dragDiv == null) return;
  this.additionalObj = element.cloneNode(true);
  this.additionalObj.style.visibility = "visible";
  this.additionalObj.style.display = "";
  this.additionalObj.style.top = "";
  this.dragDiv.appendChild(this.additionalObj);
 },
 removeElementFromDragDiv: function() {
  if(this.additionalObj == null || this.dragDiv == null) return;
  this.dragDiv.removeChild(this.additionalObj);
  this.additionalObj = null;
 },
 isOutOfDragArea: function(e) {
  return Math.max(
   Math.abs(ASPx.Evt.GetEventX(e) - this.clickX), 
   Math.abs(ASPx.Evt.GetEventY(e) - this.clickY)
  ) >= this.dragArea;
 },
 PreventContextMenuOnLongTap: function() {
  if(!ASPx.DragUtils.RequirePreventContextMenuOnLongTap(this.obj))
   return;
  this.contextMenuHandler = function(e) {
   ASPx.Evt.DetachEventFromElement(this.obj, "contextmenu", this.contextMenuHandler);
   ASPx.Evt.PreventEvent(e);
  }.bind(this);
  ASPx.Evt.AttachEventToElement(this.obj, "contextmenu", this.contextMenuHandler);
 }
});
var DragUtils = {
 PreventContextMenuOnLongTapMarker: "dxPCM",
 RequirePreventContextMenuOnLongTap: function(element) {
  return element && ASPx.ElementHasCssClass(element, this.PreventContextMenuOnLongTapMarker);
 },
 PreventContextMenuOnLongTap: function(element) {
  if(element && ASPx.Browser.Edge && ASPx.Browser.MSTouchUI) {
   ASPx.AddClassNameToElement(element, this.PreventContextMenuOnLongTapMarker);
  }
 }
};
var CursorTargetTag = { Right: 0, Left: 1, Top: 2, Bottom: 3 };
var CursorTargets = ASPx.CreateClass(null, {
 constructor: function(control) {
  this.control = control;
  this.list = [];
  this.oldtargetElement = null;
  this.oldtargetTag = CursorTargetTag.Right;
  this.targetElement = null;
  this.targetTag = CursorTargetTag.Right;
  this.x = 0;
  this.y = 0;
  this.onTargetCreated = null;
  this.onTargetChanging = null;
  this.onTargetChanged = null;
  this.onTargetAdding = null;
  this.onTargetAllowed = null;
  currentCursorTargets = this;
  this.treeLine = null;
  this.initialScrollOffsetInfo = this.GetParentElementsScrollOffsetInfo();
 },
 addElement: function(element) {
  if(!this.canAddElement(element)) return null;
  var target = new CursorTarget(element);
  if (this.onTargetCreated)
   this.onTargetCreated(this, target);
  this.list.push(target);
  return target;
 },
 removeElement: function(element) {
  for(var i = 0; i < this.list.length; i++) {
   if(this.list[i].element == element) {
    this.list.splice(i, 1);
    return;
   }
  }
 },
 addParentElement: function(parent, child) {
  var target = this.addElement(parent);
  if(target != null) {
   target.targetElement = child;
  }
  return target;
 },
 RegisterTargets: function(element, idPrefixArray) {
  this.addFunc = this.addElement;
  this.RegisterTargetsCore(element, idPrefixArray);
 },
 UnregisterTargets: function(element, idPrefixArray) {
  this.addFunc = this.removeElement;
  this.RegisterTargetsCore(element, idPrefixArray);
 },
 RegisterTargetsCore: function(element, idPrefixArray) {
  if(element == null) return;
  for(var i = 0; i < idPrefixArray.length; i++)
   this.RegisterTargetCore(element, idPrefixArray[i]);
 },
 RegisterTargetCore: function(element, idPrefix) {
  if(!ASPx.IsExists(element.id)) return;
  if(element.id.indexOf(idPrefix) > -1)
   this.addFunc(element);
  for(var i = 0; i < element.childNodes.length; i++)
   this.RegisterTargetCore(element.childNodes[i], idPrefix);
 },
 canAddElement: function(element) {
  if(element == null || !ASPx.GetElementDisplay(element))
   return false;
  for(var i = 0; i < this.list.length; i++) {
   if(this.list[i].targetElement == element) return false;
  }
  if(this.onTargetAdding != null && !this.onTargetAdding(this, element)) return false;
  return element.style.visibility != "hidden";
 },
 getTarget: function(x, y) {
  for(var i = 0; i < this.list.length; i++) {
   var record = this.list[i];
   if(record.contains(x, y)) {
    if(!this.onTargetAllowed || this.onTargetAllowed(record.targetElement, x, y))
     return record.targetElement;
   }
  }
  return null;
 },
 targetChanged: function(element, tag) {
  this.targetElement = element;
  this.targetTag = ASPx.IsExists(tag) ? tag : ASPx.CursorTargetTag.Right;
  if(this.onTargetChanging)
   this.onTargetChanging(this);
  if(this.oldtargetElement != this.targetElement || this.oldtargetTag != this.targetTag) {
   if(this.onTargetChanged)
    this.onTargetChanged(this);
   this.oldtargetElement = this.targetElement;
   this.oldtargetTag = this.targetTag;
  }
 },
 cancelChanging: function() {
  this.targetElement = this.oldtargetElement;
  this.targetTag = this.oldtargetTag;
 },
 refreshTargetTag: function(allowVerticalTags){
  this.targetTag = this.calculateTargetTag(allowVerticalTags);
 },
 calculateTargetTag: function(allowVerticalTags){
  if(allowVerticalTags && this.isCenterPartOfElement())
   return this.isTopPartOfElement() ? CursorTargetTag.Top : CursorTargetTag.Bottom;
  return this.isLeftPartOfElement() ? CursorTargetTag.Left : CursorTargetTag.Right;
 },
 isCenterPartOfElement: function(){
  if(!this.targetElement) return false;
  var coordinate = this.y - this.targetElementY();
  return coordinate < this.targetElement.offsetHeight / 3 || coordinate >  2 * this.targetElement.offsetHeight / 3;
 },
 isLeftPartOfElement: function() {
  if(!this.targetElement) return true;
  var left = this.x - this.targetElementX();
  return left < this.targetElement.offsetWidth / 2;
 },
 isTopPartOfElement: function() {
  if(!this.targetElement) return true;
  var top = this.y - this.targetElementY();
  return top < this.targetElement.offsetHeight / 2;
 },
 targetElementX: function() {
  return this.targetElement != null ? ASPx.GetAbsoluteX(this.targetElement) : 0;
 },
 targetElementY: function() {
  return this.targetElement != null ? ASPx.GetAbsoluteY(this.targetElement) : 0;
 },
 onmousemove: function(e) {
  this.doTargetChanged(e);
 },
 onmouseup: function(e) {
  this.doTargetChanged(e);
  currentCursorTargets = null;
 },
 doTargetChanged: function(e) {
  this.x = ASPx.Evt.GetEventX(e);
  this.y = ASPx.Evt.GetEventY(e);
  var coords = this.GetScrollOffsetCoordinates(this.x, this.y);
  this.targetChanged(this.getTarget(coords.x, coords.y), 0);
 },
 GetScrollOffsetCoordinates: function(x, y) {
  var scrollOffsetInfo = this.GetParentElementsScrollOffsetInfo();
  var dx = scrollOffsetInfo.left - this.initialScrollOffsetInfo.left;
  var dy = scrollOffsetInfo.top - this.initialScrollOffsetInfo.top;
  return {
   x : x + dx,
   y : y + dy
  };
 },
 GetParentElementsScrollOffsetInfo: function() {
  var result = { top : 0, left : 0 };
  var treeLine = this.GetScrollableElementsTreeLine();
  for(var i = 0; i < treeLine.length; i++) {
   result.top += treeLine[i].scrollTop;
   result.left += treeLine[i].scrollLeft;
  }
  return result;
 },
 GetScrollableElementsTreeLine: function() {
  if(!this.treeLine)
   this.treeLine = ASPx.GetElementTreeLine(this.control.GetMainElement().parentNode).filter(function(el) { 
    return ASPx.IsScrollableElement(el); 
   });
  return this.treeLine;
 }
});
var CursorTarget = ASPx.CreateClass(null, {
 constructor: function(element) {
  this.element = element;
  this.targetElement = element;
  this.UpdatePosition();
 },
 contains: function(x, y) {
  return x >= this.absoluteX && x <= this.absoluteX + this.GetElementWidth() &&
   y >= this.absoluteY && y <= this.absoluteY + this.GetElementHeight();
 },
 GetElementWidth: function() {
  return this.element.offsetWidth;
 },
 GetElementHeight: function() {
  return this.element.offsetHeight;
 },
 UpdatePosition: function() {
  this.absoluteX = ASPx.GetAbsoluteX(this.element);
  this.absoluteY = ASPx.GetAbsoluteY(this.element);
 }
});
if(ASPx.Browser.MSTouchUI)
 ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.pointerCancelEventName, function(e) {
  if(ASPx.currentDragHelper != null) {
   ASPx.currentDragHelper.cancel(e);
   return true;
  }
 });
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function(e) {
  if(ASPx.currentDragHelper != null) {
   ASPx.currentDragHelper.endDrag(e);
   return true;
  }
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, function(e) {
 if(ASPx.currentDragHelper != null && !(ASPx.Browser.WebKitTouchUI && ASPx.TouchUIHelper.isGesture)) {
  ASPx.currentDragHelper.drag(e);
  if(ASPx.TouchUIHelper.isTouchEvent(e) && ASPx.currentDragHelper.canDrag) {
   ASPx.Evt.PreventEvent(e);
   ASPx.TouchUIHelper.preventScrollOnEvent(e);
  }
  return true;
 }
});
ASPx.Evt.AttachEventToDocument("keydown", function(e) {
 if(!ASPx.currentDragHelper) return;
 if(e.keyCode == ASPx.Key.Esc)
  ASPx.currentDragHelper.cancelDrag();
 return true;
});
ASPx.Evt.AttachEventToDocument("keyup", function(e) {
 if (!ASPx.currentDragHelper) return;
 if(e.keyCode == ASPx.Key.Esc && ASPx.Browser.WebKitFamily)
  ASPx.currentDragHelper.cancelDrag();
 return true;
});
ASPx.Evt.AttachEventToDocument("selectstart", function(e) {
 var drag = ASPx.currentDragHelper;
 if(drag && (drag.canDrag || drag.clearSelectionOnce)) {
  ASPx.Selection.Clear();
  drag.clearSelectionOnce = false;
  ASPx.Evt.PreventEvent(e);
  return false;
 }
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function(e) { 
 if(currentCursorTargets != null) {
  currentCursorTargets.onmouseup(e);
  return true;
 }
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, function(e) {
 if(currentCursorTargets != null) {
  currentCursorTargets.onmousemove(e);
  return true;
 }
});
ASPx.DragHelper = DragHelper;
ASPx.CursorTargets = CursorTargets;
ASPx.CursorTarget = CursorTarget;
ASPx.CursorTargetTag = CursorTargetTag;
ASPx.DragUtils = DragUtils;
})();
(function() {
var GridDragHelperBase = ASPx.CreateClass(null, {
 maxRepeatScrollTimeout : 30,
 updateTargetPositionTimeout: 50,
 scrollingStep: 1,
 constructor: function() {
  this.isHorzDrag = false;
  this.savedPositions = { };
  this.rect = null;
 },
 GetActiveTargets: function() { return [ ]; },
 GetScrollHelper: function() { return null; },
 GetExtraCellWidth: function() { return 0; },
 GetCustomizationWindowElement: function() { return null; },
 GetScrollableControl: function() { 
  var helper = this.GetScrollHelper();
  return this.isHorzDrag ? helper.GetHorzScrollableControl() : helper.GetVertScrollableControl();
 },
 OnDragCreated: function(isHorzDrag) {
  if(this.NeedScrollOnDrag(isHorzDrag))
   this.InitializeDragScrolling(isHorzDrag);
 },
 InitializeDragScrolling: function(isHorzDrag) {
  this.isHorzDrag = isHorzDrag;
  this.SaveControlDimensions();
  this.mouseMoveHandler = function(e) { this.OnMouseMove(e); }.aspxBind(this);
  ASPx.Evt.AttachEventToDocument("mousemove", this.mouseMoveHandler);
 },
 SaveControlDimensions: function() {
  var scrollableControl = this.GetScrollableControl();
  var visibility = ASPx.GetElementDisplay(scrollableControl);
  ASPx.SetElementDisplay(scrollableControl, true);
  var scrollDivX = ASPx.GetAbsoluteX(scrollableControl);
  var scrollDivY = ASPx.GetAbsoluteY(scrollableControl);
  var width = scrollableControl.offsetWidth;
  var height = scrollableControl.offsetHeight;
  ASPx.SetElementDisplay(scrollableControl, visibility);
  this.SaveControlDimensionsCore(scrollDivX, width, scrollDivY, height);
 },
 SaveControlDimensionsCore: function(scrollDivX, width, scrollDivY, height) {
  this.rect = { 
   left: scrollDivX, 
   right: scrollDivX + width - this.GetExtraCellWidth(),
   top: scrollDivY,
   bottom: scrollDivY + height
  };
 },
 NeedScrollOnDrag: function(isHorzDrag) {
  var helper = this.GetScrollHelper();
  if(!helper || (isHorzDrag && !helper.HasHorzScroll()) || !isHorzDrag && !helper.HasVertScroll())
   return false;
  return ASPx.Browser.IE || ASPx.Browser.Firefox || helper.HasVertScroll();
 },
 OnMouseMove: function(e) {
  var pos = this.isHorzDrag ? ASPx.Evt.GetEventX(e) : ASPx.Evt.GetEventY(e);
  if(pos === this.savedPositions[this.isHorzDrag])
   return;
  var line = { 
   start:  this.isHorzDrag ? this.rect.left  : this.rect.top,
   end: this.isHorzDrag ? this.rect.right : this.rect.bottom
  };
  var isLeft = pos < line.start;
  var diff = isLeft ? line.start - pos : pos - line.end;
  if(diff <= 0) {
   this.CancelScrolling();
   return;
  }
  this.repeatScrollTimeout = diff < this.maxRepeatScrollTimeout ? this.maxRepeatScrollTimeout - diff : 1;
  this.scrollInc = this.scrollingStep * (isLeft ? -1 : 1);
  this.savedPositions[this.isHorzDrag] = pos;
  this.StartScrolling(this.isHorzDrag);
 },
 StartScrolling: function() {
  if(this.scrollingProcessing)
   return;
  this.scrollingProcessing = true;
  this.scrollHandler = this.RepeatScrolling();
 },
 CancelDrag: function() {
  if(this.mouseMoveHandler)
   ASPx.Evt.DetachEventFromDocument("mousemove", this.mouseMoveHandler);
  this.CancelScrolling();
 },
 CancelScrolling: function() {
  this.scrollingProcessing = false;
  this.scrollHandler = ASPx.Timer.ClearTimer(this.scrollHandler);
 },
 RepeatScrolling: function() {
  var scrollableControl = this.GetScrollableControl();
  if(this.isHorzDrag)
   scrollableControl.scrollLeft += this.scrollInc;
  else
   scrollableControl.scrollTop += this.scrollInc;
  return window.setTimeout(function() { this.scrollHandler = this.RepeatScrolling(); }.aspxBind(this), this.repeatScrollTimeout);
 },
 UpdateTargetPositionPostponed: function() {
  if(!this.GetActiveTargets().length)
   return;
  this.updateTargetPositionTimerID = ASPx.Timer.ClearTimer(this.updateTargetPositionTimerID);
  this.updateTargetPositionTimerID = window.setTimeout(function() { this.UpdateTargetPosition(); }.aspxBind(this), this.updateTargetPositionTimeout);
 },
 UpdateTargetPosition: function() { 
  var targets = this.GetActiveTargets();
  for(var i = 0; i < targets.length; i++)
   targets[i].UpdatePosition();
 },
 OnHeaderTargetAllowed: function(targetElement, x, y) {
  if(!this.rect)
   return true;
  var custWin = this.GetCustomizationWindowElement();
  var inRect = x >= this.rect.left && x <= this.rect.right;
  return inRect || custWin === targetElement;
 },
 UpdateScrollableControlsOnDrag: function(src) {
  this.UpdateTargetPositionPostponed();
  var helper = this.GetScrollHelper();
  var contentScrollDiv = helper.GetScrollDiv(helper.GetContentTable());
  if(contentScrollDiv === src && helper.HasVertScroll()) {
   var scrollDivs = [ helper.GetScrollDiv(helper.GetHeaderTable()), helper.GetScrollDiv(helper.GetFooterTable()) ];
   for(var i = 0; i < scrollDivs.length; i++)
    if(scrollDivs[i])
     scrollDivs[i].scrollLeft = src.scrollLeft;
  }
 }
});
var BatchEditApi = ASPx.CreateClass(null, {
 constructor: function(owner) {
  this.owner = owner;
 },
 GetHelper: function() { return this.owner.GetBatchEditHelper(); },
 GetColumnIndex: function(column) {  },
 CreateCellInfo: function(key, column) {  },
 SetCellValueCore: function(key, column, value, displayText, cancelCellHighlighting) {
  var helper = this.GetHelper();
  var columnIndex = this.GetColumnIndex(column);
  if(!helper || columnIndex === null) 
   return;
  if(!helper.IsValidRecord(key) || !helper.IsEditableColumn(columnIndex))
   return;
  if(helper.IsEditingCell(key, columnIndex))
   return;
  if(!ASPx.IsExists(displayText))
   displayText = helper.GetColumnDisplayTextByEditor(value, columnIndex);
  if(helper.IsCheckColumn(columnIndex))
   displayText = helper.GetCheckColumnDisplayText(value, columnIndex);
  if(helper.IsColorEditColumn(columnIndex))
   displayText = helper.GetColorEditColumnDisplayText(value, columnIndex);
  helper.SetCellValue(key, columnIndex, value, displayText, cancelCellHighlighting);
  helper.ResetCellValidationState(key, columnIndex);
  helper.UpdateSyncInput(); 
  helper.UpdateItem(key, [columnIndex], false, false, true);
  helper.UpdateCommandButtonsEnabled();
  helper.RemoveRecordErrorIfHasNoChanges(key);
 },
 GetColumnDisplayText: function(column, value) {
  var helper = this.GetHelper();
  var columnIndex = this.GetColumnIndex(column);
  if(!helper || columnIndex === null) 
   return;
  return helper.GetColumnDisplayTextByEditor(value, columnIndex);
 },
 GetCellValueCore: function(key, column, initial) {
  var helper = this.GetHelper();
  var columnIndex = this.GetColumnIndex(column);
  if(!helper || columnIndex === null) return;
  return helper.GetCellValue(key, columnIndex, initial);
 },
 GetCellTextContainerCore: function(key, column) {
  var helper = this.GetHelper();
  var columnIndex = this.GetColumnIndex(column);
  if(!helper || columnIndex === null) return;
  return helper.GetCellTextContainer(key, columnIndex);
 },
 HasChangesCore: function(key, column) {
  var helper = this.GetHelper();
  if(!helper) return false;
  var columnIndex = this.GetColumnIndex(column);
  return helper.HasChanges(key, columnIndex);
 },
 ResetChangesCore: function(key, columnIndex) {
  var helper = this.GetHelper();
  if(!helper) return;
  helper.ResetChanges(key, columnIndex);
  helper.UpdateCommandButtonsEnabled();
 },
 StartEditCore: function(key, columnIndex) {
  var helper = this.GetHelper();
  if(!helper) return;
  helper.StartEdit(key, columnIndex);
 },
 EndEdit: function() {
  var helper = this.GetHelper();
  if(!helper || helper.GetFocusHelper().lockUserEndEdit) 
   return;
  helper.EndEdit();
 },
 MoveFocusBackward: function() {
  var helper = this.GetHelper();
  if(!helper) return;
  return helper.GetFocusHelper().MoveFocusPrev();
 },
 MoveFocusForward: function() {
  var helper = this.GetHelper();
  if(!helper) return;
  return helper.GetFocusHelper().MoveFocusNext();
 },
 IsColumnEdited: function(column) {
  var helper = this.GetHelper();
  if(!helper || !column) return false;
  return helper.IsColumnEdited(this.GetColumIndex(column));
 },
 ValidateItems: function(validateOnlyModified, validateOnCurrentPageOnly) {
  var helper = this.GetHelper();
  if(!helper) return false;
  return !!helper.UserValidateItems(null, validateOnlyModified, validateOnCurrentPageOnly).isValid;
 },
 ValidateRecordCore: function(key) {
  var helper = this.GetHelper();
  if(!helper) return false;
  return !!helper.UserValidateItems(key).isValid;
 }, 
 IsDeletedRecordCore: function(key) {
  var helper = this.GetHelper();
  return helper ? helper.IsDeletedRecord(key) : false;
 },
 IsNewRecordCore: function(key) {
  var helper = this.GetHelper();
  if(!helper) return false;
  return helper.IsNewRecord(key);
 },
 GetEditCellInfo: function() {
  var helper = this.GetHelper();
  if(!helper || !helper.IsEditing()) 
   return null;
  return this.CreateCellInfo(helper.GetEditingRecordKey(), helper.GetFocusedColumn());
 },
 AddNewRecordCore: function(parentRecordKey) {
  var helper = this.GetHelper();
  if(helper)
   helper.AddNewRecord(parentRecordKey);
 },
 DeleteRecordCore: function(key) {
  var helper = this.GetHelper();
  if(helper)
   helper.DeleteItem(key);
 },
 RecoverRecordCore: function(key) {
  var helper = this.GetHelper();
  if(helper)
   helper.RecoverRecord(key);
 },
 GetRecordKeys: function(includeDeleted) {
  var helper = this.GetHelper();
  if(!helper) return [ ];
  return helper.GetRecordKeys(!includeDeleted);
 },
 GetInsertedRecordKeys: function() {
  var helper = this.GetHelper();
  if(!helper) return [ ];
  var indices = helper.GetInsertedRecordKeys();
  if(helper.IsNewItemOnTop())
   indices.reverse();
  return indices;
 },
 GetDeletedRecordKeys: function() {
  var helper = this.GetHelper();
  if(!helper) return [ ];
  return helper.deletedItemKeys.slice();
 },
 GetUpdatedRecordKeys: function() {
  var helper = this.GetHelper();
  if(!helper) return [ ];
  return ASPx.GetObjectKeys(helper.updatedValues);
 },
 GetUnsavedChanges: function() {
  var helper = this.GetHelper();
  if(!helper) return { };
  return helper.GetChangedValuesInfo();
 }
});
var GridStyleHelperBase = ASPx.CreateClass(null, {
 ClearItemStyleKey: "items",
 ErrorItemHtmlKey: "ei",
 BatchEditCellKey: "bec",
 BatchEditModifiedCellKey: "bemc",
 BatchEditMergedModifiedCellKey: "bemergmc",
 BatchEditDeletedItemKey: "bedi",
 FocusedCellKey: "fc",
 InitCellStyleKey: "initial",
 AppliedBatchEditCellStylKey: "batchEdit",
 AppliedFocusedCellStyleKey: "focused",
 GetStyles: function() { return null; },
 GetStyleInfo: function(styleKey, columnIndex) {
  var info = this.GetStyleInfoCore(styleKey, columnIndex);
  if(info)
   info.styleKey = styleKey;
  return info;
 },
 GetStyleInfoCore: function(styleKey, keyPostFix) {
  var styles = this.GetStyles();
  if(!styles)
   return null;
  if(ASPx.IsExists(keyPostFix)) {
   var key = styleKey + keyPostFix;
   if(styles.hasOwnProperty(key))
    return styles[key];
  }
  return styles[styleKey];
 },
 GetCellStyleKeys: function() {
  var result = [];
  result.push(this.AppliedBatchEditCellStylKey);
  result.push(this.AppliedFocusedCellStyleKey);
  return result;
 },
 UpdateCellBatchEditStyle: function(style, cell) { this.UpdateCellStyle(this.AppliedBatchEditCellStylKey, style, cell); },
 UpdateCellFocusedStyle: function(style, cell) { this.UpdateCellStyle(this.AppliedFocusedCellStyleKey, style, cell); },
 UpdateCellStyle: function(styleKey, style, cell) {
  if(!cell) return;
  this.EnsureCellStyles(cell);
  cell.appliedStyles[styleKey] = this.GetCellStyleToApply(style);
  this.ApplyCellStyles(cell);
 },
 EnsureCellStyles: function(cell) {
  if(cell.appliedStyles)
   return;
  cell.appliedStyles = { }; 
  cell.appliedStyles[this.InitCellStyleKey] = this.CreateEmptyCellStyle(cell.className, cell.style.cssText);
  var keys = this.GetCellStyleKeys();
  for(var i = 0; i < keys.length; i++)
   cell.appliedStyles[keys[i]] = this.CreateEmptyCellStyle();
 },
 CreateEmptyCellStyle: function(className, cssText) {  
  className = className || "";
  cssText = cssText || "";
  return { className: className, cssText: cssText};
 },
 GetCellStyleToApply: function(style) {
  var result = this.CreateEmptyCellStyle();
  if(style) {
   result.className = style.className || "";
   result.cssText = style.cssText || "";
  }
  return result;
 },
 ApplyCellStyles: function(cell) {
  var className = "";
  var cssText = "";
  for(var key in cell.appliedStyles) {
   if(!cell.appliedStyles.hasOwnProperty(key)) continue;
   var style = cell.appliedStyles[key];
   if(!style) continue;
   if(style.className)
    className += " " + style.className;
   if(style.cssText)
    cssText += ";" + style.cssText;
  }
  cell.className = className;
  cell.style.cssText = cssText;
 },
 AddToBatchEditStyle: function(cell, styles, classNames) { this.AddToCellStyleCore(cell, this.AppliedBatchEditCellStylKey, styles, classNames); },
 AddToInitialStyle: function(cell, styles, classNames) { this.AddToCellStyleCore(cell, this.InitCellStyleKey, styles, classNames); },
 AddToCellStyleCore: function(cell, styleKey, styles, classNames) {
  if((!styles && !classNames) || !cell) return;
  this.EnsureCellStyles(cell);
  var style = cell.appliedStyles[styleKey];
  if(!style) return;
  if(classNames)
   style.className += " " + classNames.join(' ');
  if(styles) {
   var fakeCell = document.createElement("TD");
   fakeCell.style.cssText = style.cssText || "";
   for(var property in styles) {
    if(styles.hasOwnProperty(property)) {
     var value = styles[property];
     fakeCell.style[property] = value + (typeof (value) == "number" ? "px" : "");
    }
   }   
   style.cssText = fakeCell.style.cssText;
  }  
  this.ApplyCellStyles(cell);
 },
 ChangeCellInitialClass: function(cell, className, add, preventApply) {
  if(!cell || !cell.appliedStyles)
   return;
  var hasClass = cell.appliedStyles.initial.className.indexOf(className) > -1;
  if(hasClass && !add)
    cell.appliedStyles.initial.className =  cell.appliedStyles.initial.className.replace(className, "");
  if(!hasClass && add)
    cell.appliedStyles.initial.className += " " + className;
  if(!preventApply)
   this.ApplyCellStyles(cell);
 },
 GetEmptyCellStyle: function() { return this.CreateEmptyCellStyle(); },
 GetBatchEditCellStyle: function() { return this.GetStyleInfo(this.BatchEditCellKey); },
 GetBatchEditModifiedCellStyle: function(columnIndex) { return this.GetStyleInfo(this.BatchEditModifiedCellKey, columnIndex); },
 GetBatchEditMergedModifiedCellStyle: function() { return this.GetStyleInfo(this.BatchEditMergedModifiedCellKey); },
 GetFocusedCellStyle: function(style) { return this.GetStyleInfo(this.FocusedCellKey); },
 IsBatchEditCellStyle: function(style) { return this.CheckStyleInfoByKey(style, this.BatchEditCellKey); },
 IsBatchEditModifiedCellStyle: function(style) { return this.CheckStyleInfoByKey(style, this.BatchEditModifiedCellKey); },
 IsBatchEditMergedModifiedCellStyle: function(style) { return this.CheckStyleInfoByKey(style, this.BatchEditMergedModifiedCellKey); },
 IsFocusedCellStyle: function(style) { return this.CheckStyleInfoByKey(style, this.FocusedCellKey); },
 GetClearItemStyle: function() { return this.GetStyleInfo(this.ClearItemStyleKey); },
 GetBatchEditDeletedItemStyle: function() { return this.GetStyleInfo(this.BatchEditDeletedItemKey); },
 IsClearItemStyle: function(style) { return this.CheckStyleInfoByKey(style, this.ClearItemStyleKey); },   
 IsBatchEditDeletedItemStyle: function(style) { return this.CheckStyleInfoByKey(style, this.BatchEditDeletedItemKey); },   
 CheckStyleInfoByKey: function(styleInfo, key) {
  if(!styleInfo)
   return false;
  return styleInfo.styleKey == key;
 },
 ApplyElementStyle: function(element, styleInfo, skipInitialStyle){
  if(!element) return;
  if(!skipInitialStyle) {
   if(!ASPx.IsExists(element.initialClassName))
    element.initialClassName = element.className;
   if(!ASPx.IsExists(element.initialCssText))
    element.initialCssText = element.style.cssText;
   element.className = element.initialClassName;
   element.style.cssText = element.initialCssText;
  }
  if(styleInfo) {
   element.className += " " + styleInfo.className;
   element.style.cssText += " " + styleInfo.cssText;
  }
 },
 AddClassToElement: function(element, className){
  if(!element) return;
  ASPx.AddClassNameToElement(element, className);
  this.ChangeElementInitialClass(element, className, true);
 },
 RemoveClassFromElement: function(element, className){
  if(!element) return;
  ASPx.RemoveClassNameFromElement(element, className);
  this.ChangeElementInitialClass(element, className);
 },
 ChangeElementInitialClass: function(element, className, add) {
  if(!element) return;
  if(!ASPx.IsExists(element.initialClassName))
   element.initialClassName = element.className;  
  var hasClass = element.initialClassName.indexOf(className) > -1;
  if(hasClass && !add)
    element.initialClassName =  element.initialClassName.replace(className, "");
  if(!hasClass && add)
    element.initialClassName += " " + className;
 },
 GetErrorItemHtml: function() {
  var styles = this.GetStyles();
  if(!styles)
   return null;
  return styles[this.ErrorItemHtmlKey];
 }
});
var GridCommonUtils = {
 BacthEditLockFocusEventsTriggerTimeout: 50,
 NeedSaveActiveElement: function (control) { return ASPx.Browser.IE || (ASPx.Browser.WindowsPhonePlatform && ASPx.Browser.Edge); },
 IsBatchEditMode: function (control) { return control.GetBatchEditHelper && !!control.GetBatchEditHelper(); },
 IsInput: function (element) {
  if (!element) return false;
  return element.tagName == "INPUT" || element.tagName == "TEXTAREA";
 },
 SaveActiveElement: function (control) {
  if (!this.NeedSaveActiveElement(control)) return;
  var activeElement = ASPx.GetActiveElement();
  var isBatchEditing = this.IsBatchEditMode(control);
  var isInput = this.IsInput(activeElement);
  if (!activeElement || !isInput && !isBatchEditing || !ASPx.GetIsParent(control.GetMainElement(), activeElement))
   return;
  control.activeElementSettings = { activeElement: activeElement };
  if (isInput)
   control.activeElementSettings.selInfo = ASPx.Selection.GetInfo(activeElement);
  if (isBatchEditing)
   this.LockBatchEditFocusEvents(control);
 },
 RestoreActiveElement: function (control) {
  var settings = control.activeElementSettings;
  if (!settings) return;
  var oldElement = settings.activeElement;
  if (ASPx.IsExistsElement(oldElement) && oldElement !== ASPx.GetActiveElement()) {
   oldElement.focus();
   if (settings.selInfo)
    ASPx.Selection.Set(oldElement, settings.selInfo.startPos, settings.selInfo.endPos);
  }
  delete control.activeElementSettings;
  this.UnLockBatchEditFocusEvents(control);
 },
 LockBatchEditFocusEvents: function (control) { control.BatchEditFocusEventsLocked = true; },
 UnLockBatchEditFocusEvents: function (control) {
  ASPx.Timer.ClearTimer(control.bacthEditLockFocusEventsTriggerID);
  if (control.BatchEditFocusEventsLocked)
   control.bacthEditLockFocusEventsTriggerID = window.setTimeout(function () { delete control.BatchEditFocusEventsLocked; }, this.BacthEditLockFocusEventsTriggerTimeout);
 },
 IsBatchEditFocusEventsLocked: function (control) { return !!control.BatchEditFocusEventsLocked; }
};
ASPx.GridDragHelperBase = GridDragHelperBase;
ASPx.BatchEditApi = BatchEditApi;
ASPx.GridStyleHelperBase = GridStyleHelperBase;
ASPx.GridCommonUtils = GridCommonUtils;
})();
(function() {
var GridHeaderFilterMode = { List: 1, CheckedList: 2, DateRangePicker: 3, DateRangeCalendar: 4 };
var GridFilterHelper = ASPx.CreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
  this.activeElement = null;
  this.lockFilter = true;
  this.searchFilterTimer = -1;
  this.searchEditorInitialValue = undefined;
  this.savedSearchEditorValue_beforeCallback = undefined;
  this.searchEditorLastClientValue = undefined;
  this.searchEditorValueChangedOnCallbackWaiting = false;
  this.headerFilterPopupRelatedColumn = null;
  this.headerFilterPopupDimensions = { };
  this.headerFilterColumnIndicesToInitialize = [ ];
  this.initialHeaderFilterState = { };
  this.SearchEditorKeyDownHandler = this.OnSearchEditorKeyDown.bind(this);
  this.SearchEditorValueChangedHandler = this.OnSearchEditorValueChanged.bind(this);
  this.SearchEditorUserInputHandler = this.OnSearchEditorUserInput.bind(this);
  ASPx.GetControlCollection().ControlsInitialized.AddHandler(this.OnControlsInitialized, this);
 },
 Reset: function() {
  this.initialHeaderFilterState = { };
 },
 IsFilterLocked: function() { return this.lockFilter; },
 LockFilter: function() { this.lockFilter = true; },
 UnlockFilter: function() { this.lockFilter = false; },
 GetActiveElement: function() { return this.activeElement; },
 ResetActiveElement: function() { this.activeElement = null; },
 IsValidInstance: function() { return this.grid.IsValidInstance(); },
 GetAllowSearchFilterTimer: function() { return this.grid.allowSearchFilterTimer; },
 GetSearchFilterDelay: function() { return this.grid.searchFilterDelay; },
 GetEnableAccessibility: function() { return this.grid.accessibilityCompliant; },
 ResolveColumnIndex: function(id) { return this.grid.getColumnIndex(id); },
 GetSearchEditor: function() { return this.grid.GetSearchEditor(); },
 GetCustomSearchPanelEditor: function() { return this.grid.GetCustomSearchPanelEditor(); },
 GetSearchPanelFilter: function() { return this.grid.searchPanelFilter; },
 ApplySearchPanelFilter: function(value) { this.grid.ApplySearchPanelFilter(value, true); },
 GetContentTable: function() { return this.grid.GetMainTable(); },
 OnInit: function() {
  this.LockFilter();
  window.setTimeout(function() { this.UnlockFilter(); }.bind(this), 0);
  this.EnsureSearchEditor();
  window.setTimeout(function() { this.SaveFilterEditorsState(); }.bind(this), 0);
  window.setTimeout(this.InitializeHeaderFilterPopup.bind(this), 0);
 },
 OnAfterCallback: function() {
  this.LockFilter();
  window.setTimeout(function() { this.UnlockFilter(); }.bind(this), 0);
  this.EnsureSearchEditor();
  window.setTimeout(function() { this.SaveFilterEditorsState(); }.bind(this), 0);
  window.setTimeout(this.InitializeHeaderFilterPopup.bind(this), 0);
 },
 OnBeforeCallback: function() {
  this.LockFilter();
  this.UnloadHeaderFilterPopup();
  var edit = this.GetSearchEditor();
  if(edit)
   this.savedSearchEditorValue_beforeCallback = this.GetEditorStringValue(edit);
 },
 OnCancelCallbackCore: function() {
  this.UnlockFilter();
  this.InitializeHeaderFilterPopup();
 },
 SaveFilterEditorsState: function() { },
 ClearFilterEditorsState: function() { },
 OnDispose: function() {
  ASPx.GetControlCollection().ControlsInitialized.RemoveHandler(this.OnControlsInitialized, this);
 },
 LoadSearchEditorValueOnCallback: function() {
  var edit = this.GetSearchEditor();
  if(edit) {
   var value = this.GetEditorStringValue(edit);
   this.searchEditorValueChangedOnCallbackWaiting = value !== this.savedSearchEditorValue_beforeCallback;
   this.searchEditorLastClientValue = value;
   this.savedSearchEditorValue_beforeCallback = undefined;
  }
 },
 SetSearchPanelCustomEditor: function(editor) {
  if(!ASPx.Ident.IsASPxClientEdit(editor) || !editor.GetMainElement())
   return;
  if(this.grid.customSearchPanelEditorID === editor.name)
   return;
  this.RemoveSearchEditorEvents(this.GetSearchEditor());
  this.grid.customSearchPanelEditorID = editor.name;
  this.EnsureSearchEditor();
 },
 AssignSearchEditorEvents: function(edit) {
  if(edit.dxgvFilterHelper === this)
   return;
  if(edit.KeyDown)
   edit.KeyDown.AddHandler(this.SearchEditorKeyDownHandler);
  if(edit.ValueChanged)
   edit.ValueChanged.AddHandler(this.SearchEditorValueChangedHandler);
  if(edit.UserInput)
   edit.UserInput.AddHandler(this.SearchEditorUserInputHandler);
  edit.dxgvFilterHelper = this;
 },
 RemoveSearchEditorEvents: function(edit) {
  if(!edit || edit.dxgvFilterHelper !== this)
   return;
  if(edit.KeyDown)
   edit.KeyDown.RemoveHandler(this.SearchEditorKeyDownHandler);
  if(edit.ValueChanged)
   edit.ValueChanged.RemoveHandler(this.SearchEditorValueChangedHandler);
  if(edit.UserInput)
   edit.UserInput.RemoveHandler(this.SearchEditorUserInputHandler);
  delete edit.dxgvFilterHelper;
 },
 EnsureSearchEditor: function() {
  var edit = this.GetSearchEditor();
  if(!edit) return;
  this.AssignSearchEditorEvents(edit);
  var isCustomEditor = edit === this.GetCustomSearchPanelEditor();
  this.searchEditorInitialValue = isCustomEditor ? this.GetSearchPanelFilter() : this.GetEditorStringValue(edit);
  var applySearchValueOnCallback = this.searchEditorValueChangedOnCallbackWaiting && this.searchEditorInitialValue !== this.searchEditorLastClientValue;
  if(applySearchValueOnCallback) {
   window.setTimeout(function() {
    edit.SetValue(this.searchEditorLastClientValue);
    this.ApplySearchFilterFromEditor(edit);
   }.bind(this), 0);
  }  else {
   if(isCustomEditor)
    window.setTimeout(function() { edit.SetValue(this.GetSearchPanelFilter()); }.bind(this), 0);
  }
  this.searchEditorValueChangedOnCallbackWaiting = false;
 },
 GetEditorStringValue: function(edit) {
  var value = edit.GetValueString();
  return ASPx.IsExists(value) ? value : "";
 },
 OnSearchEditorKeyDown: function(s, e) {
  if(!e.htmlEvent || !this.IsValidInstance())
   return;
  e = e.htmlEvent;
  var clearEditor = e.keyCode == ASPx.Key.Delete && e.ctrlKey;
  if(e.keyCode == ASPx.Key.Enter || clearEditor) {
   if(clearEditor)
    s.SetValue(null);
   this.ApplySearchFilterFromEditor(s);
   ASPx.Evt.PreventEventAndBubble(e);
   return;
  }
  this.CreateSearchFilterTimer(s);
 },
 OnSearchEditorUserInput: function(s, e) {
  if(!this.IsValidInstance() || this.IsSearchFilterTimerActive())
   return;
  this.OnSearchEditorOnPaste(s);
 },
 OnSearchEditorOnPaste: function(editor) {
  this.EnsureEditorRawValue(editor);
  this.CreateSearchFilterTimer(editor);
 },
 OnSearchEditorValueChanged: function(s, e) {
  if(!this.IsValidInstance())
   return;
  window.setTimeout(function() { this.ApplySearchFilterFromEditor(s);  }.bind(this), 0);
 },
 IsSearchFilterTimerActive: function() {
  return this.searchFilterTimer !== -1;
 },
 CreateSearchFilterTimer: function(editor) {
  if(!this.GetAllowSearchFilterTimer()) return;
  this.ClearSearchFilterTimer();
  this.searchFilterTimer = window.setTimeout(function() { this.ApplySearchFilterFromEditor(editor);  }.bind(this), this.GetSearchFilterDelay());
 },
 ClearSearchFilterTimer: function() {
  this.searchFilterTimer = ASPx.Timer.ClearTimer(this.searchFilterTimer);
 },
 ApplySearchFilterFromEditor: function(edit) {
  this.ClearSearchFilterTimer();
  if(this.IsFilterLocked()) return;
  if(!edit || !this.GetContentTable())
   return;
  edit.Validate();
  if(!edit.GetIsValid()) 
   return;
  var value = this.GetEditorStringValue(edit);
  if(value === this.searchEditorInitialValue)
   return;
  this.SaveFilterEditorActiveElement(edit);
  this.ApplySearchPanelFilter(value);
 },
 EnsureEditorRawValue: function(edit) {
  if(ASPx.GetFocusedEditor() === edit && edit.SyncRawValueIfHasTextDecorators) {
   edit.SyncRawValueIfHasTextDecorators();
  }
 },
 SaveFilterEditorActiveElement: function(editor) {
  if(!editor) return;
  var columnIndex = this.ResolveColumnIndex(editor.name);
  if(columnIndex < 0 && editor !== this.GetSearchEditor())
   return;
  this.activeElement = this.GetFilterEditorInputElement(editor);
 },
 GetFilterEditorInputElement: function(editor) {
  if(document.activeElement && !ASPx.Browser.VirtualKeyboardSupported) 
   return document.activeElement;
  if(editor.GetInputElement) 
   return editor.GetInputElement();
  return null;
 },
 GetHeaderFilterPopup: function() { return this.grid.GetHeaderFilterPopup(); },
 GetEnableCallbackAnimation: function() { return this.grid.enableCallbackAnimation; },
 GetEnableHeaderFilterCaching: function() { return this.grid.enableHeaderFilterCaching; },
 GetHeaderFilterIconClassName: function() { return this.grid.HeaderFilterButtonClassName; }, 
 GetColumnHeaders: function(columnIndex) { return [ this.grid.GetHeader(columnIndex, false), this.grid.GetHeader(columnIndex, true) ]; },
 GetColumn: function(columnIndex) { return this.grid._getColumn(columnIndex); },
 GetColumnCount: function() { return this.grid.GetColumnsCount(); },
 ApplyHeaderFilter: function() { this.grid.ApplyHeaderFilterByColumn(); },
 GetCustomizationWindow: function() { return this.grid.GetCustomizationWindow(); },
 ShowLoadingPanelInsideHeaderFilterPopup: function() { this.grid.ShowLoadingPanelInsideHeaderFilterPopup(); },
 GetListBox: function(columnIndex) { 
  var listBox = ASPx.GetControlCollection().Get(this.grid.name + "_HFListBox" + columnIndex); 
  return listBox && !listBox.IsDOMDisposed() ? listBox : null;
 },
 GetSelectAllCheckBox: function(columnIndex) { 
  var checkBox = ASPx.GetControlCollection().Get(this.grid.name + "_HFSACheckBox" + columnIndex); 
  return checkBox && !checkBox.IsDOMDisposed() ? checkBox : null;
 },
 GetDateEdit_From: function(columnIndex) { 
  var dateEdit = ASPx.GetControlCollection().Get(this.grid.name + "_HFFDE" + columnIndex); 
  return dateEdit && !dateEdit.IsDOMDisposed() ? dateEdit : null;
 },
 GetDateEdit_To: function(columnIndex) { 
  var dateEdit = ASPx.GetControlCollection().Get(this.grid.name + "_HFTDE" + columnIndex); 
  return dateEdit && !dateEdit.IsDOMDisposed() ? dateEdit : null;
 },
 GetCalendar: function(columnIndex){ 
  var calendar = ASPx.GetControlCollection().Get(this.grid.name + "_HFC" + columnIndex); 
  return calendar && !calendar.IsDOMDisposed() ? calendar: null;
 },
 GetHeaderFilterPopupRelatedColumn: function() { return this.headerFilterPopupRelatedColumn; },
 GetHeaderFilterButton: function(isCancelButton) {
  var popup = this.GetHeaderFilterPopup();
  if(popup)
   return ASPx.GetControlCollection().Get(isCancelButton ? popup.cpCancelButtonID : popup.cpOkButtonID);
  return null;
 },
 SendHeaderFilterCallback: function(columnIndex, shiftKey) {
  this.grid.gridFuncCallBack([ ASPxClientGridViewCallbackCommand.FilterPopup, this.grid.name, columnIndex, shiftKey ? "T" : ""], this.OnHeaderFilterCallback);
 },
 OnHeaderFilterCallback: function(values) {
  var grid = ASPx.GetControlCollection().Get(values[0]);
  if(grid)
   grid.GetFilterHelper().ProcessHeaderFilterCallback(values[1], values[2]);
 },
 GetHeaderFilterState: function(columnIndex) {
  var listBoxSelectedIndices = [ ];
  var pickerRange = null;
  var calendarDates = null;
  var listBox = this.GetListBox(columnIndex);
  if(listBox)
   listBoxSelectedIndices = listBox.GetSelectedIndices();
  var column = this.GetColumn(columnIndex);
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangePicker) {
   var dateEditTo = this.GetDateEdit_To(columnIndex);
   var dateEditFrom = this.GetDateEdit_From(columnIndex);
   if(dateEditTo && dateEditFrom)
    pickerRange = { start: dateEditFrom.GetValue(), end: dateEditTo.GetValue() };
  }
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangeCalendar) {
   var calendar = this.GetCalendar(columnIndex);
   if(calendar)
    calendarDates = calendar.GetSelectedDates();
  }
  return { listBoxSelectedIndices: listBoxSelectedIndices, pickerRange: pickerRange, calendarDates: calendarDates };
 },
 IsHeaderFilterChanged: function(columnIndex) {
  var initialState = this.initialHeaderFilterState[columnIndex];
  var currentState = this.GetHeaderFilterState(columnIndex);
  if(!initialState || !currentState)
   return false;
  if(!ASPx.Data.ArrayEqual(initialState.listBoxSelectedIndices, currentState.listBoxSelectedIndices))
   return true;
  var column = this.GetColumn(columnIndex);
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangePicker && currentState.pickerRange)
   return initialState.pickerRange.start !== currentState.pickerRange.start || initialState.pickerRange.end !== currentState.pickerRange.end;
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangeCalendar && currentState.calendarDates)
   return !ASPx.Data.ArrayEqual(initialState.calendarDates, currentState.calendarDates);
  return false;
 },
 GetHeaderFilterCallbackState: function(columnIndex) {
  var result = [ ];
  var listBox = this.GetListBox(columnIndex);
  if(listBox)
   result = result.concat(listBox.GetSelectedValues());
  var currentState = this.GetHeaderFilterState(columnIndex);
  if(currentState.calendarDates && currentState.calendarDates.length > 0)
   result.push("(Calendar)|" + this.CalcDateRanges(currentState.calendarDates, false).join("|"));
  if(currentState.pickerRange && (currentState.pickerRange.start || currentState.pickerRange.end)) {
   var range = [
    currentState.pickerRange.start && ASPx.DateUtils.GetInvariantDateString(currentState.pickerRange.start) || "",
    currentState.pickerRange.end   && ASPx.DateUtils.GetInvariantDateString(currentState.pickerRange.end)   || ""
   ];
   result.push("(DateRangePicker)|" + range.join("|"));
  }
  return result;
 },
 ProcessHeaderFilterCallback: function(columnIndex, htmlObj) {
  this.headerFilterColumnIndicesToInitialize.push(parseInt(columnIndex));
  this.SetHeaderFilterPopupHtml(htmlObj, columnIndex);
 },
 SetHeaderFilterPopupHtml: function(htmlObj, columnIndex) {
  this.GetHeaderFilterPopup().SetContentHtml(htmlObj, this.GetEnableCallbackAnimation());
 },
 OnControlsInitialized: function() {
  for(var i = 0; i < this.headerFilterColumnIndicesToInitialize.length; i++)
   this.InitHeaderFilter(this.headerFilterColumnIndicesToInitialize[i]);
  this.headerFilterColumnIndicesToInitialize = [ ];
 },
 InitHeaderFilter: function(columnIndex) {
  this.initialHeaderFilterState[columnIndex] = this.GetHeaderFilterState(columnIndex);
  var column = this.GetColumn(columnIndex);
  this.headerFilterPopupRelatedColumn = column;
  this.InitializeListBox(column);
  if(column.HFMode === ASPx.GridHeaderFilterMode.CheckedList)
   this.InitializeSelectAllCheckBox(column);
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangePicker)
   this.InitializeDateRangePicker(column);
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangeCalendar)
   this.InitializeCalendar(column);
  if(this.GetEnableAccessibility())
   this.InitializeAccessibility(column);
 },
 InitializeListBox: function(column) {
  var listBox = this.GetListBox(column.index);
  if(!listBox) return;
  if(column.HFMode === ASPx.GridHeaderFilterMode.List && this.GetEnableAccessibility())
   listBox.ItemClick.AddHandler(this.OnListBoxSelectionChanged.bind(this));
  else {
   listBox.SelectedIndexChanged.AddHandler(this.OnListBoxSelectionChanged.bind(this));
   listBox.KeyDown.AddHandler(this.ProcessHeaderFilterKeyDown.bind(this));
  }
  var element = listBox.GetListTable ? listBox.GetListTable() : listBox.GetMainElement();
  ASPx.Evt.AttachEventToElement(element, "mousedown", function() { window.setTimeout(ASPx.Selection.Clear, 0); });
  listBox.gvColumn = column;
  if(listBox.cpFSI && listBox.cpFSI.length > 0)
   this.PrepareSeparators(listBox);
  if(this.IsListBoxHasScrolling())
   this.AdjustHeaderFilterListBox(column);
 },
 ProcessHeaderFilterKeyDown: function(listbox, args) {
  this.LockHeaderFilterApply();
  var evt = args.htmlEvent;
  if(evt.keyCode == ASPx.Key.Enter) {
   this.UnlockHeaderFilterApply();
   this.OnListBoxSelectionChanged(listbox);
  }
  window.setTimeout(this.UnlockHeaderFilterApply.bind(this), 100);
 },
 LockHeaderFilterApply: function() {
  this.lockHeaderFilterApply = true;
 },
 UnlockHeaderFilterApply: function() {
  this.lockHeaderFilterApply = false;
 },
 IsHeaderFilterApplyLocked: function() {
  return !!this.lockHeaderFilterApply;
 },
 AdjustHeaderFilterListBox: function(column) {
  var listBox = this.GetListBox(column.index);
  if(listBox && listBox.GetMainElement() && this.RequireShowHeaderFilterListBoxScrollbar(column)) {
   ASPx.SetStyles(listBox.GetMainElement(), { minHeight: this.GetHeaderFilterPopupScrollableElement().offsetHeight });
   listBox.AdjustControl();
  }
 },
 InitializeSelectAllCheckBox: function(column) {
  var checkBox = this.GetSelectAllCheckBox(column.index);
  if(!checkBox) return;
  checkBox.CheckedChanged.AddHandler(function(s) { this.OnSelectAllCheckedChanged(s); }.bind(this));
  checkBox.gvColumn = column;
 },
 InitializeDateRangePicker: function(column) {
  var dateEdit_From = this.GetDateEdit_From(column.index);
  var dateEdit_To = this.GetDateEdit_To(column.index);
  if(!dateEdit_From || !dateEdit_To)
   return;
  dateEdit_From.gvColumn = dateEdit_To.gvColumn = column;
  dateEdit_From.ValueChanged.AddHandler(this.OnDateRangePickerValueChanged.bind(this));
  dateEdit_To.ValueChanged.AddHandler(this.OnDateRangePickerValueChanged.bind(this));
  this.AdjustDateRangePicker(dateEdit_From, dateEdit_To);
 },
 AdjustDateRangePicker: function(dateEdit_From, dateEdit_To) {
  var firstCaptionCell = dateEdit_From.GetCaptionCell();
  var secondCaptionCell = dateEdit_To.GetCaptionCell();
  var width = Math.max(ASPx.GetClearClientWidth(firstCaptionCell), ASPx.GetClearClientWidth(secondCaptionCell));
  ASPx.SetStyles(firstCaptionCell, { minWidth: width });
  ASPx.SetStyles(secondCaptionCell, { minWidth: width });
 },
 InitializeCalendar: function(column) {
  var calendar = this.GetCalendar(column.index);
  calendar.SelectionChanged.AddHandler(this.OnCalendarSelectionChanged.bind(this));
  calendar.gvColumn = column;
 },
 OnListBoxSelectionChanged: function(listBox) {
  if(!listBox) return;
  var column = listBox.gvColumn;
  if(this.RequireApplyHeaderFilterNow(column.HFMode, column.index))
   this.ApplyHeaderFilter();
  else {
   if(column.HFMode === ASPx.GridHeaderFilterMode.CheckedList)
    this.UpdateSelectAllCheckState(column.index);
   this.UpdateOkButtonEnabledState(column.index);
  }
 },
 OnSelectAllCheckedChanged: function(checkBox) {
  var columnIndex = checkBox.gvColumn.index;
  var listBox = this.GetListBox(columnIndex);
  if(checkBox.GetChecked())
   listBox.SelectAll();
  else
   listBox.UnselectAll();
  this.UpdateOkButtonEnabledState(columnIndex);
 },
 OnDateRangePickerValueChanged: function(editor) {
  this.UpdateOkButtonEnabledState(editor.gvColumn.index);
 },
 OnCalendarSelectionChanged: function(editor) {
  this.UpdateOkButtonEnabledState(editor.gvColumn.index);
 },
 RequireApplyHeaderFilterNow: function(mode, columnIndex) {
  return mode === ASPx.GridHeaderFilterMode.List && this.IsHeaderFilterChanged(columnIndex) && !this.IsHeaderFilterApplyLocked();
 },
 UpdateSelectAllCheckState: function(columnIndex) {
  var checkBox = this.GetSelectAllCheckBox(columnIndex);
  var listBox = this.GetListBox(columnIndex);
  if(!checkBox || !listBox) 
   return;
  var selectedItemCount = listBox.GetSelectedIndices().length;
  var checkState = ASPx.CheckBoxCheckState.Indeterminate;
  if(selectedItemCount === 0)
   checkState = ASPx.CheckBoxCheckState.Unchecked;
  else if(selectedItemCount === listBox.GetItemCount())
   checkState = ASPx.CheckBoxCheckState.Checked;
  checkBox.SetCheckState(checkState);
 },
 UpdateOkButtonEnabledState: function(columnIndex) {
  if(this.GetColumn(columnIndex).HFMode !== ASPx.GridHeaderFilterMode.List)
   this.SetHFOkButtonEnabled(this.IsHeaderFilterChanged(columnIndex));
 },
 ApplyHeaderFilterInitialState: function(columnIndex) {
  var state = this.initialHeaderFilterState[columnIndex];
  if(!state) return;
  var column = this.GetColumn(columnIndex);
  var listBox = this.GetListBox(columnIndex);
  if(listBox) {
   if(column.HFMode === ASPx.GridHeaderFilterMode.List) {
    if(this.GetEnableAccessibility() && state.listBoxSelectedIndices.length > 0)
     listBox.SelectIndex(state.listBoxSelectedIndices[0]);
   } else {
    listBox.UnselectAll();
    listBox.SelectIndices(state.listBoxSelectedIndices);
   }
  }
  if(column.HFMode === ASPx.GridHeaderFilterMode.CheckedList)
   this.UpdateSelectAllCheckState(columnIndex);
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangePicker) {
   this.GetDateEdit_From(columnIndex).SetValue(state.pickerRange.start);
   this.GetDateEdit_To(columnIndex).SetValue(state.pickerRange.end);
  }
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangeCalendar) {
   var calendar = this.GetCalendar(columnIndex);
   calendar.SetValue(null);
   var dates = state.calendarDates || [ ];
   for(var i = 0; i < dates.length; i++)
    calendar.SelectDate(dates[i]);
  }
  this.SetHFOkButtonEnabled(false);
 },
 IsListBoxHasScrolling: function() { return true; }, 
 RequireShowHeaderFilterListBoxScrollbar: function(column) { return this.IsListBoxHasScrolling() && column && (column.HFMode === ASPx.GridHeaderFilterMode.List || column.HFMode === ASPx.GridHeaderFilterMode.CheckedList); },
 GetHeaderFilterPopupScrollableElement: function() { return this.GetHeaderFilterPopup().GetWindowContentElement(-1); },
 InitializeHeaderFilterPopup: function() {
  var popup = this.GetHeaderFilterPopup();
  if(!popup || !popup.GetWindowElement(-1)) 
   return;
  popup.PopUp.AddHandler(this.OnHeaderFilterPopup_PopUp.bind(this));
  popup.CloseUp.AddHandler(this.OnHeaderFilterPopup_CloseUp.bind(this));
  popup.Resize.AddHandler(this.OnHeaderFilterPopup_Resize.bind(this));
  if(this.IsListBoxHasScrolling()) {
   popup.AfterResizing.AddHandler(this.OnHeaderFilter_AfterResizing.bind(this));
   ASPx.Evt.AttachEventToElement(this.GetHeaderFilterPopupScrollableElement(), "scroll", this.OnHeaderFilterPopup_Scroll.bind(this));
  }
  this.InitializeHeaderFilterButtons();
 },
 OnHeaderFilterPopup_PopUp: function(popup) {
  var columnIndex = this.FindColumnIndexByHeaderChild(popup.GetCurrentPopupElement());
  var column = this.GetColumn(columnIndex);
  if(!column) return;
  var shiftKey = popup.GetPopUpReasonMouseEvent().shiftKey;
  var callbackWaiting = this.LoadHeaderFilterPopupData(popup, column, shiftKey);
  if(callbackWaiting) {
   var size = this.GetHeaderFilterPopupSize(columnIndex);
   this.SetHFButtonPanelVisibility(popup, column.HFMode !== ASPx.GridHeaderFilterMode.List);
   if(size) {
    popup.SetSize(size[0], size[1]);
    if(ASPx.Browser.Firefox)
     popup.Shown.AddHandler(function(s) { window.setTimeout(function() { s.SetSize(size[0], size[1]); }, 0); }); 
   }
   this.ShowLoadingPanelInsideHeaderFilterPopup();
  }
  if(this.IsListBoxHasScrolling())
   window.setTimeout(this.UpdateHeaderFilterPopupScroll.bind(this), popup.fadeAnimationDuration);
 },
 LoadHeaderFilterPopupData: function(popup, column, shiftKey) {
  if(column === this.GetHeaderFilterPopupRelatedColumn() && this.UseHeaderFilterContentCaching(column.index) && popup.savedShiftKey === shiftKey) {
   this.ApplyHeaderFilterInitialState(column.index);
  } else {
   this.SendHeaderFilterCallback(column.index, shiftKey);
   popup.SetContentHtml("");
   this.headerFilterPopupRelatedColumn = null;
   popup.savedShiftKey = shiftKey;
   return true;
  }
 },
 UpdateHeaderFilterPopupScroll: function() {
  var column = this.GetHeaderFilterPopupRelatedColumn();
  var disablePopupScroll = this.RequireShowHeaderFilterListBoxScrollbar(column) && this.GetHeaderFilterPopup().IsVisible();
  ASPx.SetStyles(this.GetHeaderFilterPopupScrollableElement(), { overflowY: disablePopupScroll ? "hidden" : "auto" });
 },
 OnHeaderFilterPopup_CloseUp: function(popup) {
  var column = this.GetHeaderFilterPopupRelatedColumn();
  if(column && !this.UseHeaderFilterContentCaching(column.index))
   window.setTimeout(function() { popup.SetContentHtml(""); }, 0);
  this.UpdateHeaderFilterPopupScroll();
 },
 OnHeaderFilterPopup_Resize: function(popup) {
  var columnIndex = this.FindColumnIndexByHeaderChild(popup.GetCurrentPopupElement());
  if(this.GetColumn(columnIndex))
   this.SetHeaderFilterPopupSize(columnIndex, popup.GetWidth(), popup.GetHeight());
 },
 OnHeaderFilter_AfterResizing: function(popup) {
  var column = this.GetHeaderFilterPopupRelatedColumn();
  if(column)
   this.AdjustHeaderFilterListBox(column);
 },
 OnHeaderFilterPopup_Scroll: function(e) {
  var column = this.GetHeaderFilterPopupRelatedColumn();
  if(this.RequireShowHeaderFilterListBoxScrollbar(column))
   this.GetHeaderFilterPopupScrollableElement().scrollTop = 0;
 },
 InitializeHeaderFilterButtons: function() {
  var popup = this.GetHeaderFilterPopup();
  if(!popup) return;
  var buttons = this.GetHeaderFilterButtons();
  for(var i = 0; i < buttons.length; i++) {
   popup.AddPopupElement(buttons[i]);
   if(this.GetEnableAccessibility())
    ASPx.Evt.AttachEventToElement(buttons[i], "keydown", GridFilterHelper.HeaderFilterButtonKeyDownHandler);
  }
 },
 UnloadHeaderFilterPopup: function() {
  var popup = this.GetHeaderFilterPopup();
  if(!popup) return;
  popup.RemoveAllPopupElements();
  popup.Hide();
  if(this.GetEnableAccessibility()) {
   var buttons = this.GetHeaderFilterButtons();
   for(var i = 0; i < buttons.length; i++)
    ASPx.Evt.DetachEventFromElement(buttons[i], "keydown", GridFilterHelper.HeaderFilterButtonKeyDownHandler);
  }
 },
 GetHeaderFilterButtons: function() {
  var buttons = [ ];
  var visibleIndices = this.GetVisibleColumnIndices();
  for(var i = 0; i < visibleIndices.length; i++) {
   var index = visibleIndices[i];
   var headers = this.GetColumnHeaders(index);
   for(var j = 0; j < headers.length; j++)
    this.PopulateHeaderFilterButtons(headers[j], buttons);
  }
  var custWindow = this.GetCustomizationWindow();
  if(custWindow)
   this.PopulateHeaderFilterButtons(custWindow.GetWindowClientTable(-1), buttons);
  return buttons;
 },
 GetVisibleColumnIndices: function() {
  var indices = [ ];
  for(var i = 0; i < this.GetColumnCount(); i++) {
   if(this.GetColumn(i).visible)
    indices.push(this.GetColumn(i).index);
  }
  return indices;
 },
 PopulateHeaderFilterButtons: function(container, buttons) {
  if(!container) return;
  var images = container.getElementsByTagName("IMG");
  for(var i = 0; i < images.length; i++) {
   var button = ASPx.getSpriteMainElement(images[i]);
   if(ASPx.ElementContainsCssClass(button, this.GetHeaderFilterIconClassName()))
    buttons.push(button);
  }
 },
 SetHFButtonPanelVisibility: function(popup, visible) {
  var buttonPanel = document.getElementById(popup.cpButtonPanelID);
  if(buttonPanel) {
   ASPx.SetElementDisplay(buttonPanel, visible);
   this.SetHFOkButtonEnabled(false);
  }
 },
 SetHFOkButtonEnabled: function(enabled) {
  var button = this.GetHeaderFilterButton(false);
  if(button)
   button.SetEnabled(enabled);
 },
 GetHeaderFilterPopupSize: function(key) {
  var size = this.headerFilterPopupDimensions[key];
  if(size) return size;
  if(!this.headerFilterPopupDimensions["Default"]) {
   var popup = this.GetHeaderFilterPopup();
   this.SetHeaderFilterPopupSize("Default", popup.GetWidth(), popup.GetHeight());
  }
  return this.headerFilterPopupDimensions["Default"];
 },
 SetHeaderFilterPopupSize: function(key, width, height) {
  this.headerFilterPopupDimensions[key] = [ width, height ];
 },
 FindColumnIndexByHeaderChild: function(element) {
  if(!element) 
   return -1;
  var level = 0;
  while(level < 6) {
   var index = this.ResolveColumnIndex(element.id);
   if(index > -1)
    return index;
   element = element.parentNode;
   level++;
  }
  return -1;
 },
 UseHeaderFilterContentCaching: function(columnIndex) {
  if(!this.GetEnableHeaderFilterCaching())
   return false;
  var listBox = this.GetListBox(columnIndex);
  return listBox && listBox.GetMainElement() && listBox.GetItemCount() < 1000; 
 },
 CalcDateRanges: function(dates) { 
  var result = [ ];
  dates.sort(function(a, b) { return a - b; });
  var range = { start: null, end: null };
  for(var i = 0; i < dates.length; i++) {
   var date = dates[i];
   if(!range.start || !range.end)
    range.start = range.end = date;
   var isLastDate = dates.length === i + 1;
   var nextDate = ASPxClientCalendar.AddDays(date, 1);
   if(!isLastDate && ASPx.DateUtils.AreDatesEqualExact(nextDate, dates[i + 1])) {
    range.end = nextDate;
   } else {
    result.push(ASPx.DateUtils.GetInvariantDateString(range.start));
    result.push(ASPx.DateUtils.GetInvariantDateString(range.end));
    range.start = range.end = null;
   }
  }
  return result;
 },
 InitializeAccessibility: function(column) {
  var listBox = this.GetListBox(column.index);
  if(listBox) {
   listBox.SelectedIndexChanged.AddHandler(function() { this.MakeListBoxSelectedItemVisible(column); }.bind(this));
   this.MakeListBoxSelectedItemVisible(column);
  }
  var popup = this.GetHeaderFilterPopup();
  if(popup && !popup.gvAccessibilityEventsAssigned) {
   popup.Shown.AddHandler(function() { this.MakeListBoxSelectedItemVisible(this.GetHeaderFilterPopupRelatedColumn()); }.bind(this));
   ASPx.Evt.AttachEventToElement(popup.GetCurrentWindowElement(), "keydown", this.ProcessAccessibleHeaderFilterPopupKeyDown.bind(this));
   popup.gvAccessibilityEventsAssigned = true;
  }
 },
 MakeListBoxSelectedItemVisible: function(column) {
  if(!column || column.HFMode !== ASPx.GridHeaderFilterMode.List)
   return;
  var listBox = this.GetListBox(column.index);
  var itemIndex = listBox.GetSelectedIndex();
  var div = this.GetHeaderFilterPopupScrollableElement();
  var item = listBox.GetItemElement(itemIndex);
  if(!div || !item)
   return;
  var itemHeight = item.offsetHeight;
  var divHeight = parseInt(ASPx.GetCurrentStyle(div).height);
  var itemStart = item.offsetTop;
  var itemEnd = itemStart + itemHeight;
  var divStart = div.scrollTop;
  var divEnd = divStart + divHeight;
  var scrollTop = divStart;
  var isItemAbove = itemStart < divStart;
  var isItemBelow = itemEnd > divEnd;
  if(isItemAbove)
   scrollTop = itemStart;
  else if(isItemBelow)
   scrollTop = itemEnd - divHeight;
  if(div.scrollTop !== scrollTop)
   div.scrollTop = scrollTop;
 },
 ProcessAccessibleHeaderFilterPopupKeyDown: function(e) {
  var keyCode = ASPx.Evt.GetKeyCode(e);
  if(keyCode !== ASPx.Key.Enter) 
   return;
  var handled = true;
  var column = this.GetHeaderFilterPopupRelatedColumn();
  if(column.HFMode === ASPx.GridHeaderFilterMode.List) {
   this.OnListBoxSelectionChanged(this.GetListBox(column.index));
  } else {
   var applyFilterOnEnter = this.IsHeaderFilterChanged(column.index) && !this.IsCancelButtonEventSource(e) && !this.IsDateEditorDroppedDown(column);
   if(applyFilterOnEnter)
    this.ApplyHeaderFilter();
   else
    handled = false;
  }
  if(handled)
   ASPx.Evt.PreventEventAndBubble(e);
 },
 IsCancelButtonEventSource: function(evt) {
  return ASPx.GetIsParent(this.GetHeaderFilterButton(true).GetMainElement(), ASPx.Evt.GetEventSource(evt));
 },
 IsDateEditorDroppedDown: function(column) {
  if(column.HFMode === ASPx.GridHeaderFilterMode.DateRangePicker)
   return this.GetDateEdit_From(column.index).droppedDown || this.GetDateEdit_To(column.index).droppedDown;
  return false;
 },
 PrepareSeparators: function(listBox) {
  if(typeof(ASPxClientListBox) != "undefined" && listBox instanceof ASPxClientListBox)
   GridHFListBoxWrapper.Initialize(listBox);
  for(var i = 0; i < listBox.cpFSI.length; i++) {
   var separatorIndex = listBox.cpFSI[i];
   var item = listBox.GetItemElement(separatorIndex);
   if(ASPx.IsExists(item)) {
    var tr = ASPx.GetParentByTagName(item, "TR");
    this.AppendSeparatorRow(tr);
   }
  }
 },
 AppendSeparatorRow: function(targetRow){
  var newTr = document.createElement("TR");
  ASPx.InsertElementAfter(newTr, targetRow);
  var td = document.createElement("TD");
  var colSpan = this.GetColSpanSum(targetRow);
  if(colSpan > 1)
   td.colSpan = colSpan;
  newTr.appendChild(td);
  var separatorDiv = document.createElement("DIV");
  separatorDiv.className = this.GetFilterValuesSeparatorClassName();
  td.appendChild(separatorDiv);
 },
 GetColSpanSum: function(tableRow){
  var colSpan = 0;
  var cells = ASPx.GetChildNodesByTagName(tableRow, "TD");
  for(var i = 0; i < cells.length; i++)
   colSpan += cells[i].colSpan;
  return colSpan;
 },
 GetFilterValuesSeparatorClassName: function() { return this.grid.GetCssClassNamePrefix() + "HFSD"; },
});
var GridHFListBoxWrapper = {
 Initialize: function(listBox){
  listBox.GetItemRow = GridHFListBoxWrapper.GetItemRow;
  listBox.GetItemCount = GridHFListBoxWrapper.GetItemCount;
  listBox.OnItemClickCore = listBox.OnItemClick;
  listBox.OnItemClick = GridHFListBoxWrapper.OnItemClick;
  listBox.FindInternalCheckBoxIndexCore = listBox.FindInternalCheckBoxIndex;
  listBox.FindInternalCheckBoxIndex = GridHFListBoxWrapper.FindInternalCheckBoxIndex;
 },
 GetItemRow: function(index){
  var itemRows = GridHFListBoxWrapper.GetItemRows(this);
  if(index >= 0)
   return itemRows[index] || null;
  return null;
 },
 OnItemClick: function(index, evt){
  var correctIndex = GridHFListBoxWrapper.GetCorrectItemIndex(this, index);
  this.OnItemClickCore(correctIndex, evt);
 },
 FindInternalCheckBoxIndex: function(element){
  var index = this.FindInternalCheckBoxIndexCore(element);
  return GridHFListBoxWrapper.GetCorrectItemIndex(this, index);
 },
 GetItemCount: function(){
  return GridHFListBoxWrapper.GetItemRows(this).length;
 },
 GetCorrectItemIndex: function(listBox, index){
  for(var i = 0; i < listBox.cpFSI.length; i++) {
   if(listBox.cpFSI[i] < index)
    index--;
  }
  return index;
 },
 GetItemRows: function(listBox){
  var itemRows = [];
  var listTable = listBox.GetListTable();
  var rows = listTable ? listTable.rows : null;
  for(var i = 0; rows && i < rows.length; i++){
   if(ASPx.ElementContainsCssClass(rows[i], "dxeListBoxItemRow"))
    itemRows.push(rows[i]);
  }
  return itemRows;
 }
};
GridFilterHelper.HeaderFilterButtonKeyDownHandler = function(evt) { ASPx.Evt.InvokeMouseClickByKeyDown(evt, ASPx.PopupElementMouseEvent); };
ASPx.GridHeaderFilterMode = GridHeaderFilterMode;
ASPx.GridFilterHelper = GridFilterHelper;
})();
(function() {
var GridExportItemType = {
 ExportToPdf: "ExportToPdf",
 ExportToDocx: "ExportToDocx",
 ExportToRtf: "ExportToRtf",
 ExportToCsv: "ExportToCsv",
 ExportToXls: "ExportToXls",
 ExportToXlsx: "ExportToXlsx"
};
var TOOLBAR_CLIENT_STATE_KEY = "toolbar";
var GridCommandMenuHelper = ASPx.CreateClass(null, {
 constructor: function(exportFormat) {
  this.exportFormat = exportFormat;
 },
 GetItemCommand: function(item) {
  return item.menu.cpItemsProps.commands[item.indexPath];
 },
 IsExportItem: function(itemType) {
  return itemType == GridExportItemType.ExportToPdf
   || itemType == GridExportItemType.ExportToDocx
   || itemType == GridExportItemType.ExportToRtf
   || itemType == GridExportItemType.ExportToCsv
   || itemType == GridExportItemType.ExportToXls
   || itemType == GridExportItemType.ExportToXlsx;
 },
 GetExportFormat: function(exportCommand) {
  var exportFormat = this.exportFormat;
  switch(exportCommand) {
   case GridExportItemType.ExportToPdf:
    return exportFormat.Pdf;
   case GridExportItemType.ExportToDocx:
    return exportFormat.Docx;
   case GridExportItemType.ExportToRtf:
    return exportFormat.Rtf;
   case GridExportItemType.ExportToCsv:
    return exportFormat.Csv;
   case GridExportItemType.ExportToXls:
    return exportFormat.Xls;
   case GridExportItemType.ExportToXlsx:
    return exportFormat.Xlsx;
  }
  return null;
 }
});
var CommandToolbarHelper = ASPx.CreateClass(GridCommandMenuHelper, {
 constructor: function(control, exportFormat) {
  this.constructor.prototype.constructor.call(this, exportFormat);
  this.control = control;
  this.ResetState();
 },
 GetCallbackState: function() {
  if(this.clickedToolbarIndex < 0 || !this.clickedToolbarMenuItem)
   return null;
  return this.clickedToolbarIndex + ";" + this.clickedToolbarMenuItem.indexPath;
 },
 ResetState: function() {
  this.clickedToolbarIndex = -1;
  this.clickedToolbarMenuItem = null;
  this.SetClientStateValue(null);
 },
 SaveClientState: function() {
  this.SetClientStateValue(this.GetCallbackState());
 },
 SetClientStateValue: function(value) {
  this.control.stateObject[TOOLBAR_CLIENT_STATE_KEY] = value;
 },
 GetToolbarSettings: function() {
  return this.control.toolbars;
 },
 GetToolbarByIndex: function(index) {
  return this.control.GetToolbar(index);
 },
 GetToolbarByName: function(name) {
  var settings = this.GetToolbarSettings();
  var foundToolbars = settings.filter(function(t) { return t.name === name; });
  if(foundToolbars.length < 1)
   return null;
  return this.GetToolbarByIndex(foundToolbars[0].index);
 },
 GetToolbarNameByIndex: function(index) {
  var settings = this.GetToolbarSettings(),
   foundToolbars = settings.filter(function(t) { return t.index === index; });
  return (foundToolbars.length > 0) ? foundToolbars[0].name : null;
 },
 GetToolbarIndexByName: function(name) {
  var index = -1;
  var success = false;
  var n = name.length - 1;
  while(n >= 0 && !isNaN(parseInt(name.substr(n), 10))) {
   index = parseInt(name.substr(n), 10);
   success = true;
   n--;
  }
  return success ? index: -1;
 },
 InitializeCustomizationWindowHandlers: function() {
  var custWindow = this.GetCustomizationWindow();
  if(custWindow) {
   custWindow.PopUp.AddHandler(function() {
    this.SetCheckedItemsState(this.IsShowCustomizationWindowItem.bind(this), true);
   }.aspxBind(this));
   custWindow.CloseUp.AddHandler(function() {
    this.SetCheckedItemsState(this.IsShowCustomizationWindowItem.bind(this), false);
   }.aspxBind(this));
  }
 },
 OnInit: function() {
  this.InitializeCustomizationWindowHandlers();
 },
 OnAfterCallback: function() {
  this.ResetState();
  this.InitializeCustomizationWindowHandlers();
 },
 RefreshItemsState: function() {
  this.ForEachItem(null, this.RefreshItemState.aspxBind(this));
 },
 SetCheckedItemsState: function(filterFunc, checked) {
  var setCheckedFunc = function(item) { item.SetChecked(checked); };
  this.ForEachItem(filterFunc, setCheckedFunc);
 },
 OnUpdateEditEnabledChanged: function(enabled) {
  var setEnabledFunc = function(item) { item.SetEnabled(enabled); };
  this.ForEachItem(this.IsUpdateEditItem.aspxBind(this), setEnabledFunc);
 },
 RefreshItemState: function(item) {
  this.RefreshItemText(item);
  this.RefreshItemEnabled(item);
 },
 RefreshSelectionBasedItemText: function(item, gridItemCount) {
  var text = item.GetText();
  var newText = text;
  var postfixIndex = text.lastIndexOf("(");
  if(postfixIndex !== -1)
   newText = text.substring(0, postfixIndex - 1);
  if(gridItemCount > 1)
   newText += " (" + gridItemCount.toString() + ")";
  if(newText != text)
   item.SetText(newText);
 },
 RefreshItemEnabled: function(item) {
  var itemEnabled = this.GetToolbarItemEnabled(item);
  if(itemEnabled !== null)
   item.SetEnabled(itemEnabled);
 },
 ForEachToolbar: function(actionFunc) {
  var settings = this.GetToolbarSettings();
  for(var i = 0; i < settings.length; i++) {
   var menu = this.GetToolbarByIndex(settings[i].index);
   actionFunc(menu);
  }
 },
 ForEachAdaptiveToolbar: function(actionFunc) {
  this.ForEachToolbar(function(menu) {
   if(menu.IsEnabledAdaptivity())
    actionFunc(menu);
  });
 },
 ForEachItem: function(filterFunc, actionFunc) {
  this.ForEachToolbar(function(menu) {
   this.ForEachItemInternal(menu, filterFunc, actionFunc);
  }.bind(this));
 },
 ForEachItemInternal: function(itemsOwner, filterFunc, actionFunc) {
  if(!itemsOwner) return;
  for(var i = 0; i < itemsOwner.GetItemCount(); i++){
   var item = itemsOwner.GetItem(i);
   if(!filterFunc || filterFunc(item))
    actionFunc(item);
   this.ForEachItemInternal(item, filterFunc, actionFunc);
  }
 },
 RefreshItemText: function(item) {
 },
 GetToolbarItemEnabled: function(item){
  return null;
 },
 IsUpdateEditItem: function(item) {
  return false;
 },
 GetCustomizationWindow: function() {
  return null;
 },
 IsShowCustomizationWindowItem: function(item) {
  return false;
 },
 GetSelectedGridItemCount: function() {
  return 0;
 },
 GetSelectedVisibleGridItemCount: function() {
  return 0;
 },
 OnToolbarMenuItemClick: function(toolbar, e) {
  this.clickedToolbarIndex = this.GetToolbarIndexByName(toolbar.name);
  this.clickedToolbarMenuItem = e.item;
  this.SaveClientState();
  var clickedToolbarInfo = { index: this.clickedToolbarIndex, name: this.GetToolbarNameByIndex(this.clickedToolbarIndex) },
   handled = this.control.RaiseToolbarItemClick(clickedToolbarInfo, e.item);
  if(!handled)
   this.ProcessToolbarItemClick(e);
  this.ResetState();
 },
 ProcessToolbarItemClick: function(e) {
  var item = e.item,
   command = this.GetItemCommand(item);
  if(this.IsExportItem(command))
   this.ToolbarExport(command);
 },
 ToolbarExport: function(exportCommand) {
  var exportFormat = this.GetExportFormat(exportCommand);
  this.control.ExportTo(exportFormat);
 },
 ProcessCustomToolbarItemClickOnServer: function(usePostBack) {
 }
});
var GridToolbarHelper = ASPx.CreateClass(CommandToolbarHelper, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid, ASPx.ASPxClientGridExportFormat);
  this.grid = grid;
 },
 ProcessCustomToolbarItemClickOnServer: function(usePostBack) {
  var args = [ "" ];
  if(usePostBack)
   this.SendToolbarPostback(args);
  else
   this.SendToolbarCallback(args);
 },
 SendToolbarCallback: function(args) {
  this.grid.gridCallBack([ ASPxClientGridViewCallbackCommand.Toolbar ].concat(args));
 },
 SendToolbarPostback: function(toolbarCommand) {
  this.grid.gridPostBack([ASPxClientGridViewCallbackCommand.Toolbar, toolbarCommand]);
 },
 ToolbarStartEdit: function() {
  if(this.IsBatchEditMode()) {
   var visibleIndex = 0;
   var columnIndex = 0;
   var cellInfo = this.GetFocusedCellInfo();
   if(cellInfo) {
    visibleIndex = this.grid.ConvertKeyToVisibleIndex(cellInfo.recordKey);
    columnIndex = cellInfo.columnIndex;
   }
   this.grid.batchEditApi.StartEdit(visibleIndex, columnIndex);
  }
  else
   this.grid.StartEditItem(this.GetFocusedItemIndex());
 },
 ToolbarDeleteItem: function() {
  var focusedItemIndex = this.GetFocusedItemIndex();
  if(focusedItemIndex == -1 && this.IsBatchEditMode()) {
   var cellInfo = this.GetFocusedCellInfo();
   if(cellInfo)
    focusedItemIndex = this.grid.ConvertKeyToVisibleIndex(cellInfo.recordKey);
  }
  this.grid.DeleteGridItem(focusedItemIndex);
 },
 ToolbarDeleteSelectedVisibleItems: function() {
  this.ToolbarDeleteSelectedItemsInternal("DeleteSelectedVisible");
 },
 ToolbarDeleteSelectedItemsInternal: function(commandName) {
  if(!this.grid.ConfirmDeleteGridItem())
   return;
  if(this.IsBatchEditMode()) {
   var keys = this.grid.GetSelectedKeysOnPage();
   for(var i = 0, key; key = keys[i]; i++)
    this.grid.DeleteItemByKey(key);
  }
  else
   this.SendToolbarCallback([ commandName ]);
 },
 GetFocusedItemIndex: function(){
  return this.control._getFocusedItemIndex();
 },
 GetFocusedCellInfo: function() {
  var helper = this.control.GetCellFocusHelper();
  return helper ? helper.GetFocusedCellInfo() : null;
 },
 GetSelectedGridItemCount: function() {
  return this.control._getSelectedRowCount();
 },
 GetSelectedVisibleGridItemCount: function() {
  return this.control._getSelectedRowCountOnPage();
 },
 GetCustomizationWindow: function() {
  return this.grid.GetCustomizationWindow();
 },
 IsEditingItem: function(visibleIndex){
  return this.control.IsEditingItem(visibleIndex);
 },
 IsBatchEditMode: function(){
  return this.control.GetBatchEditHelper();
 },
 HasBatchEditFocusedCell: function() {
  return this.IsBatchEditMode() && this.GetFocusedCellInfo();
 }
});
ASPx.GridExportItemType = GridExportItemType;
ASPx.GridCommandMenuHelper = GridCommandMenuHelper;
ASPx.CommandToolbarHelper = CommandToolbarHelper;
ASPx.GridToolbarHelper = GridToolbarHelper;
})();
(function() {
var GridSortOrder = { None: 0, Ascending: 1, Descending: 2 };
var ASPxClientGridColumnMovingTargetPosition = {
 Right: 0,
 Left: 1,
 Top: 2,
 Bottom: 3
};
var ASPxClientGridBase = ASPx.CreateClass(ASPxClientControl, {
 MainTableID: "DXMainTable",
 CustomizationWindowSuffix: "_custwindow",
 EditingRowID: "_DXEditingRow",
 EditingErrorItemID: "DXEditingErrorItem", 
 EmptyHeaderSuffix: "_emptyheader",
 PagerBottomID: "DXPagerBottom",
 PagerTopID: "DXPagerTop",
 SearchEditorID: "DXSE",
 SelectButtonID: "DXSelBtn",
 HeaderFilterButtonClassName: "dxgv__hfb",
 CommandColumnItemClassName: "dxgv__cci",
 DetailGridSuffix: "dxdt",
 FixedColumnsDivID: "DXFixedColumnsDiv",
 FixedColumnsContentDivID: "DXFixedColumnsContentDiv",
 ProgressBarDisplayControlIDFormat: "PBc{0}i{1}",
 AccessibleFilterRowButtonID: "AFRB",
 RequireKeyFieldNameText: "Error while trying to perform a CRUD operation with an incorrect or unspecified KeyFieldName property value.",
 EtalonBatchRecordPostFix: "dxgbeEtalonRecord",
 InvalidItemIndex: -23061988,
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.callBacksEnabled = true;
  this.custwindowLeft = null;
  this.custwindowTop = null;
  this.custwindowVisible = null;
  this.userChangedSelection = false;
  this.confirmDelete = "";
  this.editorIDList = [ ];
  this.keys = [ ];
  this.lastMultiSelectIndex = -1;
  this.mainTableClickData = {
   processing: false,
   focusChanged: false,
   selectionChanged: false
  };
  this.afterCallbackRequired = false;
  this.enableHeaderFilterCaching = true;
  this.supportGestures = true;
  this.checkBoxImageProperties = null;
  this.internalCheckBoxCollection = null;
  this.sizingConfig.adjustControl = true;
  this.lookupBehavior = false;
  this.isAccessibleRowEditing = false;
  this.batchEditApi = this.CreateBatchEditApi();
  this.CustomButtonClick = new ASPxClientEvent();
  this.SelectionChanged = new ASPxClientEvent();
  this.ColumnSorting = new ASPxClientEvent();
  this.ColumnGrouping = new ASPxClientEvent();
  this.CustomizationWindowCloseUp = new ASPxClientEvent();
  this.InternalCheckBoxClick = new ASPxClientEvent();
  this.BatchEditStartEditing = new ASPxClientEvent();
  this.BatchEditEndEditing = new ASPxClientEvent();
  this.BatchEditConfirmShowing = new ASPxClientEvent();
  this.BatchEditTemplateCellFocused = new ASPxClientEvent();
  this.BatchEditChangesSaving = new ASPxClientEvent();
  this.BatchEditChangesCanceling = new ASPxClientEvent();
  this.BatchEditSummaryDisplayText = new ASPxClientEvent();
  this.FocusedCellChanging = new ASPxClientEvent();
  this.ToolbarItemClick = new ASPxClientEvent();
  this.pendingCommands = [ ];
  this.pageRowCount = 0;
  this.pageRowSize = 0;
  this.pageIndex = 0;
  this.pageCount = 1;
  this.allowDelete = false;
  this.allowEdit = false;
  this.allowInsert = false;
  this.allowFocusedRow = false;
  this.allowFocusedCell = false;
  this.allowSelectByItemClick = false;
  this.allowSelectSingleRowOnly = false;
  this.allowMultiColumnAutoFilter = false;
  this.focusedRowIndex = -1;
  this.selectedWithoutPageRowCount = 0;
  this.selectAllSettings = [ ];
  this.selectAllBtnStateWithoutPage = null;
  this.visibleStartIndex = 0;
  this.columns = [ ];
  this.columnResizeMode = ASPx.ColumnResizeMode.None;
  this.horzScroll = ASPx.ScrollBarMode.Hidden;
  this.vertScroll = ASPx.ScrollBarMode.Hidden;
  this.scrollToRowIndex = -1;
  this.useEndlessPaging = false;
  this.allowBatchEditing = false;
  this.batchEditClientState = { };
  this.resetScrollTop = false;
  this.callbackOnFocusedRowChanged = false;
  this.callbackOnSelectionChanged = false;
  this.autoFilterDelay = 1200;
  this.searchFilterDelay = 1200;
  this.allowSearchFilterTimer = true;
  this.editState = 0;
  this.kbdHelper = null;
  this.enableKeyboard = false;
  this.keyboardLock = false;
  this.accessKey = null;
  this.customKbdHelperName = null;
  this.endlessPagingHelper = null;
  this.toolbarHelper = null;
  this.icbFocusedStyle = null;
  this.pendingEvents = [ ];
  this.customSearchPanelEditorID = null;
  this.searchPanelFilter = null;
  this.isDetailGrid = null;
  this.rowHotTrackStyle = null;
  this.updateButtonName = "";
  this.cancelButtonName = "";
  this.isAccessibleFilterRowMenu = false;
  this.userHandledCallbackError = false;
 },
 HasHorzScroll: function() { return this.horzScroll != ASPx.ScrollBarMode.Hidden; },
 HasVertScroll: function() { return this.vertScroll != ASPx.ScrollBarMode.Hidden; },
 HasScrolling: function() { return this.HasHorzScroll() || this.HasVertScroll(); },
 AllowResizing: function() { return this.columnResizeMode != ASPx.ColumnResizeMode.None && this.showColumnHeaders; },
 GetGridTD: function() { 
  var table = this.GetMainElement();
  if(!table) return null;
  return table.rows[0].cells[0];
 },
 GetArrowDragDownImage: function() { return this.GetChildElement("IADD"); },
 GetArrowDragUpImage: function() { return this.GetChildElement("IADU"); },
 GetArrowDragLeftImage: function() { return this.GetChildElement("IADL"); },
 GetArrowDragRightImage: function() { return this.GetChildElement("IADR"); },
 GetArrowDragFieldImage: function() { return this.GetChildElement("IDHF"); },
 GetEndlessPagingUpdatableContainer: function() { return this.GetChildElement("DXEPUC"); },
 GetEndlessPagingLPContainer: function() { return this.GetChildElement("DXEPLPC"); },
 GetBatchEditorsContainer: function() { return this.GetChildElement("DXBEsC"); },
 GetBatchEditorContainer: function(columnIndex) { return this.GetChildElement("DXBEC" + columnIndex); }, 
 GetLoadingPanelDiv: function() {  return this.GetChildElement("LPD"); },
 GetFixedColumnsDiv: function() {  return this.GetChildElement(this.FixedColumnsDivID); },
 GettItem: function(visibleIndex) { return null; },
 GetDataItemIDPrefix: function() { },
 GetEmptyDataItemIDPostfix: function() { },
 GetEmptyDataItem: function() { return this.GetChildElement(this.GetEmptyDataItemIDPostfix()); },
 GetDataRowSelBtnIDPrefix: function() { return "_" + this.SelectButtonID; },
 GetDataRowSelBtn: function(index) { return this.FindSelectButton(this.GetItem(index), this.GetDataRowSelBtnIDPrefix(index)); },
 FindSelectButton: function(container, idPrefix) { return container && container.querySelector("input[id^='" + this.name + idPrefix + "']"); },
 GetSelectAllBtn: function(index) { return this.GetChildElement("DXSelAllBtn" + index); },
 GetMainTable: function() { return this.GetChildElement(this.MainTableID); },
 GetLoadingPanelContainer: function() { return this.GetChildElement("DXLPContainer"); },
 GetStatusBar: function() { return this.GetChildElement("DXStatus"); },
 GetGroupPanel: function() { return this.GetChildElement("grouppanel"); },
 GetHeader: function(columnIndex, inGroupPanel) { 
  var id = "col" + columnIndex;
  if(inGroupPanel)
   id = "group" + id;
  return this.GetChildElement(id); 
 },
 GetHeaderRow: function(index) {
  return ASPx.GetElementById(this.name + "_" + ASPx.GridViewConsts.HeaderRowID + index);
 },
 GetEditingRow: function(obj) { return ASPx.GetElementById((obj ? obj.name : this.name) + this.EditingRowID); },
 GetEditingErrorItem: function(obj, visibleIndex) { 
  var id = (obj ? obj.name : this.name) + "_" + this.EditingErrorItemID;
  if(ASPx.IsExists(visibleIndex))
   id = id + visibleIndex;
  return ASPx.GetElementById(id); 
 },
 GetEditFormTable: function() { return ASPx.GetElementById(this.name + "_DXEFT"); },
 GetCustomizationWindow: function() { return ASPx.GetControlCollection().Get(this.name + this.CustomizationWindowSuffix); },
 GetCustomizationWindowElement: function() {
  var win = this.GetCustomizationWindow();
  return win ? win.GetWindowElement(-1) : null;  
 },
 GetParentRowsWindow: function() { return ASPx.GetControlCollection().Get(this.name + "_DXparentrowswindow"); },
 GetEditorPrefix: function() { return "DXEditor"; },
 GetPopupEditForm: function() { return ASPx.GetControlCollection().Get(this.name  + "_DXPEForm"); },
 GetFilterRowMenu: function() { return ASPx.GetControlCollection().Get(this.name + "_DXFilterRowMenu"); },
 GetFilterRow: function() { return ASPx.GetControlCollection().Get(this.name + "_DXFilterRow"); },
 GetFilterControlPopup: function() { return ASPx.GetControlCollection().Get(this.name + "_DXPFCForm"); },
 GetFilterControl: function() { return ASPx.GetControlCollection().Get(this.name +  "_DXPFCForm_DXPFC"); }, 
 GetHeaderFilterPopup: function() { return ASPx.GetControlCollection().Get(this.name + "_DXHFP"); },
 GetToolbarByName: function(name){
  return this.GetToolbarHelper().GetToolbarByName(name);
 },
 GetToolbar: function(index){
  return ASPx.GetControlCollection().Get(this.name + "_DXCTMenu" + index);
 },
 IsBatchEditDeletedItem: function(visibleIndex) {
  var helper = this.GetBatchEditHelper();
  return helper && helper.IsDeletedRecord(this.ConvertVisibleIndexToKey(visibleIndex));
 },
 IsEmptyHeaderID: function(id) { return false; },
 IsDataItem: function(visibleIndex) { return !!this.GetItem(visibleIndex); },
 GetSearchEditor: function() { 
  var editor = this.GetCustomSearchPanelEditor() || this.GetGridSearchEditor();
  if(editor && editor.GetMainElement())
   return editor;
  return null;
 },
 GetGridSearchEditor: function() { return ASPx.GetControlCollection().Get(this.name + "_" + this.SearchEditorID); },
 GetCustomSearchPanelEditor: function() { return ASPx.GetControlCollection().Get(this.customSearchPanelEditorID); },
 SetSearchPanelCustomEditor: function(editor) { this.GetFilterHelper().SetSearchPanelCustomEditor(editor); },
 GetEditorByColumnIndex: function(colIndex) {
  var list = this._getEditors();
  for(var i = 0; i < list.length; i++) {
   if(this.tryGetNumberFromEndOfString(list[i].name).value === colIndex)
    return list[i];
  }
  return null;
 },
 GetProgressBarControlID: function(visibleIndex, columnIndex) { return ASPx.Str.ApplyReplacement(this.ProgressBarDisplayControlIDFormat, [["{0}", columnIndex], ["{1}", visibleIndex]]); },
 GetProgressBarControl: function(visibleIndex, columnIndex) { return ASPx.GetControlCollection().Get(this.name + "_" + this.GetProgressBarControlID(visibleIndex, columnIndex)); },
 CreateBatchEditApi: function() { },
 SetProperties: function(properties, obj) {
  ASPxClientControl.prototype.SetProperties.call(this, properties, obj);
  this.CreateColumns();
  this.CreateToolbars();
 },
 CreateColumns: function() {
  this.columns = [ ];
  for(var i = 0; i < this.columnProp.length; i++)
   this.columns.push(this.CreateColumn(this.columnProp[i]));
 },
 CreateToolbars: function(){
  this.toolbars = [ ];
  for(var i = 0; this.toolbarsProp && i < this.toolbarsProp.length; i++){
   var toolbarInfo = { index: this.toolbarsProp[i][0], name: this.toolbarsProp[i][1] };
   if(this.GetToolbar(toolbarInfo.index))
    this.toolbars.push(toolbarInfo);
  }
 },
 CreateColumn: function(prop) { },
 IsFilterLocked: function() { return this.GetFilterHelper().IsFilterLocked(); },
 LockFilter: function() { this.GetFilterHelper().LockFilter(); },
 UnlockFilter: function() { this.GetFilterHelper().UnlockFilter(); },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeBubbleEvents();
 },
 InitializeBubbleEvents: function() {
  this.AttachMainTableClickEvents();
 },
 Initialize: function() {
  ASPxClientControl.prototype.Initialize.call(this);
  this.GetFilterHelper().OnInit();
  this.GetToolbarHelper().OnInit();
  if(this.enabled)
   this.SetHeadersClientEvents();
  this.EnsureRowKeys();
  this._setFocusedItemInputValue();
  this.AddSelectStartHandler();
  this.InitializeAccessibilityEvents();
  this.EnsureRowHotTrackItems();
  if(this.checkBoxImageProperties){
   this.CreateInternalCheckBoxCollection();
   this.UpdateSelectAllCheckboxesState();
  }
  this.CheckPendingEvents();
  this.CheckEndlessPagingLoadNextPage();
  this.PrepareCommandButtons();
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.Init();
  var cellFocusHelper = this.GetCellFocusHelper();
  if(cellFocusHelper)
   cellFocusHelper.Update();
  window.setTimeout(this.scrollToElementAsignedFromServer.bind(this), 0);
 },
 scrollToElementAsignedFromServer: function () {
  if(this.shouldScrollToNewRow) {
   this.GetScrollHelper().MakeRowVisible(this.GetEditingRow());
   this.shouldScrollToNewRow = false;
  }
  if(this.scrollToRowIndex >= 0) {
   this.MakeRowVisible(this.scrollToRowIndex);
   this.scrollToRowIndex = -1;
  }
 },
 AttachEventToEditor: function(columnIndex, eventName, handler) {
  var editor = this.GetEditorByColumnIndex(columnIndex);
  if(!ASPx.Ident.IsASPxClientEdit(editor))
   return;
  var attachKeyDownToInput = eventName === "KeyDown" && this.IsCheckEditor(editor);
  if(!editor[eventName] && !attachKeyDownToInput)
   return;
  var duplicateAttachLocker = "dxgv" + eventName + "Assigned";
  if(editor[duplicateAttachLocker]) 
   return;
  if(attachKeyDownToInput)
   ASPx.Evt.AttachEventToElement(editor.GetFocusableInputElement(), "keydown", function(e) { handler(editor, { htmlEvent: e }); });
  else
   editor[eventName].AddHandler(handler);
  editor.dxgvColumnIndex = columnIndex;
  editor[duplicateAttachLocker] = true;
 },
 IsCheckEditor: function(editor) {
  return ASPx.Ident.IsASPxClientCheckEdit && ASPx.Ident.IsASPxClientCheckEdit(editor);
 },
 IsStaticBinaryImageEditor: function(editor) {
  return ASPx.Ident.IsStaticASPxClientBinaryImage && ASPx.Ident.IsStaticASPxClientBinaryImage(editor);
 },
 IsDetailGrid: function() { 
  if(this.isDetailGrid !== null)
   return this.isDetailGrid;
  var regTest = new RegExp(this.DetailGridSuffix + "[0-9]");
  this.isDetailGrid = regTest.test(this.name);
  if(this.isDetailGrid)
   return true;
  var mainElement = this.GetMainElement();
  var parent = mainElement.parentNode;
  while(parent && parent.tagName !== "BODY") {
   this.isDetailGrid = regTest.test(parent.id);
   if(this.isDetailGrid) return true;
   parent = parent.parentNode;
  }
  return false;
 },
 PrepareCommandButtons: function(){
  if(!this.cButtonIDs || this.cButtonIDs.length == 0) return;
  for(var i = 0; i < this.cButtonIDs.length; i++){
   var name = this.cButtonIDs[i];
   var element = ASPx.GetElementById(name);
   if(!element) continue;
   var button = new ASPxClientButton(name);
   var buttonMainElement = button.GetMainElement();
   element.cpGVCommandButtonInitialized = true;
   button.cpGVName = this.name;
   button.useSubmitBehavior = false;
   button.causesValidation = false;
   button.isNative = !!eval(ASPx.Attr.GetAttribute(buttonMainElement, "data-isNative"));
   button.encodeHtml = !!eval(ASPx.Attr.GetAttribute(buttonMainElement, "data-encodeHtml"));
   button.enabled = !ASPx.ElementContainsCssClass(buttonMainElement, "dxbDisabled");
   button.clientVisible = ASPx.GetElementDisplay(buttonMainElement);
   button.accessibilityCompliant = this.accessibilityCompliant;
   button.Click.AddHandler(this.OnCommandButtonClick.aspxBind(this));
   button.InlineInitialize();
   this.PrepareCommandButton(button);
  }
  delete this.cButtonIDs;
 },
 PrepareCommandButton: function(button) {  
  if(this.allowBatchEditing && ASPx.GetIsParent(this.GetStatusBar(), button.GetMainElement())) { 
   this.EnsureCommandButtonClickArgs(button);
   var commandName = button.gvClickArgs && button.gvClickArgs[0][0];
   if(commandName === "UpdateEdit")
    this.updateButtonName = button.name;
   if(commandName === "CancelEdit")
    this.cancelButtonName = button.name;
   if(commandName === "PreviewChanges")
    this.previewChangesButtonName = button.name;
   if(commandName === "HidePreview")
    this.hidePreviewButtonName = button.name;
   if(commandName === "UpdateSummaries")
    this.updateSummariesButtonName = button.name;
  }
 },
 GetBatchEditCommandButtons: function() {
  var buttons = { };
  buttons.updateButton = ASPx.GetControlCollection().Get(this.updateButtonName);
  buttons.cancelButton = ASPx.GetControlCollection().Get(this.cancelButtonName);
  buttons.previewChangesButton = ASPx.GetControlCollection().Get(this.previewChangesButtonName);
  buttons.hidePreviewButton = ASPx.GetControlCollection().Get(this.hidePreviewButtonName);
  buttons.updateSummariesButton = ASPx.GetControlCollection().Get(this.updateSummariesButtonName);
  return buttons;
 },
 PrepareCommandButtonsIDList: function(container) {
  if(!this.cButtonIDs)
   this.cButtonIDs = [ ];
  var initButtonIndex = this.GetInitCommandButtonIndex();
  var elementList = container.getElementsByTagName("*");
  for(var i = 0; i < elementList.length; i++) {
   var element = elementList[i];
   var comandButtonIDPattern = /%DXItemIndex\d+%$/g; 
   if(element.id && comandButtonIDPattern.test(element.id)) {
    var patternID = element.id;
    var buttonID = patternID.replace(comandButtonIDPattern, initButtonIndex--);
    ASPx.SetInnerHtml(element.parentNode, element.parentNode.innerHTML.replace(new RegExp(patternID, "g"), buttonID));
    this.cButtonIDs.push(buttonID);
   }
  }
 },
 GetInitCommandButtonIndex: function() {
  var index = 0;
  var disposedControls = [];
  ASPx.GetControlCollection().ForEachControl(function(control) {
   if(control.cpGVName !== this.name)
    return;
   if(!control.GetMainElement()) { 
    disposedControls.push(control);
    return;
   }
   var matches = control.name.match(/_DXCBtn(-?\d+)/);
   if(matches && matches.length > 1) {
    var buttonIndex = parseInt(matches[1]);
    index = Math.min(index, buttonIndex);
   }
  }, this);
  for(var i = 0; i < disposedControls.length; i++)
   ASPx.GetControlCollection().Remove(disposedControls[i]);
  return index - 1;
 },
 EnsureCommandButtonClickArgs: function(button) {
  if(!button.gvClickArgs)
   button.gvClickArgs = eval(ASPx.Attr.GetAttribute(button.GetMainElement(), "data-args"));
 },
 OnCommandButtonClick: function(s, e){
  var mainElement = s.GetMainElement();
  if(!s.gvClickArgs)
   s.gvClickArgs = eval(ASPx.Attr.GetAttribute(mainElement, "data-args"));
  this.EnsureCommandButtonClickArgs(s);
  if(s.gvClickArgs && s.gvClickArgs.length > 1)
   this.ScheduleUserCommand(s.gvClickArgs[0], s.gvClickArgs[1], mainElement);
 },
 GetCommandButtonsInContainer: function(container) {
  var buttons = [];   
  ASPx.GetControlCollection().ProcessControlsInContainer(container, function(control){
   var isCommandButton = control.cpGVName === this.name && control.name.indexOf("DXCBtn") > -1;
   if(isCommandButton)
    buttons.push(control);
  }.bind(this));
  return buttons;
 },
 FindCommandButtonByChildElement: function(element) {
  if(!element) return null;
  var mainElement = ASPx.GetParentByPartialClassName(element, this.CommandColumnItemClassName);
  var buttonId = mainElement && mainElement.id;
  return buttonId ? ASPx.GetControlCollection().GetByName(buttonId) : null;
 },
 IsNewButton: function(button) { return this.CheckButtonByCommandName(button, "AddNew"); },
 IsEditButton: function(button) { return this.CheckButtonByCommandName(button, "StartEdit"); },
 IsDeleteButton: function(button) { return this.CheckButtonByCommandName(button, "Delete"); },
 IsRecoverButton: function(button) { return this.CheckButtonByCommandName(button, "Recover"); },
 IsCancelButton: function(button) { return this.CheckButtonByCommandName(button, "CancelEdit"); },
 IsSelectButton: function(button) { return this.CheckButtonByCommandName(button, "Select"); },
 IsCustomButton: function(button) { return this.CheckButtonByCommandName(button, "CustomButton"); },
 CheckButtonByCommandName: function (button, commandName) {
  if(!button) return false;
  this.EnsureCommandButtonClickArgs(button);
  return button.gvClickArgs[0] && button.gvClickArgs[0][0] === commandName ;
 },
 CheckEndlessPagingLoadNextPage: function() {
  window.setTimeout(function() {
   var scrollHelper = this.GetScrollHelper();
   if(this.useEndlessPaging && scrollHelper)
    scrollHelper.CheckEndlessPagingLoadNextPage();
  }.aspxBind(this), 0);
 },
 EnsureRowKeys: function() {
  if(ASPx.IsExists(this.stateObject.keys))
   this.keys = this.stateObject.keys;
  if(!this.keys)
   this.keys = [ ];
 }, 
 CheckPendingEvents: function() {
  if(this.pendingEvents.length < 1)
   return;
  for(var i = 0; i < this.pendingEvents.length; i++)
   this.ScheduleRaisingEvent(this.pendingEvents[i]);
  this.pendingEvents.length = 0;
 },
 ScheduleRaisingEvent: function(eventName) {
  window.setTimeout(function() { this[eventName](); }.aspxBind(this), 0);
 },
 CreateInternalCheckBoxCollection: function() {
  if(!this.internalCheckBoxCollection)
   this.internalCheckBoxCollection = new ASPx.CheckBoxInternalCollection(this.checkBoxImageProperties, true, undefined, undefined, undefined, this.accessibilityCompliant);
  else
   this.internalCheckBoxCollection.SetImageProperties(this.checkBoxImageProperties);
  this.CompleteInternalCheckBoxCollection();
 },
 CompleteInternalCheckBoxCollection: function() {
  if(!this.IsLastCallbackProcessedAsEndless()){
   this.internalCheckBoxCollection.Clear();
   for(var i = 0; i < this.selectAllSettings.length; i++){
    var selectAllSettings = this.selectAllSettings[i];
    if(selectAllSettings === null)
     continue;
    var icbSelectAllElement = this.GetSelectAllBtn(selectAllSettings.index);
    if(ASPx.IsExistsElement(icbSelectAllElement))
     this.AddInternalCheckBoxToCollection(icbSelectAllElement, -(selectAllSettings.index + 1), !this.IsCheckBoxDisabled(icbSelectAllElement));
   }
  }
  for(var i = 0; i < this.pageRowCount; i ++) {
   var index = i + this.visibleStartIndex;
   var icbInputElement = this.GetDataRowSelBtn(index);
   if(icbInputElement) {
    var enabled = !this.IsCheckBoxDisabled(icbInputElement);
    this.AddInternalCheckBoxToCollection(icbInputElement, index, enabled);
   }
  }
 },
 IsCheckBoxDisabled: function(icbInputElement) {
  var icbMainElement = ASPx.CheckableElementHelper.Instance.GetICBMainElementByInput(icbInputElement);
  return icbMainElement.className.indexOf(this.GetDisabledCheckboxClassName()) != -1;
 },
 GetCssClassNamePrefix: function() { return ""; },
 GetDisabledCheckboxClassName: function() { return this.GetCssClassNamePrefix() + "_cd"; },
 AddInternalCheckBoxToCollection: function (icbInputElement, visibleIndex, enabled) {
  var internalCheckBox = null;
  if(this.IsLastCallbackProcessedAsEndless())
   internalCheckBox = this.internalCheckBoxCollection.Get(icbInputElement.id);
  if(internalCheckBox && internalCheckBox.inputElement != icbInputElement){
   this.internalCheckBoxCollection.Remove(icbInputElement.id);
   internalCheckBox = null;
  }
  if(!internalCheckBox)
   internalCheckBox = this.internalCheckBoxCollection.Add(icbInputElement.id, icbInputElement);
  internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  internalCheckBox.SetEnabled(enabled && this.GetEnabled());
  internalCheckBox.readOnly = this.readOnly;
  internalCheckBox.autoSwitchEnabled = !this.allowSelectSingleRowOnly;
  var grid = this;
  function OnCheckedChanged(s, e){
   if(!s.autoSwitchEnabled && s.GetValue() == ASPx.CheckBoxInputKey.Unchecked){
    var value = s.stateController.GetNextCheckBoxValue(s.GetValue(), s.allowGrayedByClick && s.allowGrayed);
    s.SetValue(value);
   }
   var rowCheckBox = grid.GetDataRowSelBtn(visibleIndex);
   if(grid.allowSelectSingleRowOnly)
    grid._selectAllSelBtn(false, rowCheckBox.id);
   if(!grid.RaiseInternalCheckBoxClick(visibleIndex)){
    grid.ScheduleCommand(function() { grid.SelectItem(visibleIndex, s.GetChecked()); }, true);
    grid.mainTableClickCore(e, true);
   }
  }
  function OnSelectAllCheckedChanged(s, e) {
   grid.ScheduleCommand(function() { this.ProcessSelectAllCheckBoxCheckedChanged(s); }.bind(grid), true);
   grid.mainTableClickCore(e, true);
  }
  var checkedChangedHandler = visibleIndex < 0 ? OnSelectAllCheckedChanged : OnCheckedChanged;
  internalCheckBox.CheckedChanged.AddHandler(checkedChangedHandler);
 },
 ProcessSelectAllCheckBoxCheckedChanged: function(checkBox, e) {
  var index = this.tryGetNumberFromEndOfString(checkBox.inputElement.id).value;
  var columnSelectAllSettings = this.GetColumnSelectAllSettings(index);
  if(!columnSelectAllSettings)
   return;
  switch(columnSelectAllSettings.mode){
   case 1:
    if(checkBox.GetChecked())
     this.SelectAllItemsOnPage();
    else 
     this.UnselectAllItemsOnPage();
    break;
   case 2:
    if(checkBox.GetChecked())
     this.SelectItemsCore(null, true, true);
    else 
     this.UnselectFilteredItemsCore(true);
    break;
  }
  this.UpdateSelectAllCheckboxesState();
 },
 GetColumnSelectAllSettings: function(index){
  for(var i = 0; i < this.selectAllSettings.length; i++){
   if(this.selectAllSettings[i].index == index)
    return this.selectAllSettings[i];
  }
 },
 SelectItemsCore: function(visibleIndices, selected, changedBySelectAll){
  if(!ASPx.IsExists(selected)) selected = true;
  if(!ASPx.IsExists(visibleIndices)) {
   selected = selected ? "all" : "unall";
   changedBySelectAll = ASPx.IsExists(changedBySelectAll) ? changedBySelectAll : false;
   visibleIndices = [ ];
  } else {
   changedBySelectAll = false;
   if(visibleIndices.constructor != Array)
    visibleIndices = [visibleIndices];
  }
  this.gridCallBack([ASPxClientGridViewCallbackCommand.SelectRows, selected, changedBySelectAll].concat(visibleIndices));
 },
 UnselectFilteredItemsCore: function(changedBySelectAll){
  if(!ASPx.IsExists(changedBySelectAll))
   changedBySelectAll = false;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.SelectRows, "unallf", changedBySelectAll]);
 },
 AdjustControlCore: function() {
  ASPxClientControl.prototype.AdjustControlCore.call(this);
  this.UpdateScrollableControls();
  this.ApplyPostBackSyncData();
  this.AdjustPagerControls();
  this.UpdateBatchEditActiveElements();
  this.InvalidateLayout();
 },
 UpdateBatchEditActiveElements: function () {
  var cellFocusHelper = this.GetCellFocusHelper();
  if(cellFocusHelper)
   cellFocusHelper.LoadUnfocusableAreaElements();
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.UpdateAllRecordActiveElements();
 },
 NeedCollapseControlCore: function() {
  return this.HasScrolling();
 },
 CollapseControl: function () {
  ASPx.GridCommonUtils.SaveActiveElement(this);
  ASPxClientControl.prototype.CollapseControl.call(this);
 },
 ExpandControl: function () {
  ASPxClientControl.prototype.ExpandControl.call(this);
  ASPx.GridCommonUtils.RestoreActiveElement(this);
 },
 InRegularCallback: function() {
  return this.InCallback() && !this.GetCallbackHelper().HasWaitedFuncCallbacks();
 },
 gridCallBack: function (args, callbackHandler) {
  this.GetCallbackHelper().SendRequest(args, callbackHandler);
 },
 gridPostBack: function(args) { 
  this.GetCallbackHelper().SendPostback(args); 
 },
 gridFuncCallBack: function(args, onCallBack) {
  this.GetCallbackHelper().SendFuncCallback(args, onCallBack);
 },
 OnCallback: function (result) {
  var html = result.html;
  this.HideFilterControlPopup();
  var isFuncCallback = html.indexOf("FB|") == 0;
  this.afterCallbackRequired = !isFuncCallback; 
  if(isFuncCallback)
   this.OnFunctionalCallback(html);
  else
   this.OnGeneralCallback(result);
 },
 OnGeneralCallback: function(result) {
  var html = result.html;
  this.UpdateStateObjectWithObject(result.stateObject);
  this.GetFilterHelper().LoadSearchEditorValueOnCallback();
  if(this.RequirePartialUpdate(html))
   this.ProcessPartialCallbackResult(html);
  else
   this.ProcessFullCallbackResult(html);
 },
 RequirePartialUpdate: function(html) {
  var helper = this.GetEndlessPagingHelper();
  return html.indexOf("EP|") == 0 && helper;
 },
 ProcessPartialCallbackResult: function(result) {
  var helper = this.GetEndlessPagingHelper();
  helper.OnCallback(result);
 },
 ProcessFullCallbackResult: function(result) {
  var rootTD = this.GetGridTD();
  if(rootTD)
   ASPx.SetInnerHtml(rootTD, result);
 },
 OnFunctionalCallback: function(result){
  this.PreventCallbackAnimation();
  var result = this.ParseFuncCallbackResult(result.substr(3));
  if(!result) return;
  if(this.IsHeaderFilterFuncCallback(result.callback))
   this.OnFuncCallback(result);
  else 
   window.setTimeout(function() { this.OnFuncCallback(result); }.aspxBind(this), 0);
 },
 OnCallbackFinalized: function() {
  if(this.afterCallbackRequired)
   this.OnAfterCallback();
 },
 IsHeaderFilterFuncCallback: function(callback) {
  return callback === this.GetFilterHelper().OnHeaderFilterCallback;
 },
 ParseFuncCallbackResult: function(result) {
  var pos = result.indexOf("|");
  if(pos < 0) return;
  var index = parseInt(result.substr(0, pos), 10);
  var info = this.GetCallbackHelper().GetFuncCallBackInfo(index);
  if(info && info.callback)
   return { callback: info.callback, params: result.substr(pos + 1) };
 },
 OnFuncCallback: function(result) {
  if(result && result.callback)
   result.callback(eval("(" + result.params + ")"));
 },
 OnCallbackErrorAfterUserHandle: function(errorMessage, data) {
  this.SetCallbackErrorData(errorMessage, data, true);
 },
 OnCallbackError: function(result, data){
  this.SetCallbackErrorData(result, data, false);
  this.SetAfterCallbackRequired();
 },
 SetAfterCallbackRequired: function() {
  if(this.GetGridTD())
   this.afterCallbackRequired = true;
 },
 SetCallbackErrorData: function(errorMessage, data, userHandled) {
  this.showingError = errorMessage;
  this.errorData = data;
  this.userHandledCallbackError = userHandled;
 },
 ShowCallbackError: function(errorText, errorData) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper && batchEditHelper.ShowCallbackError(errorText, errorData))
   return;
  var displayIn = this;
  var popupForm = this.GetPopupEditForm();
  if(popupForm) {
   displayIn = popupForm;
   this.ShowPopupEditForm();
  }
  this.ShowCallbackErrorCore(displayIn, errorText);
 },
 ShowCallbackErrorCore: function(displayIn, errorText) {
  var errorTextContainer = this.GetErrorTextContainer(displayIn);
  if(errorTextContainer)
   errorTextContainer.innerHTML = errorText;
  else
   ASPx.ShowErrorAlert(errorText);
 },
 GetErrorTextContainer: function(displayIn) { },
 CreateEditingErrorItem: function(visibleIndex) { },
 CancelCallbackCore: function() {
  this.RestoreCallbackSettings();
  this.AddSelectStartHandler();
  this.InitializeAccessibilityEvents();
  this.ResetGestureElementPosition();
  this.GetFilterHelper().OnCancelCallbackCore();
  this.keyboardLock = false;
 },
 ResetGestureElementPosition: function() {  
  if(!ASPx.GesturesHelper) return;
  var handler = ASPx.GesturesHelper.handlers[this.name];
  if(handler)
   handler.ResetGestureElementPosition();
 },
 OnBeforeCallbackOrPostBack: function() {
  this.GetFilterHelper().LockFilter();
  this.HidePopupEditForm();
  ASPxClientGridBase.SaveActiveElementSettings(this);
 },
 OnBeforeCallback: function(command) {
  this.GetFilterHelper().OnBeforeCallback();
  this.keyboardLock = true;
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper)
   endlessPagingHelper.OnBeforeCallback(command);
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.OnBeforeCallback(command);
  var cellFocusHelper = this.GetCellFocusHelper();
  if(cellFocusHelper)
   cellFocusHelper.OnBeforeCallback();
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.OnBeforeCallback();
  this.ShowLoadingElements();
  this.SaveCallbackSettings();
  this.RemoveSelectStartHandler();
  if(this.accessibilityCompliant)
   this.isAccessibleRowEditing = this.IsRowEditingCommand(command);
 },
 IsRowEditingCommand: function(command) {
  return command == ASPxClientGridViewCallbackCommand.AddNewRow || 
      command == ASPxClientGridViewCallbackCommand.StartEdit;
 },
 OnAfterCallback: function() {
  this.Invalidate();
  this.InitializeBubbleEvents();
  this.GetFilterHelper().OnAfterCallback();
  this.GetToolbarHelper().OnAfterCallback();
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper)
   endlessPagingHelper.OnAfterCallback();
  var checkBoxCollectionReinitializeRequired = !this.HasCallbackError(); 
  this.ProcessGridCallbackError();
  this.pendingCommands = [ ];
  try {
   this._setFocusedItemInputValue();
   this.EnsureRowKeys();
   this.SetHeadersClientEvents();
   this.RestoreCallbackSettings();
   this.AddSelectStartHandler();
   this.InitializeAccessibilityEvents();
   this.EnsureRowHotTrackItems();
   if(this.kbdHelper && !this.useEndlessPaging)
    this.kbdHelper.EnsureFocusedRowVisible();
  }
  finally {
   this.keyboardLock = false;
  }
  this.CheckPendingEvents();
  this.PrepareCommandButtons();
  if(this.checkBoxImageProperties && checkBoxCollectionReinitializeRequired){
   this.CreateInternalCheckBoxCollection();
   this.UpdateSelectAllCheckboxesState();
  }
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.OnAfterCallback();
  var cellFocusHelper = this.GetCellFocusHelper();
  if(cellFocusHelper)
   cellFocusHelper.OnAfterCallback();
  this.CheckEndlessPagingLoadNextPage();
  window.setTimeout(this.scrollToElementAsignedFromServer.bind(this), 0);
  if(this.isAccessibleRowEditing)
   this.HandleAccessibleFocusForEditingRow();
 },
 HasCallbackError: function() { return !!this.showingError; },
 ProcessGridCallbackError: function() {
  if(!this.HasCallbackError()) return;
  if(this.userHandledCallbackError)
   this.ProcessCallbackErrorAfterUserHandle();
  else
   this.ShowCallbackError(this.showingError, this.errorData);
  this.SetCallbackErrorData(null, null, false);
 },
 ProcessCallbackErrorAfterUserHandle: function() {
  this.ShowPopupEditForm();
 },
 SaveCallbackSettings: function() {
  this.SaveCustWindowScroll();
 },
 RestoreCallbackSettings: function() {
  this.RestoreCustWindowScroll();
  this.ApplyPostBackSyncData();
  this.ResetControlAdjustment(); 
  ASPxClientGridBase.RestoreActiveElementSettings(this); 
 },
 SaveCustWindowScroll: function() {
  var custWindow = this.GetCustomizationWindow();
  var contentContainer = custWindow && custWindow.IsVisible() && custWindow.GetContentContainer(-1);
  if(contentContainer)
   this.savedCustWindowScroll = { left: contentContainer.scrollLeft, top: contentContainer.scrollTop };
 },
 RestoreCustWindowScroll: function() {   
  var custWindow = this.GetCustomizationWindow();
  var contentContainer = custWindow && custWindow.IsVisible() && custWindow.GetContentContainer(-1);
  if(contentContainer && ASPx.IsExists(this.savedCustWindowScroll)) {
   contentContainer.scrollLeft = this.savedCustWindowScroll.left;
   contentContainer.scrollTop = this.savedCustWindowScroll.top;
  }
 },
 ShowPopupEditForm: function() {
  var popupForm = this.GetPopupEditForm();
  if(popupForm && !popupForm.IsVisible())
   popupForm.Show();
 },
 HidePopupEditForm: function() {
  var popup = this.GetPopupEditForm();
  if(popup)
   popup.Hide();
 },
 OnPopupEditFormInit: function(popup) {
  if(this.HasHorzScroll() && this.GetVisibleItemsOnPage() > 0) {
   var popupHorzOffset = popup.GetPopupHorizontalOffset();
   popup.SetPopupHorizontalOffset(popupHorzOffset - this.GetPopupEditFormHorzOffsetCorrection(popup));
  }
  popup.Show();
 },
 GetPopupEditFormHorzOffsetCorrection: function(popup) {
  return 0;
 },
 HandleAccessibleFocusForEditingRow: function() {
  var editingRow = this.GetEditingRow();
  if(!editingRow || !this.accessibilityFocusTreeLine)
   return;
  var focusElement = ASPx.FindFirstChildActionElement(editingRow, function(element) {
   return !this.IsCommandColumnItem(element);
  }.aspxBind(this));
  this.accessibilityFocusTreeLine = ASPx.RestoreFocusHelper.getTreeLineCore(this.GetMainElement(), focusElement);
  this.isAccessibleRowEditing = false;
 },
 _isRowSelected: function(visibleIndex) {
  if(!ASPx.IsExists(this.stateObject.selection)) return false;
  var index = this._getItemIndexOnPage(visibleIndex);
  return this._isTrueInCheckList(this.stateObject.selection, index);
 },
 _isTrueInCheckList: function(checkList, index) {
  if(index < 0 ||  index >= checkList.length) return false;
  return checkList.charAt(index) == "T";
 },
 _getSelectedRowCount: function() {
  var count = this.selectedWithoutPageRowCount + this._getSelectedRowCountOnPage();
  if(this.allowSelectSingleRowOnly)
   count = Math.min(count, 1);
  return count;
 },
 _getSelectedRowCountOnPage: function(){
  if(!ASPx.IsExists(this.stateObject.selection))
   return 0;
  var checkList = this.stateObject.selection;
  var selCount = 0;
  for(var i = 0; i < checkList.length; i++) {
   if(checkList.charAt(i) == "T") selCount ++;
  }
  return selCount;
 },
 _selectAllRowsOnPage: function(checked) {
  if(checked && this.allowSelectSingleRowOnly) {
   this.SelectItem(0, true);
   return;
  }
  if(!ASPx.IsExists(this.stateObject.selection)) return;
  this._selectAllSelBtn(checked);
  var prevSelectedRowCount = 0;
  var isTrueInCheckList = false;
  for(var i = 0; i < this.pageRowCount; i ++) {
   isTrueInCheckList = this._isTrueInCheckList(this.stateObject.selection, i);
   if(isTrueInCheckList) prevSelectedRowCount++; 
   if(isTrueInCheckList != checked)
    this.ChangeItemStyle(i + this.visibleStartIndex, this.GetSelectedItemStyle(checked));
  }
  if (prevSelectedRowCount == 0 && !checked) return;
  var selValue = "";
  if(checked) {
   for(var i = 0; i < this.pageRowCount; i ++)
    selValue += this.IsDataItem(this.visibleStartIndex + i ) ? "T" : "F";
  }
  if(selValue != this.stateObject.selection) {
   this.userChangedSelection = true;
   if(selValue == "") selValue = "U";
   this.stateObject.selection = selValue;
  }
  this.DoSelectionChanged(-1, checked, true);
  this.UpdateSelectAllCheckboxesState();
 },
 SelectAllItemsOnPage: function(selected) {
  if(!ASPx.IsExists(selected)) selected = true;
  this._selectAllRowsOnPage(selected);
 },
 UnselectAllItemsOnPage: function() {
  this.SelectAllItemsOnPage(false);
 },
 ConfirmDeleteGridItem: function() {
  return this.confirmDelete == "" || confirm(this.confirmDelete);
 },
 DeleteGridItem: function(visibleIndex) {
  if(!this.allowDelete || !this.ConfirmDeleteGridItem())
   return;
  this.DeleteItem(visibleIndex);
 },
 _selectAllSelBtn: function(checked, exceptName) {
  if(!this.checkBoxImageProperties) return;
  this.internalCheckBoxCollection.elementsMap.forEachEntry(function(key, checkBox) {
   if(key !== exceptName && checkBox.SetValue)
    checkBox.SetValue(checked ? ASPx.CheckBoxInputKey.Checked : ASPx.CheckBoxInputKey.Unchecked);
  });
 },
 doRowMultiSelect: function(row, rowIndex, evt) {
  var ctrlKey = evt.ctrlKey || evt.metaKey,
   shiftKey = evt.shiftKey;
  if((ctrlKey || shiftKey) && (!ASPx.Browser.IE || ASPx.Browser.Version > 8))
   ASPx.Selection.Clear();
  if(this.allowSelectSingleRowOnly)
   shiftKey = false;
  if(!ctrlKey && !shiftKey) {
   if(this._getSelectedRowCountOnPage() === 1 && this._isRowSelected(rowIndex))
    return;
   this._selectAllRowsOnPage(false);
   this.SelectItem(rowIndex, true);
   this.lastMultiSelectIndex = rowIndex;
  } else {
   if(ctrlKey) {
    this.SelectItem(rowIndex, !this._isRowSelected(rowIndex));
    this.lastMultiSelectIndex = rowIndex;
   } else {
    var startIndex = rowIndex > this.lastMultiSelectIndex ? this.lastMultiSelectIndex + 1 : rowIndex;
    var endIndex = rowIndex > this.lastMultiSelectIndex ? rowIndex : this.lastMultiSelectIndex - 1;
    for(var i = this.visibleStartIndex; i < this.pageRowCount + this.visibleStartIndex; i ++) {
     if(i == this.lastMultiSelectIndex) 
      continue;
     this.SelectItem(i, i >= startIndex && i <= endIndex);
    }
   }
  }
  this.UpdatePostBackSyncInput();
 },
 AddSelectStartHandler: function() {   
  if(!this.allowSelectByItemClick || !ASPx.Browser.IE || ASPx.Browser.Version > 8 )
   return;
  ASPx.Evt.AttachEventToElement(this.GetMainTable(), "selectstart", ASPxClientGridBase.SelectStartHandler);
 },
 InitializeAccessibilityEvents: function() {
  if(!this.accessibilityCompliant)
   return;
  if(this.isAccessibleFilterRowMenu)
   this.AddKeyDownFilterRowButtonHandler();
  this.PreventMouseDownHeaderLinkEvent();
 },
 AddKeyDownFilterRowButtonHandler: function() {
  var filterRow = this.GetFilterRow();
  if(!filterRow)
   return;
  var buttons = [];
  ASPx.GetNodesByPartialId(filterRow, this.AccessibleFilterRowButtonID, buttons);
  var handler = { "keydown": ASPx.Evt.InvokeMouseClickByKeyDown };
  for(var i = 0; i < buttons.length; i++)
   this.AttachEventsToElement(buttons[i], handler);
 },
 PreventMouseDownHeaderLinkEvent: function() {
  var headerLinksSelector = "a[id^='" + this.name + "'][id$='_l']";
  var headerLinks = this.GetMainElement().querySelectorAll(headerLinksSelector);
  var handler = { "mousedown": function(e) {
   ASPx.Evt.GetEventSource(e).focus();
   ASPx.Evt.PreventEvent(e);
  } };
  for(var i = 0; i < headerLinks.length; i++)
   this.AttachEventsToElement(headerLinks[i], handler, true);
 },
 RemoveSelectStartHandler: function() {
  if(!this.allowSelectByItemClick || !ASPx.Browser.IE)
   return; 
  ASPx.Evt.DetachEventFromElement(this.GetMainTable(), "selectstart", ASPxClientGridBase.SelectStartHandler);
 },
 SelectItemsByKey: function(keys, selected){
  if(!ASPx.IsExists(selected)) selected = true;
  if(!ASPx.IsExists(keys)) return;
  if(keys.constructor != Array)
   keys = [keys];
  this.gridCallBack([ASPxClientGridViewCallbackCommand.SelectRowsKey, selected].concat(keys));
 },
 SelectItem: function(visibleIndex, checked, fromCheckBox) {
  if(!this.IsPossibleSelectItem(visibleIndex, checked)) return;
  if(ASPx.IsExists(fromCheckBox)) fromCheckBox = false;
  var index = this._getItemIndexOnPage(visibleIndex);
  if(index < 0) return;
  if(checked && this.allowSelectSingleRowOnly)
   this._selectAllRowsOnPage(false);
  if(ASPx.IsExists(this.stateObject.selection)) {
   this.userChangedSelection = true;
   var checkList = this.stateObject.selection;
   if(index >= checkList.length) {
    if(!checked) return;
    for(var i = checkList.length; i <= index; i ++)
     checkList += "F";
   }
   checkList = checkList.substr(0, index) + (checked ? "T" : "F") + checkList.substr(index + 1, checkList.length - index - 1);
   if(checkList.indexOf("T") < 0) checkList = "U";
   this.stateObject.selection = checkList;
  }
  this.selectItemCheckbox(visibleIndex, checked);
  this.UpdateSelectAllCheckboxesState();
  this.ChangeItemStyle(visibleIndex, this.GetSelectedItemStyle(checked));
  this.DoSelectionChanged(visibleIndex, checked, false);
 },
 selectItemCheckbox: function(visibleIndex, checked) {
  var checkBox = this.GetDataRowSelBtn(visibleIndex);
  if(checkBox) {
   var internalCheckBox = this.internalCheckBoxCollection && this.internalCheckBoxCollection.Get(checkBox.id);
   if(internalCheckBox)
    internalCheckBox.SetValue(checked ? ASPx.CheckBoxInputKey.Checked : ASPx.CheckBoxInputKey.Unchecked);
  }
 },
 IsPossibleSelectItem: function(visibleIndex, newSelectedValue){
  if(this.IsBatchEditDeletedItem(visibleIndex))
   return false;
  return visibleIndex > -1 && this._isRowSelected(visibleIndex) != newSelectedValue;
 },
 UpdateSelectAllCheckboxesState: function(){
  if(!this.selectAllSettings)
   return;
  for(var i = 0; i < this.selectAllSettings.length; i++){
   var columnSelectAllSettings = this.selectAllSettings[i];
   if(columnSelectAllSettings === null)
    continue;
   var selectAllButtonInput = this.GetSelectAllBtn(columnSelectAllSettings.index);
   if(selectAllButtonInput && !this.IsCheckBoxDisabled(selectAllButtonInput))
    this.UpdateSelectAllCheckboxStateCore(selectAllButtonInput, columnSelectAllSettings.mode);
  }
 },
 UpdateSelectAllCheckboxStateCore: function(selectAllButtonInput, selectMode){
  var value = ASPx.CheckBoxInputKey.Indeterminate;
  var selectedRowCountOnPage = this.GetSelectedKeysOnPage().length;
  var considerSelectionOnPages = selectMode == 2 && this.selectAllBtnStateWithoutPage !== null;
  if(this.GetDataItemCountOnPage() == selectedRowCountOnPage && (!considerSelectionOnPages || this.selectAllBtnStateWithoutPage == ASPx.CheckBoxInputKey.Checked))
   value = ASPx.CheckBoxInputKey.Checked;
  else if(selectedRowCountOnPage == 0 && (!considerSelectionOnPages || this.selectAllBtnStateWithoutPage == ASPx.CheckBoxInputKey.Unchecked))
   value = ASPx.CheckBoxInputKey.Unchecked;
  var selectAllCheckBoxInst = this.internalCheckBoxCollection.Get(selectAllButtonInput.id);
  selectAllCheckBoxInst.SetValue(value);
 },
 GetDataItemCountOnPage: function(){
  return this.pageRowCount;
 },
 ScheduleUserCommand: function(args, postponed, eventSource) {
  if(!args || args.length == 0) 
   return;
  var commandName = args[0];
  var rowCommands = this.GetUserCommandNamesForRow();
  if((this.useEndlessPaging || this.allowBatchEditing) && ASPx.Data.ArrayIndexOf(rowCommands, commandName) > -1)
   args[args.length - 1] = this.FindParentRowVisibleIndex(eventSource, true);
  postponed &= this.IsMainTableChildElement(eventSource);
  this.ScheduleCommand(args, postponed);
 },
 GetUserCommandNamesForRow: function() { return [ "CustomButton", "Select", "StartEdit", "Delete", "Recover", "CancelEdit" ]; },
 IsMainTableChildElement: function(src) { return true; },
 FindParentRowVisibleIndex: function(element, dataAndGroupOnly) {
  var regEx = this.GetItemVisibleIndexRegExp(dataAndGroupOnly);
  var editingRow = this.GetEditingRow();
  while(element) {
   if(element.tagName === "BODY" || element.id == this.name)
    return this.InvalidItemIndex;
   var matches = regEx.exec(element.id);
   if(matches && matches.length == 3)
    return parseInt(matches[2]);
   if(element === editingRow)
    return this.editItemVisibleIndex;
   element = element.parentNode;
  }
  return this.InvalidItemIndex;
 },
 GetItemVisibleIndexRegExp: function(dataAndGroupOnly) {
  return this.GetItemVisibleIndexRegExpByIdParts();
 },
 GetItemVisibleIndexRegExpByIdParts: function(idParts){
  if(!idParts) idParts = [ ];
  return new RegExp("^(" + this.name + "_(?:" + idParts.join("|") + "))(-?\\d+)(?:_\\d+)?$");
 },
 ScheduleCommand: function(args, postponed) {
  if(postponed)
   this.pendingCommands.push(args);
  else 
   this.PerformScheduledCommand(args);
 },
 PerformScheduledCommand: function(args) {
  if(ASPx.IsFunction(args)) {
   args(); 
   return;
  }
  if(args && args.length > 0) {
   var commandName = "UA_" + args[0];
   if(this[commandName])
    this[commandName].apply(this, args.slice(1));
  }
 },
 PerformPendingCommands: function() {
  var commandCount = this.pendingCommands.length;
  for(var i = 0; i < commandCount; i++)
   this.PerformScheduledCommand(this.pendingCommands.pop());
 },
 getItemByHtmlEvent: function(evt) { return null; },
 getItemByHtmlEventCore: function(evt, partialID) {
  var item = ASPx.GetParentByPartialId(ASPx.Evt.GetEventSource(evt), partialID);
  if(item && item.id.indexOf(this.name) > -1)
   return item;
  return null;
 },
 NeedProcessTableClick: function(evt) {
  var source = ASPx.Evt.GetEventSource(evt);
  var handlingControl = this.GetTableClickHandlingControl(source);
  return handlingControl && this === handlingControl;
 },
 GetTableClickHandlingControl: function(source) {
  var treeLine = ASPx.GetElementTreeLine(source);
  for(var i = 0; i < treeLine.length; i++) {
   var control = ASPx.GetControlCollection().GetByName(treeLine[i].id);
   if(control && control instanceof ASPxClientGridBase)
    return control;
  }
  return null;
 },
 mainTableClick: function(evt) { this.mainTableClickCore(evt); },
 mainTableDblClick: function(evt) { 
  var item = this.getItemByHtmlEvent(evt);
  if(!item) return;
  var forceItemDblClickEvent = true;
  var itemIndex = this.getItemIndex(item.id);
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper){
   batchEditHelper.ProcessTableClick(item, ASPx.Evt.GetEventSource(evt), true);
   forceItemDblClickEvent = batchEditHelper.GetEditingRecordKey() !== this.ConvertVisibleIndexToKey(itemIndex);
  }
  if(forceItemDblClickEvent)
   this.RaiseItemDblClick(itemIndex, evt);
 },
 mainTableClickCore: function(evt, fromCheckBox) {
  if(this.kbdHelper) {
   this.kbdHelper.preventBrowserScrollOnFocus = fromCheckBox;
   this.kbdHelper.HandleClick(evt);
   this.kbdHelper.preventBrowserScrollOnFocus = false;
  }
  var sendNotificationCallback = true;
  this.mainTableClickData.processing = true;
  try {
   this.ProcessTableClick(evt, fromCheckBox);
   var callbackHelper = this.GetCallbackHelper();
   var savedRequestCount = callbackHelper.GetTotalRequestCount();
   this.PerformPendingCommands();
   var currentRequestCount = callbackHelper.GetTotalRequestCount();
   sendNotificationCallback = currentRequestCount === savedRequestCount;
  } finally {
   if(sendNotificationCallback)
    if(this.mainTableClickData.focusChanged && !this.mainTableClickData.selectionChanged) {
     this.gridCallBack([ASPxClientGridViewCallbackCommand.FocusedRow]);
    } else if(this.mainTableClickData.selectionChanged) {
     this.gridCallBack([ASPxClientGridViewCallbackCommand.Selection]);
    }
   this.mainTableClickData.processing = false;
   this.mainTableClickData.focusChanged = false;
   this.mainTableClickData.selectionChanged = false;
  }
 },
 ProcessTableClick: function(evt, fromCheckBox) {
  var source = ASPx.Evt.GetEventSource(evt);
  var item = this.getItemByHtmlEvent(evt);
  if(item) {
   var itemIndex = this.getItemIndex(item.id);
   var isCommandColumnItem = this.IsCommandColumnItem(source);
   if(!isCommandColumnItem && !fromCheckBox) {
    var batchEditHelper = this.GetBatchEditHelper();
    if(batchEditHelper && batchEditHelper.ProcessTableClick(item, source))
     return;
    if(this.RaiseItemClick(itemIndex, evt)) 
     return;
   }
   var prevFocusedItemIndex = this._getFocusedItemIndex();
   if(this.CanTryFocusItemOnTableClick())
    this.TryFocusItem(itemIndex, evt);
   if(this.allowSelectByItemClick) {
    if(!this.testActionElement(source) && !isCommandColumnItem && !fromCheckBox) {
     if(this.lookupBehavior) {
      var checked = this.allowSelectSingleRowOnly || !this._isRowSelected(itemIndex);
      this.SelectItem(itemIndex, checked);
     } else {
      if(!fromCheckBox && !evt.shiftKey && this.RequireProcessTableClickLikeCheckBoxClick(source, itemIndex)) { 
       var newSelected = this.allowSelectSingleRowOnly || !this._isRowSelected(itemIndex);
       this.SelectItem(itemIndex, newSelected);
       return;
      }
      var indexCorrection = 0;
      if(this.lastMultiSelectIndex < 0 && prevFocusedItemIndex > -1) {
       if(evt.shiftKey && itemIndex != prevFocusedItemIndex && !this._isRowSelected(prevFocusedItemIndex))
        indexCorrection = itemIndex > prevFocusedItemIndex ? -1 : 1;
       this.lastMultiSelectIndex = prevFocusedItemIndex + indexCorrection;
      }
      this.doRowMultiSelect(item, itemIndex, evt);
      this.lastMultiSelectIndex -= indexCorrection;
     }
    }
   } else {
    this.lastMultiSelectIndex = itemIndex;
   }
  }
 },
 testActionElement: function(element) {
  return element && element.tagName.match(/input|select|textarea|^a$/i);
 },
 IsCommandColumnItem: function(element) {
  if(!element) return false;
  if(ASPx.ElementHasCssClass(element, this.CommandColumnItemClassName))
   return true;
  return ASPx.GetIsParent(this.GetMainElement(), ASPx.GetParentByPartialId(element, "DXCBtn"));
 },
 RequireProcessTableClickLikeCheckBoxClick: function(tableClickSource, visibleIndex) { return false; },
 OnBeforeFocusedCellChanging: function(cellInfo, htmlEvent) {
  var visibleIndex = this.ConvertKeyToVisibleIndex(cellInfo.recordKey);
  if(this.allowFocusedRow && visibleIndex >= 0 && visibleIndex !== this.focusedRowIndex && !this.IsBatchEditDeletedItem(visibleIndex)) 
   return this.RaiseItemFocusing(visibleIndex, htmlEvent);
  return false;
 },
 OnFocusedCellChanged: function(cellInfo) {
  this._setFocusedItemIndex(this.ConvertKeyToVisibleIndex(cellInfo.recordKey));
  if(!this.allowFocusedRow)
   this.ChangeToolbarItemsEnabling();
 },
 CanTryFocusItemOnTableClick: function() { return !this.GetCellFocusHelper(); },
 TryFocusItem: function(visibleIndex, htmlEvent) {
  if(this.allowFocusedRow && visibleIndex >= 0 && visibleIndex !== this.focusedRowIndex && !this.IsBatchEditDeletedItem(visibleIndex)) {
   var isCanceledByUser = this.RaiseItemFocusing(visibleIndex, htmlEvent);
   if(!isCanceledByUser) {
    this._setFocusedItemIndex(visibleIndex);
    return true;
   }
  }
  return false;
 },
 _setFocusedItemIndex: function(visibleIndex) {
  if(visibleIndex < 0) 
   visibleIndex = -1;
  if(!this.IsPossibleFocusItem(visibleIndex)) 
   return;
  var oldIndex = this.focusedRowIndex;
  this.focusedRowIndex = visibleIndex;
  this.ChangeFocusedItemStyle(oldIndex, false);
  this.ChangeFocusedItemStyle(this.focusedRowIndex, true);
  this._setFocusedItemInputValue();
  if(this.callbackOnFocusedRowChanged) {
   this.UpdatePostBackSyncInput(true);
   if(!this.mainTableClickData.processing) {
    this.gridCallBack([ASPxClientGridViewCallbackCommand.FocusedRow]);
   } else {
    this.mainTableClickData.focusChanged = true;
   }
   return;
  }
  this.ChangeToolbarItemsEnabling();
  this.RaiseFocusedItemChanged();
 },
 IsPossibleFocusItem: function(visibleIndex) { return this.allowFocusedRow && visibleIndex !== this.focusedRowIndex && !this.IsBatchEditDeletedItem(visibleIndex); },
 ChangeToolbarItemsEnabling: function(){
  var helper = this.GetToolbarHelper();
  helper.RefreshItemsState();
 },
 ChangeToolbarUpdateEditItemsEnabling: function(enabled) {
  var helper = this.GetToolbarHelper();
  if(helper)
   helper.OnUpdateEditEnabledChanged(enabled);
 },
 ChangeFocusedItemStyle: function(visibleIndex, focused) {
  if(visibleIndex < 0) return;
  var itemStyle = this.GetFocusedItemStyle(visibleIndex, focused);
  this.ChangeItemStyle(visibleIndex, itemStyle);
 },
 GetFocusedItemStyle: function(visibleIndex, focused){
  if(focused)
   return this.GetStyleHelper().GetFocusedItemStyle();
  return this.GetSelectedItemStyle(this._isRowSelected(visibleIndex));
 },
 GetFocusedCell: function() {
  var cellFocusHelper = this.GetCellFocusHelper();
  if(cellFocusHelper && cellFocusHelper.IsCellFocused()) {
   var info = cellFocusHelper.GetFocusedCellInfo();
   if(info)
    return this.CreateCellInfo(this.ConvertKeyToVisibleIndex(info.recordKey), this.GetColumn(info.columnIndex), info.recordKey);
  }
  return null;
 },
 SetFocusedCell: function(itemIndex, columnIndex) { this.SetFocusedCellByKey(this.ConvertVisibleIndexToKey(itemIndex), columnIndex); },
 SetFocusedCellByKey: function(key, columnIndex) {
  var cellFocusHelper = this.GetCellFocusHelper();
  if(cellFocusHelper)
   cellFocusHelper.SetFocusedCell(key, columnIndex);
 },
 _setFocusedItemInputValue: function() {
  if(ASPx.IsExists(this.stateObject.focusedRow)) 
   this.stateObject.focusedRow = this.focusedRowIndex;
 },
 _getFocusedItemIndex: function() {
  if(!this.allowFocusedRow) return -1;
  return this.focusedRowIndex;
 },
 getItemIndex: function(rowId) {   
  return this.tryGetNumberFromEndOfString(rowId).value;
 },
 tryGetNumberFromEndOfString: function(str) {
  var value = -1;
  var success = false;
  var n = str.length - 1;
  while(n >= 0 && !isNaN(parseInt(str.substr(n), 10))) {
   value = parseInt(str.substr(n), 10);
   success = true;
   n--;
  }
  return { success: success, value: value };
 },
 GetSelectedState: function() {
  if(!this.userChangedSelection) return null;
  if(!ASPx.IsExists(this.stateObject.selection)) return null;
  return this.stateObject.selection;
 },
 GetKeyValues: function() {
  return ASPx.Json.ToJson(this.stateObject.keys);
 },
 UpdateItemsStyle: function() {
  var start = this.GetTopVisibleIndex();
  var end = start + this.GetVisibleItemsOnPage();
  for(var i = start; i < end; i++) 
   this.UpdateItemStyle(i, this.GetItemStyle(i));
 },
 UpdateItemStyle: function(visibleIndex) {
  this.ChangeItemStyle(visibleIndex, this.GetItemStyle(visibleIndex));
 },
 GetSelectedItemStyle: function(selected) {
  var helper = this.GetStyleHelper();
  return selected ? helper.GetSelectedItemStyle() : helper.GetClearItemStyle();
 },
 GetItemStyle: function(visibleIndex){
  var helper = this.GetStyleHelper();
  var style = helper.GetClearItemStyle();
  if(this.IsBatchEditDeletedItem(visibleIndex))
   style = helper.GetBatchEditDeletedItemStyle();
  else if(this.allowFocusedRow && this._getFocusedItemIndex() == visibleIndex)
   style = helper.GetFocusedItemStyle();
  else if(this._isRowSelected(visibleIndex))
   style = helper.GetSelectedItemStyle();
  return style;
 },
 ChangeItemStyle: function(visibleIndex, rowStyle) {
  if(!this.RequireChangeItemStyle(visibleIndex, rowStyle))
   return;
  this.ApplyItemStyle(visibleIndex, rowStyle);
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.OnItemStyleChanged(this.GetItemKey(visibleIndex), rowStyle);
 },
 ApplyItemStyle: function(visibleIndex, styleInfo) {
  var item = this.GetItem(visibleIndex);
  this.ApplyElementStyle(item, styleInfo);
 },
 ApplyElementStyle: function(element, styleInfo) {  
  this.GetStyleHelper().ApplyElementStyle(element, styleInfo);
 },
 RequireChangeItemStyle: function(visibleIndex, itemStyle){
  var focusedIndex = this._getFocusedItemIndex();
  var helper = this.GetStyleHelper();
  if(focusedIndex > -1 && focusedIndex == visibleIndex && !helper.IsFocusedItemStyle(itemStyle))
   return false;
  return !!this.GetItem(visibleIndex);
 },
 _getItemIndexOnPage: function(visibleIndex) { 
  return visibleIndex - this.visibleStartIndex; 
 },
 getColumnIndex: function(colId) {
  if(this.IsEmptyHeaderID(colId))
   return -1;
  var index = this.tryGetNumberFromEndOfString(colId).value;
  var postfix = "col" + index;
  if(colId.lastIndexOf(postfix) == colId.length - postfix.length)
   return index;
  return -1;
 },
 getColumnObject: function(colId) {
  var index = this.getColumnIndex(colId);
  return index > -1 ? this._getColumn(index) : null;
 },
 _getColumnIndexByColumnArgs: function(column) {
  column = this._getColumnObjectByArg(column);
  if(!column) return null;
  return column.index;
 },
 _getColumnObjectByArg: function(arg) {
  if(!ASPx.IsExists(arg)) return null;
  if(typeof(arg) == "number") return this._getColumn(arg);
  if(ASPx.IsExists(arg.index)) return arg;
  var column = this._getColumnById(arg);
  if(column) return column;
  return this._getColumnByField(arg);  
 },
 _getColumnCount: function() { return this.columns.length; },
 _getColumn: function(index) {
  for(var i = 0; i < this.columns.length; i++){
   if(this.columns[i].index == index) return this.columns[i];
  }
  return null;
 },
 _getColumnById: function(id) {
  if(!ASPx.IsExists(id)) return null;
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].id == id) return this.columns[i];
  }
  return null;
 },
 _getColumnByField: function(fieldName) {
  if(!ASPx.IsExists(fieldName)) return null;
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].fieldName == fieldName) return this.columns[i];
  }
  return null;
 },
 DoSelectionChanged: function(index, isSelected, isSelectAllOnPage){
  if(this.callbackOnSelectionChanged) {
   this.UpdatePostBackSyncInput(true);
   if(!this.mainTableClickData.processing) {
    this.gridCallBack([ASPxClientGridViewCallbackCommand.Selection]);
   } else {
    this.mainTableClickData.selectionChanged = true;
   }
   return;
  }
  this.ChangeToolbarItemsEnabling();
  this.RaiseSelectionChanged(index, isSelected, isSelectAllOnPage, false);
 },
 CommandCustomButton:function(id, index) {
  var processOnServer = true;
  if(!this.CustomButtonClick.IsEmpty()) {
   var e = this.CreateCommandCustomButtonEventArgs(index, id);
   this.CustomButtonClick.FireEvent(this, e);
   processOnServer = e.processOnServer;
  }
  if(processOnServer)
   this.gridCallBack([ASPxClientGridViewCallbackCommand.CustomButton, id, index]);
 },
 CreateCommandCustomButtonEventArgs: function(index, id){
  return null;
 },
 HeaderMouseDown: function(element, e){
  if(!ASPx.Evt.IsLeftButtonPressed(e)) 
   return;
  var source = ASPx.Evt.GetEventSource(e);
  if(this.isHeaderFilterButton(source))
   return;
  if(this.TryStartColumnResizing(e, element))
   return;
  var canDrag = this.canDragColumn(element) && source.tagName != "IMG";
  var dragHelper = this.GetDragHelper();
  var drag = dragHelper.CreateDrag(e, element, canDrag);
  if(!canDrag && (e.shiftKey || e.ctrlKey))
   drag.clearSelectionOnce = true;
  dragHelper.CreateTargets(drag, e);
 },
 isHeaderFilterButton: function(el) {
  return ASPx.ElementContainsCssClass(ASPx.getSpriteMainElement(el), this.HeaderFilterButtonClassName);
 },
 TryStartColumnResizing: function(e, headerCell) {
  return false;
 }, 
 OnParentRowMouseEnter: function(element) {
  if(this.GetParentRowsWindow() == null) return;
  if(this.GetParentRowsWindow().IsWindowVisible()) return;
  this.ParentRowsTimerId = window.setTimeout(function() {
   var gv = ASPx.GetControlCollection().Get(this.name);
   if(gv)
    gv.OnParentRowsTimer(element.id);
  }.aspxBind(this), 500);
 },
 OnParentRowsTimer: function(rowId) {
  var element = ASPx.GetElementById(rowId);
  if(element)
   this.ShowParentRows(element);
 },
 OnParentRowMouseLeave: function(evt) {
  ASPx.Timer.ClearTimer(this.ParentRowsTimerId);
  if(this.GetParentRowsWindow() == null) return;
  if(evt && evt.toElement) {
   if(ASPx.GetParentByPartialId(evt.toElement, this.GetParentRowsWindow().name) != null)
    return;
  }
  this.HideParentRows();
 },
 ShowParentRows: function(element) {
  this.ParentRowsTimerId = null;
  if(this.GetParentRowsWindow() != null) {
   this.GetParentRowsWindow().ShowAtElement(element);
  }
 },
 HideParentRows: function() {
  this.ParentRowsTimerId = null;
  if(this.GetParentRowsWindow() != null) {
   this.GetParentRowsWindow().Hide();
  }
 }, 
 canSortByColumn: function(headerElement) {
  return this.getColumnObject(headerElement.id).allowSort;
 },
 canGroupByColumn: function(headerElement) {
  return false;
 },
 canDragColumn: function(headerElement) {
  return false;
 },
 doPagerOnClick: function(id) {
  if(!ASPx.IsExists(id)) return;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.PagerOnClick, id]);
 },
 CanHandleGesture: function(evt) {
  var source = ASPx.Evt.GetEventSource(evt);
  var table = this.GetMainTable();
  if(!table) return false;
  if(ASPx.GetIsParent(table, source))
   return !this.NeedPreventGestures(source, table);
  if(table.parentNode.tagName == "DIV" && ASPx.GetIsParent(table.parentNode, source))
   return ASPx.Browser.TouchUI || evt.offsetX < table.parentNode.clientWidth;
  return false;
 },
 AllowStartGesture: function() {
  return ASPxClientControl.prototype.AllowStartGesture.call(this) && 
   (this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, 1) || this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, -1));
 },
 AllowExecuteGesture: function(value) {
  return this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, value);
 },
 ExecuteGesture: function(value, count) {
  this.ExecutePagerGesture(this.pageIndex, this.pageCount, value, count, function(arg) { this.doPagerOnClick(arg); }.aspxBind(this));
 },
 ApplySearchPanelFilter: function(value, isInternalCall) {
  if(!ASPx.IsExists(value))
   value = "";
  var edit = this.GetSearchEditor();
  if(edit && !isInternalCall)
   edit.SetText(value);
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.ResetScrollTop();
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ApplySearchPanelFilter, value]);
 },
 NeedShowLoadingPanelInsideEndlessPagingContainer: function() {
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  return endlessPagingHelper && endlessPagingHelper.NeedShowLoadingPanelAtBottom();
 },
 ShowLoadingPanel: function() {
  var gridMainCell = this.GetGridTD();
  if(!gridMainCell)
   return;
  if(this.NeedShowLoadingPanelInsideEndlessPagingContainer()) {
   var container = this.GetEndlessPagingLPContainer();
   ASPx.SetElementDisplay(container, true);
   this.CreateLoadingPanelWithoutBordersInsideContainer(container);
   return;
  }
  var lpContainer = this.GetLoadingPanelContainer();
  if(lpContainer)
   this.CreateLoadingPanelInline(lpContainer);
  else
   this.CreateLoadingPanelWithAbsolutePosition(gridMainCell, this.GetLoadingPanelOffsetElement(gridMainCell));
 },
 ShowLoadingDiv: function () {
  if(!this.NeedShowLoadingPanelInsideEndlessPagingContainer())
   this.CreateLoadingDiv(this.GetGridTD());
 },
 ShowLoadingPanelInsideHeaderFilterPopup: function() {
  this.CreateLoadingPanelWithoutBordersInsideContainer(this.GetHeaderFilterPopup().GetContentContainer(-1));
 },
 GetCallbackAnimationElement: function() {
  var table = this.GetMainTable();
  if(table && table.parentNode && table.parentNode.tagName == "DIV")
   return table.parentNode;
  return table;
 },
 NeedPreventTouchUIMouseScrolling: function(element) {
  return this.NeedPreventGestures(element);
 },
 NeedPreventGestures: function(element, mainElement) {
  if(!ASPx.IsExists(mainElement)) {
   mainElement = this.GetMainElement();
   if(!ASPx.IsExists(mainElement) || !ASPx.GetIsParent(mainElement, element))
    return false;
  }
  var preventElement = this.IsHeaderChild(element) || this.IsActionElement(mainElement, element);
  if(preventElement)
   return true;
  return this.pageCount <= 1 ? !ASPx.Browser.MSTouchUI : false;
 },
 IsHeaderChild: function(source) {
  return false;
 },
 IsActionElement: function(mainElement, source) {
  return false;
 },
 _updateEdit: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper && !batchEditHelper.CanUpdate())
   return;
  if(!batchEditHelper && !this._validateEditors())
   return;
  if(batchEditHelper)
   batchEditHelper.OnUpdate();
  this.gridCallBack([ASPxClientGridViewCallbackCommand.UpdateEdit]);
 },
 _validateEditors: function() {
  var editors = this._getEditors();
  var isValid = true;
  if(editors.length > 0)
   isValid &= this._validate(editors);
  if(window.ASPxClientEdit)
   isValid &= ASPxClientEdit.ValidateEditorsInContainer(this.GetEditFormTable(), this.name);
  return isValid;
 },
 _validate: function(list) {
  var isValid = true;
  var firstInvalid = null;
  var edit;
  for(var i = 0; i < list.length; i ++) {
   edit = list[i];
   edit.Validate();
   isValid = edit.GetIsValid() && isValid;
   if(firstInvalid == null && edit.setFocusOnError && !edit.GetIsValid())
    firstInvalid = edit;
  }
  if (firstInvalid != null)
   firstInvalid.Focus();
  return isValid;
 },
 _getEditors: function() {
  var list = [ ];
  for(var i = 0; i < this.editorIDList.length; i++) {
   var editor = ASPx.GetControlCollection().Get(this.editorIDList[i]);
   if(editor && editor.enabled && editor.GetMainElement && ASPx.IsExistsElement(editor.GetMainElement())) {
    if(!editor.Validate || this.IsStaticBinaryImageEditor(editor)) 
     continue; 
    list.push(editor);
   }
  }
  return list;
 },
 GetEditorValues: function() {
  if(this.allowBatchEditing) return null;
  var list = this._getEditors();
  if(list.length == 0) return null;
  var res = list.length + ";";
  for(var i = 0; i < list.length; i ++) {
   res += this.GetEditorValue(list[i]);
  }
  return res;
 },
 GetEditorValue: function(editor) {
  var value = editor.GetValueString();
  var valueLength = -1;
  if(!ASPx.IsExists(value)) {
   value = "";
  } else {
   value = value.toString();
   valueLength = value.length;
  }
  return this.GetEditorIndex(editor.name) + "," + valueLength + "," + value + ";";
 },
 GetEditorIndex: function(editorId) {
  var i = editorId.lastIndexOf(this.GetEditorPrefix());
  if(i < 0) return -1;
  var result = editorId.substr(i + this.GetEditorPrefix().length);
  i = result.indexOf('_'); 
  return i > 0
   ? result.substr(0, i)
   : result;
 },
 GetBatchEditHelper: function() {
  if(!this.allowBatchEditing) return null;
  if(!this.batchEditHelper)
   this.batchEditHelper = this.CreateBatchEditHelper(this.GetBatchEditHelperOwner());
  return this.batchEditHelper;
 },
 GetBatchEditHelperOwner: function() {
  if(!this.allowBatchEditing) return null;
  if(!this.batchEditHelperOwner)
   this.batchEditHelperOwner = this.CreateBatchEditHelperOwner();
  return this.batchEditHelperOwner;
 },
 CreateBatchEditHelper: function(owner) { return new ASPx.GridBatchEditHelper(owner); },
 CreateBatchEditHelperOwner: function() { },
 GetScrollHelper: function() { return null; },
 GetDragHelper: function() {
  if(!this.dragHelper)
   this.dragHelper = new GridViewDragHelper(this);
  return this.dragHelper;
 },
 GetEndlessPagingHelper: function() {
  if(!this.useEndlessPaging) return null;
  if(!this.endlessPagingHelper)
   this.endlessPagingHelper = this.CreateEndlessPagingHelper();
  return this.endlessPagingHelper;
 },
 CreateEndlessPagingHelper: function() { return null; },
 GetCellFocusHelper: function() {
  if(!this.allowFocusedCell) return null;
  if(!this.cellFocusHelper)
   this.cellFocusHelper = this.CreateCellFocusHelper();
  return this.cellFocusHelper;
 },
 CreateCellFocusHelper: function() { return null; },
 GetStyleHelper: function() {
  if(!this.styleHelper)
   this.styleHelper = this.CreateStyleHelper(this);
  return this.styleHelper;
 },
 CreateStyleHelper: function() { return new GridStyleHelper(this); },
 GetLayoutHelper: function() {
  if(!this.layoutHelper)
   this.layoutHelper = this.CreateLayoutHelper();
  return this.layoutHelper;
 },
 CreateLayoutHelper: function() { return new GridLayoutHelper(this); },
 GetNavigationHelper: function() {
  if(!this.navigationHelper)
   this.navigationHelper = this.CreateNavigationHelper();
  return this.navigationHelper;
 },
 CreateNavigationHelper: function() { },
 GetCallbackHelper: function() {
  if(!this.callbackHelper)
   this.callbackHelper = this.CreateCallbackHelper();
  return this.callbackHelper;
 },
 CreateCallbackHelper: function() { return new GridCallbackHelper(this); },
 GetFilterHelper: function() {
  if(!this.filterHelper)
   this.filterHelper = this.CreateFilterHelper();
  return this.filterHelper;
 },
 CreateFilterHelper: function() { return new ASPx.GridFilterHelper(this); },
 GetToolbarHelper: function() {
  if(!this.toolbarHelper)
   this.toolbarHelper = this.CreateToolbarHelper();
  return this.toolbarHelper;
 },
 CreateToolbarHelper: function() { return new ASPx.GridToolbarHelper(this); },
 Invalidate: function() {
  this.InvalidateLayout();
 },
 InvalidateLayout: function() {
  this.GetLayoutHelper().Invalidate();
  var navigationHelper = this.GetNavigationHelper();
  if(navigationHelper)
   navigationHelper.Invalidate();
  this.serverVisibleIndicesHash = null;
 },
 IsLastCallbackProcessedAsEndless: function() {
  var helper = this.GetEndlessPagingHelper();
  return helper && helper.endlessCallbackComplete;
 },
 UpdateScrollableControls: function() {
  var helper = this.GetScrollHelper();
  if(helper)
   helper.Update();
 },
 SetHeight: function(height) {
  var mainElemnt = this.GetMainElement();
  if(!ASPx.IsExistsElement(mainElemnt)) return;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetHeight(height);
 },
 AttachTableClickEvents: function(table) {
  var handlers = {
   "click": function(e) { ASPx.GTableClick(this.name, e); }.bind(this),
   "dblclick": function(e) { ASPx.GVTableDblClick(this.name, e); }.bind(this)
  };
  this.AttachEventsToElement(table, handlers, true);
 },
 AttachEventsToElement: function(element, handlers, useCapturing) {
  for(var eventName in handlers) {
   if(!handlers.hasOwnProperty(eventName))
    continue;
   var duplicateAttachLocker = "dxg" + eventName;
   if(element[duplicateAttachLocker])
    continue;
   ASPx.Evt.AttachEventToElement(element, eventName, handlers[eventName], useCapturing);
   element[duplicateAttachLocker] = true;
  }
 },
 AttachMainTableClickEvents: function() {
  var mainTable = this.GetMainTable();
  if(mainTable)
   this.AttachTableClickEvents(mainTable);
 },
 SetHeadersClientEvents: function() {
  var grid = this;
  var attachMouseDown = function(headerCell) { 
   ASPx.Evt.AttachEventToElement(headerCell, ASPx.TouchUIHelper.touchMouseDownEventName, function(e) { 
    grid.HeaderMouseDown(headerCell, e);
   }, true);
  };
  this.AttachEventToHeaderCells(attachMouseDown, false);
  this.AttachEventToHeaderCells(attachMouseDown, true);
  this.AttachEventToCustomizationWindowHeaderCells(attachMouseDown);
 },
 AttachEventToCustomizationWindowHeaderCells: function(attachFunc) {
  var custWindow = this.GetCustomizationWindowElement();
  if(!custWindow) return;
  var headers = this.GetCustomizationWindowHeaders();
  for(var i = 0; i < headers.length; i++)
   attachFunc(headers[i]);
 },
 AttachEventToHeaderCells: function(attachFunc, inGroupPanel) {
  for(var i = 0; i < this.columns.length; i++) {
   var header = this.GetHeader(this.columns[i].index, inGroupPanel);
   if(header) 
    attachFunc(header);
  }
 },
 GetCustomizationWindowHeaders: function() {
  return ASPx.GetNodesByPartialClassName(this.GetCustomizationWindowElement(), ASPx.GridViewConsts.HeaderCellCssClass);
 },
 UpdatePostBackSyncInput: function(isChangedNotification) {
  if(!ASPx.IsExists(this.stateObject.lastMultiSelectIndex)) return;
  var selectedIndex = isChangedNotification ? -1 : this.lastMultiSelectIndex; 
  this.stateObject.lastMultiSelectIndex = selectedIndex;
 },
 ApplyPostBackSyncData: function() {
  if(!ASPx.IsExists(this.stateObject.lastMultiSelectIndex)) return;
  this.lastMultiSelectIndex = this.stateObject.lastMultiSelectIndex;
 },
 shouldPreventFocusRestoringOnCallback: function () {
  return this.scrollToRowIndex !== -1 || this.shouldScrollToNewRow;
 },
 MakeRowVisible: function(visibleIndex) { },
 EnsureRowHotTrackItems: function() {
  if(this.rowHotTrackStyle == null) 
   return;
  var list = [ ];
  var rowIndices = this.GetRowHotTrackItemsRowIndices();
  for(var i = rowIndices.start; i < rowIndices.start + rowIndices.end; i++)
   list.push(this.GetDataItemIDPrefix() + i);
  if(list.length > 0)
   ASPx.AddHoverItems(this.name, [ [ [this.rowHotTrackStyle[0]], [this.rowHotTrackStyle[1]],  list, this.GetHotTrackItemPostfixes() ] ]);
 },
 GetHotTrackItemPostfixes: function(){ return null; },
 GetRowHotTrackItemsRowIndices: function() {
  return {
   start: this.visibleStartIndex,
   end: this.pageRowCount
  };
 },
 GetFooterCellIndex: function(element) {
  element = this.GetFooterCellElement(element, ASPx.GridViewConsts.FooterRowID);
  if(element == null)
   return -1;
  var matrix = this.GetHeaderMatrix();
  var leafIndex = element.cellIndex - this.GetFooterIndentCount(element.parentNode);
  var index = matrix.GetLeafIndices()[leafIndex];
  return ASPx.IsExists(index) ? index : -1;
 },
 GetGroupFooterCellIndex: function(element) {
  element = this.GetFooterCellElement(element, ASPx.GridViewConsts.GroupFooterRowID);
  return element != null ? this.GetColumnIndexByDataCell(element) : -1;
 },
 GetColumnIndexByDataCell: function(element) {
  return -1;
 },
 GetFooterCellElement: function(element, footerRowID) {
  var footerRowName = this.name + "_" + footerRowID;
  while(element.parentNode.id.indexOf(footerRowName) === -1) {
   if(element.tagName == "BODY")
    return null;
   element = element.parentElement;
  }
  return element;
 },
 GetFooterIndentCount: function(footerElement) {
  return ASPx.GetChildNodesByClassName(footerElement, "dxgvIndentCell").length;
 },
 Focus: function() {
  if(this.kbdHelper)
   this.kbdHelper.Focus();
 },
 PerformCallback: function(args, onSuccess){
  if(!ASPx.IsExists(args)) args = "";
  this.gridCallBack([ASPxClientGridViewCallbackCommand.CustomCallback, args], onSuccess);
 },
 GetValuesOnCustomCallback: function(args, onCallBack) {
  this.gridFuncCallBack([ASPxClientGridViewCallbackCommand.CustomValues, args], onCallBack);
 },
 GotoPage: function(pageIndex){
  if(this.useEndlessPaging)
   return;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.GotoPage, pageIndex]);
 },
 GetPageIndex: function(){
  return this.pageIndex;
 },
 GetPageCount: function(){
  return this.pageCount;
 },
 NextPage: function(){
  this.gridCallBack([ASPxClientGridViewCallbackCommand.NextPage]);
 },
 PrevPage: function(focusBottomRow){
  if(!this.useEndlessPaging)
   this.gridCallBack([ASPxClientGridViewCallbackCommand.PreviousPage, focusBottomRow ? "T" : "F"]);
 },
 IsLastPage: function() {
  return this.pageIndex === this.pageCount - 1;
 },
 GetItemKey: function(visibleIndex) {
  var arrayIndex = visibleIndex - this.visibleStartIndex;
  if(arrayIndex < 0 || arrayIndex > this.keys.length - 1) 
   return null;
  var key = this.keys[arrayIndex];
  if(key == "/^DXN")
   key = null;
  return key;
 },   
 GetDataItemVisibleIndices: function(includeDeleted, fromAPI) {
  var helper = this.GetBatchEditHelper();
  if(helper) {
   includeDeleted |= helper.GetHighlightDeletedItems() && !fromAPI;
   var keys = helper.GetRecordKeys(!includeDeleted);
   return keys.map(function(key) { return this.ConvertKeyToVisibleIndex(key); }.bind(this));
  }
  return this.GetDataItemVisibleIndicesCore();
 },
 GetDataItemVisibleIndicesCore: function() {
  var indices = this.GetCurrentPageIndices();
  return indices.filter(function(index) { return this.GetDataItem(index); }.bind(this)); 
 },
 GetRecordKeys: function(includeDeleted) { 
  var indices = this.GetDataItemVisibleIndices(includeDeleted);
  return indices.map(this.ConvertVisibleIndexToKey.bind(this));
 },
 ConvertVisibleIndexToKey: function(visibleIndex) { 
  if(!ASPx.IsExists(visibleIndex))
   return null;
  if(visibleIndex < 0)
   return visibleIndex;
  var key = this.GetItemKey(visibleIndex);
  if(ASPx.IsExists(key))
   return key;
  var helper = this.GetBatchEditHelper();
  return helper && helper.GetSavedKeyByVisibleIndex(visibleIndex);
 },
 ConvertKeyToVisibleIndex: function(key) {
  var helper = this.GetBatchEditHelper();
  if(helper && helper.IsNewRecord(key))
   return parseInt(key);  
  this.EnsureServerVisibleIndicesHash();
  if(ASPx.IsExists(this.serverVisibleIndicesHash[key]))
   return this.serverVisibleIndicesHash[key];
  return helper ? helper.GetSavedVisibleIndexByKey(key) : null;
 },
 EnsureServerVisibleIndicesHash: function() {
  if(this.serverVisibleIndicesHash)
   return;
  this.serverVisibleIndicesHash = { };
  var indices = this.GetCurrentPageIndices();
  for(var i = 0; i < indices.length; i++) {
   var visibleIndex = indices[i];
   var key = this.GetItemKey(visibleIndex);
   this.serverVisibleIndicesHash[key] = visibleIndex;
  }
 },
 GetCurrentPageIndices: function() {
  var indices = [ ];
  var startIndex = this.GetTopVisibleIndex();
  var endIndex = startIndex + this.pageRowCount;
  for(var i = startIndex; i < endIndex; i++)
   indices.push(i);
  return indices;
 },
 StartEditItem: function(visibleIndex, columnIndex) {
  this.StartEditItemByKey(this.ConvertVisibleIndexToKey(visibleIndex), columnIndex);
 },
 StartEditItemByKey: function(key, columnIndex) {
  if(!this.HasKeyField() || key === null) 
   return;
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.StartEditCell(key, columnIndex);
  else
   this.gridCallBack([ASPxClientGridViewCallbackCommand.StartEdit, key]);
 },
 IsEditing: function() { return this.editState > 0; },
 IsNewItemEditing: function() { return this.editState > 1; },
 IsEditingItem: function(visibleIndex) { return this.editItemVisibleIndex === visibleIndex; },
 IsNewRowAtBottom: function() { return this.editState == 3; },
 UpdateEdit: function(){
  this._updateEdit();
 },
 CancelEdit: function(visibleIndex) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   var recordKey = ASPx.IsExists(visibleIndex) && visibleIndex !== this.InvalidItemIndex ? this.ConvertVisibleIndexToKey(visibleIndex) : null;
   batchEditHelper.CancelEdit(recordKey);
  } else
   this.gridCallBack([ASPxClientGridViewCallbackCommand.CancelEdit]);
 },
 AddNewItem: function() {
  if(this.allowBatchEditing)
   this.batchEditApi.AddNewItem();
  else 
   this.AddNewItemOnServer();
 },
 AddNewItemOnServer: function() {
  if(!this.HasKeyField()) return;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.AddNewRow]);
 },
 DeleteItem: function(visibleIndex) {
  if(this.allowBatchEditing)
   this.batchEditApi.DeleteItem(visibleIndex);  
  else
   this.DeleteItemByKey(this.GetItemKey(visibleIndex));
 },
 RecoverItem: function(visibleIndex){
  if(this.allowBatchEditing)
   this.batchEditApi.RecoverItem(visibleIndex);  
 },
 DeleteItemByKey: function(key) {
  if(this.allowBatchEditing)
   this.batchEditApi.DeleteItemByKey(key);
  else
   this.DeleteItemByKeyOnServer(key);
 },
 DeleteItemByKeyOnServer: function(key) {
  if(!this.HasKeyField() || key === null) 
   return;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.DeleteRow, key]);
 },
 HasKeyField: function() {
  var result = this.keys.length > 0 || this.pageRowCount === 0;
  if(!result)
   alert(this.RequireKeyFieldNameText);
  return result;
 },
 Refresh: function(){
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.CancelEdit();
  this.gridCallBack([ASPxClientGridViewCallbackCommand.Refresh]);
 },
 UpdateSummaries: function() {
  if(this.allowBatchEditing)
   this.gridFuncCallBack([ASPxClientGridViewCallbackCommand.UpdateSummaries], this.ProcessUpdateSummariesInfo.bind(this));
 },
 ProcessUpdateSummariesInfo: function(summaryInfo) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.UpdateSummaries(summaryInfo);
 },
 ApplyFilter: function(expression){
  expression = expression || "";
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ApplyFilter, expression]);
 },
 ClearFilter: function () {
  this.GetFilterHelper().ClearFilterEditorsState();
  this.ApplyFilter();
 },
 GetAutoFilterEditor: function(column) { 
  var index = this._getColumnIndexByColumnArgs(column);
  if(!ASPx.IsExists(index)) return null;
  return ASPx.GetControlCollection().Get(this.name + "_DXFREditorcol" + index);
 },
 AutoFilterByColumn: function(column, val){
  var index = this._getColumnIndexByColumnArgs(column);
  if(!ASPx.IsExists(index)) return;
  if(!ASPx.IsExists(val)) val = "";  
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ApplyColumnFilter, index, val]);
 },
 ApplyHeaderFilterByColumn: function() {
  var popup = this.GetHeaderFilterPopup();
  popup.Hide();
  var helper = this.GetFilterHelper();
  var column = helper.GetHeaderFilterPopupRelatedColumn();
  if(column) {
   var state = helper.GetHeaderFilterCallbackState(column.index);
   this.gridCallBack([ASPxClientGridViewCallbackCommand.ApplyHeaderColumnFilter, column.index, ASPx.Json.ToJson(state)]);
  }
 },
 SortBy: function(column, sortOrder, reset, sortIndex){
  if(this.RaiseColumnSorting(this._getColumnObjectByArg(column))) return;
  column = this._getColumnIndexByColumnArgs(column);
  if(!ASPx.IsExists(sortIndex)) sortIndex = "";
  if(!ASPx.IsExists(sortOrder)) sortOrder = "";
  if(!ASPx.IsExists(reset)) reset = true;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.Sort, column, sortIndex, sortOrder, reset]);
 },
 GroupBy: function(column, groupIndex, sortOrder){
  if(this.RaiseColumnGrouping(this._getColumnObjectByArg(column))) return;
  column = this._getColumnIndexByColumnArgs(column);
  if(!ASPx.IsExists(groupIndex)) groupIndex = "";
  if(!ASPx.IsExists(sortOrder)) sortOrder = "ASC";
  this.gridCallBack([ASPxClientGridViewCallbackCommand.Group, column, groupIndex, sortOrder]);
 },
 Ungroup: function(column){
  column = this._getColumnIndexByColumnArgs(column);
  this.GroupBy(column, -1);
 },
 ExpandAll: function(){
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ExpandAll]);
 },
 CollapseAll: function(){
  this.gridCallBack([ASPxClientGridViewCallbackCommand.CollapseAll]);
 },
 MoveColumn: function(column, columnMoveTo, direction, moveToGroup, moveFromGroup){
  if(!ASPx.IsExists(column)) return;
  if(!ASPx.IsExists(columnMoveTo)) columnMoveTo = -1;
  if(!ASPx.IsExists(moveToGroup)) moveToGroup = false;
  if(!ASPx.IsExists(moveFromGroup)) moveFromGroup = false;
  if(moveToGroup) {
   if(this.RaiseColumnGrouping(this._getColumnObjectByArg(column))) return;
  }
  direction = this.getColumnMoveDirection(direction);
  column = this._getColumnIndexByColumnArgs(column);
  this.MoveColumnCore(column, columnMoveTo, direction, moveToGroup, moveFromGroup);
 },
 MoveColumnCore: function(sourceIndex, targetIndex, direction, moveToGroup, moveFromGroup) {
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ColumnMove, sourceIndex, targetIndex, direction, moveToGroup, moveFromGroup]);
 },
 getColumnMoveDirection: function(direction){
  if(!ASPx.IsExists(direction))
   return ASPxClientGridColumnMovingTargetPosition.Left;
  if(direction === false)
   return ASPxClientGridColumnMovingTargetPosition.Left;
  if(direction === true)
   return ASPxClientGridColumnMovingTargetPosition.Right;
  if(ASPx.IsNumber(direction))
   return direction;
  return ASPxClientGridColumnMovingTargetPosition.Left;
 },
 IsCustomizationWindowVisible: function(){
  var custWindow = this.GetCustomizationWindow();
  return custWindow != null && custWindow.IsVisible();
 },
 ShowCustomizationWindow: function(showAtElement, accessibleFocusElement){
  var custWindow = this.GetCustomizationWindow();
  if(!custWindow) return;
  if(!showAtElement) showAtElement = this.GetMainElement();
  if(this.accessibilityCompliant && accessibleFocusElement)
   custWindow.accessibleFocusElement = accessibleFocusElement;
  custWindow.ShowAtElement(showAtElement);
 },
 HideCustomizationWindow: function(){
  var custWindow = this.GetCustomizationWindow();
  if(custWindow != null) custWindow.Hide();
 },
 ShowCustomizationDialog: function() { },
 ExportTo: function(format) {
  this.gridPostBack([ASPxClientGridViewCallbackCommand.Export, format]);
 },
 GetSelectedFieldValues: function(fieldNames, onCallBack) {
  this.gridFuncCallBack([ASPxClientGridViewCallbackCommand.SelFieldValues, fieldNames], onCallBack);
 },
 GetSelectedKeysOnPage: function() {
  var keys = [];
  for(var i = 0; i < this.pageRowCount; i++) {
   if(this._isRowSelected(this.visibleStartIndex + i))
    keys.push(this.keys[i]);
  }
  return keys; 
 },
 GetItemValues: function(visibleIndex, fieldNames, onCallBack) {
  this.gridFuncCallBack([ASPxClientGridViewCallbackCommand.RowValues, visibleIndex, fieldNames], onCallBack);
 },
 GetPageItemValues: function(fieldNames, onCallBack) {
  this.gridFuncCallBack([ASPxClientGridViewCallbackCommand.PageRowValues, fieldNames], onCallBack);
 },
 GetVisibleItemsOnPage: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   return batchEditHelper.GetVisibleRecordsOnPageCount();
  return this.pageRowCount;
 },
 GetTopVisibleIndex: function() {
  return this.visibleStartIndex;
 },
 GetColumnsCount: function() {
  return this.GetColumnCount();
 },
 GetColumnCount: function() {
  return this._getColumnCount();
 },
 GetColumn: function(index) {
  return this._getColumn(index);
 },
 GetColumnById: function(id) {
  return this._getColumnById(id);
 },
 GetColumnByField: function(fieldName) {
  return this._getColumnByField(fieldName);
 },
 GetEditor: function(column) {
  var columnObject = this._getColumnObjectByArg(column);
  return columnObject != null ? this.GetEditorByColumnIndex(columnObject.index) : null;
 },
 FocusEditor: function(column) {
  var editor = this.GetEditor(column);
  if(editor && editor.SetFocus) {
   editor.SetFocus();  
  }
 },
 GetEditValue: function(column) {
  var editor = this.GetEditor(column);
  return editor != null && editor.enabled ? editor.GetValue() : null;
 },
 SetEditValue: function(column, value) {
  var editor = this.GetEditor(column);
  if(editor != null && editor.enabled) {
   editor.SetValue(value);
  }
 },
 ShowFilterControl: function() {
  this.PreventCallbackAnimation();
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ShowFilterControl]);
 },
 CloseFilterControl: function() {
  this.PreventCallbackAnimation();
  this.HideFilterControlPopup();
  this.gridCallBack([ASPxClientGridViewCallbackCommand.CloseFilterControl]);
 },
 HideFilterControlPopup: function() {
  var popup = this.GetFilterControlPopup();
  if(popup) {
   popup.Hide();
   if(this.accessibilityCompliant) {
    var needToStoreFocusTreeLine = !this.accessibilityFocusTreeLine && ASPx.GetIsParent(this.GetMainElement(), ASPx.GetActiveElement());
    if(needToStoreFocusTreeLine)
     this.accessibilityFocusTreeLine = ASPx.RestoreFocusHelper.getFocusTreeLine(this);
   }
  }
 },
 ApplyFilterControl: function() {
  this.PreventCallbackAnimation();
  var fc = this.GetFilterControl();
  if(fc == null) return;
  if(!this.callBacksEnabled)
   this.HideFilterControlPopup();
  if(!fc.isApplied)
   fc.Apply(this);
 },
 SetFilterEnabled: function(isFilterEnabled) {
  this.gridCallBack([ASPxClientGridViewCallbackCommand.SetFilterEnabled, isFilterEnabled]);
 },
 GetVerticalScrollPosition: function() { return 0; },
 SetVerticalScrollPosition: function(value) { },
 RaiseSelectionChangedOutOfServer: function() {
  this.RaiseSelectionChanged(-1, false, false, true);
 },
 RaiseSelectionChanged: function(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer) {
  if(!this.SelectionChanged.IsEmpty()){
   var args = this.CreateSelectionEventArgs(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer);
   this.SelectionChanged.FireEvent(this, args);
   if(args.processOnServer) {
    this.gridCallBack([ASPxClientGridViewCallbackCommand.Selection]);
   }
  }
  return false; 
 },
 CreateSelectionEventArgs: function(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer){
  return null;
 },
 RaiseFocusedItemChangedOutOfServer: function() { 
  this.RaiseFocusedItemChanged(true); 
 },
 RaiseFocusedItemChanged: function(isChangedOnServer) { return false; },
 RaiseItemFocusing: function(visibleIndex, htmlEvent) { return false; },
 RaiseColumnSorting: function(column) {
  if(!this.ColumnSorting.IsEmpty()){
   var args = this.CreateColumnCancelEventArgs(column);
   this.ColumnSorting.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 CreateColumnCancelEventArgs: function(column){
  return null;
 },
 RaiseColumnGrouping: function(column) {
  if(!this.ColumnGrouping.IsEmpty()){
   var args = this.CreateColumnCancelEventArgs(column);
   this.ColumnGrouping.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseItemClick: function(visibleIndex, htmlEvent) {
  return false; 
 },
 RaiseItemDblClick: function(visibleIndex, htmlEvent) {
  return false; 
 },
 RaiseCustomizationWindowCloseUp: function() {
  if(!this.CustomizationWindowCloseUp.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.CustomizationWindowCloseUp.FireEvent(this, args);
  }
  return false; 
 },
 RaiseColumnMoving: function(targets) {
  return false;
 },
 RaiseToolbarItemClick: function(toolbarInfo, item) {
  if(this.ToolbarItemClick.IsEmpty())
   return false;
  var args = new ASPxClientGridToolbarItemClickEventArgs(toolbarInfo.index, toolbarInfo.name, item, false);
  this.ToolbarItemClick.FireEvent(this, args);
  if(!args.handled && args.processOnServer) {
   this.GetToolbarHelper().ProcessCustomToolbarItemClickOnServer(args.usePostBack);
   return true;
  }
  return args.handled;
 },
 RaiseBatchEditSummaryDisplayText: function(summaryInfo, text, groupRowVisibleIndex) {
  if(!this.BatchEditSummaryDisplayText.IsEmpty()) {
   var args = new ASPxClientGridBatchEditSummaryDisplayTextEventArgs(summaryInfo, text, groupRowVisibleIndex);
   this.BatchEditSummaryDisplayText.FireEvent(this, args);
   return args.displayText;
  }
  return text;
 },
 RaiseBatchEditStartEditing: function(visibleIndex, column, rowValues) { return null; },
 RaiseBatchEditEndEditing: function(visibleIndex, rowValues) { return null; },
 RaiseBatchEditItemValidating: function(visibleIndex, validationInfo) { return null; },
 RaiseBatchEditConfirmShowing: function(requestTriggerID) { return false; },
 RaiseBatchEditTemplateCellFocused: function(columnIndex) { return false; },
 RaiseBatchEditChangesSaving: function(valuesInfo) { return false; },
 RaiseBatchEditChangesCanceling: function(valuesInfo) { return false; },
 RaiseBatchEditItemInserting: function(visibleIndex) { return false; },
 RaiseBatchEditItemDeleting: function(visibleIndex, itemValues) { return false; },
 RaiseBatchEditItemRecovering: function(visibleIndex, itemValues) { return false; },
 RaiseFocusedCellChanging: function(info) {
  if(!this.FocusedCellChanging.IsEmpty()){   
   var key = info.recordKey;
   var cellInfo = this.CreateCellInfo(this.ConvertKeyToVisibleIndex(key), this.GetColumn(info.columnIndex), key);
   var args = this.CreateFocusedCellChangingArgs(cellInfo);
   this.FocusedCellChanging.FireEvent(this, args);
   return args.cancel;
  }
  return false;   
 },
 CreateCellInfo: function(visibleIndex, column, key) { return null; },
 CreateFocusedCellChangingArgs: function(cellInfo) { return null; },
 RaiseInternalCheckBoxClick: function(visibleIndex) {
  if(!this.InternalCheckBoxClick.IsEmpty()){
   var args = {"visibleIndex": visibleIndex, cancel: false};
   this.InternalCheckBoxClick.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 UA_AddNew: function() {
  this.AddNewItem();
 },
 UA_StartEdit: function(visibleIndex) {
  this.StartEditItem(visibleIndex);
 },
 UA_Delete: function(visibleIndex) {
  this.DeleteGridItem(visibleIndex);
 },
 UA_Recover: function(visibleIndex) {
  this.RecoverItem(visibleIndex);
 },
 UA_UpdateEdit: function() {
  this.UpdateEdit();
 },
 UA_CancelEdit: function(visibleIndex) {
  this.CancelEdit(visibleIndex);
 },
 UA_CustomButton: function(id, visibleIndex) {
  this.CommandCustomButton(id, visibleIndex);
 },
 UA_Select: function(visibleIndex) {
  if(!this.lookupBehavior || this.allowSelectByItemClick){
   var selected = this.allowSelectSingleRowOnly || !this._isRowSelected(visibleIndex);
   this.SelectItem(visibleIndex, selected);
  }
 },
 UA_ClearFilter: function() {
  this.ClearFilter();
 },
 UA_ApplySearchFilter: function() {
  this.ApplySearchFilterFromEditor();
 },
 UA_ClearSearchFilter: function() {
  var editor = this.GetSearchEditor();
  if(editor)
   editor.SetValue(null);
  this.ApplySearchFilterFromEditor();
 },
 UA_UpdateSummaries: function() {
  this.UpdateSummaries();
 },
 ApplySearchFilterFromEditor: function() {
  this.GetFilterHelper().ApplySearchFilterFromEditor(this.GetSearchEditor());
 },
 ChangeCellInitialClass: function(cell, className, add) { this.GetStyleHelper().ChangeCellInitialClass(cell, className, add); },
 OnDispose: function() { 
  if(this.filterHelper)
   this.filterHelper.OnDispose();
  ASPxClientControl.prototype.OnDispose.call(this);
 },
 GetEditFormLayout: function() {
  if(this.GetPopupEditForm())
   return ASPx.GetControlCollection().Get(this.name + "_DXPEForm" + this.GetEditFormLayoutIDPostfix());
  return ASPx.GetControlCollection().Get(this.name + this.GetEditFormLayoutIDPostfix());
 },
 GetEditFormLayoutIDPostfix: function() { return ""; },
 GetEditFormLayoutItemByColumn: function(column) {
  var editFormLayout = this.GetEditFormLayout();
  var columnObject = this._getColumnObjectByArg(column);
  if(!editFormLayout || !columnObject)
   return null;
  return this.getEditFormLayoutItemByColumnCore(editFormLayout, columnObject);
 },
 getEditFormLayoutItemByColumnCore: function(editFormLayout, columnObject) {
  var findByColumnNamePredicate = function(item) {
   if(!item.columnProperties)
    return false;
   return columnObject.name && columnObject.name == item.columnProperties.name;
  };
  var findByColumnFieldNamePredicate = function(item) {
   if(!item.columnProperties)
    return false;
   return columnObject.fieldName && columnObject.fieldName == item.columnProperties.fieldName;
  };
  return editFormLayout.getItemByPredicate(findByColumnNamePredicate) || editFormLayout.getItemByPredicate(findByColumnFieldNamePredicate);
 },
 GetEditFormLayoutItemOrGroup: function(name) {
  var editFormLayout = this.GetEditFormLayout();
  return editFormLayout ? editFormLayout.GetItemByName(name) : null;
 }
});
ASPxClientGridBase.Cast = ASPxClientControl.Cast;
var GridCallbackHelper = ASPx.CreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
  this.funcCallbackInfoList = [ ];
  this.postbackRequestCount = 0;
 },
 GetAllowDelete: function() { return this.grid.allowDelete; },
 GetAllowEdit: function() { return this.grid.allowEdit; },
 GetAllowInsert: function() { return this.grid.allowInsert; },
 CanSendCallback: function() { return this.grid.callBack && this.grid.callBacksEnabled; },
 GetEditorValues: function() { return this.grid.GetEditorValues(); },
 GetSelectionState: function() { return this.grid.GetSelectedState(); },
 GetKeyValues: function() { return this.grid.GetKeyValues(); },
 GetFocusedRowState: function() { return this.grid.stateObject.focusedRow; },
 GetToolbarState: function() { return this.grid.GetToolbarHelper().GetCallbackState(); },
 GetRequestCount: function() { return this.grid.requestCount; },
 ResetUserChangedSelection: function() { 
  this.grid.userChangedSelection = false; 
 },
 GetTotalRequestCount: function() { return this.GetRequestCount() + this.postbackRequestCount; },
 CreateGridCallback: function(command, args, callbackHandler) {
  this.grid.CreateCallback(args, command, callbackHandler);
 },
 CreateGridPostback: function(args, preventConvertToUpdatePanelCallback) {
  this.grid.SendPostBack(args, preventConvertToUpdatePanelCallback);
 },
 OnBeforeCallbackOrPostBack: function() {
  this.grid.OnBeforeCallbackOrPostBack(); 
 },
 OnBeforeCallback: function(command) { this.grid.OnBeforeCallback(command); },
 SendRequest: function(args, callbackHandler) {
  var command = this.GetCorrectedCommand(args);
  if(!this.ValidateCommand(command))
   return;
  this.OnBeforeCallbackOrPostBack();
  if(this.CanSendCallback())
   this.SendCallback(command, args, callbackHandler);
  else
   this.SendPostback(args);
 },
 SendCallback: function(command, args, callbackHandler) {
  this.OnBeforeCallback(command);
  var callbackState = this.GetGridCallbackState();
  this.ResetUserChangedSelection();
  this.SendCallbackCore(command, args, callbackState, callbackHandler);
 },
 SendFuncCallback: function(args, onCallBack) {
  var callbackState = this.GetGridCallbackState();
  callbackState.push([ "FB", this.GetFuncCallBackIndex(onCallBack) ]);
  this.SendCallbackCore("FUNCTION", args, callbackState);
 },
 SendCallbackCore: function(command, commandArgs, callbackState, callbackHandler) {
  callbackState.push([ "GB", this.SerializeCallbackArgs(commandArgs) ]);
  this.CreateGridCallback(command, this.FormatCallbackState(callbackState), callbackHandler);
 },
 SendPostback: function(args) {
  this.postbackRequestCount++;
  this.CreateGridPostback(this.SerializeCallbackArgs(args), this.IsExportPostback(args));
 },
 ValidateCommand: function(command) {
  if(command === ASPxClientGridViewCallbackCommand.DeleteRow && !this.GetAllowDelete())
   return false;
  if(command === ASPxClientGridViewCallbackCommand.StartEdit && !this.GetAllowEdit())
   return false;
  if(command === ASPxClientGridViewCallbackCommand.AddNewRow && !this.GetAllowInsert())
   return false;
  return true;
 },
 GetCorrectedCommand: function(args) {
  if(args.length === 0) return "";
  var command = args[0];
  if(args.length > 1 && command === ASPxClientGridViewCallbackCommand.ColumnMove) {
   if(args[args.length - 1])
    command = ASPxClientGridViewCallbackCommand.UnGroup;
   if(args[args.length - 2])
    command = ASPxClientGridViewCallbackCommand.Group;
  }
  return command;
 },
 IsExportPostback: function(args) {
  if(!ASPx.Ident.IsArray(args) || args.length === 0)
   return false;
  return args[0] == ASPxClientGridViewCallbackCommand.Export || args[1] == ASPxClientGridViewCallbackCommand.Export;
 },
 GetGridCallbackState: function() {
  return [
   [ "EV", this.GetEditorValues() ],
   [ "SR", this.GetSelectionState() ],
   [ "KV", this.GetKeyValues() ],
   [ "FR", this.GetFocusedRowState() ],
   [ "CT", this.GetToolbarState() ]
  ];
 },
 GetFuncCallBackIndex: function(onCallBack) {
  var info = { date: new Date(), callback: onCallBack };
  for(var i = 0; i < this.funcCallbackInfoList.length; i ++) {
   if(this.funcCallbackInfoList[i] === null) {
    this.funcCallbackInfoList[i] = info;
    return i;
   }
  }
  this.funcCallbackInfoList.push(info);
  return this.funcCallbackInfoList.length - 1;
 },
 GetFuncCallBackInfo: function(index) {
  if(index < 0 || index >= this.funcCallbackInfoList.length) 
   return null;
  var result = this.funcCallbackInfoList[index];
  this.funcCallbackInfoList[index] = null;
  return result;
 },
 HasWaitedFuncCallbacks: function() {
  return this.funcCallbackInfoList.filter(function(i) { return i !== null; }).length > 0;
 },
 HasWaitedFuncCallbacksFromInterval: function(timeout) {
  var date = new Date();
  for(var i = 0; i < this.funcCallbackInfoList.length; i++) {
   var info = this.funcCallbackInfoList[i];
   if(info && (date - info.date) < timeout)
    return true;
  }
  return false;
 },
 FormatCallbackState: function(callbackState) {
  var result = [ ];
  for(var i = 0; i < callbackState.length; i++) {
   var stateItem = callbackState[i];
   if(!stateItem || stateItem.length !== 2)
    continue;
   var stateKey = stateItem[0];
   var stateValue = stateItem[1];
   if(ASPx.IsExists(stateValue) && stateValue !== "") {
    var stateValueString = stateValue.toString();
    result.push(stateKey);
    result.push("|");
    result.push(stateValueString.length);
    result.push(";");
    result.push(stateValueString);
    result.push(";");
   }
  }
  return result.join("");
 },
 SerializeCallbackArgs: function(args) {
  if(!ASPx.Ident.IsArray(args) || args.length === 0)
   return "";
  var result = [ ];
  for(var i = 0; i < args.length; i++) {
   var item = args[i].toString();
   result.push(item.length);
   result.push("|");
   result.push(item);
  }
  return result.join("");
 }
});
var GridStyleHelper = ASPx.CreateClass(ASPx.GridStyleHelperBase, {
 SelectedItemKey: "sel",
 FocusedItemKey: "fi",
 constructor: function(grid) {
  this.grid = grid;
 },
 GetStyles: function() { return this.grid.styleInfo; },
 GetSelectedItemStyle: function() { return this.GetStyleInfo(this.SelectedItemKey); },
 GetFocusedItemStyle: function() { return this.GetStyleInfo(this.FocusedItemKey); },
 IsSelectedItemStyle: function(style) { return this.CheckStyleInfoByKey(style, this.SelectedItemKey); },
 IsFocusedItemStyle: function(style) { return this.CheckStyleInfoByKey(style, this.FocusedItemKey); },
});
var ASPxClientGridColumnBase = ASPx.CreateClass(null, {
 constructor: function(prop) {
  this.index =   ASPx.IsExists(prop[0]) ? prop[0] : -1;
  this.visible =    ASPx.IsExists(prop[1]) ?  !!prop[1] : true;
  this.name =    ASPx.IsExists(prop[2]) ? prop[2] : "";
  this.fieldName =  ASPx.IsExists(prop[3]) ? prop[3] : "";
  this.allowSort =  ASPx.IsExists(prop[4]) ?  !!prop[4] : true;
  this.HFMode =     ASPx.IsExists(prop[5]) ? prop[5] : 1;
  this.sortIndex =  ASPx.IsExists(prop[6]) ? prop[6] : -1;
  this.sortOrder =  ASPx.IsExists(prop[7]) ? prop[7] : ASPx.GridSortOrder.None;
  this.id = this.name;
 }
});
var GridLayoutHelper = ASPx.CreateClass(null, { 
 constructor: function(grid) {
  this.grid = grid;
 },
 GetDataItemVisibleIndices: function(includeDeleted) { return this.grid.GetDataItemVisibleIndices(includeDeleted); },
 Invalidate: function() { 
 },
});
var GridViewDragHelper = ASPx.CreateClass(ASPx.GridDragHelperBase, {
 constructor: function(grid) {
  this.grid = grid;
  this.targets = null;
  this.constructor.prototype.constructor.call(this);
 },
 CreateDrag: function(e, element, canDrag) {
  var drag = new ASPx.DragHelper(e, element, true);
  drag.centerClone = true;
  drag.canDrag = canDrag;  
  drag.grid = this.grid;
  drag.ctrl = e.ctrlKey;
  drag.shift = e.shiftKey;
  drag.onDragDivCreating = this.OnDragDivCreating;
  drag.onDoClick = this.OnDoClick;
  drag.onCloneCreating = this.OnCloneCreating;
  drag.onEndDrag = this.OnEndDrag;
  drag.onCancelDrag = this.OnCancelDrag;
  this.OnDragCreated(true);
  return drag;
 },
 GetActiveTargets: function() { 
  if(this.targets && this.targets.list)
   return this.targets.list;
  return [ ];
 },
 GetScrollHelper: function() { return this.grid.GetScrollHelper(); },
 GetCustomizationWindowElement: function() { return this.grid.GetCustomizationWindowElement(); },
 GetHeaderLeaf: function(columnIndex, isLeft){ return this.grid.GetHeaderMatrix().GetLeaf(columnIndex, isLeft, false); },
 GetHeaderLevel: function(columnIndex){ return this.grid.GetHeaderMatrix().GetColumnLevel(columnIndex); },
 NeedScrollOnDrag: function(isHorzDrag) { 
  var hasFixedColumns = this.grid.GetFixedColumnsHelper && this.grid.GetFixedColumnsHelper();
  return ASPx.GridDragHelperBase.prototype.NeedScrollOnDrag.call(this, isHorzDrag) || hasFixedColumns; 
 },
 PrepareTargetHeightFunc: function() {
  GridViewDragHelper.Target_GetElementHeight = null;
  if(this.grid.allowChangeColumnHierarchy)
   return;
  var headerRowCount = this.grid.GetHeaderMatrix().GetRowCount();
  if(headerRowCount > 0) {
   var row = this.grid.GetHeaderRow(headerRowCount - 1);
   var headerBottom = ASPx.GetAbsoluteY(row) + row.offsetHeight;
   GridViewDragHelper.Target_GetElementHeight = function() {
    return headerBottom - this.absoluteY;
   };
  }
 },
 CreateTargets: function(drag, e) {
  if(!drag.canDrag) return;
  var grid = this.grid;
  this.PrepareTargetHeightFunc();
  var targets = new ASPx.CursorTargets(grid);
  targets.obj = drag.obj;
  targets.onTargetCreated = this.OnTargetCreated;
  targets.onTargetChanging = this.OnTargetChanging;
  targets.onTargetChanged = this.OnTargetChanged;
  targets.onTargetAllowed = this.OnHeaderTargetAllowed.aspxBind(this);
  this.targets = targets;
  var scrollLeft = null, scrollRight;
  var scrollHelper = grid.GetScrollHelper();
  var scrollableControl = scrollHelper && scrollHelper.GetHorzScrollableControl();
  if(scrollableControl) {
   scrollLeft = ASPx.GetAbsoluteX(scrollableControl);
   scrollRight = scrollLeft + scrollableControl.offsetWidth;
  }
  var sourceColumn = grid.getColumnObject(drag.obj.id);
  var win = grid.GetCustomizationWindow();
  if(win && !sourceColumn.inCustWindow)
   this.AddDragDropTarget(targets, win.GetWindowClientTable(-1));
  for(var i = 0; i < grid.columns.length; i++) {
   var column = grid.columns[i];
   for(var grouped = 0; grouped <= 1; grouped++) {
    var targetElement = grid.GetHeader(column.index, !!grouped);
    if(!targetElement)
     continue;
    if(this.IsValidColumnDragDropTarget(drag.obj, targetElement, sourceColumn, column))
     this.AddDragDropTarget(targets, targetElement);  
   }
  }
  this.AddAdaptivePanelTarget(targets, grid.GetAdaptiveHeaderPanel());
  this.AddAdaptivePanelTarget(targets, grid.GetAdaptiveGroupPanel());
  this.AddDragDropTarget(targets, grid.GetGroupPanel());
  this.AddDragDropTarget(targets, ASPx.GetElementById(grid.name + this.grid.EmptyHeaderSuffix));
 },
 IsValidColumnDragDropTarget: function(sourceElement, targetElement, sourceColumn, targetColumn) {
  if(sourceColumn == targetColumn)
   return false;
  if(this.grid.allowChangeColumnHierarchy)
   return true;
  if(sourceColumn.parentIndex == targetColumn.parentIndex)
   return true;
  if(sourceColumn.parentIndex == targetColumn.index) {
   return (sourceColumn.inCustWindow || this.IsGroupingTarget(sourceElement))
    && this.grid.GetHeaderMatrix().IsLeaf(targetColumn.index);
  }
  if(this.IsParentColumn(sourceColumn.index, targetColumn.index))
   return (sourceColumn.inCustWindow || this.IsGroupingTarget(sourceElement));
  if(this.IsGroupingTarget(targetElement))
   return true;
  if(this.IsValidAdaptiveTarget(sourceElement, targetElement, sourceColumn, targetColumn))
   return true;
  return false;
 },
 AddAdaptivePanelTarget: function(targets, panel) {
  if(!panel) return;
  this.AppendAdaptivePanelDragAreas(targets, panel);
  this.AddDragDropTarget(targets, panel);
 },
 AppendAdaptivePanelDragAreas: function(targets, panel) {
  panel.dragAreas = [ ];
  var headers = this.GetAdaptivePanelHeaders(panel);
  if(headers.length === 0) 
   return;
  var rows = [ ];
  var row = [ headers[0] ];
  rows.push(row);
  for(var i = 0; i < headers.length - 1; i++) {
   var currentHeader = headers[i];
   var nextHeader = headers[i + 1];
   if(ASPx.GetAbsoluteY(currentHeader) !== ASPx.GetAbsoluteY(nextHeader)) {
    row = [ ];
    rows.push(row);
   }
   row.push(nextHeader);
  }
  for(var i = 0; i < rows.length; i++) {
   var row = rows[i];
   this.CreateDragArea(panel, row[0], targets, true);
   this.CreateDragArea(panel, row[row.length - 1], targets,  false);
  }
 },
 GetAdaptivePanelHeaders: function(panel) {
  return ASPx.GetNodesByPartialClassName(panel, ASPx.GridViewConsts.HeaderCellCssClass);
 },
 CreateDragArea: function(panel, target, targets, isLeft) {
  if(!this.ContainsTarget(targets, target)) 
   return; 
  var targetTop = ASPx.GetAbsolutePositionY(target);
  var area = { 
   target: target,
   isLeft: isLeft,
   top: targetTop,
   bottom: targetTop + target.offsetHeight,
   left: isLeft ? ASPx.GetAbsolutePositionX(panel) : ASPx.GetAbsolutePositionX(target) + target.offsetWidth,
   right: isLeft ? ASPx.GetAbsolutePositionX(target) :  ASPx.GetAbsolutePositionX(panel) + panel.offsetWidth
  };
  panel.dragAreas.push(area);
 },
 ContainsTarget: function(targets, target) {
  for(var i = 0; i < targets.list.length; i++) {
   if(targets.list[i].element == target)
    return true;
  }
  return false;
 },
 IsValidAdaptiveTarget: function(sourceElement, targetElement, sourceColumn, targetColumn) {
  this.EnsureAdaptiveTargetInfo(sourceElement, targetElement, sourceColumn, targetColumn);
  return !!targetElement.adaptiveInfo;
 },
 EnsureAdaptiveTargetInfo: function(sourceElement, targetElement, sourceColumn, targetColumn) {
  if(!this.IsAdaptiveHeaderTarget(targetElement))
   return;
  var sourceLevel = this.GetHeaderLevel(sourceColumn.index);
  var targetLevel = this.GetHeaderLevel(targetColumn.index);
  targetElement.adaptiveInfo = null;
  if(targetLevel < 0 || sourceLevel >= targetLevel)
   return;
  var brother = this.FindColumnBrother(sourceColumn, targetColumn);
  if(!brother) 
   return;
  var leftLeaf = this.GetHeaderLeaf(brother.index, true);
  var rightLeaf = this.GetHeaderLeaf(brother.index, false);  
  if(targetColumn.index === leftLeaf || targetColumn.index === rightLeaf)
   targetElement.adaptiveInfo = { brotherIndex : brother.index, brotherHasOnlyOneLeaf: leftLeaf == rightLeaf, isLeftLeaf: targetColumn.index == leftLeaf };
 },
 FindColumnBrother: function(sourceColumn, targetColumn) {
  while(targetColumn && targetColumn.parentIndex !== sourceColumn.parentIndex)
   targetColumn = this.grid.GetColumn(targetColumn.parentIndex);
  return targetColumn;
 },
 AddDragDropTarget: function(targets, element) {
  if(element)
   targets.addElement(element);
 },
 IsAdaptiveHeaderPanelVisible: function() { return ASPx.IsElementDisplayed(this.grid.GetAdaptiveHeaderPanel()); },
 IsAdaptiveGroupPanelVisible: function() { return ASPx.IsElementDisplayed(this.grid.GetAdaptiveGroupPanel()); },
 IsDataHeaderTarget: function(element) { return element && element.id.indexOf(this.grid.name + "_col") == 0; },
 IsAdaptiveHeaderTarget: function(element) { return this.IsAdaptiveHeaderPanelVisible() && this.IsDataHeaderTarget(element) && element.adaptiveMoved; },
 IsAdaptivePanelTarget: function(element) { return element && (element == this.grid.GetAdaptiveHeaderPanel() || element == this.grid.GetAdaptiveGroupPanel()); },
 IsAdaptiveGroupHeaderTarget: function(element) { return this.IsAdaptiveGroupPanelVisible() && this.IsGroupHeaderTarget(element) && element.adaptiveMoved; },
 IsGroupHeaderTarget: function(element) {
  if(!element || !element.id)
   return false;
  return element.id.indexOf(this.grid.name + "_groupcol") == 0;
 },
 IsGroupingTarget: function(element) { 
  return element == this.grid.GetGroupPanel() || this.IsGroupHeaderTarget(element) || element ==  this.grid.GetAdaptiveGroupPanel();
 },
 IsCustWindowTarget: function(element) {
  var win = this.grid.GetCustomizationWindow();
  return win && element == win.GetWindowClientTable(-1); 
 },
 AllowVerticalTargetTags: function(element){
  return this.grid.allowChangeColumnHierarchy && !this.IsGroupingTarget(element) && !this.IsCustWindowTarget(element);
 },
 OnDragDivCreating: function(drag, dragDiv) {
  var rootTable = drag.grid.GetMainElement();
  if(!dragDiv || !rootTable) return;
  dragDiv.className = rootTable.className;
  dragDiv.style.cssText = rootTable.style.cssText;
 },
 OnDoClick: function(drag) {
  window.setTimeout(function() {
   var grid = drag.grid;
   var contextMenuHelper = grid.GetContextMenuHelper && grid.GetContextMenuHelper(); 
   if(contextMenuHelper && contextMenuHelper.contextMenuActivating) {
    contextMenuHelper.contextMenuActivating = false;
    return;
   }
   if(!grid.canSortByColumn(drag.obj) || grid.InRegularCallback()) 
    return;
   grid.SortBy(grid.getColumnIndex(drag.obj.id), drag.ctrl ? "NONE" : "", !drag.shift && !drag.ctrl);
  }, 0);
 },
 OnCancelDrag: function(drag) {
  drag.grid.dragHelper.DisplayTargetImages(false);
  drag.grid.dragHelper.CancelDrag();
 },
 OnEndDrag: function(drag) {
  if(!drag.targetElement)
   return;
  var grid = drag.grid;
  var sourceElement = drag.obj;
  var targetElement = drag.targetElement;
  var sourceIndex = grid.getColumnIndex(sourceElement.id);
  var targetIndex =  grid.getColumnIndex(targetElement.id);
  var direction = drag.targetTag;
  if(grid.IsEmptyHeaderID(targetElement.id) || targetElement == grid.GetAdaptiveHeaderPanel())
   targetIndex = 0;
  if(grid.dragHelper.IsAdaptiveHeaderTarget(targetElement) && targetElement.adaptiveInfo) {
   targetIndex = targetElement.adaptiveInfo.brotherIndex;
   var isLeft = !targetElement.adaptiveInfo.brotherHasOnlyOneLeaf ? targetElement.adaptiveInfo.isLeftLeaf : isLeft;
   direction = isLeft ? ASPx.CursorTargetTag.Left : ASPx.CursorTargetTag.Right;
  }
  if(grid.rtl && direction < 2)
   direction = direction == ASPx.CursorTargetTag.Left ? ASPx.CursorTargetTag.Right : ASPx.CursorTargetTag.Left;
  grid.MoveColumn(
   sourceIndex,
   targetIndex,
   direction,
   grid.dragHelper.IsGroupingTarget(targetElement),
   grid.dragHelper.IsGroupingTarget(sourceElement)
  );
 },
 OnCloneCreating: function(clone) {
  var table = document.createElement("table");
  table.cellSpacing = 0;
  if(this.obj.offsetWidth > 0)
   table.style.width = Math.min(200, this.obj.offsetWidth) + "px";
  if(this.obj.offsetHeight > 0)
   table.style.height = this.obj.offsetHeight + "px";
  var row = table.insertRow(-1);
  clone.style.borderLeftWidth = "";
  clone.style.borderTopWidth = "";
  clone.style.borderRightWidth = "";
  row.appendChild(clone);
  table.style.opacity = 0.80;
  table.style.filter = "alpha(opacity=80)"; 
  if(ASPx.IsElementRightToLeft(this.obj))
   table.dir = "rtl";
  return table;
 },
 OnTargetCreated: function(targets, targetObj) {
  var f = GridViewDragHelper.Target_GetElementHeight;
  var h = targets.control.dragHelper;
  var el = targetObj.element;
  if(f && !h.IsCustWindowTarget(el) && !h.IsGroupingTarget(el) && !h.IsAdaptiveHeaderTarget(el) && !h.IsAdaptivePanelTarget(el))
   targetObj.GetElementHeight = f;
 },
 OnTargetChanging: function(targets) {
  if(!targets.targetElement)
   return;
  var grid = targets.control;
  var allowVerticalTags = grid.dragHelper.AllowVerticalTargetTags(targets.targetElement);
  targets.refreshTargetTag(allowVerticalTags);
  if(allowVerticalTags)
   grid.dragHelper.CorrectTargetTagOnMovingColumnFromCustWindow(targets);
  var grouping = false;
  if(targets.targetElement == grid.GetGroupPanel() || targets.targetElement == grid.GetAdaptiveGroupPanel()) {
   targets.targetTag = ASPx.CursorTargetTag.Left;
   grouping = true;
  }  
  if(grid.dragHelper.IsGroupHeaderTarget(targets.targetElement)) {
   grouping = true;
  }
  if(grouping && !grid.canGroupByColumn(targets.obj))
   targets.targetElement = null;
  if(grid.dragHelper.IsAdaptivePanelTarget(targets.targetElement)) {
   var info = grid.dragHelper.GetAdaptivePanelTargetInfo(targets, targets.targetElement);
   targets.targetTag = info.isLeftSide ? ASPx.CursorTargetTag.Left : ASPx.CursorTargetTag.Right;
   targets.targetElement = info.targetElement;
   targets.skipNeighbor = true;
  }
  if(targets.targetElement)
   grid.RaiseColumnMoving(targets);
 },
 CorrectTargetTagOnMovingColumnFromCustWindow: function(targets){
  if(!ASPx.currentDragHelper || !ASPx.currentDragHelper.obj || !targets.targetElement)
   return;
  var grid = targets.control;
  var sourceColumn = grid.getColumnObject(ASPx.currentDragHelper.obj.id);
  if(!sourceColumn || !sourceColumn.inCustWindow || !grid.GetColumnHelper().HasColumnChildren(sourceColumn.index))
   return;
  var sourceColumn = grid.getColumnObject(ASPx.currentDragHelper.obj.id);
  var targetColumn = grid.getColumnObject(targets.targetElement.id);
  if(targets.targetTag == ASPx.CursorTargetTag.Top || targets.targetTag == ASPx.CursorTargetTag.Bottom && grid.GetColumnHelper().HasColumnChildren(targetColumn.index))
   targets.refreshTargetTag(false);
 },
 GetAdaptivePanelTargetInfo: function(targets, panel) {
  var x = targets.x;
  var y = targets.y;
  for(var i = 0; i < panel.dragAreas.length; i++) {
   var dragArea = panel.dragAreas[i];
   if(x >= dragArea.left && x <= dragArea.right && y >= dragArea.top && y <= dragArea.bottom)
    return { targetElement: dragArea.target, isLeftSide: dragArea.isLeft };
  }
  return { targetElement: panel.children.length == 0 ? panel : null, isLeftSide: true };
 },
 OnTargetChanged: function(targets) {
  if(ASPx.currentDragHelper == null)
   return;
  var element = targets.targetElement;
  if(element == ASPx.currentDragHelper.obj)
   return;
  var grid = targets.control;
  grid.dragHelper.DisplayTargetImages(false);
  if(!element) {
   ASPx.currentDragHelper.targetElement = null;
   return;
  }
  ASPx.currentDragHelper.targetElement = element;
  ASPx.currentDragHelper.targetTag = targets.targetTag;
  var moveToCustWindow = grid.dragHelper.IsCustWindowTarget(element);
  if(moveToCustWindow) {
   ASPx.currentDragHelper.addElementToDragDiv(grid.GetArrowDragFieldImage());
   return;
  }
  var moveToGroup = grid.dragHelper.IsGroupingTarget(element);
  var info = grid.dragHelper.CreateTargetImagesInfo(targets, moveToGroup);
  if(!info) {
   ASPx.currentDragHelper.targetElement = null;
   return;
  }
  if(targets.skipNeighbor)
   info.neighbor = null;
  var position = grid.dragHelper.CreateTargetImagesPosition(element, info);
  grid.dragHelper.DisplayTargetImages(true, position);
 },
 CreateTargetImagesPosition: function(targetElement, info){
  if(info.side == ASPx.CursorTargetTag.Top || info.side == ASPx.CursorTargetTag.Bottom)
   return this.CreateVerticalTargetImagesPosition(targetElement, info);
  return this.CreateHorizontalTargetImagesPosition(targetElement, info);
 },
 CreateHorizontalTargetImagesPosition: function(targetElement, info){
  var left = ASPx.GetAbsoluteX(targetElement);
  var isRightSide = info.side == ASPx.CursorTargetTag.Right;
  if(targetElement == this.grid.GetGroupPanel() || targetElement == this.grid.GetAdaptiveHeaderPanel() || targetElement == this.grid.GetAdaptiveGroupPanel()) {
   if(this.grid.rtl)
    left += targetElement.offsetWidth;
  } else {
   if(isRightSide) {
    if(info.neighbor)
     left = ASPx.GetAbsoluteX(info.neighbor);
    else
     left += targetElement.offsetWidth;
   }
  }
  var top = ASPx.GetAbsoluteY(targetElement);
  var bottomElement = targetElement;
  var moveToGroup = this.IsGroupingTarget(targetElement);
  if(!moveToGroup && info.targetColumnIndex > -1)
   bottomElement = this.grid.GetHeader(this.GetHeaderLeaf(info.targetColumnIndex, !isRightSide));
  var bottom = ASPx.GetAbsoluteY(bottomElement) + bottomElement.offsetHeight;
  return { top: top, bottom: bottom, left: left, right: left };
 },
 CreateVerticalTargetImagesPosition: function(targetElement, info){
  var left = ASPx.GetAbsoluteX(targetElement);
  var right = left + targetElement.offsetWidth;
  var top = ASPx.GetAbsoluteY(targetElement);
  if(info.side == ASPx.CursorTargetTag.Bottom)
   top += targetElement.offsetHeight;
  return { top: top, bottom: top, left: left, right: right };
 },
 GetChildHeaderElement: function(parentIndex, childIndex, left){
  var grid = this.grid;
  var childColumnIndex = childIndex;
  var currentColumnIndex = childIndex;
  var getNextNeighborHeaderMatrixMethodName = "Get" + (left ? "Left" : "Right") + "Neighbor";
  while(ASPx.IsExists(currentColumnIndex) && this.IsParentColumn(parentIndex, currentColumnIndex)){
   childColumnIndex = currentColumnIndex; 
   currentColumnIndex = grid.GetHeaderMatrix()[getNextNeighborHeaderMatrixMethodName](childColumnIndex);
  }
  return grid.GetHeader(childColumnIndex);
 },
 IsParentColumn: function(parentIndex, columnIndex){
  var index = columnIndex;
  while(index >= 0 && index != parentIndex)
   index = this.grid.GetColumn(index).parentIndex;
  return index >= 0;
 },
 CreateTargetImagesInfo: function(targets, moveToGroup){
  if(moveToGroup)
   return this.CreateGroupPanelTargetImagesInfo(targets);
  var grid = targets.control;
  var targetElement = targets.targetElement;
  var info = {
   targetColumnIndex: grid.getColumnIndex(targetElement.id),
   side: targets.targetTag,
   neighbor: null
  };
  var isAdaptiveHeader = grid.dragHelper.IsAdaptiveHeaderTarget(targetElement);
  if(!isAdaptiveHeader && info.targetColumnIndex < 0)
   return info;
  if(isAdaptiveHeader && targetElement.adaptiveInfo) {
   info.targetColumnIndex = targetElement.adaptiveInfo.brotherIndex;
   if(!targetElement.adaptiveInfo.brotherHasOnlyOneLeaf)
    info.side = targetElement.adaptiveInfo.isLeftLeaf ? ASPx.CursorTargetTag.Left : ASPx.CursorTargetTag.Right;
  }
  var neighborIndex = this.FindHeaderNeighborIndexByHorizontal(info.side, info.targetColumnIndex, isAdaptiveHeader);
  if(neighborIndex == null)
   info = null;
  else if(neighborIndex > -1)
   info.neighbor = grid.GetHeader(neighborIndex);
  return info;
 },
 CreateGroupPanelTargetImagesInfo: function(targets){
  var grid = targets.control;
  var isRightSide = targets.targetTag == ASPx.CursorTargetTag.Right;
  var method = isRightSide ^ grid.rtl ? "nextSibling" : "previousSibling";
  var neighbor = grid.dragHelper.GetGroupNodeNeighbor(targets.targetElement, method);
  if(neighbor && neighbor.id == ASPx.currentDragHelper.obj.id)
   return null;
  return {
   targetColumnIndex: grid.getColumnIndex(targets.targetElement.id),
   side: targets.targetTag,
   neighbor: neighbor
  };
 },
 FindHeaderNeighborIndexByHorizontal: function(side, targetColumnIndex, isAdaptiveHeader){
  if(side == ASPx.CursorTargetTag.Top || side == ASPx.CursorTargetTag.Bottom)
   return targetColumnIndex;
  var grid = this.grid;
  var isRightSide = side == ASPx.CursorTargetTag.Right;
  var matrix =  grid.GetHeaderMatrix();
  var method = isRightSide ^ grid.rtl ? "GetRightNeighbor" : "GetLeftNeighbor";
  var neighborIndex = matrix[method](targetColumnIndex, !isAdaptiveHeader);
  var sourceColumn = grid.getColumnObject(ASPx.currentDragHelper.obj.id);
  if(neighborIndex == sourceColumn.index && !sourceColumn.inCustWindow && !this.IsGroupHeaderTarget(ASPx.currentDragHelper.obj))
   return sourceColumn.parentIndex != grid.GetColumn(targetColumnIndex).parentIndex ? -1 : null;
  if(!isNaN(neighborIndex)){
   if(isAdaptiveHeader && !matrix.IsLeaf(neighborIndex))
    neighborIndex = matrix.GetLeaf(neighborIndex, isRightSide);
  } else
   neighborIndex = -1;
  return neighborIndex;
 },
 GetGroupNodeNeighbor: function(element, method) {
  if(this.IsAdaptiveGroupHeaderTarget(element)) 
   return this.GetAdaptiveGroupNodeNeighbor(element, method);
  return this.GetGroupNodeNeighborCore(element, method, 2);
 },
 GetAdaptiveGroupNodeNeighbor: function(element, method) {   
  var headers = ASPx.GetNodesByPartialClassName(this.grid.GetAdaptiveGroupPanel(), ASPx.GridViewConsts.HeaderCellCssClass);
  var index = ASPx.Data.ArrayIndexOf(headers, element);
  if(index < 0) return null;   
  return method == "nextSibling" ? headers[index + 1] : headers[index - 1];
 },
 GetGroupNodeNeighborCore: function(element, method, distance) {
  var neighbor = element[method];
  if(neighbor && neighbor.nodeType == 1) {
   if(this.IsGroupingTarget(neighbor)) 
    return neighbor;
   if(distance > 1)
    return this.GetGroupNodeNeighborCore(neighbor, method, --distance);
  }
  return null;
 },
 DisplayTargetImages: function(visible, position){
  var downImage = this.grid.GetArrowDragDownImage();
  if(downImage){
   var showImage = visible && position.left == position.right;
   if(showImage) {
    ASPx.SetAbsoluteX(downImage, position.left - downImage.offsetWidth / 2);
    ASPx.SetAbsoluteY(downImage, position.top - downImage.offsetHeight);
   }
   ASPx.SetElementVisibility(downImage, showImage);
  }
  var upImage = this.grid.GetArrowDragUpImage();
  if(upImage){
   var showImage = visible && position.left == position.right;
   if(showImage) {
    ASPx.SetAbsoluteX(upImage, position.left - upImage.offsetWidth / 2);
    ASPx.SetAbsoluteY(upImage, position.bottom);
   }
   ASPx.SetElementVisibility(upImage, showImage);
  }
  var rightImage = this.grid.GetArrowDragRightImage();
  if(rightImage){
   var showImage = visible && position.left != position.right;
   if(showImage) {
    ASPx.SetAbsoluteX(rightImage, position.left - rightImage.offsetWidth);
    ASPx.SetAbsoluteY(rightImage, position.top - rightImage.offsetHeight / 2);
   }
   ASPx.SetElementVisibility(rightImage, showImage);
  }
  var leftImage = this.grid.GetArrowDragLeftImage();
  if(leftImage){
   var showImage = visible && position.left != position.right;
   if(showImage) {
    ASPx.SetAbsoluteX(leftImage, position.right);
    ASPx.SetAbsoluteY(leftImage, position.top - rightImage.offsetHeight / 2);
   }
   ASPx.SetElementVisibility(leftImage, showImage);
  }
 }
});
GridViewDragHelper.Target_GetElementHeight = null;
ASPx.GridViewDragHelper = GridViewDragHelper;
ASPxClientGridBase.SelectStartHandler = function(e) {
 if(ASPx.Evt.GetEventSource(e).tagName.match(/input|select|textarea/i))
  return;
 if(e.ctrlKey || e.shiftKey) {
  ASPx.Selection.Clear();
  ASPx.Evt.PreventEventAndBubble(e);
 }
};
ASPxClientGridBase.SaveActiveElementSettings = function(grid) {
 var element = grid.GetFilterHelper().GetActiveElement();
 grid.GetFilterHelper().ResetActiveElement();
 ASPxClientGridBase.activeElementData = null;
 if (!element || !element.id || element.tagName != "INPUT" || !(ASPx.GetIsParent(grid.GetMainElement(), element) || element.id.indexOf(grid.name + "_") == 0))
  return;  
 ASPxClientGridBase.activeElementData = [ grid.name, element.id, ASPx.Selection.GetInfo(element).endPos ];
 if(typeof(Sys) != "undefined" && typeof(Sys.Application) != "undefined") {
  if(!ASPxClientGridBase.MsAjaxActiveElementHandlerAdded) {
   Sys.Application.add_load(function() { ASPxClientGridBase.RestoreActiveElementSettings(); } );
   ASPxClientGridBase.MsAjaxActiveElementHandlerAdded = true;
  }
 } 
};
ASPxClientGridBase.RestoreActiveElementSettings = function(grid) {
 var data = ASPxClientGridBase.activeElementData;
 if(!data || grid && data[0] != grid.name) return;
 var element = ASPx.GetElementById(data[1]);
 if(element) {
  window.setTimeout(function() {
   element.focus();
   ASPx.Selection.Set(element, data[2], data[2]);
  }, 0);
 }
 ASPxClientGridBase.activeElementData = null;
};
var ASPxClientGridViewCallbackCommand = {
 NextPage: "NEXTPAGE",
 PreviousPage: "PREVPAGE",
 GotoPage: "GOTOPAGE",
 SelectRows: "SELECTROWS",
 SelectRowsKey: "SELECTROWSKEY",
 Selection: "SELECTION",
 FocusedRow: "FOCUSEDROW",
 Group: "GROUP",
 UnGroup: "UNGROUP",
 Sort: "SORT",
 ColumnMove: "COLUMNMOVE",
 CollapseAll: "COLLAPSEALL",
 ExpandAll: "EXPANDALL",
 ExpandRow: "EXPANDROW",
 CollapseRow: "COLLAPSEROW",
 HideAllDetail: "HIDEALLDETAIL",
 ShowAllDetail: "SHOWALLDETAIL",
 ShowDetailRow: "SHOWDETAILROW",
 HideDetailRow: "HIDEDETAILROW",
 PagerOnClick: "PAGERONCLICK",
 ApplyFilter: "APPLYFILTER",
 ApplyColumnFilter: "APPLYCOLUMNFILTER",
 ApplyMultiColumnFilter: "APPLYMULTICOLUMNFILTER",
 ApplyHeaderColumnFilter: "APPLYHEADERCOLUMNFILTER",
 ApplySearchPanelFilter: "APPLYSEARCHPANELFILTER",
 ApplyCustomizationDialogChanges: "APPLYCUSTOMIZATIONDIALOGCHANGES",
 FilterRowMenu: "FILTERROWMENU",
 StartEdit: "STARTEDIT",
 CancelEdit: "CANCELEDIT",
 UpdateEdit: "UPDATEEDIT",
 UpdateSummaries: "UPDATESUMMARIES",
 AddNewRow: "ADDNEWROW",
 DeleteRow: "DELETEROW",
 CustomButton: "CUSTOMBUTTON",
 CustomCallback: "CUSTOMCALLBACK",
 ShowFilterControl: "SHOWFILTERCONTROL",
 CloseFilterControl: "CLOSEFILTERCONTROL",
 SetFilterEnabled: "SETFILTERENABLED",
 Refresh: "REFRESH",
 SelFieldValues: "SELFIELDVALUES",
 RowValues: "ROWVALUES",
 PageRowValues: "PAGEROWVALUES",
 FilterPopup: "FILTERPOPUP",
 ContextMenu: "CONTEXTMENU",
 Toolbar: "TOOLBAR",
 Export: "EXPORT",
 CustomValues: "CUSTOMVALUES"
};
var ASPxClientGridExportFormat = {
 Pdf: "Pdf",
 Docx: "Docx",
 Rtf: "Rtf",
 Csv: "Csv",
 Xls: "Xls",
 Xlsx: "Xlsx"
};
var ASPxClientGridBatchEditStartEditingEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex, focusedColumn, itemValues) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.focusedColumn = focusedColumn;
  this.itemValues = ASPx.CloneObject(itemValues);
 }
});
var ASPxClientGridBatchEditEndEditingEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex, itemValues) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.itemValues = ASPx.CloneObject(itemValues);
 }
});
var ASPxClientGridBatchEditItemValidatingEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(visibleIndex, validationInfo) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.validationInfo = ASPx.CloneObject(validationInfo);
 }
});
var ASPxClientGridBatchEditConfirmShowingEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(requestTriggerID) {
  this.constructor.prototype.constructor.call(this);
  this.requestTriggerID = requestTriggerID;
 }
});
var ASPxClientGridBatchEditTemplateCellFocusedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(column) {
  this.constructor.prototype.constructor.call(this);
  this.column = column;
  this.handled = false;
 }
});
var ASPxClientGridBatchEditClientChangesEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(insertedValues, deletedValues, updatedValues) {
  this.constructor.prototype.constructor.call(this);
  this.insertedValues = insertedValues;
  this.deletedValues = deletedValues;
  this.updatedValues = updatedValues;
 }
});
var ASPxClientGridBatchEditItemInsertingEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
 }
});
var ASPxClientGridBatchEditItemDeletingEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex, itemValues) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.itemValues = itemValues;
 }
});
var ASPxClientGridFocusedCellChangingEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(cellInfo) {
  this.constructor.prototype.constructor.call(this);
  this.cellInfo = cellInfo;
 }
});
var ASPxClientGridBatchEditApi = ASPx.CreateClass(ASPx.BatchEditApi, {
 constructor: function(owner) {
  this.constructor.prototype.constructor.call(this, owner);
  this.grid = owner;
 },
 GetColumnIndex: function(column) { return this.grid._getColumnIndexByColumnArgs(column); },
 ConvertVisibleIndexToKey: function(visibleIndex) { return this.grid.ConvertVisibleIndexToKey(visibleIndex); },
 ConvertKeyToVisibleIndex: function(key) { return this.grid.ConvertKeyToVisibleIndex(key); },
 CreateCellInfo: function(key, column) {
  var visibleIndex = this.grid.ConvertKeyToVisibleIndex(key);
  return this.grid.CreateCellInfo(visibleIndex, column, key);
 },
 SetCellValue: function(visibleIndex, column, value, displayText, cancelCellHighlighting) { 
  return this.SetCellValueByKey(this.ConvertVisibleIndexToKey(visibleIndex), column, value, displayText, cancelCellHighlighting);
 },
 SetCellValueByKey: function(key, column, value, displayText, cancelCellHighlighting) {
  return this.SetCellValueCore(key, column, value, displayText, cancelCellHighlighting);
 },
 GetCellValue: function(visibleIndex, column, initial) { return this.GetCellValueByKey(this.ConvertVisibleIndexToKey(visibleIndex), column, initial); },
 GetCellValueByKey: function(key, column, initial) { return this.GetCellValueCore(key, column, initial); },
 GetCellTextContainer: function(visibleIndex, column) { return this.GetCellTextContainerByKey(this.ConvertVisibleIndexToKey(visibleIndex), column); },
 GetCellTextContainerByKey: function(key, column) { return this.GetCellTextContainerCore(key, column); },
 HasChanges: function(visibleIndex, column) { return this.HasChangesByKey(this.ConvertVisibleIndexToKey(visibleIndex), column); },
 HasChangesByKey: function(key, column) { return this.HasChangesCore(key, column); },
 ResetChanges: function(visibleIndex, columnIndex) { this.ResetChangesByKey(this.ConvertVisibleIndexToKey(visibleIndex), columnIndex); },
 ResetChangesByKey: function(key, columnIndex) { this.ResetChangesCore(key, columnIndex); },
 StartEdit: function(visibleIndex, columnIndex) { this.StartEditByKey(this.ConvertVisibleIndexToKey(visibleIndex), columnIndex); },
 StartEditByKey: function(key, columnIndex) { this.StartEditCore(key, columnIndex); },
 ValidateItem: function(visibleIndex) { return this.ValidateItemByKey(this.ConvertVisibleIndexToKey(visibleIndex)); },
 ValidateItemByKey: function(key) { return this.ValidateRecordCore(key); },
 IsDeletedItem: function(visibleIndex) { return this.IsDeletedItemByKey(this.ConvertVisibleIndexToKey(visibleIndex)); },
 IsDeletedItemByKey: function(key) { return this.IsDeletedRecordCore(key); },
 IsNewItem: function(visibleIndex) { return this.IsNewRecordCore(this.ConvertVisibleIndexToKey(visibleIndex)); },
 AddNewItem: function() { this.AddNewRecordCore(); }, 
 DeleteItem: function(visibleIndex) { this.DeleteItemByKey(this.ConvertVisibleIndexToKey(visibleIndex)); },
 DeleteItemByKey: function(key) { this.DeleteRecordCore(key); },
 RecoverItem: function(visibleIndex) { this.RecoverItemByKey(this.ConvertVisibleIndexToKey(visibleIndex)); },
 RecoverItemByKey: function(key) { this.RecoverRecordCore(key); },
 GetItemVisibleIndices: function(includeDeleted) { 
  var currentPageKeys = this.FilterCurrentPageKeys(this.GetRecordKeys(includeDeleted));
  return currentPageKeys.map(function(key) { return this.ConvertKeyToVisibleIndex(key); }.bind(this)); 
 },
 GetInsertedItemVisibleIndices: function() { return this.FilterCurrentPageKeys(this.GetInsertedRecordKeys()); },
 GetDeletedItemVisibleIndices: function() {
  var deletedIndices = [];
  var currentPageDeletedKeys = this.FilterCurrentPageKeys(this.GetDeletedRecordKeys());
  ASPx.Data.ForEach(currentPageDeletedKeys, function(key){  
   var visibleIndex = this.ConvertKeyToVisibleIndex(key);
   if(visibleIndex > -1) deletedIndices.push(visibleIndex);
  }.aspxBind(this));
  return deletedIndices;
 },
 GetUpdatedItemVisibleIndices: function() { 
  var keys = this.FilterCurrentPageKeys(this.GetUpdatedRecordKeys());
  return keys.map(function(key) { return this.ConvertKeyToVisibleIndex(key); }.bind(this));
 },
 IsCurrentPageRecord: function(key) {
  var helper = this.GetHelper();
  return !!helper && helper.IsCurrentPageRecord(key);
 },
 FilterCurrentPageKeys: function(keys) { return keys.filter(function (key) { return this.IsCurrentPageRecord(key); }.bind(this)); },
 GetTotalSummaryValue: function(summary) {
  var helper = this.GetHelper();
  if(!helper)
   return null;
  var summaryItemIndex = summary;
  if(typeof(summary) == "string")
   summaryItemIndex = helper.GetTotalSummaryByFieldName(summary);
  return helper.GetTotalSummaryValue(summaryItemIndex);
 },
 GetGroupSummaryValue: function(groupRowVisibleIndex, summary) {
  var helper = this.GetHelper();
  if(!helper)
   return null;
  var summaryItemIndex = summary;
  if(typeof(summary) == "string")
   summaryItemIndex = helper.GetGroupSummaryByFieldName(summary);
  return helper.GetGroupSummaryValue(groupRowVisibleIndex, summaryItemIndex);
 }
});
var ASPxClientGridCellInfo = ASPx.CreateClass(null, {
 constructor: function(itemIndex, column) {
  this.itemVisibleIndex = itemIndex;
  this.column = column;
 }
});
var ASPxClientGridToolbarItemClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(toolbarIndex, toolbarName, item, processOnServer) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.toolbarIndex = toolbarIndex;
  this.toolbarName = toolbarName;
  this.item = item;
  this.usePostBack = false;
 }
});
var ASPxClientGridBatchEditSummaryDisplayTextEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(summaryInfo, text, groupRowVisibleIndex) {
  this.constructor.prototype.constructor.call(this);
  this.isGroupSummary = summaryInfo.isGroupSummary;
  this.isTotalSummary = !summaryInfo.isGroupSummary;
  this.summaryItemIndex = summaryInfo.summaryIndex;
  this.summaryType = summaryInfo.summaryType;
  this.summaryFieldName = summaryInfo.summaryFieldName;
  this.serverValue = summaryInfo.serverValue;
  this.value = summaryInfo.value;
  this.summaryElement = summaryInfo.summaryElement;
  this.displayText = text;
  this.groupRowVisibleIndex = groupRowVisibleIndex;
 }
});
var ASPxClientSummaryItemType = {
 Sum: 0,
 Min: 1,
 Max: 2,
 Count: 3,
 Average: 4,
 Custom: 5,
 None: 6
};
ASPxClientGridBase.PostponeInitialize = function(name, info){
 var grid = ASPx.GetControlCollection().Get(name);
 if(grid) {
  grid.styleInfo = info.styleInfo;
  grid.cButtonIDs = info.commandButtonIDs;
  if(grid.batchEditClientState) {
   grid.batchEditClientState.extraCommandButtonsInfo = info.extraCommandButtonsInfo;
  }
  grid.EnsureRowKeys();
  grid.UpdateItemsStyle();
 }
};
ASPx.GHeaderMouseDown = function(name, element, e) {
 var grid = ASPx.GetControlCollection().Get(name);
 if(grid != null) 
  grid.HeaderMouseDown(element, e);
};
ASPx.GSort = function(name, columnIndex) {
 var grid = ASPx.GetControlCollection().Get(name);
 if(grid != null)  
  grid.SortBy(columnIndex);
};
ASPx.GVPopupEditFormOnInit = function(name, popup) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  window.setTimeout(function() { gv.OnPopupEditFormInit(popup); }, 0);
};
ASPx.GVPagerOnClick = function(name, value) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) 
  gv.doPagerOnClick(value);
};
ASPx.GVFilterKeyPress = function(name, element, e) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) 
  gv.GetFilterHelper().OnColumnFilterInputKeyPress(element, e);
};
ASPx.GVFilterSpecKeyPress = function(name, element, e) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) 
  gv.GetFilterHelper().OnColumnFilterInputSpecKeyPress(element, e);
};
ASPx.GVFilterChanged = function(name, element) {
 window.setTimeout(function() {
  var gv = ASPx.GetControlCollection().Get(name);
  var el = ASPx.GetControlCollection().Get(element.name);
  if(gv != null && el != null) 
   gv.GetFilterHelper().OnColumnFilterInputChanged(el);
 }, 0);
};
ASPx.GVFilterUserInput = function(name, element) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.GetFilterHelper().OnColumnFilterUserInput(element);
};
ASPx.GVShowParentRows = function(name, evt, element) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  if(element)
   gv.OnParentRowMouseEnter(element);  
  else 
   gv.OnParentRowMouseLeave(evt);
 }
};
ASPx.GTableClick = function(name, evt) {
 var g = ASPx.GetControlCollection().Get(name);
 if(g != null && g.NeedProcessTableClick(evt))
  g.mainTableClick(evt);
};
ASPx.GVTableDblClick = function(name, evt) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null && gv.NeedProcessTableClick(evt))
  gv.mainTableDblClick(evt);
};
ASPx.GVCustWindowCloseUp = function(name) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  gv.RaiseCustomizationWindowCloseUp();
 }
};
ASPx.GVApplyFilterPopup = function(name) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.ApplyHeaderFilterByColumn();
};
ASPx.GVShowFilterControl = function(name) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  gv.ShowFilterControl();
 }
};
ASPx.GVCloseFilterControl = function(name) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  gv.CloseFilterControl();
 }
};
ASPx.GVSetFilterEnabled = function(name, value) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  gv.SetFilterEnabled(value);
 }
};
ASPx.GVApplyFilterControl = function(name) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.ApplyFilterControl();
};
ASPx.GVFilterRowMenu = function(name, columnIndex, element) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.GetFilterHelper().FilterRowMenuButtonClick(columnIndex, element);
};
ASPx.GVFilterRowMenuClick = function(name, e) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.GetFilterHelper().FilterRowMenuItemClick(e.item);
};
ASPx.GCmdToolbarMenuItemClick = function(name, toolbar, e) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.GetToolbarHelper().OnToolbarMenuItemClick(toolbar, e);
};
ASPx.GVScheduleCommand = function(name, commandArgs, postponed, event) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.ScheduleUserCommand(commandArgs, postponed, ASPx.Evt.GetEventSource(event));
};
ASPx.GVHFCancelButtonClick = function(name) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.GetHeaderFilterPopup().Hide();
};
ASPx.GridStyleHelper = GridStyleHelper;
ASPx.GridLayoutHelper = GridLayoutHelper;
ASPx.GridViewDragHelper = GridViewDragHelper;
ASPx.GridCallbackHelper = GridCallbackHelper;
ASPx.GridSortOrder = GridSortOrder;
ASPx.ASPxClientGridExportFormat = ASPxClientGridExportFormat;
window.ASPxClientGridBase = ASPxClientGridBase;
window.ASPxClientGridColumnBase = ASPxClientGridColumnBase;
window.ASPxClientGridViewCallbackCommand = ASPxClientGridViewCallbackCommand;
window.ASPxClientGridBatchEditStartEditingEventArgs = ASPxClientGridBatchEditStartEditingEventArgs;
window.ASPxClientGridBatchEditEndEditingEventArgs = ASPxClientGridBatchEditEndEditingEventArgs;
window.ASPxClientGridBatchEditItemValidatingEventArgs = ASPxClientGridBatchEditItemValidatingEventArgs;
window.ASPxClientGridBatchEditConfirmShowingEventArgs = ASPxClientGridBatchEditConfirmShowingEventArgs;
window.ASPxClientGridBatchEditTemplateCellFocusedEventArgs = ASPxClientGridBatchEditTemplateCellFocusedEventArgs;
window.ASPxClientGridBatchEditClientChangesEventArgs = ASPxClientGridBatchEditClientChangesEventArgs;
window.ASPxClientGridBatchEditItemInsertingEventArgs = ASPxClientGridBatchEditItemInsertingEventArgs;
window.ASPxClientGridBatchEditItemDeletingEventArgs = ASPxClientGridBatchEditItemDeletingEventArgs;
window.ASPxClientGridFocusedCellChangingEventArgs = ASPxClientGridFocusedCellChangingEventArgs;
window.ASPxClientGridBatchEditApi = ASPxClientGridBatchEditApi;
window.ASPxClientGridCellInfo = ASPxClientGridCellInfo;
window.ASPxClientGridColumnMovingTargetPosition = ASPxClientGridColumnMovingTargetPosition;
window.ASPxClientGridToolbarItemClickEventArgs = ASPxClientGridToolbarItemClickEventArgs;
window.ASPxClientSummaryItemType = ASPxClientSummaryItemType;
})();

(function() {
var GridViewLayoutHelper = ASPx.CreateClass(ASPx.GridLayoutHelper, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
  this.adaptiveLayoutInfo = null;
  this.mergeIntervals = null;
  this.groupLevels = null;
  this.spannedRowIds = [
   ASPx.GridViewConsts.GroupRowID,
   ASPx.GridViewConsts.GroupRowExpID,
   ASPx.GridViewConsts.PreviewRowID,
   ASPx.GridViewConsts.DetailRowID,
   ASPx.GridViewConsts.EmptyDataRowID,
   ASPx.GridViewConsts.EditingErrorItemID
  ];
  this.spannedTemplatedRowIds = [
   ASPx.GridViewConsts.DataRowID,
   ASPx.GridViewConsts.FooterRowID,
   ASPx.GridViewConsts.GroupFooterRowID,
   ASPx.GridViewConsts.FilterRowID,
   ASPx.GridViewConsts.EditingRowID
  ];
  this.spannedTemplatedCellIds = [
   ASPx.GridViewConsts.DataRowTemplateCellID,
   ASPx.GridViewConsts.FooterRowTemplateCellID,
   ASPx.GridViewConsts.GroupFooterRowTemplateCellID,
   ASPx.GridViewConsts.FilterRowTemplateCellID,
   ASPx.GridViewConsts.EditFormTableCellID
  ];
  this.cachedHasCellMerging = null;
  this.cachedHasServerGroupLevelInfo = null;
 },
 GetSpannedRowRegexp: function() {
  if(!this.spannedRowRegExp)
   this.spannedRowRegExp = new RegExp(this.GetSpannedElementPattern(this.spannedRowIds));
  return this.spannedRowRegExp;
 },
 GetSpannedTemplatedRowRegexp: function() {
  if(!this.spannedTemplatedRowRegExp)
   this.spannedTemplatedRowRegExp = new RegExp(this.GetSpannedElementPattern(this.spannedTemplatedRowIds));
  return this.spannedTemplatedRowRegExp;
 },
 GetSpannedTemplatedCellRegexp: function() {
  if(!this.spannedTemplatedCellRegExp)
   this.spannedTemplatedCellRegExp = new RegExp(this.GetSpannedElementPattern(this.spannedTemplatedCellIds));
  return this.spannedTemplatedCellRegExp;
 },
 GetSpannedElementPattern: function(idParts) {
  return "^" + this.grid.name + "_(" + idParts.join("|") + ")(-?\\d+)?(_\\d+)?$"; 
 },
 IsSpannedRow: function(row) { 
  if(!row) return false;
  var isTemplateRow = this.GetSpannedTemplatedRowRegexp().test(row.id);
  if(isTemplateRow) {
   var cell = this.GetSpannedCell(row);
   return this.IsSpannedCell(cell);
  }
  return this.GetSpannedRowRegexp().test(row.id) || this.IsBatchChangesViewCategoryRow(row);
 },
 IsSpannedCell: function(cell) {
  return cell && this.GetSpannedTemplatedCellRegexp().test(cell.id);
 },
 IsBatchChangesViewCategoryRow: function(row) {
  return row.id.indexOf(ASPx.GridViewConsts.BatchChangesPreviewGroupRowID) > 0;
 },
 GetSpannedCell: function(row) { return this.grid.GetLastNonAdaptiveIndentCell(row); },
 IsArmatureRowRequired: function() { return this.grid.HasScrolling() || this.grid.AllowResizing(); }, 
 GetArmatureRows: function() { return this.GetAllTables().map(function(table) { return table.rows[0]; }); },
 GetColumnWidthInfo: function() { return this.grid.clientMoveColumnWidths; },
 GetColumnWidth: function(columnIndex) { 
  var info = this.GetColumnWidthInfo();
  if(!info) return null;
  var colWidth = info[columnIndex];
  return colWidth || "";
 },
 GetGridName: function() { return this.grid.name; },
 GetTotalIndentCount: function() { return this.grid.indentColumnCount; },
 GetGroupFooterVisibleIndices: function() { return this.grid.GetGroupFooterVisibleIndices(); },
 GetShowColumnHeaders: function() { return this.grid.showColumnHeaders; },
 GetShowFilterRow: function() { return !!this.grid.GetFilterRow(); },
 GetShowFooterRow: function() { return !!this.grid.GetFooterRow(); },
 GetShowEditingRow: function() { return this.IsInlineEditMode() && this.grid.GetEditingRow(); },
 IsBatchEditMode: function() { return this.grid.IsBatchEditMode(); },
 IsBatchEditPreviewChangesMode: function() { return this.grid.IsBatchChagesViewMode(); },
 IsInlineEditMode: function() { return this.grid.IsInlineEditMode(); },
 IsFixedTableLayout: function() {
  return this.grid.GetMainTable().style.tableLayout === "fixed";
 },
 HasMergedGroups: function() { return !!this.grid.hasMergedGroups; },
 GetAllTableRows: function() {
  var rows = [];
  var tables = this.GetAllTables();
  for(var i = 0; i < tables.length; i++)
   rows = rows.concat([].slice.call(tables[i].rows));
  return rows;
 },
 GetAllTables: function() {
  var grid = this.grid;
  var helper = grid.GetTableHelper();
  var headerTable = helper ? helper.GetHeaderTable() : null;
  var contentTable = grid.GetMainTable();
  var footerTable = helper ? helper.GetFooterTable() : null;
  return [ headerTable, contentTable, footerTable ].filter(function(table) { return !!table; });
 },
 GetMainElementCell: function() {
  return this.grid.GetMainElement().rows[0].cells[0];
 },
 Invalidate: function() { 
  ASPx.GridLayoutHelper.prototype.Invalidate.call(this);
  this.adaptiveLayoutInfo = null;
  this.mergeIntervals = null;
  this.groupLevels = null;
  this.cachedHasCellMerging = null;
  this.cachedHasServerGroupLevelInfo = null;
 },
 GetFixedColumnsHelper: function() { return this.grid.GetFixedColumnsHelper(); },
 GetIndentColumnCount: function() { return this.grid.indentColumnCount; },
 GetHasDetailRows: function() { return this.grid.hasDetailRows; },
 GetShowDetailButton: function() { return this.grid.showDetailButton; },
 GetHasDetailButton: function() { return this.GetHasDetailRows() && this.GetShowDetailButton(); },
 GetShowGroupButton: function() { return this.grid.showGroupButton; },
 GetHasGroupButton: function(visibleIndex) { return this.GetGroupIndentsCount() > 0 && this.GetShowGroupButton() && !this.GetHasGroupRowTemplate(visibleIndex); },
 GetAdaptiveButtonPos: function() { return this.grid.adaptiveButtonPos; },
 GetHasFilterRowTemplate: function() { return this.grid.hasFilterRowTemplate; },
 GetHasDataRowTemplate: function() { return this.grid.hasDataRowTemplate; },
 GetHasGroupRowTemplate: function(visibleIndex) {
  if(this.grid.hasGroupRowTemplate)
   return true;
  var groupLevel = this.GetGroupRowLevel(visibleIndex);
  var groupColumns = this.GetColumnHelper().GetGroupColumns();
  return groupLevel >= 0 && groupLevel < groupColumns.length ? !!groupColumns[groupLevel].hasGroupRowTemplate : false;
 },
 GetHasGroupFooterRowTemplate: function() { return this.grid.hasGroupFooterRowTemplate; },
 GetHasFooterRowTemplate: function() { return this.grid.hasFooterRowTemplate; },
 IsDataRow: function(row) {
  if(!row || !row.id) return false;
  var dataRowIdPrefix = this.grid.name + "_" + ASPx.GridViewConsts.DataRowID;
  return row.id.indexOf(dataRowIdPrefix) > -1;
 },
 IsAdaptiveCell: function(cell) {
  var adaptiveClasses = [ASPx.GridViewConsts.AdaptiveDetailDataCellCssClass, ASPx.GridViewConsts.AdaptiveDetailCommandCellCssClass];
  return adaptiveClasses.some(function(className) { return ASPx.ElementHasCssClass(cell, className); });
 }, 
 IsServiceCell: function(cell) {
  var serviceCssClasses = [ASPx.GridViewConsts.IndentCellCssClass, ASPx.GridViewConsts.HorizontalExtraCellClassName, ASPx.GridViewConsts.AdaptiveIndentCellCssClass];
  return serviceCssClasses.some(function(className) { return ASPx.ElementHasCssClass(cell, className); });
 },
 HasServerGroupLevelInfo: function() {
  if(this.cachedHasServerGroupLevelInfo === null) {
   var groupLevelInfo = this.GetGroupLevelServerInfo();
   this.cachedHasServerGroupLevelInfo = groupLevelInfo && Object.keys(groupLevelInfo).length > 0;
  }
  return this.cachedHasServerGroupLevelInfo;
 },
 HasCellMerging: function() { 
  if(this.cachedHasCellMerging === null) {
   var mergedCellInfo = this.GetMergedCellServerInfo();
   this.cachedHasCellMerging = mergedCellInfo && Object.keys(mergedCellInfo).length > 0;
  }
  return this.cachedHasCellMerging;
 },
 GetGroupLevelServerInfo: function() { return this.grid.stateObject.groupLevelState || { }; },
 SetGroupLevelServerInfo: function(info) { this.grid.stateObject.groupLevelState = info; },
 GetGroupRowLevel: function(visibleIndex) { 
  this.EnsureGroupLevelInfo();
  if(!this.groupLevels) return -1;
  var level = this.groupLevels[visibleIndex];
  return ASPx.IsExists(level) ? level : -1;
 },
 EnsureGroupLevelInfo: function() {
  if(this.groupLevels || !this.HasServerGroupLevelInfo()) 
   return;
  var serverInfo = this.GetGroupLevelServerInfo();
  this.groupLevels = { };
  for(var level in serverInfo) {
   if(!serverInfo.hasOwnProperty(level)) continue;
   level = parseInt(level);
   var intervals = serverInfo[level];
   for(var i = 0; i < intervals.length; i++) {
    var interval = intervals[i];
    var start = interval[0];
    var end = interval[1];
    for(var visibleIndex = start; visibleIndex <= end; visibleIndex++)
     this.groupLevels[visibleIndex] = level;
   }
  }
 },
 GetGroupRowColSpan: function(visibleIndex) { 
  var groupLevel = this.GetGroupRowLevel(visibleIndex);
  if(!ASPx.IsExists(groupLevel))
   return -1;
  var groupIndentsCount = this.GetGroupIndentsCount();
  var layoutWidth = this.GetLayoutWidth();
  var detailButtonWidth = this.GetHasDetailButton() ? 1 : 0;
  var groupButtonWidth = this.GetHasGroupButton(visibleIndex) ? 1 : 0;
  return layoutWidth + detailButtonWidth + groupIndentsCount - groupLevel - groupButtonWidth;
 },
 GetGroupFooterRowColSpan: function(visibleIndex) { 
  var layoutWidth = this.GetLayoutWidth();
  var groupLevel = this.GetGroupRowLevel(visibleIndex);
  var footerIndentCount = this.GetGroupIndentsCount() - groupLevel - 1;
  return layoutWidth + footerIndentCount;
 },
 GetGroupIndentsCount: function() {
  return this.HasMergedGroups() ? 1 : this.GetColumnHelper().GetGroupColumnCount();
 },
 GetIndentCellCount: function(visibleIndex, levelIndex, rowType) { 
  var result = this.GetIndentCellCountCore(visibleIndex, rowType);
  if(levelIndex === 0)
   return Math.max(0, result);
  var groupIndentsCount = this.GetGroupIndentsCount();
  var detailButtonWidth = this.GetHasDetailButton() ? 1 : 0;
  if(rowType === ASPx.GridViewRowType.Footer && groupIndentsCount > 0) 
   result--;
  switch(rowType) {
   case ASPx.GridViewRowType.Footer:
   case ASPx.GridViewRowType.Filter:
   case ASPx.GridViewRowType.Data:
   case ASPx.GridViewRowType.BatchEtalon:
   case ASPx.GridViewRowType.GroupFooter:
    if(detailButtonWidth > 0)
     result--;
    break;
   case ASPx.GridViewRowType.Header:
    result = 0;
  }
  return Math.max(0, result);
 },
 GetIndentCellCountCore: function(visibleIndex, rowType) {
  var groupButtonWidth = this.GetHasGroupButton(visibleIndex) ? 1 : 0;
  var detailButtonWidth = this.GetHasDetailButton() ? 1 : 0;
  var leftAdaptiveButtonWidth = this.GetAdaptiveButtonPos() === ASPx.GridViewAdaptiveDetailButtonPosition.Left ? 1 : 0;
  var groupIndentsCount = this.GetGroupIndentsCount();
  var groupLevel = this.GetGroupRowLevel(visibleIndex);
  var totalIndentCount = groupIndentsCount + leftAdaptiveButtonWidth + detailButtonWidth;
  switch(rowType) {
   case ASPx.GridViewRowType.Header:
   case ASPx.GridViewRowType.Filter:
   case ASPx.GridViewRowType.Data:
   case ASPx.GridViewRowType.BatchEtalon:
   case ASPx.GridViewRowType.InlineEdit:
    return totalIndentCount;
   case ASPx.GridViewRowType.Footer:
    return leftAdaptiveButtonWidth + detailButtonWidth + (groupIndentsCount > 0 ? 1 : 0);
   case ASPx.GridViewRowType.Group:
    return groupLevel + groupButtonWidth;
   case ASPx.GridViewRowType.GroupFooter:
    var footerIndentCount = groupIndentsCount - groupLevel - 1;
    var dataIndentCount = totalIndentCount - footerIndentCount;
    var footerIndentWidth = (footerIndentCount > 0 && !this.GetHasGroupFooterRowTemplate()) ? 1 : 0;
    return dataIndentCount + footerIndentWidth;
  }
  return 0;
 },
 GetRowInfo: function(rowID) {
  if(!rowID) return null;
  var pattern = "^" + this.GetGridName() + "_([a-z]+)(-?\\d+)?(_\\d+)?$";
  var regex = new RegExp(pattern, "i");
  var matches = regex.exec(rowID);
  if(!matches || matches.length !== 4)
   return null;
  var firstNumber = parseInt(matches[2]);
  var secondNumber = matches[3] !== undefined ? parseInt(matches[3].substr(1)) : NaN;
  var rowType = this.GetRowTypeByPartialID(matches[1]);
  if(rowType === null)
   return null;
  var visibleIndex = -1;
  var level = 0;
  switch(rowType) {
   case ASPx.GridViewRowType.Header:
    if(!isNaN(secondNumber)) return null;
    level = firstNumber;
    break;
   case ASPx.GridViewRowType.Filter:
   case ASPx.GridViewRowType.Footer:
   case ASPx.GridViewRowType.InlineEdit:
   case ASPx.GridViewRowType.BatchEtalon:
    if(!isNaN(firstNumber)) return null;
    level = secondNumber;
    break;
   case ASPx.GridViewRowType.Group:
    if(isNaN(firstNumber) || !isNaN(secondNumber)) return null;
    visibleIndex = firstNumber;
    break;
   case ASPx.GridViewRowType.Data:
   case ASPx.GridViewRowType.GroupFooter:
    if(isNaN(firstNumber)) return null;
    visibleIndex = firstNumber;
    level = secondNumber;
    break;
  }
  if(isNaN(level))
   level = 0;
  return { rowType: rowType, visibleIndex: visibleIndex, level: level };
 },
 GetRowTypeByPartialID: function(partialID) {
  switch(partialID) {
   case ASPx.GridViewConsts.HeaderRowID:
    return ASPx.GridViewRowType.Header;
   case ASPx.GridViewConsts.FilterRowID:
    return ASPx.GridViewRowType.Filter;
   case ASPx.GridViewConsts.DataRowID:
    return ASPx.GridViewRowType.Data;
   case ASPx.GridViewConsts.GroupRowID:
   case ASPx.GridViewConsts.GroupRowExpID:
    return ASPx.GridViewRowType.Group;
   case ASPx.GridViewConsts.GroupFooterRowID:
    return ASPx.GridViewRowType.GroupFooter;
   case ASPx.GridViewConsts.FooterRowID:
    return ASPx.GridViewRowType.Footer;
   case ASPx.GridViewConsts.EditingRowID:
    return ASPx.GridViewRowType.InlineEdit; 
   case ASPx.GridViewConsts.DataRowID + this.GetEtalonBatchRecordPostfix():
    return ASPx.GridViewRowType.BatchEtalon;
  }
  return null;
 },
 GetEtalonBatchRecordPostfix: function() { return this.grid.EtalonBatchRecordPostFix; },
 GetRowCellMap: function(info) {
  if(!info || info.rowType === ASPx.GridViewRowType.Group) 
   return null;
  var layout = null;
  if(info.rowType === ASPx.GridViewRowType.Header)
   layout = this.GetHeaderLayout();
  else 
   layout = info.rowType === ASPx.GridViewRowType.Data ? this.GetDataRowLayout(info.visibleIndex) : this.GetEtalonDataRowLayout();
  var result = { };
  var indentCount = this.GetIndentCellCount(info.visibleIndex, info.level, info.rowType);
  var level = layout[info.level];
  for(var i = 0; i < level.length; i++)
   result[level[i].columnIndex] = indentCount + i;
  return result;
 },
 CopyIndentCells: function(row, cloneRow, visibleIndex, cloneLevelIndex, rowType) {
  if(!this.IsSpannedRow(row)) {
   this.CopyIndentCellsFromLeft(row, cloneRow, visibleIndex, cloneLevelIndex, rowType);
   this.CopyIndentCellsFromRight(row, cloneRow, visibleIndex, cloneLevelIndex, rowType);
  }
 },
 CopyIndentCellsFromLeft: function(row, cloneRow, visibleIndex, cloneLevelIndex, rowType) {
  if(rowType === ASPx.GridViewRowType.Header)
   return;
  var firstRowIndentCellCount = this.GetIndentCellCount(visibleIndex, 0, rowType);
  var cloneRowIndentCellCount = this.GetIndentCellCount(visibleIndex, cloneLevelIndex, rowType);
  var indentCellIndices = ASPx.Data.Range(firstRowIndentCellCount, 0);
  var detailIndentCellIndex = this.GetDetailIndentCellIndex(visibleIndex, 0, rowType);
  var footerGroupIndentCellIndex = this.GetFooterGroupIndentCellIndex(visibleIndex, 0, rowType);
  ASPx.Data.ArrayRemove(indentCellIndices, detailIndentCellIndex);
  ASPx.Data.ArrayRemove(indentCellIndices, footerGroupIndentCellIndex);
  if(indentCellIndices.length !== cloneRowIndentCellCount)
   throw "Wrong indent cell count for clonned row";
  this.CloneIndentCells(row, cloneRow, indentCellIndices);
 },
 CopyIndentCellsFromRight: function(row, cloneRow, visibleIndex, cloneLevelIndex, rowType) { 
  var layoutWidth = this.GetLayoutWidth(rowType === ASPx.GridViewRowType.Header);
  var indentCellCount = this.GetIndentCellCount(visibleIndex, 0, rowType);
  var rightIndentCellIndex = indentCellCount + layoutWidth;
  var indentCellIndices = ASPx.Data.Range(row.cells.length - rightIndentCellIndex, rightIndentCellIndex);
  this.CloneIndentCells(row, cloneRow, indentCellIndices);
 },
 CloneIndentCells: function(row, cloneRow, cellIndices) {
  var targetElement = cloneRow.insertCell();
  for(var i = 0; i < cellIndices.length; i++) {
   var cellIndex = cellIndices[i];
   var cloneCell = row.cells[cellIndex].cloneNode();
   cloneRow.insertBefore(cloneCell, targetElement);
  }
  ASPx.RemoveElement(targetElement);
 },
 GetDetailIndentCellIndex: function(visibleIndex, levelIndex, rowType) {
  if(!this.GetHasDetailButton() || levelIndex > 0) 
   return -1;
  var indentCellCount = this.GetIndentCellCount(visibleIndex, 0, rowType);
  return indentCellCount - 1;
 },
 GetFooterGroupIndentCellIndex: function(visibleIndex, levelIndex, rowType) {
  if(rowType !== ASPx.GridViewRowType.Footer || this.GetHasFooterRowTemplate() || levelIndex > 0) 
   return -1;
  var indentCellCount = this.GetIndentCellCount(visibleIndex, 0, rowType);
  var result = indentCellCount - 1;
  if(this.GetHasDetailButton())
   result--;
  return result;
 },
 UpdateIndentCellRowSpan: function(visibleIndex, rowType) {
  var indentCellCount = this.GetIndentCellCount(visibleIndex, 0, rowType);
  var totalIndentCellIndices = ASPx.Data.Range(indentCellCount, 0);
  var detailIndentCellIndex = this.GetDetailIndentCellIndex(visibleIndex, 0, rowType);
  var footerGroupIndentCellIndex = this.GetFooterGroupIndentCellIndex(visibleIndex, 0, rowType);
  var cellIndices = rowType === ASPx.GridViewRowType.Header ? totalIndentCellIndices : [ detailIndentCellIndex, footerGroupIndentCellIndex ];
  var height = this.GetLayoutHeight(rowType === ASPx.GridViewRowType.Header);
  var row = this.GetRow(visibleIndex, 0, rowType);
  for(var i = 0; i < cellIndices.length; i++) {
   var cellIndex = cellIndices[i];
   if(cellIndex >= 0 && cellIndex < row.cells.length)
    row.cells[cellIndex].rowSpan = height;
  }
 },
 GetColumnHelper: function() { return this.grid.GetColumnHelper(); },
 GetAdaptivityHelper: function() { return this.grid.GetAdaptivityHelper(); },
 GetMergedCellServerInfo: function() { return this.grid.stateObject.mergedCellState || { }; },
 SetMergedCellServerInfo: function(info) { this.grid.stateObject.mergedCellState = info; },
 GetHeaderLayout: function() { return this.GetColumnHelper().GetHeaderLayout(); },
 GetEtalonDataRowLayout: function() { return this.GetColumnHelper().GetDataRowLayout(); },
 GetDataRowLayout: function(visibleIndex) {
  var layout = this.GetEtalonDataRowLayout();
  if(!ASPx.IsExists(visibleIndex) || !this.HasCellMerging())
   return layout;
  var newLayout = [ ];
  for(var i = 0; i < layout.length; i++) {
   var level = layout[i].slice();
   for(var j = level.length - 1; j >= 0; j--) {
    if(this.IsHiddenMergedCell(visibleIndex, level[j].columnIndex))
     level.splice(j, 1); 
   }
   newLayout.push(level);
  }
  return newLayout;
 },
 GetHasRowTemplate: function(rowType) {
  switch(rowType) {
   case ASPx.GridViewRowType.Filter:
    return this.GetHasFilterRowTemplate();
   case ASPx.GridViewRowType.Data:
    return this.GetHasDataRowTemplate();
   case ASPx.GridViewRowType.GroupFooter:
    return this.GetHasGroupFooterRowTemplate();
   case ASPx.GridViewRowType.Footer:
    return this.GetHasFooterRowTemplate();
  }
  return false;
 },
 GetRow: function(visibleIndex, levelIndex, rowType) {
  switch(rowType) {
   case ASPx.GridViewRowType.Header:
    return this.grid.GetHeaderRow(levelIndex);
   case ASPx.GridViewRowType.Filter:
    return this.grid.GetFilterRow(levelIndex);
   case ASPx.GridViewRowType.Data:
    return this.grid.GetDataRow(visibleIndex, levelIndex);
   case ASPx.GridViewRowType.GroupFooter:
    return this.grid.GetGroupFooterRow(visibleIndex, levelIndex);
   case ASPx.GridViewRowType.Footer:
    return this.grid.GetFooterRow(levelIndex);
   case ASPx.GridViewRowType.InlineEdit:
    return this.grid.GetEditingRow(this.grid, levelIndex);
   case ASPx.GridViewRowType.BatchEtalon:
    return this.grid.GetBatchEtalonRow(levelIndex);   
  }
  return null;
 },
 GetStretchedRowColsSpan: function(visibleIndex, rowType) { 
  var layoutWidth = this.GetLayoutWidth();
  switch(rowType) {
   case ASPx.GridViewRowType.Filter:
   case ASPx.GridViewRowType.Data:
   case ASPx.GridViewRowType.Footer:
    return layoutWidth;
   case ASPx.GridViewRowType.Group:
    return this.GetGroupRowColSpan(visibleIndex);
   case ASPx.GridViewRowType.GroupFooter:
    return this.GetGroupFooterRowColSpan(visibleIndex);
  }
  return 0;
 },
 GetCell: function(visibleIndex, columnIndex, rowType) {
  switch(rowType) {
   case ASPx.GridViewRowType.Header:
    return this.GetHeaderCell(columnIndex);
   case ASPx.GridViewRowType.Filter:
    return this.GetFilterCell(columnIndex);
   case ASPx.GridViewRowType.Data:
    return this.GetDataCell(visibleIndex, columnIndex);
   case ASPx.GridViewRowType.GroupFooter:
    return this.GetGroupFooterCell(visibleIndex, columnIndex);
   case ASPx.GridViewRowType.Footer:
    return this.GetFooterCell(columnIndex);
   case ASPx.GridViewRowType.BatchEtalon:
    return this.GetBatchEtalonCell(visibleIndex, columnIndex);
   case ASPx.GridViewRowType.InlineEdit:
    return this.GetInlineEditCell(columnIndex);
  }
  return null;
 },
 UpdateStretchedRowsColSpan: function() {
  var helper = this.GetFixedColumnsHelper();
  this.UpdateStretchedRowsColSpanCore(helper ? helper.hiddenColumnCount : 0);
 },
 UpdateStretchedRowsColSpanCore: function(columnsToHide) {
  var groupRowRegexp = new RegExp(this.GetSpannedElementPattern([ ASPx.GridViewConsts.GroupRowID, ASPx.GridViewConsts.GroupRowExpID ]));
  var groupFooterRegexp = new RegExp(this.GetSpannedElementPattern([ ASPx.GridViewConsts.GroupFooterRowID ]));
  var totalSpan = this.GetLayoutWidth(false);
  var stretchedRows = this.GetAllTableRows().filter(function(row) { return this.IsSpannedRow(row); }.aspxBind(this));
  for(var i = 0; i < stretchedRows.length; i++) {
   var row = stretchedRows[i];
   var cell = this.GetSpannedCell(row);
   var colSpan = totalSpan;
   if(groupRowRegexp.test(row.id)) {
    var matches = row.id.match(groupRowRegexp);
    var visibleIndex = parseInt(matches[2]);
    colSpan = this.GetStretchedRowColsSpan(visibleIndex, ASPx.GridViewRowType.Group);
   }
   if(groupFooterRegexp.test(row.id)) {
    var matches = row.id.match(groupFooterRegexp);
    var visibleIndex = parseInt(matches[2]);
    colSpan = this.GetStretchedRowColsSpan(visibleIndex, ASPx.GridViewRowType.GroupFooter);
   }
   ASPx.Attr.ChangeCellSpanCount(cell, colSpan - columnsToHide, true);
  }
 },
 GetHeaderCell: function(columnIndex) { return this.grid.GetHeader(columnIndex); },
 GetFilterCell: function(columnIndex) { return this.GetCellCore(-1, columnIndex, ASPx.GridViewRowType.Filter); },
 GetDataCell: function(visibleIndex, columnIndex) { return this.GetCellCore(visibleIndex, columnIndex, ASPx.GridViewRowType.Data); },
 GetGroupFooterCell: function(visibleIndex, columnIndex) { return this.GetCellCore(visibleIndex, columnIndex, ASPx.GridViewRowType.GroupFooter); },
 GetFooterCell: function(columnIndex) { return this.GetCellCore(-1, columnIndex, ASPx.GridViewRowType.Footer); },
 GetBatchEtalonCell: function(visibleIndex, columnIndex) { return this.GetCellCore(visibleIndex, columnIndex, ASPx.GridViewRowType.BatchEtalon); },
 GetInlineEditCell: function(columnIndex) { 
  if(this.IsInlineEditMode())
   return this.GetCellCore(-1, columnIndex, ASPx.GridViewRowType.InlineEdit); 
  return null;
 },
 GetCellCore: function(visibleIndex, columnIndex, rowType) {
  if(this.GetHasRowTemplate(rowType)) return null;
  columnIndex = parseInt(columnIndex);
  var layout = this.GetEtalonDataRowLayout();
  var pos = this.GetColumnHelper().FindColumnLayoutPos(layout, columnIndex);
  if(pos.levelIndex < 0 || pos.cellIndex < 0)
   return null;
  var cellIndex = pos.cellIndex + this.GetIndentCellCount(visibleIndex, pos.levelIndex, rowType);
  if(!this.IsBatchEditPreviewChangesMode()) {
   visibleIndex = this.ResolveMergedCellVisibleIndex(visibleIndex, columnIndex);   
   if(this.HasCellMerging() && (rowType === ASPx.GridViewRowType.Data || rowType === ASPx.GridViewRowType.BatchEtalon))
    cellIndex -= this.CalcHiddenMergedCellCount(visibleIndex, columnIndex);
  }
  var row = this.GetRow(visibleIndex, pos.levelIndex, rowType);
  return row && cellIndex >= 0 && cellIndex < row.cells.length ? row.cells[cellIndex] : null;
 },
 GetHeaderRows: function() {
  var height = this.GetShowColumnHeaders() ? this.GetLayoutHeight(true) : 0;
  return ASPx.Data.Range(height, 0).map(function(i) { return this.grid.GetHeaderRow(i); }.bind(this));
 },
 GetFilterRows: function() {
  var height = this.GetLayoutHeight(false);
  return ASPx.Data.Range(height, 0).map(function(i) { return this.grid.GetFilterRow(i); }.bind(this));
 },
 GetFooterRows: function() {
  var height = this.GetLayoutHeight(false);
  return ASPx.Data.Range(height, 0).map(function(i) { return this.grid.GetFooterRow(i); }.bind(this));
 },
 GetLayoutWidth: function(isHeader) {
  var layout = isHeader ? this.GetHeaderLayout() : this.GetEtalonDataRowLayout();
  return this.GetLayoutWidthCore(layout);
 },
 GetLayoutWidthCore: function(layout) {
  if(!layout || layout.length === 0) 
   return 0;
  var firstLevel = layout[0];
  if(!firstLevel || firstLevel.length === 0)
   return 0;
  return firstLevel.reduce(function(prevValue, node) { return prevValue + node.colSpan; }, 0);
 },
 GetLayoutHeight: function(isHeader) {
  var layout = isHeader ? this.GetHeaderLayout() : this.GetEtalonDataRowLayout();
  return this.GetLayoutHeightCore(layout);
 },
 GetLayoutHeightCore: function(layout) {
  return layout ? layout.length : 0;
 },
 GetColumnIndex: function(cellIndex, visibleIndex, levelIndex) { 
  if(!levelIndex || levelIndex < 0)
   levelIndex = 0;
  var layout = this.GetDataRowLayout(visibleIndex); 
  if(layout.length <= levelIndex)
   return -1;
  var level = layout[levelIndex];
  cellIndex -= this.GetIndentCellCount(visibleIndex, levelIndex, ASPx.GridViewRowType.Data);
  return cellIndex >= 0 && cellIndex < level.length ? level[cellIndex].columnIndex : -1;
 },
 GetDataCellIndex: function(columnIndex, visibleIndex) { 
  var layout = this.GetDataRowLayout(visibleIndex);
  var pos = this.GetColumnHelper().FindColumnLayoutPos(layout, columnIndex);
  if(pos.levelIndex < 0 || pos.cellIndex < 0)
   return -1;
  return pos.cellIndex + this.GetIndentCellCount(visibleIndex, pos.levelIndex, ASPx.GridViewRowType.Data);
 },
 IsMergedCell: function(visibleIndex, columnIndex) { 
  return !!this.GetMergeInterval(visibleIndex, columnIndex);
 },
 IsHiddenMergedCell: function(visibleIndex, columnIndex) {
  return visibleIndex !== this.ResolveMergedCellVisibleIndex(visibleIndex, columnIndex);
 },
 IsMergedCellFirstRow: function(visibleIndex, columnIndex) { 
  var interval = this.GetMergeInterval(visibleIndex, columnIndex);
  return !!interval && interval[0] === visibleIndex;
 },
 IsMergedCellLastRow: function(visibleIndex, columnIndex) { 
  var interval = this.GetMergeInterval(visibleIndex, columnIndex);
  return !!interval && interval[1] === visibleIndex;
 },
 ResolveMergedCellVisibleIndex: function(visibleIndex, columnIndex) {
  if(!this.HasCellMerging()) return visibleIndex;
  var interval = this.GetMergeInterval(visibleIndex, columnIndex);
  return interval ? interval[0] : visibleIndex;
 },
 ResolveMergedCellVisibleIndexForNavigation: function(visibleIndex, columnIndex) {
  return this.IsBatchEditPreviewChangesMode() ? visibleIndex : this.ResolveMergedCellVisibleIndex(visibleIndex, columnIndex);
 },
 CalcHiddenMergedCellCount: function(visibleIndex, columnIndex) {
  var layout = this.GetEtalonDataRowLayout();
  var pos = this.GetColumnHelper().FindColumnLayoutPos(layout, columnIndex);
  if(pos.levelIndex < 0 || pos.cellIndex < 0)
   return 0;
  var result = 0;
  var level = layout[pos.levelIndex];
  for(var j = 0; j < pos.cellIndex; j++) {
   if(this.IsHiddenMergedCell(visibleIndex, level[j].columnIndex))
    result++;
  }
  return result;
 },
 GetMergeInterval: function(visibleIndex, columnIndex) {
  this.EnsureMergeIntervals();
  var columnIntervals = this.mergeIntervals[columnIndex];
  return columnIntervals ? columnIntervals[visibleIndex] : null;
 },
 EnsureMergeIntervals: function() {
  if(this.mergeIntervals) return;
  this.mergeIntervals = { };
  var serverInfo = this.GetMergedCellServerInfo();
  for(var columnIndex in serverInfo) {
   if(!serverInfo.hasOwnProperty(columnIndex)) continue;
   var columnIntervals = { };
   var serverIntervals = serverInfo[columnIndex];
   for(var i = 0; i < serverIntervals.length; i++) {
    var interval = serverIntervals[i];
    var start = interval[0];
    var end = interval[1];
    for(var j = start; j <= end; j++)
     columnIntervals[j] = interval;
   }
   this.mergeIntervals[parseInt(columnIndex)] = columnIntervals;
  }
 },
 GetAdaptiveRowLayoutInfo: function(visibleIndex) {
  if(!this.adaptiveLayoutInfo) 
   this.adaptiveLayoutInfo = this.CreateAdaptiveLayoutInfo();
  var baseAdaptiveLayout = this.adaptiveLayoutInfo.adaptiveRowLayout || [ ];
  return { 
   dataRowLayout: this.adaptiveLayoutInfo.dataRowLayout || this.GetEtalonDataRowLayout(),
   adaptiveRowLayout : this.IsAdaptiveDetailExpanded(visibleIndex) ? baseAdaptiveLayout : [ ]
  };
 },
 CreateAdaptiveLayoutInfo: function() {
  var adaptiveHelper = this.GetAdaptivityHelper();
  if(!adaptiveHelper) 
   return { };
  var dataRowLayout = [ ];
  var adaptiveColumnIndices = [ ];
  var columnHelper = this.GetColumnHelper();
  var isFormLayoutMode = adaptiveHelper.IsAdaptiveFormLayoutMode();
  if(adaptiveHelper.IsAdaptivityMode()) {
   var hasAnyAdaptive = adaptiveHelper.HasAnyAdaptiveElement();
   if(hasAnyAdaptive) {
    dataRowLayout = [ ];
    adaptiveColumnIndices = isFormLayoutMode ? adaptiveHelper.GetAdaptiveLayoutColumnIndices() : columnHelper.GetVisibleColumnIndices();
   } else {
    dataRowLayout = this.GetEtalonDataRowLayout();
    adaptiveColumnIndices = [ ];
   }
  } else {
   var adaptiveInfo = columnHelper.GetAdaptiveRowInfo();
   dataRowLayout = adaptiveInfo.dataRowLayout;
   var columnIndicesForAdaptiveIndicesOrder = isFormLayoutMode ? adaptiveHelper.GetAdaptiveLayoutColumnIndices() : columnHelper.GetVisibleColumnIndices();
   for(var i = 0; i < columnIndicesForAdaptiveIndicesOrder.length; i++) {
    var columnIndex = columnIndicesForAdaptiveIndicesOrder[i];
    if(adaptiveInfo.adaptiveColumnIndices.indexOf(columnIndex) > -1)
     adaptiveColumnIndices.push(columnIndex);
   }
  }
  return { dataRowLayout: dataRowLayout, adaptiveRowLayout: this.CreateAdaptiveRowLayout(adaptiveColumnIndices) };
 },
 CreateAdaptiveRowLayout: function(columnIndices) {
  var layout = [ ];
  var width = this.GetAdaptiveLayoutWidth();
  var height = Math.ceil(columnIndices.length / width);
  for(var i = 0; i < height; i++) {
   var level = [ ];
   for(var j = 0; j < width; j++) {
    var index = i * width + j;
    if(index < columnIndices.length)
     level.push({ columnIndex: columnIndices[index], colSpan: 1, rowSpan: 1 });
    else
     level[level.length - 1].colSpan++;
   }
   layout.push(level);
  }
  return layout;
 },
 IsAdaptiveDetailExpanded: function(visibleIndex) {
  var helper = this.GetAdaptivityHelper();
  if(!helper || !helper.HasAnyAdaptiveElement())
   return false;
  return helper.IsAdaptivityMode() || helper.IsAdaptiveDetailExpanded(visibleIndex);
 },
 GetAdaptiveLayoutWidth: function() {
  var helper = this.GetAdaptivityHelper();
  return helper.GetAdaptiveLayoutColumnCount();
 },
 AreDataRowsHidden: function() {
  var helper = this.GetAdaptivityHelper();
  return helper && helper.IsAdaptivityMode() && helper.HasAnyAdaptiveElement();
 },
 GetAdaptiveDataCellByChild: function(dataItem, element) {
  while(element && element.tagName !== "BODY") {
   if(ASPx.ElementHasCssClass(element, ASPx.GridViewConsts.AdaptiveDetailDataCellCssClass))
    return element;
   element = element.parentNode;
  }
  return null;
 },
 IsAdaptiveDetailRow: function(row) {
  if(!row || !row.id) return false;
  var grid = this.grid;
  var indexInfo = grid.tryGetNumberFromEndOfString(row.id);
  if(!indexInfo.success) return false;
  return row.id === this.GetAdaptiveDetailRowID(indexInfo.value);
 },
 GetAdaptiveDetailRowID: function(index) { return this.grid.name + "_" + ASPx.GridViewConsts.AdaptiveDetailRowID + index.toString(); },
 UpdateOnErrorRowInserting: function(visibleIndex, errorRow) {
  var mergedIndices = this.GetErrorRowMergedColumnIndices(visibleIndex);
  if(!mergedIndices.length) return;
  this.CreateErrorRowExtraCells(errorRow, this.GetErrorRowColSpans(mergedIndices));
  this.UpdateErrorRowIntersectedMergedCells(visibleIndex, 1);
  errorRow.dxMergedCellsIntersect = true;
 },
 UpdateOnErrorRowDeleting: function(visibleIndex, errorRow) {
  if(errorRow && errorRow.dxMergedCellsIntersect)
   this.UpdateErrorRowIntersectedMergedCells(visibleIndex, -1);
 },
 GetErrorRowMergedColumnIndices: function(visibleIndex) {
  return this.GetColumnHelper().GetVisibleColumnIndices().filter(function(columnIndex) { 
   return this.IsMergedCell(visibleIndex, columnIndex) && !this.IsMergedCellLastRow(visibleIndex, columnIndex); 
  }.bind(this));
 },
 CreateErrorRowExtraCells: function(errorRow, colSpans) {
  var errorRowCells = Array(colSpans.length);
  errorRowCells[0] = this.grid.GetLastNonAdaptiveIndentCell(errorRow);
  for(var i = 0; i < colSpans.length; i++) {
   if(!errorRowCells[i]) {
    var td = ASPx.CreateHtmlElement("TD", { className: ASPx.GridViewConsts.GridViewMarkerCssClass });
    ASPx.InsertElementAfter(td, errorRowCells[i - 1]);
    errorRowCells[i] = td;
   }
   ASPx.Attr.ChangeCellSpanCount(errorRowCells[i], colSpans[i], true);
  }
 },
 GetErrorRowColSpans: function(mergedIndices) {
  var columnIndices = this.GetColumnHelper().GetVisibleColumnIndices();
  var colSpans = [ ];
  for(var i = 0; i < columnIndices.length; i++) { 
   var isMergedCell = mergedIndices.indexOf(columnIndices[i]) > -1;
   if(isMergedCell || colSpans.length === 0)
    colSpans.push(0);
   if(!isMergedCell)
    ++colSpans[colSpans.length - 1];
  }
  return colSpans.filter(function(span) { return span > 0; });
 },
 UpdateErrorRowIntersectedMergedCells: function(visibleIndex, inc) {
  var indices = this.GetErrorRowMergedColumnIndices(visibleIndex);
  for(var i = 0; i <indices.length; i++) {
   var mergedCell = this.GetDataCell(visibleIndex, indices[i]);
   ASPx.Attr.ChangeCellSpanCount(mergedCell, mergedCell.rowSpan + inc);
  }
 },
 GetDataCellByChild: function(element) {
  return ASPx.GetParent(element, function(item) {
   if(this.IsServiceCell(item))
    return false;
   return this.IsAdaptiveCell(item) || this.IsDataRow(item.parentNode);
  }.aspxBind(this)); 
 },
 GetBatchOtherPagesChangedRecordVisibleIndices: function() { return this.grid.GetBatchOtherPagesChangedRecordVisibleIndices(); },
 GetGridElementsToChangeVisibilityInBatchChangesView: function() {
  var grid = this.grid;   
  var mainElement = grid.GetMainElement();
  var elements = [ ];
  elements.push(ASPx.GetNodesByPartialClassName(mainElement, "dxgvPagerBottomPanel")[0]);
  elements.push(ASPx.GetNodesByPartialClassName(mainElement, "dxgvPagerTopPanel")[0]);
  elements.push(ASPx.GetNodesByPartialClassName(mainElement, ASPx.GridViewConsts.GroupPanelCssClass)[0]);
  elements.push(grid.GetChildElement("DXSearchPanel"));
  elements.push(grid.GetChildElement("DXFilterBar"));
  elements.push(grid.GetAdaptiveGroupPanel());
  elements.push(grid.GetAdaptiveHeaderPanel());
  elements.push(grid.GetAdaptiveFooterPanel());
  elements.push(grid.GetAdaptiveFooterPanel());
  elements = elements.concat(this.GetRowsToChangeVisibilityInBatchChangesView());
  elements = elements.concat(this.GetIndentCellsToChangeVisibilityInBatchChangesView());
  var commandColumnIndices = this.GetColumnHelper().GetVisibleColumnIndices().filter(function(columnIndex) { return grid.GetColumn(columnIndex).isCommandColumn; });
  var selectAllElements = commandColumnIndices.map(function(columnIndex) {
   var el = grid.GetSelectAllBtn(columnIndex);
   return el && el.parentNode.parentNode; 
  });
  elements = elements.concat(selectAllElements);
  var filterHelper = grid.GetFilterHelper();
  if(filterHelper)
   elements = elements.concat(filterHelper.GetHeaderFilterButtons().map(function(b) { return b && b.parentNode; })); 
  var scrollHelper = grid.GetScrollHelper();
  if(scrollHelper) {
   elements.push(scrollHelper.GetVirtualScrollMarginDiv());
   elements.push(scrollHelper.GetVirtualScrollMarginDiv(true));
  }  
  return elements.filter(function(el) { return !!el; });
 },
 GetIndentCellsToChangeVisibilityInBatchChangesView: function () {
  var cells = [ ];
  var grid = this.grid;  
  var headerRow = grid.GetHeaderRow(0);
  if(headerRow) {
   var groupIndentsCount = this.GetGroupIndentsCount();
   var detailButtonWidth = this.GetHasDetailButton() ? 1 : 0;
   var indentCount = groupIndentsCount + detailButtonWidth;
   for(var i = 0; i < indentCount; i++)
    cells.push(headerRow.cells[i]);
   }  
  return cells;
 },
 GetRowsToChangeVisibilityInBatchChangesView: function() {
  var rows = [ ];
  var grid = this.grid;
  rows = rows.concat(this.GetFilterRows());
  var indices = grid.GetCurrentPageIndices();
  var batchHelper = grid.GetBatchEditHelper();
  indices = indices.concat(grid.useEndlessPaging ? batchHelper.GetInsertedRecordKeys() : batchHelper.GetCurrentPageInsertedKeys());
  for(var i = 0; i < indices.length; i++) {
   var visibleIndex = indices[i];
   rows = rows.concat(grid.GetBandedDataRows(visibleIndex));
   var extraRows = [ grid.GetGroupRow(visibleIndex), grid.GetPreviewRow(visibleIndex), grid.GetDetailRow(visibleIndex), grid.GetAdaptiveDetailRow(visibleIndex), grid.GetEditingErrorItem(null, visibleIndex) ];
   rows = rows.concat(extraRows);
  }
  var pagerEmptyRows = ASPx.Data.CollectionToArray(grid.GetMainTable().getElementsByClassName(ASPx.GridViewConsts.EmptyPagerRowCssClass));
  rows = rows.concat(pagerEmptyRows);
  var levelCount = this.GetLayoutHeight();
  for(var i = 0; i <= levelCount; i++) {
   var groupFooterVisibleIndices = grid.GetGroupFooterVisibleIndices();
   for(var j = 0; j < groupFooterVisibleIndices.length; j++)
    rows.push(grid.GetGroupFooterRow(groupFooterVisibleIndices[j], i));
   rows.push(grid.GetFooterRow(i));
  }
  return rows;
 }
});
ASPx.GridViewLayoutHelper = GridViewLayoutHelper;
})();
(function() {
var GridViewFilterHelper = ASPx.CreateClass(ASPx.GridFilterHelper, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
  this.initialFilterRowState = { };
  this.filterKeyPressTimerId = -1;
  this.filterKeyPressEditor = null;
  this.preparedToCallbackFilterValue = undefined;
  this.preparedFilterValueClearDelay = 150;
  this.filterRowMenuColumnIndex = -1;
  this.currentCheckedItemIndex = -1;
 },
 GetCustDialogHelper: function() { return this.grid.GetCustDialogHelper(); },
 GetBatchEditHelper: function() { return this.grid.GetBatchEditHelper(); },
 GetAutoFilterDelay: function() { return this.grid.autoFilterDelay; },
 IsMultiColumnAutoFilter: function() { return this.grid.allowMultiColumnAutoFilter; },
 GetFilterRowMenu: function() { return this.grid.GetFilterRowMenu(); },
 GetAutoFilterEditor: function(columnIndex) { return this.grid.GetAutoFilterEditor(columnIndex); },
 GetFilterConditionState: function() { return this.grid.filterRowConditions; },
 AutoFilterByColumnCore: function(columnIndex, editorValue) { 
  this.grid.AutoFilterByColumn(columnIndex, editorValue); 
 },
 AutoFilterByMultipleColumns: function(args) {
  this.grid.gridCallBack([ASPxClientGridViewCallbackCommand.ApplyMultiColumnFilter].concat(args));
 },
 SendCallbackToChangeFilterCondition: function(args) {
  this.grid.gridCallBack([ASPxClientGridViewCallbackCommand.FilterRowMenu].concat(args));
 },
 GetColumnIndicesForFilterRow: function() { 
  var columnHelper = this.grid.GetColumnHelper();
  if(this.GetCustDialogHelper())
   return columnHelper.GetAllColumns().map(function(c) { return c.index; });
  return columnHelper.GetVisibleColumnIndices();
 },
 GetFilterCondition: function(columnIndex) { 
  var state = this.GetFilterConditionState();
  return state ? state[columnIndex] : "";
 },
 SetFilterCondition: function(columnIndex, value) { 
  var state = this.GetFilterConditionState();
  if(state)
   state[columnIndex] = value; 
 },
 IsCustDialogVisible: function() {
  var helper = this.GetCustDialogHelper();
  return helper && helper.IsDialogVisible();
 },
 AutoFilterByColumn: function(columnIndex, editorValue) { 
  if(!this.IsCustDialogVisible())
   this.AutoFilterByColumnCore(columnIndex, editorValue); 
 },
 IsBatchUpdateConfirmLocked: function() {
  var batchHelper = this.GetBatchEditHelper();
  return batchHelper && batchHelper.IsUpdateConfirmLocked();
 },
 ApplyColumnAutoFilterCore: function(editor) {
  if(this.IsFilterLocked()) 
   return;
  this.ClearAutoFilterInputTimer();
  var editorValue = editor.GetValueString();
  if(this.IsBatchUpdateConfirmLocked() && this.preparedToCallbackFilterValue != "undefined"  && editorValue === this.preparedToCallbackFilterValue) 
   return;
  var columnIndex = this.ResolveColumnIndex(editor.name);
  if(columnIndex < 0 || !this.IsColumnAutoFilterChanged(columnIndex)) 
   return;
  this.SaveFilterEditorActiveElement(editor);
  this.preparedToCallbackFilterValue = editorValue;
  window.setTimeout(function() { delete this.preparedToCallbackFilterValue;  }.bind(this), this.preparedFilterValueClearDelay);
  this.AutoFilterByColumn(columnIndex, editorValue);
  this.OnChange(columnIndex);
 },
 ApplyMultiColumnAutoFilter: function(editor) {
  if(this.IsFilterLocked()) 
   return;
  this.SaveFilterEditorActiveElement(editor);
  var args = this.SerializeChangedAutoFilterValues();
  if(args.length > 0)
   this.AutoFilterByMultipleColumns(args);
  var name = editor ? editor.name : "";
  this.OnChange(this.ResolveColumnIndex(name));
 },
 SerializeChangedAutoFilterValues: function() {
  var result = [ ];
  var changedValues = this.GetChangedAutoFilterValues();
  for(var columnIndex in changedValues) {
   if(!changedValues.hasOwnProperty(columnIndex)) continue;
   result.push(columnIndex);
   result.push(changedValues[columnIndex].value);
   result.push(changedValues[columnIndex].filterCondition);
  }
  return result;
 },
 SaveFilterEditorsState: function() {
  ASPx.GridFilterHelper.prototype.SaveFilterEditorsState.call(this);
  this.initialFilterRowState = this.GetFilterRowState();
 },
 ClearFilterEditorsState: function() { 
  ASPx.GridFilterHelper.prototype.ClearFilterEditorsState.call(this);
  this.initialFilterRowState = { };
 },
 GetFilterRowState: function() {
  var indices = this.GetColumnIndicesForFilterRow();
  return ASPx.Data.ArrayToHash(indices, function(columnIndex) { return columnIndex; }, function(columnIndex) { 
   var editor = this.GetAutoFilterEditor(columnIndex);
   return {
    value: editor && editor.GetMainElement() ? editor.GetValueString() : "",
    filterCondition: this.GetFilterCondition(columnIndex)
   };
  }.bind(this));
 },
 GetChangedAutoFilterValues: function() {
  var result = { };
  var currentFilterRowState = this.GetFilterRowState();
  for(var columnIndex in this.initialFilterRowState) {
   if(!this.initialFilterRowState.hasOwnProperty(columnIndex)) continue;
   columnIndex = parseInt(columnIndex);
   var initialState = this.initialFilterRowState[columnIndex];
   var currentState = currentFilterRowState[columnIndex];
   if(currentState.value !== initialState.value || currentState.filterCondition !== initialState.filterCondition)
    result[columnIndex] = { filterCondition: currentState.filterCondition, value: currentState.value !== null ? currentState.value : "" };
  }
  return result;
 },
 OnColumnFilterInputKeyPress: function(editor, e) {
  if(this.OnColumnFilterInputSpecKeyPress(editor, e))
   return;
  this.ClearAutoFilterInputTimer();
  this.CreateAutoFilterTimer(editor);
  this.OnChange(this.ResolveColumnIndex(editor.name));
 },
 OnColumnFilterInputSpecKeyPress: function(editor, e) {
  if(e.htmlEvent) 
   e = e.htmlEvent;
  if(e.keyCode == ASPx.Key.Tab) 
   return true;
  if(e.keyCode == ASPx.Key.Enter) {
   ASPx.Evt.PreventEventAndBubble(e);
   window.setTimeout(function() {
    editor.Validate();
    if(this.IsMultiColumnAutoFilter())
     this.ApplyMultiColumnAutoFilter(editor);
    else
     this.ApplyColumnAutoFilterCore(editor);
   }.bind(this), 0);
   return true;
  }
  if(e.keyCode == ASPx.Key.Delete && e.ctrlKey) {
   ASPx.Evt.PreventEventAndBubble(e);
   window.setTimeout(function() {
    editor.SetValue(null);
    if(!this.IsMultiColumnAutoFilter())
     this.ApplyColumnAutoFilterCore(editor);
   }.bind(this), 0);
   return true;
  }
  return false;
 },
 OnFilterKeyPressTick: function() {
  if(this.filterKeyPressEditor && this.IsValidInstance())
   this.ApplyColumnAutoFilterCore(this.filterKeyPressEditor);
 },
 OnColumnFilterInputChanged: function(editor) {
  this.ApplyColumnAutoFilterCore(editor);
 },
 OnColumnFilterUserInput: function(editor) {
  if(this.IsAutoFilterTimerActive()) return;
  this.ColumnFilterOnPaste(editor);
 },
 ColumnFilterOnPaste: function(editor) {
  this.EnsureEditorRawValue(editor);
  this.CreateAutoFilterTimer(editor);
 },
 IsAutoFilterTimerActive: function() {
  return this.filterKeyPressTimerId !== -1;
 },
 CreateAutoFilterTimer: function(editor) {
  this.filterKeyPressEditor = editor;
  this.filterKeyPressTimerId = window.setTimeout(this.OnFilterKeyPressTick.bind(this), this.GetAutoFilterDelay());
 },
 ClearAutoFilterInputTimer: function() {
  this.filterKeyPressTimerId = ASPx.Timer.ClearTimer(this.filterKeyPressTimerId);
 },
 OnChange: function(columnIndex) {
  if(this.IsCustDialogVisible())
   window.setTimeout(function() { this.GetCustDialogHelper().ProcessFilterChange(columnIndex); }.bind(this), 0);
 },
 ClearColumnFilter: function(columnIndex) {
  this.ClearColumnAutoFilter(columnIndex);
  this.ClearColumnHeaderFilter(columnIndex);
  this.OnChange(columnIndex);
 },
 ClearColumnAutoFilter: function(columnIndex) {
  var editor = this.GetAutoFilterEditor(columnIndex);
  if(editor)
   editor.SetValue(null);   
 },
 ClearColumnHeaderFilter: function(columnIndex) {
  var column = this.GetColumn(columnIndex);
  var hfMode = column.HFMode;
  var listBox = this.GetListBox(columnIndex);
  if(listBox) {
   listBox.UnselectAll();
   if(hfMode ===  ASPx.GridHeaderFilterMode.List)
    listBox.SelectIndex(0);
  }
  if(hfMode === ASPx.GridHeaderFilterMode.CheckedList) {
   var checkbox = this.GetSelectAllCheckBox(columnIndex); 
   if(checkbox)
    checkbox.SetCheckState(ASPx.CheckBoxCheckState.Unchecked);
  }
  if(hfMode === ASPx.GridHeaderFilterMode.DateRangePicker) {
   var dateEdit_From = this.GetDateEdit_From(columnIndex);
   if(dateEdit_From) 
    dateEdit_From.SetValue(null);
   var dateEdit_To = this.GetDateEdit_To(columnIndex);
   if(dateEdit_To)
    dateEdit_To.SetValue(null);
  }
  if(hfMode === ASPx.GridHeaderFilterMode.DateRangeCalendar) {
   var calendar = this.GetCalendar(columnIndex);
   if(calendar)
    calendar.SetValue(null);
  }
 },
 HasFilter: function(columnIndex) {
  return this.HasHeaderFilter(columnIndex) || this.HasAutoFilter(columnIndex);
 },
 HasHeaderFilter: function(columnIndex) {
  var state = this.GetHeaderFilterState(columnIndex);
  var column = this.GetColumn(columnIndex);
  if(!state || !column)
   return false;
  if(column.HFMode === ASPx.GridHeaderFilterMode.List && state.listBoxSelectedIndices[0] === 0)
   return false;
  var hasDateRange = state.pickerRange && (state.pickerRange.start || state.pickerRange.end);
  var hasSelectedDates = state.calendarDates && state.calendarDates.length > 0;
  return state.listBoxSelectedIndices.length > 0 || hasDateRange || hasSelectedDates;  
 },
 HasAutoFilter: function(columnIndex) {
  var editor = this.GetAutoFilterEditor(columnIndex);   
  var value = editor && editor.GetMainElement() && editor.GetValueString();
  return !!value;
 },
 IsColumnAutoFilterChanged: function(columnIndex) {   
  var editor = this.GetAutoFilterEditor(columnIndex);
  var initState = this.initialFilterRowState[columnIndex];
  if (!editor || !editor.GetMainElement() || !initState) 
   return false;
  var currentValue = editor.GetValueString();
  return initState.value !== currentValue || initState.filterCondition !== this.GetFilterCondition(columnIndex);
 },
 FilterRowMenuButtonClick: function(columnIndex, element) {
  var menu = this.GetFilterRowMenu();
  if(!menu) return;
  var column = this.GetColumn(columnIndex);
  if(!column) return;
  var checkedItemIndex;
  for(var i = menu.GetItemCount() - 1; i >= 0; i--) {
   var item = menu.GetItem(i);
   var isItemChecked = item.name.substr(0, item.name.indexOf("|")) == this.GetFilterCondition(columnIndex);
   item.SetChecked(isItemChecked);
   if(isItemChecked)
    checkedItemIndex = item.index;
   item.SetVisible(this.GetFilterRowMenuItemVisible(item, column));
  }
  menu.ShowAtElement(element);
  this.filterRowMenuColumnIndex = columnIndex;
  this.currentCheckedItemIndex = checkedItemIndex;
  if(this.GetEnableAccessibility())
   menu.accessibleFocusElement = element;
 },
 FilterRowMenuItemClick: function(item) { 
  var itemName = item.name.substr(0, item.name.indexOf("|"));
  item.menu.ProcessLostFocus();
  if(this.currentCheckedItemIndex === item.index)
   return;
  if(this.IsMultiColumnAutoFilter() || this.IsCustDialogVisible()) {
   this.SetFilterCondition(this.filterRowMenuColumnIndex, parseInt(itemName));
   this.OnChange(this.filterRowMenuColumnIndex);
  } else {
   var args = [this.filterRowMenuColumnIndex, itemName];
   if(!this.IsCustDialogVisible())
    this.SendCallbackToChangeFilterCondition(args);
  }
 },
 GetFilterRowMenuItemVisible: function(item, column) {
  if(column.filterRowTypeKind) {
   var visible = item.name.indexOf(column.filterRowTypeKind) > -1;
   if(!visible && column.showFilterMenuLikeItem)
    return item.name.indexOf("L") > -1;
   return visible;
  }
  return false;
 },
 SetHeaderFilterPopupHtml: function(htmlObj, columnIndex) {
  var processedByCustDialogHelper = false;
  if(this.IsCustDialogVisible())
   processedByCustDialogHelper = this.GetCustDialogHelper().ProcessHeaderFilterCallback(htmlObj, columnIndex);
  if(!processedByCustDialogHelper)
   ASPx.GridFilterHelper.prototype.SetHeaderFilterPopupHtml.call(this, htmlObj, columnIndex);
 },
 OnListBoxSelectionChanged: function(listBox) {
  ASPx.GridFilterHelper.prototype.OnListBoxSelectionChanged.call(this, listBox);
  this.OnChange(listBox.gvColumn.index);
 },
 OnSelectAllCheckedChanged: function(checkBox) {
  ASPx.GridFilterHelper.prototype.OnSelectAllCheckedChanged.call(this, checkBox);
  this.OnChange(checkBox.gvColumn.index);
 },
 OnDateRangePickerValueChanged: function(editor) {
  ASPx.GridFilterHelper.prototype.OnDateRangePickerValueChanged.call(this, editor);
  this.OnChange(editor.gvColumn.index);
 },
 OnCalendarSelectionChanged: function(editor) {
  ASPx.GridFilterHelper.prototype.OnCalendarSelectionChanged.call(this, editor);
  this.OnChange(editor.gvColumn.index);
 },
 RequireApplyHeaderFilterNow: function(mode, columnIndex) {
  if(this.IsCustDialogVisible())
   return false;
  return ASPx.GridFilterHelper.prototype.RequireApplyHeaderFilterNow.call(this, mode, columnIndex);
 },
 OnControlsInitialized: function() {
  ASPx.GridFilterHelper.prototype.OnControlsInitialized.call(this);
  if(this.IsCustDialogVisible())
   this.GetCustDialogHelper().ClearHeaderFilterAfterLoadValues();
 },
 AdjustHeaderFilterListBox: function(column) {
  if(this.IsCustDialogVisible() && this.RequireShowHeaderFilterListBoxScrollbar(column)) {
   var listBox = this.GetListBox(column.index);
   var listBoxMainElement = listBox && listBox.GetMainElement();
   if(listBoxMainElement) {
    ASPx.SetStyles(listBoxMainElement, { minHeight: listBoxMainElement.parentNode.offsetHeight });
    listBox.AdjustControl();
   }
  } else
   ASPx.GridFilterHelper.prototype.AdjustHeaderFilterListBox.call(this, column);
 }
});
ASPx.GridViewFilterHelper = GridViewFilterHelper;
})();
(function() {
var GridViewContextMenuItemType = {
 FullExpand: "FullExpand",
 FullCollapse: "FullCollapse",
 SortAscending: "SortAscending",
 SortDescending: "SortDescending",
 ClearSorting: "ClearSorting",
 ShowFilterBuilder: "ShowFilterEditor",
 ShowFilterRow: "ShowFilterRow",
 ClearFilter: "ClearFilter",
 ShowFilterRowMenu: "ShowFilterRowMenu",
 GroupByColumn: "GroupByColumn",
 UngroupColumn: "UngroupColumn",
 ClearGrouping: "ClearGrouping",
 ShowGroupPanel: "ShowGroupPanel",
 ShowSearchPanel: "ShowSearchPanel",
 ShowColumn: "ShowColumn",
 HideColumn: "HideColumn",
 ShowCustomizationDialog: "ShowCustomizationDialog",
 ShowCustomizationWindow: "ShowCustomizationWindow",
 ShowFooter: "ShowFooter",
 ExpandRow: "ExpandRow",
 CollapseRow: "CollapseRow",
 ExpandDetailRow: "ExpandDetailRow",
 CollapseDetailRow: "CollapseDetailRow",
 NewRow: "NewRow",
 EditRow: "EditRow",
 DeleteRow: "DeleteRow",
 Refresh: "Refresh",
 SummarySum: "SummarySum",
 SummaryMin: "SummaryMin",
 SummaryMax: "SummaryMax",
 SummaryAverage: "SummaryAverage",
 SummaryCount: "SummaryCount",
 SummaryNone: "SummaryNone",
 GroupSummarySum: "GroupSummarySum",
 GroupSummaryMin: "GroupSummaryMin",
 GroupSummaryMax: "GroupSummaryMax",
 GroupSummaryAverage: "GroupSummaryAverage",
 GroupSummaryCount: "GroupSummaryCount",
 GroupSummaryNone: "GroupSummaryNone",
 CustomItem: "CustomItem"
};
var CONTEXT_MENU_CLIENT_STATE_KEY = "contextMenu";
var GridViewContextMenuHelper = ASPx.CreateClass(ASPx.GridCommandMenuHelper, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, ASPx.ASPxClientGridExportFormat);
  this.grid = grid;
  this.emptyElementIndex = -1;
  this.sourceContextMenuRow = null;
  this.activeContextMenu = null;
  this.contextMenuActivating = false;
  this.clickedMenuItem = null;
 },
 GetGridName: function() { return this.grid.name; },
 GetCustWindowSuffix: function() { return this.grid.CustomizationWindowSuffix; }, 
 IsDetailGrid: function() { return this.grid.IsDetailGrid(); },
 GetGroupPanelContextMenu: function() { return this.grid.GetGroupPanelContextMenu(); },
 GetColumnContextMenu: function() { return this.grid.GetColumnContextMenu(); },
 GetRowContextMenu: function() { return this.grid.GetRowContextMenu(); },
 GetFooterContextMenu: function() { return this.grid.GetFooterContextMenu(); },
 GetGroupFooterContextMenu: function() { return this.grid.GetGroupFooterContextMenu(); },
 GetRowHotTrackStyle: function() { return this.rowHotTrackStyle; },
 GetEnableAccessibility: function() { return this.grid.accessibilityCompliant; },
 IsCustWindowVisible: function() { return this.grid.IsCustomizationWindowVisible(); },
 HasContextMenuEventHandler: function() { return !this.grid.ContextMenu.IsEmpty(); },
 RaiseContextMenu: function(objectType, index, htmlEvent, menu, showBrowserMenu) { 
  return this.grid.RaiseContextMenu(objectType, index, htmlEvent, menu, showBrowserMenu);
 },
 RaiseContextMenuItemClick: function(e, itemInfo) {
  return this.grid.RaiseContextMenuItemClick(e, itemInfo);
 },
 HasAnyContextMenu: function() {
  return this.GetGroupPanelContextMenu() || this.GetColumnContextMenu() || this.GetRowContextMenu() || this.GetFooterContextMenu();
 },
 SendContextMenuCallback: function(args) {
  return this.grid.gridCallBack([ ASPxClientGridViewCallbackCommand.ContextMenu ].concat(args));
 },
 SendContextMenuPostBack: function(args) {
  return this.grid.gridPostBack([ ASPxClientGridViewCallbackCommand.ContextMenu ].concat(args));
 },
 OnAfterCallack: function() { 
  this.ResetState();
 },
 GetCallbackState: function() {
  if(!this.clickedMenuItem)
   return "";
  var menu = this.clickedMenuItem.menu;
  var elementInfo = menu.elementInfo;
  return menu.cpType + "," + this.clickedMenuItem.indexPath + "," + elementInfo.index;
 },
 SaveClientState: function() {
  this.SetClientStateValue(this.GetCallbackState());
 },
 ResetState: function() {
  this.clickedMenuItem = null;
  this.SetClientStateValue(null);
 },
 SetClientStateValue: function(value) {
  this.grid.stateObject[CONTEXT_MENU_CLIENT_STATE_KEY] = value;
 },
 OnContextMenuClick: function(e) {
  var showDefaultMenu = ASPx.EventStorage.getInstance().Load(e);
  if(showDefaultMenu)
   return showDefaultMenu;
  if(this.IsDetailGrid())
   ASPx.EventStorage.getInstance().Save(e, true);
  var args = this.GetContextMenuArgs(e);
  if(!args.objectType && !this.HasAnyContextMenu())
   return true;
  var menu = this.GetPreparedContextMenu(args);
  var showBrowserMenu = !menu && !this.HasContextMenuEventHandler();
  showBrowserMenu = this.RaiseContextMenu(args.objectType, args.index, e, menu, showBrowserMenu);
  if(menu && !showBrowserMenu) {
   if(this.GetEnableAccessibility())
    menu.accessibleFocusElement = ASPx.Evt.GetEventSource(e);
   this.ShowContextMenu(e, menu);
   return false;
  }
  return showBrowserMenu;
 },
 ShowContextMenu: function(mouseEvent, menu) {
  this.contextMenuActivating = true;
  this.HandleContextMenuHover(menu, mouseEvent);
  menu.ShowInternal(mouseEvent);
 },
 HandleContextMenuHover: function(menu, mouseEvent) {
  menu.handler = menu.handler || this.OnContextMenuCloseUp.bind(this);
  menu.CloseUp.AddHandler(menu.handler);
  if(!this.GetRowHotTrackStyle())
   return;
  this.activeContextMenu = menu;
  this.sourceContextMenuRow = this.grid.getItemByHtmlEvent(mouseEvent);
  ASPx.AddAfterClearHoverState(function(source, args) { this.OnClearHoverState(args.item, args.element, args.toElement); }.bind(this));
 },
 OnClearHoverState: function(hoverItem, hoverElement, newHoverElement) {
  if(!this.activeContextMenu || !this.activeContextMenu.GetVisible() || !this.sourceContextMenuRow) {
   ASPx.RemoveClassNameFromElement(hoverElement, this.GetRowHotTrackStyle()[0]);
   return;
  }
  if(this.sourceContextMenuRow.id === hoverElement.id) {
   var newHoverItem = hoverItem.Clone();
   newHoverItem.Apply(hoverElement);
  }
 },
 OnContextMenuCloseUp: function(e) {
  this.contextMenuActivating = false;
  if(!this.sourceContextMenuRow || !this.activeContextMenu || this.activeContextMenu.GetVisible()) return;
  var stateController = ASPx.GetStateController();
  if(!stateController) return;
  if(stateController.currentHoverElement !== this.sourceContextMenuRow)
   stateController.DoClearHoverState(this.sourceContextMenuRow, null);
  this.sourceContextMenuRow = null;
  this.activeContextMenu = null;
 },
 GetPreparedContextMenu: function(args) { 
  var menu = null;
  switch(args.objectType) {
   case "grouppanel":
    menu = this.GetGroupPanelContextMenu();
    break;
   case "header":
   case "emptyheader":
    menu = this.GetColumnContextMenu();
    break;
   case "row":
   case "grouprow":
   case "emptyrow":
    menu = this.GetRowContextMenu();
    break;
   case "footer":
    menu = this.GetFooterContextMenu();
    break;
   case "groupfooter":
    menu = this.GetGroupFooterContextMenu();
    break;
  }
  if(menu)
   this.ActivateContextMenuItems(menu, args);
  return menu;
 },
 GetContextMenuArgs: function(e) { 
  var args = this.GetContextMenuArgsCore(e);
  if(args.objectType || !this.grid.HasBandedDataRows())
   return args;
  var index = -1;
  var grid = this.grid;
  var dataRowIdPrefix = grid.name + "_" + ASPx.GridViewConsts.DataRowID;
  var isBandedDataRowFound = !!ASPx.GetParent(ASPx.Evt.GetEventSource(e), function(element){
   index = grid.getItemIndex(element.id);
   var level = grid.GetBandedDataRowLevelByID(element.id);
   return element.id == dataRowIdPrefix + index + "_" + level;
  });
  if(isBandedDataRowFound)
   args = { objectType: "row", index: index };
  return args;
 },
 GetContextMenuArgsCore: function(e) { 
  var objectTypes = this.GetObjectTypes();
  var src = ASPx.Evt.GetEventSource(e);
  var element = src;
  while(element && element.tagName !== "BODY") {
   var id = element.id;
   element = element.parentNode;
   if(!id) continue;
   var indexInfo = this.grid.tryGetNumberFromEndOfString(id);
   var index = indexInfo.success ? indexInfo.value : "";
   for(var partialID in objectTypes) {
    if(id == partialID + index) {
     var type = objectTypes[partialID];
     var isGroupFooter = type == "groupfooter";
     if(type == "footer" || isGroupFooter) {
      if(!isGroupFooter)
       index = this.grid.GetFooterCellIndex(src);
      else
       index = this.grid.GetGroupFooterCellIndex(src);
      if(index < 0)
       return { objectType: null, index: -1 };
     } else if(type == "emptyheader" || type == "grouppanel" || type == "emptyrow") {
      index = this.emptyElementIndex;
     }
     return { objectType: type, index: index };
    }
   }
  }
  return { objectType: null, index: -1 };
 },
 ActivateContextMenuItems: function(menu, args) {
  menu.elementInfo = args;
  this.SyncMenuItemsInfoSettings(menu, args.index, menu.cpItemsInfo);
 },
 SyncMenuItemsInfoSettings: function(menu, groupElementIndex, itemsInfo) {
  for(var i = 0; i < menu.GetItemCount() ; ++i) {
   var item = menu.GetItem(i);
   var itemInfo = itemsInfo[item.indexPath];
   var visible = this.GetItemServerState(itemInfo[0], groupElementIndex);
   var enabled = this.GetItemServerState(itemInfo[1], groupElementIndex);
   var checked = this.GetItemServerState(itemInfo[2], groupElementIndex);
   if(item.name === GridViewContextMenuItemType.ShowCustomizationWindow)
    checked = this.IsCustWindowVisible();
   item.SetVisible(visible);
   item.SetEnabled(enabled);
   item.SetChecked(checked);
   if(visible && enabled && !checked)
    this.SyncMenuItemsInfoSettings(item, groupElementIndex, itemsInfo);
  }
 },
 GetContextMenuItemChecked: function(item) {
  var itemInfo = item.menu.cpItemsInfo[item.indexPath];
  var elementIndex = item.menu.elementInfo.index;
  return this.GetItemServerState(itemInfo[2], elementIndex);
 },
 GetItemServerState: function(itemInfo, groupElementIndex) {
  var saveVisible = !!itemInfo[0];
  var indices = itemInfo.length === 1 ? [ ] : itemInfo[1];
  return ASPx.Data.ArrayIndexOf(indices, groupElementIndex) > -1 ? saveVisible : !saveVisible;
 },
 OnContextMenuItemClick: function(e) {
  var elementInfo = e.item.menu.elementInfo;
  this.clickedMenuItem = e.item;
  this.SaveClientState();
  if(this.GetEnableAccessibility() && !e.item.items.length)
   e.item.menu.ProcessLostFocus();
  if(this.RaiseContextMenuItemClick(e, elementInfo))
   return true;
  this.ProcessContextMenuItemClick(e);
  this.ResetState();
 },
 ProcessContextMenuItemClick: function(e){
  var item = e.item;
  var elementInfo = item.menu.elementInfo;
  if(!elementInfo) return;
  var command = this.GetItemCommand(item);
  switch(command) {
   case GridViewContextMenuItemType.FullExpand:
    this.grid.ExpandAll();
    break;
   case GridViewContextMenuItemType.FullCollapse:
    this.grid.CollapseAll();
    break;
   case GridViewContextMenuItemType.SortAscending:
    this.grid.SortBy(elementInfo.index, "ASC", false);
    break;
   case GridViewContextMenuItemType.SortDescending:
    this.grid.SortBy(elementInfo.index, "DSC", false);
    break;
   case GridViewContextMenuItemType.ClearSorting:
    this.grid.SortBy(elementInfo.index, "NONE", false);
    break;
   case GridViewContextMenuItemType.ShowFilterBuilder:
    this.grid.ShowFilterControl();
    break;
   case GridViewContextMenuItemType.ShowFilterRow:
    this.ContextMenuShowFilterRow(!this.GetContextMenuItemChecked(item));
    break;
   case GridViewContextMenuItemType.ClearFilter:
    this.grid.AutoFilterByColumn(this.grid.GetColumn(elementInfo.index));
    break;
   case GridViewContextMenuItemType.ShowFilterRowMenu:
    this.ContextMenuShowFilterRowMenu(!this.GetContextMenuItemChecked(item));
    break;
   case GridViewContextMenuItemType.ShowGroupPanel:
    this.ContextMenuShowGroupPanel(!this.GetContextMenuItemChecked(item));
    break;
   case GridViewContextMenuItemType.ShowSearchPanel:
    this.ContextMenuShowSearchPanel(!this.GetContextMenuItemChecked(item));
    break;
   case GridViewContextMenuItemType.ShowCustomizationDialog:
    this.grid.ShowCustomizationDialog();
    break;
   case GridViewContextMenuItemType.ShowCustomizationWindow:
    if(!this.IsCustWindowVisible())
     this.grid.ShowCustomizationWindow(false, e.item.menu.accessibleFocusElement);
    else
     this.grid.HideCustomizationWindow();
    break;
   case GridViewContextMenuItemType.ShowFooter:
    this.ContextMenuShowFooter(!this.GetContextMenuItemChecked(item));
    break;
   case GridViewContextMenuItemType.ExpandRow:
    this.grid.ExpandRow(elementInfo.index);
    break;
   case GridViewContextMenuItemType.CollapseRow:
    this.grid.CollapseRow(elementInfo.index);
    break;
   case GridViewContextMenuItemType.ExpandDetailRow:
    this.grid.ExpandDetailRow(elementInfo.index);
    break;
   case GridViewContextMenuItemType.CollapseDetailRow:
    this.grid.CollapseDetailRow(elementInfo.index);
    break;
   case GridViewContextMenuItemType.NewRow:
    this.grid.AddNewItem();
    break;
   case GridViewContextMenuItemType.EditRow:
    this.ContextMenuStartEditItem(elementInfo.index, e.item.menu);
    break;
   case GridViewContextMenuItemType.DeleteRow:
    this.grid.DeleteGridItem(elementInfo.index);
    break;
   case GridViewContextMenuItemType.Refresh:
    this.grid.Refresh();
    break;
   case GridViewContextMenuItemType.HideColumn:
    var groupped = ASPx.IsExists(this.grid.GetHeader(elementInfo.index, true));
    this.grid.MoveColumn(elementInfo.index, -1, false, false, groupped);
    break;
   case GridViewContextMenuItemType.ShowColumn:
    this.grid.MoveColumn(elementInfo.index, elementInfo.index);
    break;
   case GridViewContextMenuItemType.SummarySum:
    this.ContextMenuSetSummary(item, elementInfo.index, 0);
    break;
   case GridViewContextMenuItemType.SummaryMin:
    this.ContextMenuSetSummary(item, elementInfo.index, 1);
    break;
   case GridViewContextMenuItemType.SummaryMax:
    this.ContextMenuSetSummary(item, elementInfo.index, 2);
    break;
   case GridViewContextMenuItemType.SummaryCount:
    this.ContextMenuSetSummary(item, elementInfo.index, 3);
    break;
   case GridViewContextMenuItemType.SummaryAverage:
    this.ContextMenuSetSummary(item, elementInfo.index, 4);
    break;
   case GridViewContextMenuItemType.SummaryNone:
    this.ContextMenuClearSummary(elementInfo.index);
    break;
   case GridViewContextMenuItemType.GroupSummarySum:
    this.ContextMenuSetGroupSummary(item, elementInfo.index, 0);
    break;
   case GridViewContextMenuItemType.GroupSummaryMin:
    this.ContextMenuSetGroupSummary(item, elementInfo.index, 1);
    break;
   case GridViewContextMenuItemType.GroupSummaryMax:
    this.ContextMenuSetGroupSummary(item, elementInfo.index, 2);
    break;
   case GridViewContextMenuItemType.GroupSummaryCount:
    this.ContextMenuSetGroupSummary(item, elementInfo.index, 3);
    break;
   case GridViewContextMenuItemType.GroupSummaryAverage:
    this.ContextMenuSetGroupSummary(item, elementInfo.index, 4);
    break;
   case GridViewContextMenuItemType.GroupSummaryNone:
    this.ContextMenuClearGroupSummary(elementInfo);
    break;
   case GridViewContextMenuItemType.ClearGrouping:
    this.ContextMenuClearGrouping();
    break;
   case GridViewContextMenuItemType.GroupByColumn:
    var column = this.grid.GetColumn(elementInfo.index);
    if(column) {
     var order = null;
     if(column.sortOrder !== ASPx.GridSortOrder.None)
      order = column.sortOrder === ASPx.GridSortOrder.Ascending ? "ASC" : "DSC";
     this.grid.GroupBy(elementInfo.index, null, order);
    }
    break;
   case GridViewContextMenuItemType.UngroupColumn:
    this.grid.UnGroup(elementInfo.index);
    break;
  }
  if(this.IsExportItem(command))
   this.ContextMenuExport(item);
 },
 ContextMenuExport: function(item) {
  var command = this.GetItemCommand(item),
   exportFormat = this.GetExportFormat(command);
  this.grid.ExportTo(exportFormat);
 },
 ContextMenuStartEditItem: function(visibleIndex, menu) {
  var rowCells = this.grid.GetRow(visibleIndex).children;
  var colIndex = -1;
  var menuLocationX = menu.GetMainElement().getBoundingClientRect().left;
  for(var i = 0; i < rowCells.length; ++i) {
   var cell = rowCells[i];
   if(cell.tagName !== "TD") continue;
   var cellRect = cell.getBoundingClientRect();
   if(cellRect.left > menuLocationX) break;
   if(menuLocationX > cellRect.left && menuLocationX < cellRect.right) {
    colIndex = i;
    break;
   }
  }
  this.grid.StartEditItem(visibleIndex, colIndex);
 },
 ProcessCustomContextMenuItemClick: function(usePostBack) {
  var args = [ "" ];
  if(usePostBack)
   this.SendContextMenuPostBack(args);
  else
   this.SendContextMenuCallback(args);
 },
 ContextMenuShowGroupPanel: function(show) {
  this.SendContextMenuCallback([ "ShowGroupPanel", show ? 1 : 0 ]);
 },
 ContextMenuShowSearchPanel: function(show) {
  this.SendContextMenuCallback([ "ShowSearchPanel", show ? 1 : 0 ]);
 },
 ContextMenuShowFilterRow: function(show) {
  this.SendContextMenuCallback([ "ShowFilterRow", show ? 1 : 0 ]);
 },
 ContextMenuShowFilterRowMenu: function(show) {
  this.SendContextMenuCallback([ "ShowFilterRowMenu", show ? 1 : 0 ]);
 },
 ContextMenuShowFooter: function(show) {
  this.SendContextMenuCallback([ "ShowFooter", show ? 1 : 0 ]);
 },
 ContextMenuClearGrouping: function() {
  this.SendContextMenuCallback([ "ClearGrouping" ]);
 },
 ContextMenuSetSummary: function(item, index, typeSummary) {
  var checkSummary = this.GetContextMenuItemChecked(item) ? 0 : 1;
  this.SendContextMenuCallback([ "SetSummary", index, typeSummary, checkSummary ]);
 },
 ContextMenuSetGroupSummary: function(item, index, typeSummary, isGroupSummary) {
  var checkSummary = this.GetContextMenuItemChecked(item) ? 0 : 1;
  var isGroupFooterSummary = this.IsGroupFooterMenuItem(item) ? "1" : "0";
  this.SendContextMenuCallback([ "SetGroupSummary", index, typeSummary, checkSummary, isGroupFooterSummary ]);
 },
 ContextMenuClearSummary: function(index) {
  this.SendContextMenuCallback([ "ClearSummary", index ]);
 },
 ContextMenuClearGroupSummary: function(elementInfo) {
  var isGroupFooterSummary = elementInfo.objectType === "groupfooter" ? "1" : "0";
  this.SendContextMenuCallback([ "ClearGroupSummary", elementInfo.index, isGroupFooterSummary ]);
 },
 IsGroupFooterMenuItem: function(item) {
  return item.menu.name === this.grid.GetGroupFooterContextMenuName();
 },
 GetObjectTypes: function() {
  if(!this.objectTypes)
   this.objectTypes = this.CreateObjectTypes();
  return this.objectTypes;
 },
 CreateObjectTypes: function() {
  var gridName = this.GetGridName();
  var result = { };
  result[gridName + "_" + "grouppanel"]          = "grouppanel";
  result[gridName + "_" + ASPx.GridViewConsts.AdaptiveGroupPanelID]   = "grouppanel";
  result[gridName + "_" + ASPx.GridViewConsts.HeaderRowID]   = "emptyheader";
  result[gridName + "_" + "col"]           = "header";
  result[gridName + this.GetCustWindowSuffix() + "_" + "col"]   = "header";
  result[gridName + "_" + "groupcol"]         = "header";
  result[gridName + "_" + ASPx.GridViewConsts.DataRowID]     = "row";
  result[gridName + "_" + ASPx.GridViewConsts.DetailRowID]   = "row";
  result[gridName + "_" + ASPx.GridViewConsts.AdaptiveDetailRowID] = "row";
  result[gridName + "_" + ASPx.GridViewConsts.EmptyDataRowID]   = "emptyrow";
  result[gridName + "_" + ASPx.GridViewConsts.GroupRowID]    = "grouprow";
  result[gridName + "_" + ASPx.GridViewConsts.GroupRowID + "Exp"]  = "grouprow";
  result[gridName + "_" + ASPx.GridViewConsts.FooterRowID]   = "footer";
  result[gridName + "_" + ASPx.GridViewConsts.FilterRowID]   = "filterrow";
  result[gridName + "_" + ASPx.GridViewConsts.GroupFooterRowID]    = "groupfooter";
  return result;
 },
});
ASPx.GridViewContextMenuHelper = GridViewContextMenuHelper;
})();
(function() {
var GridViewToolbarCommandType = {
 Custom: "Custom",
 FullExpand: "FullExpand",
 FullCollapse: "FullCollapse",
 ClearSorting: "ClearSorting",
 ShowFilterBuilder: "ShowFilterEditor",
 ShowFilterRow: "ShowFilterRow",
 ClearFilter: "ClearFilter",
 ShowFilterRowMenu: "ShowFilterRowMenu",
 ClearGrouping: "ClearGrouping",
 ShowGroupPanel: "ShowGroupPanel",
 ShowSearchPanel: "ShowSearchPanel",
 ShowCustomizationWindow: "ShowCustomizationWindow",
 ShowFooter: "ShowFooter",
 ShowCustomizationDialog: "ShowCustomizationDialog",
 ExpandRow: "ExpandRow",
 CollapseRow: "CollapseRow",
 ExpandDetailRow: "ExpandDetailRow",
 CollapseDetailRow: "CollapseDetailRow",
 New: "New",
 Edit: "Edit",
 Delete: "Delete",
 DeleteSelectedRowsOnPage: "DeleteSelectedRowsOnPage",
 Refresh: "Refresh",
 Update: "Update",
 Cancel: "Cancel"
};
var GridViewToolbarHelper = ASPx.CreateClass(ASPx.GridToolbarHelper, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
 },
 ProcessToolbarItemClick: function(e) {
  var item = e.item,
   command = this.GetItemCommand(item);
  switch(command) {
   case GridViewToolbarCommandType.FullExpand:
    this.grid.ExpandAll();
    break;
   case GridViewToolbarCommandType.FullCollapse:
    this.grid.CollapseAll();
    break;
   case GridViewToolbarCommandType.ClearSorting:
    this.ToolbarClearSorting();
    break;
   case GridViewToolbarCommandType.ShowFilterBuilder:
    this.grid.ShowFilterControl();
    break;
   case GridViewToolbarCommandType.ShowFilterRow:
    this.ToolbarShowFilterRow(item.GetChecked());
    break;
   case GridViewToolbarCommandType.ClearFilter:
    this.grid.ClearFilter();
    break;
   case GridViewToolbarCommandType.ShowFilterRowMenu:
    this.ToolbarShowFilterRowMenu(item.GetChecked());
    break;
   case GridViewToolbarCommandType.ShowGroupPanel:
    this.ToolbarShowGroupPanel(item.GetChecked());
    break;
   case GridViewToolbarCommandType.ShowSearchPanel:
    this.ToolbarShowSearchPanel(item.GetChecked());
    break;
   case GridViewToolbarCommandType.ShowCustomizationWindow:
    if(!this.grid.IsCustomizationWindowVisible())
     this.grid.ShowCustomizationWindow();
    else
     this.grid.HideCustomizationWindow();
    break;
   case GridViewToolbarCommandType.ShowFooter:
    this.ToolbarShowFooter(item.GetChecked());
    break;
   case GridViewToolbarCommandType.ShowCustomizationDialog:
    this.grid.ShowCustomizationDialog();
    break;
   case GridViewToolbarCommandType.ExpandRow:
    this.grid.ExpandRow(this.grid.GetFocusedRowIndex());
    break;
   case GridViewToolbarCommandType.CollapseRow:
    this.grid.CollapseRow(this.grid.GetFocusedRowIndex());
    break;
   case GridViewToolbarCommandType.ExpandDetailRow:
    this.grid.ExpandDetailRow(this.grid.GetFocusedRowIndex());
    break;
   case GridViewToolbarCommandType.CollapseDetailRow:
    this.grid.CollapseDetailRow(this.grid.GetFocusedRowIndex());
    break;
   case GridViewToolbarCommandType.New:
    this.grid.AddNewItem();
    break;
   case GridViewToolbarCommandType.Edit:
    this.ToolbarStartEdit();
    break;
   case GridViewToolbarCommandType.Delete:
    this.ToolbarDeleteItem();
    break;
   case GridViewToolbarCommandType.DeleteSelectedRowsOnPage:
    this.ToolbarDeleteSelectedVisibleItems();
    break;
   case GridViewToolbarCommandType.Refresh:
    this.grid.Refresh();
    break;
   case GridViewToolbarCommandType.ClearGrouping:
    this.ToolbarClearGrouping();
    break;
   case GridViewToolbarCommandType.Update:
    this.grid.UpdateEdit();
    break;
   case GridViewToolbarCommandType.Cancel:
    this.grid.CancelEdit();
    break;
   default:
    ASPx.GridToolbarHelper.prototype.ProcessToolbarItemClick.call(this, e);
    break;
  }
 },
 ToolbarShowGroupPanel: function(show) {
  this.SendToolbarCallback([ "ShowGroupPanel", show ? 1 : 0 ]);
 },
 ToolbarShowSearchPanel: function(show) {
  this.SendToolbarCallback([ "ShowSearchPanel", show ? 1 : 0 ]);
 },
 ToolbarShowFilterRow: function(show) {
  this.SendToolbarCallback([ "ShowFilterRow", show ? 1 : 0 ]);
 },
 ToolbarShowFilterRowMenu: function(show) {
  this.SendToolbarCallback([ "ShowFilterRowMenu", show ? 1 : 0 ]);
 },
 ToolbarShowFooter: function(show) {
  this.SendToolbarCallback([ "ShowFooter", show ? 1 : 0 ]);
 },
 ToolbarClearGrouping: function() {
  this.SendToolbarCallback([ "ClearGrouping" ]);
 },
 ToolbarClearSorting: function() {
  this.SendToolbarCallback([ "ClearSorting" ]);
 },
 IsUpdateEditItem: function(item) {
  var command = this.GetItemCommand(item);
  switch(command) {
   case GridViewToolbarCommandType.Update:
   case GridViewToolbarCommandType.Cancel:
    return true;
  }
  return false;
 },
 IsShowCustomizationWindowItem: function(item) {
  return this.GetItemCommand(item) === GridViewToolbarCommandType.ShowCustomizationWindow;
 },
 RefreshItemText: function(item) {
  if(this.GetItemCommand(item) === GridViewToolbarCommandType.DeleteSelectedRowsOnPage)
   this.RefreshSelectionBasedItemText(item, this.GetSelectedVisibleGridItemCount());
 },
 GetToolbarItemEnabled: function(item){
  var command = this.GetItemCommand(item);
  switch(command) {
   case GridViewToolbarCommandType.Edit:
    return this.GetEditItemEnabled();
   case GridViewToolbarCommandType.Delete:
    return this.GetDeleteItemEnabled();
   case GridViewToolbarCommandType.DeleteSelectedRowsOnPage:
    return this.GetDeleteSelectedRowsOnPageItemEnabled();
   case GridViewToolbarCommandType.ExpandRow:
    return this.GetExpandRowItemEnabled();
   case GridViewToolbarCommandType.CollapseRow:
    return this.GetCollapseRowwItemEnabled();
   case GridViewToolbarCommandType.ExpandDetailRow:
    return this.GetExpandDetailRowEnabled();
   case GridViewToolbarCommandType.CollapseDetailRow:
    return this.GetCollapseDetailRowEnabled();
  }
  return null;
 },
 GetEditItemEnabled: function(){
  var focusedIndex = this.GetFocusedItemIndex();
  return this.grid.allowEdit && !this.IsGroupRow(focusedIndex) && (this.HasBatchEditFocusedCell() || !this.IsEditingItem(focusedIndex));
 },
 GetDeleteItemEnabled: function(){
  var focusedIndex = this.GetFocusedItemIndex();
  return this.grid.allowDelete && !this.IsGroupRow(focusedIndex) && (this.HasBatchEditFocusedCell() || !this.IsEditingItem(focusedIndex));
 },
 GetDeleteSelectedRowsItemEnabled: function() {
  return this.grid.allowDelete && this.GetSelectedGridItemCount() > 0;
 },
 GetDeleteSelectedRowsOnPageItemEnabled: function() {
  return this.grid.allowDelete && this.GetSelectedVisibleGridItemCount() > 0;
 },
 GetExpandRowItemEnabled: function(){
  var focusedIndex = this.GetFocusedItemIndex();
  return this.IsGroupRow(focusedIndex) && !this.IsGroupRowExpanded(focusedIndex);
 },
 GetCollapseRowwItemEnabled: function(){
  var focusedIndex = this.GetFocusedItemIndex();
  return this.IsGroupRow(focusedIndex) && this.IsGroupRowExpanded(focusedIndex);
 },
 GetExpandDetailRowEnabled: function(){
  var focusedIndex = this.GetFocusedItemIndex();
  return !this.IsGroupRow(focusedIndex) && !this.GetDetailRow(focusedIndex);
 },
 GetCollapseDetailRowEnabled: function(){
  var focusedIndex = this.GetFocusedItemIndex();
  return !!this.GetDetailRow(focusedIndex);
 },
 IsGroupRow: function(visibleIndex) {
  return this.control.IsGroupRow(visibleIndex);
 },
 IsGroupRowExpanded: function(visibleIndex){
  return this.control.IsGroupRowExpanded(visibleIndex);
 },
 GetDetailRow: function(visibleIndex){
  return this.control.GetDetailRow(visibleIndex);
 },
 IsCustomItemVisibleOnChangesPreview: function(item) {
  return ASPx.Data.ArrayContains(item.menu.cpItemsProps.ibpv, item.indexPath);
 },
 UpdateItemsOnBatchPreviewVisibilityChange: function(previewVisible) {  
  var setVisibleFunc = function(item) { 
   var visible = !previewVisible || this.IsItemVisibleOnChangesPreview(item);
   item.SetVisible(visible); 
  }.bind(this);
  this.ForEachItem(null, setVisibleFunc);
 },
 IsItemVisibleOnChangesPreview: function(item) {
  var command = this.GetItemCommand(item);
  switch(command) {
   case GridViewToolbarCommandType.New:
   case GridViewToolbarCommandType.Edit:
   case GridViewToolbarCommandType.Delete:
   case GridViewToolbarCommandType.DeleteSelectedRowsOnPage:
   case GridViewToolbarCommandType.Refresh:
   case GridViewToolbarCommandType.Update:
   case GridViewToolbarCommandType.Cancel:
    return true;
   case GridViewToolbarCommandType.Custom:
    return this.IsCustomItemVisibleOnChangesPreview(item);
  }
  return false;
 }
});
ASPx.GridViewToolbarHelper = GridViewToolbarHelper;
})();
(function() {
var Constants = {
 INFINITY_WIDTH: -1000,
 MAX_ITERATION_COUNT: 1000,
 WidthType: {
  AUTO: 0,
  FIXED: 1,
  PERCENTAGE: 2
 },
 SpecColumnIndex: {
  NON_PERCENT_SPACE: -1,
  INDENT: -2
 }
};
var GridViewColumnAdaptivityHelperBase = ASPx.CreateClass(null, {
 StyleSheetFocusedRowId: "StyleSheetFocusedRow",
 constructor: function(grid) {
  this.grid = grid;
  this.hasAdaptiveElements = false;
  this.activeAdaptiveDetailVisibleIndex = null;
  this.allowOnlyOneAdaptiveDetailExpanded = false;
  this.adaptiveDetailColumnCount = -1;
  this.adaptivePagerEmptyRows = [ ];
  this.expandedAdaptiveDetailIndices = [ ];
  this.allowScrollToAdaptiveDetailOnExpand = true;
  this.calculator = this.CreateCalculator();
 },
 OnInitialize: function() {
  this.syncFocusedAdaptiveDetailsRowsForeColor();
 },
 OnAfterCallback: function() {
  this.syncFocusedAdaptiveDetailsRowsForeColor();
 },
 CalculateAdaptivity: function(forceCalculate) {
  var gridParentNode = this.grid.GetMainElement().parentNode;
  var gridParentNodeScrollInfo = ASPx.GetOuterScrollPosition(gridParentNode);
  this.calculator.CalculateAdaptivity(forceCalculate);
  ASPx.RestoreOuterScrollPosition(gridParentNodeScrollInfo);
 },
 IsResponsiveMode: function() { return this.grid.adaptivityMode === 1; },
 IsAdaptivityMode: function() { return this.grid.adaptivityMode === 2; },
 IsAdaptiveFormLayoutMode: function() { return this.IsAdaptivityMode() && this.HasAnyAdaptiveElement() && !!this.adaptiveLayoutColumnIndices; },
 GetAdaptiveLayoutColumnIndices: function() { return this.adaptiveLayoutColumnIndices; },
 GetAdaptiveLayoutColumnCount: function() {
  return this.IsAdaptiveFormLayoutMode() ? this.GetAdaptiveFormLayoutColCount() : this.GetAdaptiveDetailColumnCount();
 },
 CreateCalculator: function() {
 },
 GetMainElement: function() { return this.grid.GetMainElement(); },
 GetMainElementCell: function() {
  return this.GetLayoutHelper().GetMainElementCell();
 },
 GetMainTable: function() { return this.grid.GetMainTable(); },
 GetAllTables: function() {
  return this.GetLayoutHelper().GetAllTables();
 },
 HasAnyAdaptiveElement: function() { return this.hasAdaptiveElements; },
 GetColumn: function(columnIndex) { return this.grid.GetColumn(columnIndex); },
 GetColumnCount: function() { return this.grid.GetColumnCount(); },
 GetAdaptiveDataRow: function(visibleIndex) { return this.grid.GetAdaptiveDataRow(visibleIndex); },
 GetBandedAdaptiveDataRows: function(visibleIndex) { return this.grid.GetBandedAdaptiveDataRows(visibleIndex); },
 GetAdaptiveItems: function(visibleIndex) { return this.HasBandedDataRows() ? this.GetBandedAdaptiveDataRows(visibleIndex) : [this.GetAdaptiveDataRow(visibleIndex)]; },
 GetAdaptiveDetailRow: function(visibleIndex, forceCreate) { return this.grid.GetAdaptiveDetailRow(visibleIndex, forceCreate); },
 GetAdaptiveDetailCell: function(visibleIndex, forceCreate) { return this.grid.GetAdaptiveDetailCell(visibleIndex, forceCreate); },
 GetDataCell: function(visibleIndex, columnIndex) {
  var dataCell = this.grid.GetDataCell(visibleIndex, columnIndex);
  if(dataCell)
   return dataCell;
  if(this.grid.IsInlineEditMode())
   return this.grid.GetDataCellByRow(this.grid.GetEditingRow(), columnIndex, visibleIndex);
  return null;
 },
 GetAdaptiveHeaderContainer: function(columnIndex, adaptivePanel) { return this.grid.GetAdaptiveHeaderContainer(columnIndex, adaptivePanel); },
 GetHeader: function(columnIndex) { return this.grid.GetHeader(columnIndex); },
 GetGroupPanel: function() { return ASPx.GetNodesByPartialClassName(this.GetMainElement(), ASPx.GridViewConsts.GroupPanelCssClass)[0]; },
 GetAdaptiveGroupPanel: function() { return this.grid.GetAdaptiveGroupPanel(); },
 GetGroupPanelHeaders: function(panel) { return ASPx.GetNodesByPartialClassName(panel, ASPx.GridViewConsts.HeaderCellCssClass); },
 GetAdaptiveFooterPanel: function() { return this.grid.GetAdaptiveFooterPanel(); },
 GetVisibleColumnIndices: function() { return this.grid.GetColumnHelper().GetVisibleColumnIndices(true); },
 GetLeafColumnsIndices: function() { return this.grid.GetHeaderMatrix().GetLeafIndices(); },
 GetBatchEditHelper: function() { return this.grid.GetBatchEditHelper(); },
 GetToolbarHelper: function() { return this.grid.GetToolbarHelper(); },
 GetFixedGroupHelper: function() { return this.grid.GetFixedGroupsHelper(); },
 GetIndentColumnCount: function() { return this.grid.indentColumnCount; },
 GetAdaptiveDetailColumnCount: function() { return this.adaptiveDetailColumnCount; },
 GetAdaptiveFormLayoutColCount: function() { },
 GetLayoutHelper: function() { return this.grid.GetLayoutHelper(); },
 HasBandedDataRows: function() { return this.grid.HasBandedDataRows(); },
 ApplySettings: function(data) {
  this.allowOnlyOneAdaptiveDetailExpanded = data.allowOnlyOneAdaptiveDetailExpanded;
  this.adaptiveDetailColumnCount = data.adaptiveDetailColumnCount;
  this.calculator.ApplySettings(data);
 },
 GetVisibleRowsIndicesForAdaptivity: function() { return this.grid.GetVisibleRowsIndicesForAdaptivity(); },
 IsLeafColumn: function(columnIndex) { return ASPx.Data.ArrayContains(this.GetLeafColumnsIndices(), columnIndex); },
 IsColSpanReassignmentRequired: function(cell) {
  return cell && (cell.colSpan > 1 || cell.originalColSpan && cell.colSpan !== cell.originalColSpan);
 },
 GetAdaptiveColumnHeaderHideInfo: function(columnIndex) {
  var toHide = [ ];
  var toSpan = [ ];
  var leafIndices = this.GetLeafColumnsIndices();
  if(leafIndices.indexOf(columnIndex) > -1) {
   var column = this.GetColumn(columnIndex);
   while(column) {
    var headerCell = this.GetHeader(column.index, false);
    if(headerCell) {
     var isLeaf = leafIndices.indexOf(column.index) > -1;
     if(isLeaf || headerCell.colSpan === 1) {
      toHide.push(headerCell);
      if(headerCell.originalColSpan && headerCell.colSpan !== headerCell.originalColSpan)
       toSpan.push(headerCell);
     }
     else
      toSpan.push(headerCell);
    }
    column = this.GetColumn(column.parentIndex);
   }
  }
  return { toHide: toHide, toSpan: toSpan };
 },
 GetEmptyPagerRows: function() {
  if(this.adaptivePagerEmptyRows.length == 0)
   this.adaptivePagerEmptyRows = this.GetMainTable().getElementsByClassName(ASPx.GridViewConsts.EmptyPagerRowCssClass);
  return this.adaptivePagerEmptyRows;
 },
 ResetAdaptivityOnCallback: function() {
  this.ResetAdaptivity();
  this.activeAdaptiveDetailVisibleIndex = null;
 },
 ResetAdaptivity: function() {
  this.UpdateAdaptiveGroupPanelVisibility(false);
  this.RestoreAdaptiveDetails();
  this.UpdateAdaptivitySelector(true);
  this.UpdateAdaptiveToolbarsVisibility(false);
 },
 RestoreAdaptivityState: function(){
  for(var i = 0; i < this.expandedAdaptiveDetailIndices.length; i++) {
   var visibleIndex = this.expandedAdaptiveDetailIndices[i];
   if(!this.IsAdaptiveDetailsVisible(visibleIndex))
    this.ToggleAdaptiveDetails(visibleIndex, true);
  }
  this.grid.ApplyAdaptiveScrollTop();
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.ApplyServerState();
  this.adaptivePagerEmptyRows = [ ];
 },
 HideAllAdaptiveColumns: function() {
 },
 IsAdaptiveDetailExpanded: function(visibleIndex) {
  return this.expandedAdaptiveDetailIndices.indexOf(visibleIndex) > -1;
 },
 IsAdaptiveDetailsVisible: function(visibleIndex){
  if(!this.HasAnyAdaptiveElement()) return false;
  var row = this.GetAdaptiveDetailRow(visibleIndex);
  return row && ASPx.GetElementDisplay(row);
 },
 GetArmRowAdaptiveIndent: function(table) {
  return ASPx.GetNodeByClassName(table.rows[0], ASPx.GridViewConsts.AdaptiveIndentCellCssClass);
 },
 UpdateAdaptivity: function() {
  this.UpdateAdaptiveGroupPanelVisibility(this.HasAnyAdaptiveElement());
  this.UpdateAdaptiveDetails();
  this.UpdateAdaptivitySelector();
  this.grid.UpdateFirstAndLastVisibleRowMarkers();
  this.UpdateAdaptiveToolbarsVisibility(true);
 },
 ToggleAdaptiveDetails: function(visibleIndex, preventStoreIndices, fromUI) {
  if(!this.HasAnyAdaptiveElement()) return;
  if(!preventStoreIndices)
   ASPx.Data.ArrayRemove(this.expandedAdaptiveDetailIndices, visibleIndex);
  if(ASPx.IsExists(this.activeAdaptiveDetailVisibleIndex) && this.activeAdaptiveDetailVisibleIndex !== visibleIndex)
   this.UpdateRowAdaptiveDetails(this.activeAdaptiveDetailVisibleIndex, true);
  var newVisible = !this.IsAdaptiveDetailsVisible(visibleIndex);
  this.UpdateRowAdaptiveDetails(visibleIndex, true);
  this.UpdateDataRowBordersVisibility(visibleIndex, newVisible);
  if(newVisible && fromUI)
   this.MakeAdaptiveDetailsRowVisible(visibleIndex);
  if(this.allowOnlyOneAdaptiveDetailExpanded)
   this.activeAdaptiveDetailVisibleIndex = newVisible ? visibleIndex : null;
  if(!preventStoreIndices && newVisible) {
   if(this.allowOnlyOneAdaptiveDetailExpanded)
    this.expandedAdaptiveDetailIndices = [ ];
   this.expandedAdaptiveDetailIndices.push(visibleIndex);
  }
 },
 MakeAdaptiveDetailsRowVisible: function(visibleIndex) {
  if(!this.grid.HasVertScroll() || !this.allowScrollToAdaptiveDetailOnExpand) return;
  var adaptiveRow = this.GetAdaptiveDetailRow(visibleIndex);
  if(adaptiveRow)
   this.grid.GetScrollHelper().MakeRowVisible(adaptiveRow);
 },
 UpdateDataRowBordersVisibility: function(visibleIndex, visible){
  var dataRow = this.GetAdaptiveDataRow(visibleIndex);
  if(!dataRow) return;
  for(var i = 0; i < this.GetIndentColumnCount(); i++){
   var cell = dataRow.cells[i];
   if(ASPx.ElementHasCssClass(cell, ASPx.GridViewConsts.DetailIndentCellCssClass) ||
      ASPx.ElementHasCssClass(cell, ASPx.GridViewConsts.DetailButtonCellCssClass) ||
      ASPx.ElementHasCssClass(cell, ASPx.GridViewConsts.AdaptiveIndentCellCssClass))
    continue;
   ASPx.Attr.RestoreStyleAttribute(cell, "border-bottom-width");
   if(visible)
    ASPx.Attr.ChangeStyleAttribute(cell, "border-bottom-width", "0px");
  }
 },
 GetHideAdaptiveDetailButtonCore: function(row){
  var cell = ASPx.GetNodeByClassName(row, ASPx.GridViewConsts.AdaptiveIndentCellCssClass);
  return ASPx.GetChildByClassName(cell, ASPx.GridViewConsts.AdaptiveDetailHideButtonCssClass);
 },
 UpdateRowAdaptiveButtonsVisibility: function(visibleIndex, visible){
  var adaptiveRowButtons = this.GetShowAdaptiveDetailButtons(visibleIndex);
  var setRowButtonVisibility = function (btn) { if (btn) ASPx.SetElementDisplay(btn, !visible); };
  adaptiveRowButtons.forEach(setRowButtonVisibility);
  var detailRowButton = this.GetHideAdaptiveDetailButton(visibleIndex);
  if(detailRowButton) detailRowButton.style.display = visible ? "block" : "none";
 },
 GetShowAdaptiveDetailButtons: function(visibleIndex) {
  var rows = this.GetAdaptiveItems(visibleIndex);
  var containerCells = rows.map(function(row) { return ASPx.GetNodeByClassName(row, ASPx.GridViewConsts.AdaptiveIndentCellCssClass); });
  var buttons = containerCells.map(function(cell) { return ASPx.GetChildByClassName(cell, ASPx.GridViewConsts.AdaptiveDetailShowButtonCssClass); });
  return buttons.filter(function(b) { return !!b; });
 },
 GetHideAdaptiveDetailButton: function(visibleIndex) {
  var row = this.GetAdaptiveDetailRow(visibleIndex);
  var btn = this.GetHideAdaptiveDetailButtonCore(row);
  if(!btn){
   btn = this.GetHideAdaptiveDetailButtonCore(this.GetAdaptiveDataRow(visibleIndex));
   if(btn){
    var cell = ASPx.GetNodeByClassName(row, ASPx.GridViewConsts.AdaptiveIndentCellCssClass);
    cell.innerHTML = "";
    cell.appendChild(btn);
   }
  }
  return btn;
 },
 UpdateAdaptiveGroupPanelVisibility: function(show){
  var groupPanel = this.GetGroupPanel();
  var adaptiveGroupPanel = this.GetAdaptiveGroupPanel();
  if(!groupPanel || !adaptiveGroupPanel) return;
  var source = show ? groupPanel : adaptiveGroupPanel;
  var headers = this.GetGroupPanelHeaders(source);
  for(var i = 0; i < headers.length; i++){
   var header = headers[i];
   if(show) {
    var container = this.GetAdaptiveHeaderContainer(this.grid.getColumnIndex(header.id), adaptiveGroupPanel);
    header.savedNeighbor = header.nextSibling;
    ASPx.ChangeElementContainer(header, container);
   } else {
    var neighbor = header.savedNeighbor || this.grid.GetGroupPanel();
    neighbor.parentElement.insertBefore(header, neighbor);
     }
   header.adaptiveMoved = show;
  }
  this.grid.UpdateScrollableControls();
  ASPx.SetElementDisplay(groupPanel, !show);
  ASPx.SetElementDisplay(adaptiveGroupPanel, show);  
 },
 UpdateAdaptiveDetails: function(){
  var indices = this.GetVisibleRowsIndicesForAdaptivity();
  for(var i = 0; i < indices.length; i++) 
   this.UpdateRowAdaptiveDetails(indices[i]);
 },
 RestoreAdaptiveDetails: function(){
  var indices = this.GetVisibleRowsIndicesForAdaptivity();
  for(var i = 0; i < indices.length; i++) 
   this.RestoreRowAdaptiveDetails(indices[i]);
 },
 UpdateRowAdaptiveDetails: function(visibleIndex, changeVisible){
  var forceCreate = changeVisible || this.CanCreateRowAdaptiveDetailsOnUpdating();
  var row = this.GetAdaptiveDetailRow(visibleIndex, forceCreate);
  if(row) {
   if(this.CanCreateRowAdaptiveDetailsOnUpdating()) {
    ASPx.SetElementDisplay(row, true);
    this.grid.UpdateItemStyle(visibleIndex);
   }
   if(changeVisible) {
    var visible = !ASPx.GetElementDisplay(row);
    ASPx.SetElementDisplay(row, visible);
    this.UpdateRowAdaptiveButtonsVisibility(visibleIndex, visible);
    this.ReplaceBorderBottomWidthRules(visibleIndex, visible);
   }
   if(!this.HasAnyAdaptiveElement()){
    ASPx.SetElementDisplay(row, false);
    this.UpdateRowAdaptiveButtonsVisibility(visibleIndex, false);
    this.UpdateDataRowBordersVisibility(visibleIndex, false);
    this.activeAdaptiveDetailVisibleIndex = null;
    this.expandedAdaptiveDetailIndices = [ ];
   }
  }
  if(this.HasAnyAdaptiveElement()) {
   var cell = this.GetAdaptiveDetailCell(visibleIndex);
   if(cell) 
    this.CreateAdaptiveDetailsContent(cell, visibleIndex);
   this.UpdateDetailButton(visibleIndex, true);
  }
 },
 CanCreateRowAdaptiveDetailsOnUpdating: function() {
  return false;
 },
 UpdateDetailButton: function(visibleIndex, moveFromDataRow) {
 },
 ReplaceBorderBottomWidthRules: function(visibleIndex, visible){
  if(!this.grid.IsLastDataRow(visibleIndex)) return;
  this.grid.UpdateFirstAndLastVisibleRowMarkers();
  var dataRow = this.getDataRow(visibleIndex);
  if(visible){
   var replaceBorderRules = false;
   for(var i = this.GetIndentColumnCount(); i < dataRow.cells.length; i++){
    var cell = dataRow.cells[i];
    if(cell.style.borderBottomWidth == "0px"){
     replaceBorderRules = true;
     ASPx.Attr.ChangeStyleAttribute(cell, "border-bottom-width", "");
    }
   }
   if(!replaceBorderRules) return;
   ASPx.Attr.ChangeStyleAttribute(this.GetAdaptiveDetailCell(visibleIndex), "border-bottom-width", "0px");
   var adaptiveDetailIndentCell = this.GetAdaptiveDetailIndentCell(visibleIndex);
   if(adaptiveDetailIndentCell)
    ASPx.Attr.ChangeStyleAttribute(adaptiveDetailIndentCell, "border-bottom-width", "0px");
  } else{
   var adaptiveDetailCell = this.GetAdaptiveDetailCell(visibleIndex);
   if(adaptiveDetailCell.style.borderBottomWidth != "0px") return;
   ASPx.Attr.RestoreStyleAttribute(adaptiveDetailCell, "border-bottom-width");
   var adaptiveDetailIndentCell = this.GetAdaptiveDetailIndentCell(visibleIndex);
   if(adaptiveDetailIndentCell)
    ASPx.Attr.RestoreStyleAttribute(adaptiveDetailIndentCell, "border-bottom-width");
   for(var i = this.GetIndentColumnCount(); i < dataRow.cells.length; i++){
    var cell = dataRow.cells[i];
    ASPx.Attr.RestoreStyleAttribute(cell, "border-bottom-width");
   }
  }
 },
 getDataRow: function(visibleIndex) {
  var dataRow = null;
  if(this.HasBandedDataRows()) {
   var bandedRows = this.GetBandedAdaptiveDataRows(visibleIndex);
   if(bandedRows.length)
    dataRow = bandedRows[bandedRows.length - 1];
  } else {
   dataRow = this.GetAdaptiveDataRow(visibleIndex);
  }
  return dataRow;
 },
 syncFocusedAdaptiveDetailsRowsForeColor: function() {
  var focusedItemStyle = this.grid.GetStyleHelper().GetFocusedItemStyle();
  if(!focusedItemStyle || !focusedItemStyle.cssText)
   return;
  var foreColor = ASPx.CreateHtmlElement("DIV", focusedItemStyle).style.color;
  if(!foreColor)
   return;
  var gridSelector = ["#", this.grid.name].join("");
  var dataCellSelector = [gridSelector, focusedItemStyle.className, ASPx.GridViewConsts.AdaptiveDetailDataCellCssClass].join(" .");
  var captionCellSelector = [gridSelector, focusedItemStyle.className, ASPx.GridViewConsts.AdaptiveDetailCaptionCellCssClass].join(" .");
  var selector = [dataCellSelector, captionCellSelector].join(",");
  var rules = [{
   selector: selector,
   cssText: ["color:", foreColor, ";"].join("")
  }];
  ASPx.GridDynamicStyleSheetHelper.Instance.Update(this.grid, this.StyleSheetFocusedRowId, rules);
 },
 GetAdaptiveDetailIndentCell: function(visibleIndex){
  var row = this.GetAdaptiveDetailRow(visibleIndex);
  return ASPx.GetNodeByClassName(row, ASPx.GridViewConsts.AdaptiveIndentCellCssClass);
 },
 RestoreRowAdaptiveDetails: function(visibleIndex){
  var cell = this.GetAdaptiveDetailCell(visibleIndex);
  if(cell) this.RestoreAdaptiveDetailsContent(cell, visibleIndex);
  this.UpdateDetailButton(visibleIndex, false);
 },
 CreateAdaptiveDetailsContent: function(parentElement, visibleIndex) {
  if(parentElement.childNodes.length > 0) return;
  var table = document.createElement("TABLE");
  parentElement.appendChild(table);
  table.className = ASPx.GridViewConsts.AdaptiveDetailTableCssClass;
  table.border = 0;
  table.cellPadding = 0;
  table.cellSpacing = 0;
  var tbody = document.createElement("TBODY");
  table.appendChild(tbody);
  var visibleIndices = this.GetVisibleColumnIndices();
  var columnCount = this.adaptiveDetailColumnCount, tr;
  for(var i = 0; i < visibleIndices.length; i++) {
   var column = this.GetColumn(visibleIndices[i]);
   if(!column || !column.adaptiveHidden) continue;
   if(columnCount == this.adaptiveDetailColumnCount) {
    tr = document.createElement("TR");
    tbody.appendChild(tr);
   }
   var dataColSpan = 1;
   var header = this.GetHeader(column.index);
   if(column.isCommandColumn) {
    if(!this.CommandColumnHasCaptionForAdaptiveSimpleContent(header)) 
     dataColSpan = 3 * this.adaptiveDetailColumnCount - 1;
    else {
     var titleText = header ? header.innerHTML : this.GetColumnCaption(column);
     this.CreateAdaptiveDetailsTitleCell(tr, titleText + ":");
    }
   }
   else {
    var textNode = this.GetHeaderCellTextNode(header);
    var titleText = header ? ASPx.GetInnerText(textNode) : this.GetColumnCaption(column);
    this.CreateAdaptiveDetailsTitleCell(tr, titleText + ":");
   }
   var dataCell = this.CreateAdaptiveDetailsDataCell(tr, column, dataColSpan);
   var renderedCellVisibleIndex = this.GetLayoutHelper().ResolveMergedCellVisibleIndex(visibleIndex, column.index); 
   var sampleDataCell;
   if(renderedCellVisibleIndex == visibleIndex){
    sampleDataCell = this.GetDataCell(visibleIndex, column.index);
    this.StoreAdaptiveDetailCell(parentElement, column.index, dataCell);
   } else {
    var storedCell = this.GetStoredAdaptiveDetailCell(column.index, renderedCellVisibleIndex);
    sampleDataCell = storedCell.cloneNode(true);
   }
   ASPx.MoveChildrenToElement(sampleDataCell, dataCell);
   columnCount--;
   if(columnCount == 0 || column.isCommandColumn) 
    columnCount = this.adaptiveDetailColumnCount;
   else if(!column.isCommandColumn) {
    var spacerCell = document.createElement("TD");
    spacerCell.className = ASPx.GridViewConsts.AdaptiveDetailSpacerCellCssClass;
    tr.appendChild(spacerCell);
   }
   var helper = this.GetBatchEditHelper();
   if(helper) {
    helper.UpdateItem(this.grid.ConvertVisibleIndexToKey(visibleIndex), [ column.index ], false, false, false);
    helper.UpdateRecordInChangesPreview(visibleIndex);
   }
  }
 },
 CommandColumnHasCaptionForAdaptiveSimpleContent: function(header){
 },
 GetHeaderCellTextNode: function(headerCell) {
  if(this.grid.enableEllipsis) {
   var textContainer = ASPx.GetNodeByClassName(headerCell, ASPx.GridViewConsts.HeaderCellEllipsisContainerCssClass, 0);
   if(textContainer)
    headerCell = textContainer;
  }
  return ASPx.GetNodeByTagName(headerCell, "TD", 0) || headerCell;
 },
 GetColumnCaption: function (column) {
  return this.GetColumnCaptionProvider().GetColumnCaption(column.index);
 },
 GetColumnCaptionProvider: function () {
  return this.grid;
 },
 CreateAdaptiveDetailsDataCell: function(tr, column, dataColSpan){
  var dataCell = document.createElement("TD");
  dataCell.colSpan = dataColSpan;
  dataCell.className = (column.isCommandColumn ? ASPx.GridViewConsts.AdaptiveDetailCommandCellCssClass : ASPx.GridViewConsts.AdaptiveDetailDataCellCssClass);
  dataCell.columnIndex = column.index;
  tr.appendChild(dataCell);
  return dataCell;
 },
 CreateAdaptiveDetailsTitleCell: function(tr, captionHTML){
  var titleCell = document.createElement("TD");
  titleCell.className = ASPx.GridViewConsts.AdaptiveDetailCaptionCellCssClass;
  tr.appendChild(titleCell);
  titleCell.innerHTML = captionHTML;
  return titleCell;
 },
 GetStoredAdaptiveDetailCell: function(columnIndex, visibleIndex){
  var parentElement = this.GetAdaptiveDetailCell(visibleIndex);
  if(!parentElement || !parentElement.adaptiveDetailsCells)
   return null;
  return parentElement.adaptiveDetailsCells[columnIndex];
 },
 StoreAdaptiveDetailCell: function(parentElement, columnIndex, dataCell){
  if(!parentElement.adaptiveDetailsCells)
   parentElement.adaptiveDetailsCells = [];
  parentElement.adaptiveDetailsCells[columnIndex] = dataCell;
 },
 RestoreAdaptiveDetailsContent: function(parentElement, visibleIndex){
  for(var i = 0; i < this.GetColumnCount(); i++) {
   var column = this.GetColumn(i);
   if(!column || !parentElement.adaptiveDetailsCells || !parentElement.adaptiveDetailsCells[column.index]) continue;
   var dataCell = this.GetDataCell(visibleIndex, column.index);
   var storedDataCell = parentElement.adaptiveDetailsCells[column.index];
   if(storedDataCell) ASPx.MoveChildrenToElement(storedDataCell, dataCell);
   parentElement.adaptiveDetailsCells[column.index] = null;
   if(this.GetBatchEditHelper())
    this.GetBatchEditHelper().UpdateItemByVI(visibleIndex, [ column.index ], false, false, false);
  }
  if(this.CanClearParentElementOnAdaptiveDetailsContentRestore()) 
   parentElement.innerHTML = "";
 },
 CanClearParentElementOnAdaptiveDetailsContentRestore: function() {
  return true;
 },
 UpdateAdaptivitySelector: function(reset) {
  var visible = this.HasAnyAdaptiveElement() && !reset;
  this.SetAdaptivitySelectorVisible(visible);
 },
 SetAdaptivitySelectorVisible: function(visible) {
  var cssClass = this.GetAdaptivitySelectorEnabledCssClass();
  if(visible) {
   ASPx.AddClassNameToElement(this.GetMainElement(), cssClass);
   ASPx.RemoveClassNameFromElement(this.GetMainElement(), ASPx.GridViewConsts.AdaptivityDisabledCssClass);
  }
  else {
   ASPx.RemoveClassNameFromElement(this.GetMainElement(), cssClass);
   ASPx.AddClassNameToElement(this.GetMainElement(), ASPx.GridViewConsts.AdaptivityDisabledCssClass);
  }
 },
 GetAdaptivitySelectorEnabledCssClass: function() {
 },
 GetFixedGroupPlaceholders: function() {
  var helper = this.GetFixedGroupHelper();
  return helper ? helper.GetPlaceholderCells() : null;
 },
 UpdateAdaptiveToolbarsVisibility: function(show) {
  var helper = this.GetToolbarHelper();
  helper.ForEachAdaptiveToolbar(function(toolbar) {
   if(!show)
    toolbar.CollapseControl();
   else if(toolbar.IsControlCollapsed()) {
    toolbar.ExpandControl();
    toolbar.AdjustControl();
   }
  });
 }
});
var GridViewResponsiveModeAdaptivityHelperBase = ASPx.CreateClass(GridViewColumnAdaptivityHelperBase, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
  this.adaptiveHiddenColumns = [ ];
 },
 CalculateAdaptivity: function(forceCalculate) {
  var savedAdaptiveState = this.HasAnyAdaptiveElement();
  GridViewColumnAdaptivityHelperBase.prototype.CalculateAdaptivity.call(this, forceCalculate);
  if(savedAdaptiveState !== this.HasAnyAdaptiveElement())
   this.ProcessDataCellsRightBorder();
 },
 ResetAdaptivity: function() {
  this.ShowAdaptiveColumns();
  GridViewColumnAdaptivityHelperBase.prototype.ResetAdaptivity.call(this);
 },
 CommandColumnHasCaptionForAdaptiveSimpleContent: function(header) {
  return !ASPx.GetChildByTagName(header, "TABLE"); 
 },
 GetAdaptivitySelectorEnabledCssClass: function() {
  return ASPx.GridViewConsts.AdaptivityEnabledCssClass;
 },
 GetAdaptiveIndent: function() {
 },
 CollapseTables: function(tables) {
  var savedStyles = [];
  var cell = this.GetMainElementCell();
  var style = cell.style;
  var savedStyle = { display: style.display, width: style.width, height: style.height, overflow: style.overflow };
  savedStyles.push(savedStyle);
  ASPx.SetStyles(cell, { display: "block", width: "0px", height: "0px", overflow: "hidden" });
  if(this.grid.widthValueSetInPercentage) {
   var mainElement = this.grid.GetMainElement();
   savedStyle = { width: mainElement.style.width };
   mainElement.style.width = this.grid.percentSizeConfig.width;
   savedStyles.push(savedStyle);
  }
  for(var i = 0, table; table = tables[i]; i++) {
   savedStyle = {};
   var collapsedStyle = this.GetCollapsedTableStyle(table, savedStyle);
   savedStyles.push(savedStyle);
   ASPx.SetStyles(table, collapsedStyle);
  }
  this.SetAdaptivitySelectorVisible(true);
  return savedStyles;
 },
 GetCollapsedTableStyle: function(table, savedStyle) {
  savedStyle.width = table.style.width;
  return { width: "1px" };
 },
 ExpandTables: function(tables, savedStyles) {
  var cell = this.GetMainElementCell();
  ASPx.SetStyles(cell, savedStyles[0]);
  var offset = 1;
  if(this.grid.widthValueSetInPercentage) {
   this.grid.GetMainElement().style.width = savedStyles[1].width;
   offset++;
  }
  for(var i = 0, table; table = tables[i]; i++)
   ASPx.SetStyles(table, savedStyles[i + offset]);
 },
 TryGetColumnIndex: function(cell) {
  var rowId = cell.parentNode.id;
  if(rowId.indexOf(ASPx.GridViewConsts.DataRowID) > 0)
   return this.grid.GetColumnIndexByDataCell(cell);
  if(rowId.indexOf(ASPx.GridViewConsts.HeaderRowID) > 0)
   return this.grid.GetColumnIndexByHeaderCell(cell);
  if(rowId.indexOf(ASPx.GridViewConsts.FooterRowID) > 0)
   return this.GetColumnIndexByFooterCell(cell);
  return -1;
 },
 GetColumnIndexByFooterCell: function(cell) {
  if(this.GetLayoutHelper().GetHasFooterRowTemplate())
   return -1;
  var cellIndex = cell.cellIndex;
  var row = cell.parentNode;
  for(var c, i = 0; c = row.cells[i]; i++) {
   if(c == cell) break;
   if(c.colSpan > 1)
    cellIndex += c.colSpan - 1;
  }
  return this.grid.GetLayoutHelper().GetColumnIndex(cellIndex, -1, -1);
 },
 DecreaseCellColSpan: function(cell){
  if(!cell) return;
  if(!cell.originalColSpan)
   cell.originalColSpan = cell.colSpan;
  if(cell.colSpan > 1)
   this.DecreaseCellColSpanInternal(cell);
 },
 DecreaseCellColSpanInternal: function(cell) {
  var isSpannedCell = this.grid.GetLayoutHelper().IsSpannedCell(cell);
  if(!isSpannedCell)
   this.DecreaseCellColSpanCore(cell);
  else
   this.DecreaseSpannedCellColSpan(cell);
 },
 DecreaseSpannedCellColSpan: function(cell) {
  var spannedFirstDecreaseSkipped = cell.spannedFirstDecreaseSkipped;
  if(spannedFirstDecreaseSkipped)
   this.DecreaseCellColSpanCore(cell);
  else
   cell.spannedFirstDecreaseSkipped = true;
 },
 DecreaseCellColSpanCore: function(cell) {
  cell.colSpan = cell.colSpan - 1;
 },
 RestoreCellColSpan: function(cell) {
  if(!cell || !cell.originalColSpan)
   return;
  cell.colSpan = cell.originalColSpan;
  if(cell.spannedFirstDecreaseSkipped)
   cell.spannedFirstDecreaseSkipped = false;
 },
 ForEachCell: function(table, method, context){
  context = context || this;
  var shouldBreak = false;
  for(var i = 0; i < table.rows.length; i++){
   for(var j = 0; j < table.rows[i].cells.length; j++){
    var cell = table.rows[i].cells[j];
    shouldBreak = method.call(context, cell);
    if(shouldBreak)
     break;
   }
   if(shouldBreak)
    break;
  }
 },
 GetAdaptiveColumnsOrder: function() {
  return this.grid.adaptiveColumnsOrder;
 },
 ShowAdaptiveColumns: function(){
  this.adaptiveHiddenColumns = [];
  for(var i = 0; i < this.GetAdaptiveColumnsOrder().length; i++)
   this.UpdateAdaptiveColumnVisibility(this.GetAdaptiveColumnsOrder()[i], true);
  this.hasAdaptiveElements = false;
 },
 ShowNextAdaptiveColumn: function() {
  if(this.adaptiveHiddenColumns.length === 0)
   return false;
  var columnIndex = this.adaptiveHiddenColumns.pop();
  this.UpdateAdaptiveColumnVisibility(columnIndex, true);
  this.hasAdaptiveElements = this.adaptiveHiddenColumns.length !== 0;
  this.UpdateAdaptivitySelector();
  return true;
 },
 HideAdaptiveColumns: function(columnsToHide) {
  if(columnsToHide.length === 0)
   return;
  for(var i = 0; i < columnsToHide.length; i++)
   this.UpdateAdaptiveColumnVisibility(columnsToHide[i], false);
  this.hasAdaptiveElements = true;
 },
 HideAllAdaptiveColumns: function() {
  var columnWasHidden = false;
  do {
   columnWasHidden = this.HideNextAdaptiveColumn();
  } while(columnWasHidden);
 },
 HideNextAdaptiveColumn: function() {
  var columnIndex = this.GetNextAdaptiveColumnIndex();
  if(columnIndex === -1)
   return false;
  this.UpdateAdaptiveColumnVisibility(columnIndex, false);
  this.hasAdaptiveElements = true;
  this.UpdateAdaptivitySelector();
  return true;
 },
 GetNextAdaptiveColumnIndex: function() {
  for(var i = 0; i < this.GetAdaptiveColumnsOrder().length - 1; i++) {
   var columnIndex = this.GetAdaptiveColumnsOrder()[i];
   var column = this.GetColumn(columnIndex);
   if(column.adaptiveHidden) continue;
   if(ASPx.Data.ArrayIndexOf(this.GetVisibleColumnIndices(), columnIndex) == -1) continue;
   return columnIndex;
  }
  return -1;
 },
 UpdateAdaptiveColumnVisibility: function(columnIndex, visible) {
  var elementsToHide = this.GetElementsToHide(columnIndex);
  for(var i = 0; i < elementsToHide.length; i++) {
   var action = visible ? ASPx.RemoveClassNameFromElement : ASPx.AddClassNameToElement;
   action(elementsToHide[i], ASPx.GridViewConsts.AdaptiveHiddenCssClass);
   this.grid.ChangeCellInitialClass(elementsToHide[i], ASPx.GridViewConsts.AdaptiveHiddenCssClass, !visible);
  }
  var elementsToSpan = this.GetElementsToSpan(columnIndex);
  for(var i = 0; i < elementsToSpan.length; i++) {
   var action = visible ? this.RestoreCellColSpan.bind(this) : this.DecreaseCellColSpan.bind(this);
   action(elementsToSpan[i]);
  }
  this.GetColumn(columnIndex).adaptiveHidden = !visible;
  if(visible)
   ASPx.Data.ArrayRemove(this.adaptiveHiddenColumns, columnIndex);
  else
   this.adaptiveHiddenColumns.push(columnIndex);
 },
 GetElementsToHide: function(columnIndex) {
  var result = [
   this.grid.GetFilterCell(columnIndex),
   this.grid.GetFooterCell(columnIndex)
  ].concat(
   this.grid.GetArmatureCells(columnIndex),
   this.grid.GetDataTableAccessibilityHeaderCells(columnIndex),
   this.GetAdaptiveColumnHeaderHideInfo(columnIndex).toHide
  );
  if(this.grid.IsInlineEditMode())
   result.push(this.grid.GetEditingCell(columnIndex));
  var visibleIndices = this.GetVisibleRowsIndicesForAdaptivity();
  for(var i = 0; i < visibleIndices.length; i++) {
   var visibleIndex = visibleIndices[i];
   result.push(this.GetDataCell(visibleIndex, columnIndex));
  }
  var groupFooterVisibleIndices = this.grid.GetGroupFooterVisibleIndices();
  for(var i = 0; i < groupFooterVisibleIndices.length; i++) {
   var visibleIndex = groupFooterVisibleIndices[i];
   result.push(this.GetLayoutHelper().GetGroupFooterCell(visibleIndex, columnIndex));
  }
  var emptyPagerRows = this.GetEmptyPagerRows();
  for(var i = 0; i < emptyPagerRows.length; i++)
   result.push(emptyPagerRows[i].cells[this.grid.GetDataCellIndex(columnIndex)]);
  return result;
 },
 GetElementsToSpan: function(columnIndex) {
  var result = [
   this.grid.GetEditingErrorCell(),
   this.grid.GetEditFormTableCell(),
   this.grid.GetEmptyDataItemCell()
  ].concat(
   this.GetAdaptiveColumnHeaderHideInfo(columnIndex).toSpan
  ).concat(
   this.GetFixedGroupPlaceholders()
  );
  if(this.IsLeafColumn(columnIndex))
   result.push(this.grid.GetSampleAdaptiveDetailCell());
  var batchEditHelperOwner = this.grid.GetBatchEditHelperOwner();
  result = result.concat(this.grid.GetBatchEditPreviewChangesGroupCells());
  var visibleIndices = this.GetVisibleRowsIndicesForAdaptivity();
  var parentCellsColumnIndices = this.grid.GetColumnHelper().GetParentColumnIndices(columnIndex);
  for(var i = 0; i < visibleIndices.length; i++) {
   var visibleIndex = visibleIndices[i];
   result.push(this.grid.GetGroupCell(visibleIndex));
   result.push(this.grid.GetPreviewCell(visibleIndex));
   result.push(this.grid.GetDetailCell(visibleIndex));
   if(this.IsLeafColumn(columnIndex))
    result.push(this.GetAdaptiveDetailCell(visibleIndex));
   if(batchEditHelperOwner) {
    var errorRow = batchEditHelperOwner.GetRecordErrorByVI(visibleIndex);
    result.push(this.grid.GetEditingErrorCell(errorRow));
   }
   var parentCells = this.GetParentDataCells(parentCellsColumnIndices, visibleIndex);
   var cellsToSpan = parentCells.filter(this.IsColSpanReassignmentRequired.aspxBind(this));
   result = result.concat(cellsToSpan);
  }
  return result;
 },
 GetParentDataCells: function(parentCellsColumnIndices, visibleIndex) {
  return parentCellsColumnIndices.map(function(index) {
   return this.GetDataCell(visibleIndex, index);
  }.bind(this));
 },
 ProcessDataCellsRightBorder: function() {
  var layoutHelper = this.GetLayoutHelper();
  var columnHelper = this.grid.GetColumnHelper();
  var columnIndices = columnHelper.GetVisibleColumnIndices().filter(function(i) { return columnHelper.IsColumnInRightTreeLine(i); });
  var visibleIndices = this.GetVisibleRowsIndicesForAdaptivity();
  var lastColumnIndex = columnIndices[columnIndices.length - 1];
  var rightSideDataCells = visibleIndices.map(function(i) { return layoutHelper.GetCell(i, lastColumnIndex, ASPx.GridViewRowType.Data); });
  var adaptiveIndentCells = visibleIndices.map(function(i) { return ASPx.GetNodeByClassName(this.GetAdaptiveDataRow(i), ASPx.GridViewConsts.AdaptiveIndentCellCssClass); }.bind(this));
  if(layoutHelper.GetShowColumnHeaders()) {
   var rightSideHeaderCells = columnIndices.map(function(i) { return layoutHelper.GetHeaderCell(i); });
   var headerAdaptiveIndentCells = layoutHelper.GetHeaderRows().map(function(row) { return ASPx.GetNodeByClassName(row, ASPx.GridViewConsts.AdaptiveIndentCellCssClass); });
   rightSideDataCells = [ ].concat(rightSideDataCells, rightSideHeaderCells);
   adaptiveIndentCells = [ ].concat(adaptiveIndentCells, headerAdaptiveIndentCells);
  }
  var hasRightBorderAtDataCell = this.HasAnyAdaptiveElement();
  var dataCellAction = hasRightBorderAtDataCell ? ASPx.RemoveClassNameFromElement : ASPx.AddClassNameToElement;
  var adaptiveIndentAction = hasRightBorderAtDataCell ? ASPx.AddClassNameToElement : ASPx.RemoveClassNameFromElement;
  rightSideDataCells.forEach(function(cell) { dataCellAction(cell, ASPx.GridViewConsts.RemoveRightBorderClassName); });
  adaptiveIndentCells.forEach(function(cell) { adaptiveIndentAction(cell, ASPx.GridViewConsts.RemoveRightBorderClassName); });
 }
});
var GridViewAutoTableLayoutAdaptivityHelper = ASPx.CreateClass(GridViewResponsiveModeAdaptivityHelperBase, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
 },
 CreateCalculator: function() {
  return new GridViewAutoTableLayoutAdaptivityCalculator(this);
 },
 GetAdaptiveIndent: function() {
  var startVisibleIndex = this.grid.GetTopVisibleIndex();
  var rows = this.GetAdaptiveItems(startVisibleIndex);
  if(rows.length === 0)
   return null;
  return ASPx.GetNodeByClassName(rows[0], ASPx.GridViewConsts.AdaptiveIndentCellCssClass);
 },
 CollapseTables: function(tables) {
  var savedStyles = GridViewResponsiveModeAdaptivityHelperBase.prototype.CollapseTables.call(this, tables);
  this.EnsureDetailRowsAdaptiveButtonWidth();
  return savedStyles;
 },
 EnsureDetailRowsAdaptiveButtonWidth: function() {
  var table = this.GetMainTable();
  if(table.detailButtonsEnsured)
   return;
  var width = -1;
  var indices = this.GetVisibleRowsIndicesForAdaptivity();
  for(var i = 0; i < indices.length; i++) { 
   var adaptiveRowButtons = this.GetShowAdaptiveDetailButtons(indices[i]);
   if(adaptiveRowButtons.length > 0) {
    var button = adaptiveRowButtons[0];
    var offsetWidth = button.offsetWidth;
    if(offsetWidth > 0) {
     width = offsetWidth + ASPx.GetLeftRightBordersAndPaddingsSummaryValue(button.parentNode);
     break;
    }
   }
  }
  var strut = null; 
  for(var i = 0; i < indices.length; i++) {
   var detailRow = this.grid.GetDetailRow(indices[i]);
   var indentCell = ASPx.GetChildByClassName(detailRow, ASPx.GridViewConsts.AdaptiveIndentCellCssClass);
   if(!indentCell) continue;
   if(!strut) {
    width -= ASPx.GetLeftRightBordersAndPaddingsSummaryValue(indentCell);
    strut = ASPx.CreateHtmlElement("DIV", { width: width, height: 1, visibility: "hidden" });
   }
   indentCell.appendChild(strut.cloneNode());
  }
  table.detailButtonsEnsured = true;
 }
});
var GridViewFixedTableLayoutAdaptivityHelper = ASPx.CreateClass(GridViewResponsiveModeAdaptivityHelperBase, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
 },
 CreateCalculator: function() {
  return new GridViewFixedTableLayoutAdaptivityCalculator(this);
 },
 GetAdaptiveIndent: function() {
  var mainTable = this.GetMainTable();
  return this.GetArmRowAdaptiveIndent(mainTable);
 },
 PrepareForCalculation: function(tables) {
  for(var i = 0, table; table = tables[i]; i++) {
   this.HideCellsWithColSpan(table);
   this.ChangeAdaptiveIndentColumnWidth(table);  
  }
 },
 RestoreAfterCalculation: function(tables) {
  for(var i = 0, table; table = tables[i]; i++) {
   this.RestoreAdaptiveIndentColumnWidth(table);  
   this.RestoreCellsVisibility(table);
  }
 },
 HideCellsWithColSpan: function(table) {
  this.ForEachCell(table, 
   function(cell) { 
    if(cell.colSpan > 1 && this.CanHideCellWithColSpan(cell))
     ASPx.Attr.ChangeStyleAttribute(cell, "display", "none");
   });
 },
 CanHideCellWithColSpan: function(cell) {
  return !ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.HeaderCellCssClass) &&
    (this.GetLayoutHelper().GetHasFooterRowTemplate() || !ASPx.ElementContainsCssClass(cell.parentNode, ASPx.GridViewConsts.FooterRowClass));
 },
 RestoreCellsVisibility: function(table){
  this.ForEachCell(table, 
   function(cell) { 
    ASPx.Attr.RestoreStyleAttribute(cell, "display"); 
   });
 },
 ChangeAdaptiveIndentColumnWidth: function(table) { 
  if(!ASPx.Browser.IE && !ASPx.Browser.Edge && !ASPx.Browser.Firefox)
   return;
  var adaptiveIndent = this.GetArmRowAdaptiveIndent(table);
  if(!adaptiveIndent || !ASPx.GetElementDisplay(adaptiveIndent))
   return;
  var isVisibleColumnsHasPercentageWidth = true;
  var columnIndices = this.GetVisibleColumnIndices();
  for(var i = 0; i < columnIndices.length; i++) {
   var columnIndex = columnIndices[i];
   if(this.GetColumn(columnIndex).adaptiveHidden)
    continue;
   var armCell = this.grid.GetArmatureCells(columnIndex)[0];
   isVisibleColumnsHasPercentageWidth &= ASPx.IsPercentageSize(armCell.style.width);
  }
  if(isVisibleColumnsHasPercentageWidth) {
   this.savedAdaptiveIndentWidth = adaptiveIndent.style.width;
   adaptiveIndent.style.width = "1%";
  }
 },
 RestoreAdaptiveIndentColumnWidth: function(table) {
  if(!ASPx.IsExists(this.savedAdaptiveIndentWidth))
   return;
  var adaptiveIndent = this.GetArmRowAdaptiveIndent(table);
  adaptiveIndent.style.width = this.savedAdaptiveIndentWidth;
  delete this.savedAdaptiveIndentWidth;
 },
 CollapseTables: function(tables) {
  var savedStyles = GridViewResponsiveModeAdaptivityHelperBase.prototype.CollapseTables.call(this, tables);
  this.GetMainElement().style.maxWidth = "";
  return savedStyles;
 },
 GetCollapsedTableStyle: function(table, savedStyle) {
  var collapsedStyle = GridViewResponsiveModeAdaptivityHelperBase.prototype.GetCollapsedTableStyle.call(this, table, savedStyle);
  if(this.GetColumnAdjustor().ShouldAdjustColumns())
   this.GetColumnAdjustor().RestoreTableRenderColumnWidths(table);
  return collapsedStyle;
 },
 GetColumnAdjustor: function () {
  return this.grid.GetColumnAdjustor();
 }
});
var GridViewAdaptiveModeAdaptivityHelper = ASPx.CreateClass(GridViewColumnAdaptivityHelperBase, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
  this.adaptiveLayoutColumnIndices = null;
  this.adaptiveFormlayoutColCount = undefined;
  this.hasAdaptiveDetailsFormLayout = null;
 },
 CreateCalculator: function() {
  return new GridViewAdaptiveModeCalculator(this);
 },
 ResetAdaptivity: function() {
  this.UpdateAdaptiveViewVisibility(false);
  GridViewColumnAdaptivityHelperBase.prototype.ResetAdaptivity.call(this);
 },
 CanClearParentElementOnAdaptiveDetailsContentRestore: function() {
  return !this.hasAdaptiveDetailsFormLayout;
 },
 ApplySettings: function(data) {
  GridViewColumnAdaptivityHelperBase.prototype.ApplySettings.call(this, data);
  this.adaptiveLayoutColumnIndices = data.adaptiveLayoutColumnIndices;
  this.adaptiveFormlayoutColCount = 1; 
 },
 GetAdaptiveFormLayoutColCount: function() { return this.adaptiveFormlayoutColCount; },
 CanCreateRowAdaptiveDetailsOnUpdating: function() {
  return this.HasAnyAdaptiveElement();
 },
 UpdateDetailButton: function(visibleIndex, moveFromDataRow) {
  var source = this.grid.GetDetailButtonCell(visibleIndex, !moveFromDataRow);
  var target = this.grid.GetDetailButtonCell(visibleIndex, moveFromDataRow);
  if(source && target)
   ASPx.MoveChildrenToElement(source, target);
 },
 GetAdaptivitySelectorEnabledCssClass: function() {
  return ASPx.GridViewConsts.AdaptivityWithLimitEnabledCssClass;
 },
 UpdateAdaptiveViewVisibility: function(visible) {
  this.UpdateDataRowsVisibility(!visible);
  this.UpdateHeaderPanelVisibility(visible);
  this.UpdateFilterRowVisibility(!visible);
  this.UpdateAdaptiveFoorerPanelVisibility(visible);
 },
 UpdateDataRowsVisibility: function(visible) {
  var indices = this.GetVisibleRowsIndicesForAdaptivity();
  var classNameAction = visible ? ASPx.RemoveClassNameFromElement : ASPx.AddClassNameToElement;
  var changeRowVisibility = function(row) { classNameAction(row, ASPx.GridViewConsts.AdaptiveHiddenCssClass); };
  for(var i = 0; i < indices.length; i++) {
   var index = indices[i];
   var rows = this.GetAdaptiveItems(index);
   rows.forEach(changeRowVisibility);
  }
  for(var i = 0; i < this.GetColumnCount(); i++)
   this.GetColumn(i).adaptiveHidden = !visible;
  this.hasAdaptiveElements = !visible;
 },
 UpdateHeaderPanelVisibility: function(visible) {
  if(visible)
   this.ShowAdaptiveHeaderPanel();
  else
   this.HideAdaptiveHeaderPanel();
 },
 UpdateFilterRowVisibility: function(visible) {
  ASPx.SetElementDisplay(this.grid.GetFilterRow(), visible);
 },
 HideAdaptiveHeaderPanel: function(){
  var adaptivePanel = this.GetAdaptiveHeaderPanel();
  if(adaptivePanel){
   this.MoveHeadersToHeaderRow();
   this.RestoreAdaptiveHeadersHeight();
   ASPx.SetElementDisplay(adaptivePanel, false);
   this.UpdateHeaderRowsVisibility(true);
   }
 },
 ShowAdaptiveHeaderPanel: function(){
  var adaptivePanel = this.GetAdaptiveHeaderPanel();
  if(adaptivePanel){
   this.MoveHeadersToAdaptivePanel();
   ASPx.SetElementDisplay(adaptivePanel, true);
   this.CorrectAdaptiveHeadersHeight();
   this.UpdateHeaderRowsVisibility(false);
  }
 },
 UpdateAdaptiveFoorerPanelVisibility: function(visible){
  ASPx.SetElementDisplay(this.GetAdaptiveFooterPanel(), visible);
  var footerElement = this.grid.GetFooterScrollContainer() || this.grid.GetFooterRow();
  ASPx.SetElementDisplay(footerElement, !visible);
 },
 UpdateHeaderRowsVisibility: function(visible){
  if(!this.grid.showColumnHeaders) 
   return;
  var headerScroll = this.grid.GetHeaderScrollContainer();
  if(headerScroll) {
   ASPx.SetElementDisplay(headerScroll, visible);
   return;
  }
  var headerRowCount = Math.max(this.grid.GetHeaderMatrix().GetRowCount(), 1);
  for(var i = 0; i < headerRowCount; i++) 
   ASPx.SetElementDisplay(this.grid.GetHeaderRow(i), visible);
 },
 GetVisibleHeaderCells: function(){
  var result = [];
  var indices = this.GetVisibleColumnIndices();
  for(var i = 0; i < indices.length; i++){
   var headerCell = this.GetHeader(indices[i]);
   if(headerCell)
    result.push(headerCell);
  }
  return result;
 },
 MoveHeadersToHeaderRow: function(){
  ASPx.Data.ForEach(this.GetVisibleHeaderCells(), function(headerCell){
   this.MoveHeaderToHeaderRow(headerCell);
  }.aspxBind(this));
 },
 MoveHeadersToAdaptivePanel: function(){
  this.SaveHeadersPositionInfo();
  ASPx.Data.ForEach(this.GetVisibleHeaderCells(), function(headerCell){
   this.MoveHeaderToAdaptiveHeaderPanel(headerCell);
  }.aspxBind(this));
 },
 SaveHeadersPositionInfo: function(){
  ASPx.Data.ForEach(this.GetVisibleHeaderCells(), function(headerCell){
   headerCell.savedCellIndex = headerCell.cellIndex;
   headerCell.savedHeaderRow = headerCell.parentElement;
  }.aspxBind(this));
 },
 MoveHeaderToHeaderRow: function(headerCell){
  if(headerCell.savedHeaderRow && headerCell.adaptiveMoved){
   var headerRow = headerCell.savedHeaderRow;
   if(headerCell.savedCellIndex >= 0 && headerCell.savedCellIndex < headerRow.cells.length)
    headerRow.insertBefore(headerCell, headerRow.cells[headerCell.savedCellIndex]);   
   else
    headerRow.appendChild(headerCell);
   ASPx.Attr.RestoreStyleAttribute(headerCell, "width");
   headerCell.adaptiveMoved = false;
  }
 },
 MoveHeaderToAdaptiveHeaderPanel: function(headerCell){
  var container = this.GetAdaptiveHeaderContainer(this.grid.getColumnIndex(headerCell.id), this.GetAdaptiveHeaderPanel());
  ASPx.ChangeElementContainer(headerCell, container);
  ASPx.Attr.ChangeStyleAttribute(headerCell, "width", "");
  headerCell.adaptiveMoved = true;
 },
 CorrectAdaptiveHeadersHeight: function(){
  var cells = this.GetVisibleHeaderCells();
  var maxHeight = 0;
  for(var i = 0; i < cells.length; i++){
   var headerContentHeight = cells[i].clientHeight - ASPx.GetTopBottomPaddings(cells[i]);
   if(maxHeight < headerContentHeight) 
    maxHeight = headerContentHeight;
  }
  for(var i = 0; i < cells.length; i++){
   ASPx.Attr.ChangeStyleAttribute(cells[i], "height", maxHeight + "px");
  }
 },
 RestoreAdaptiveHeadersHeight: function(){
  ASPx.Data.ForEach(this.GetVisibleHeaderCells(), function(headerCell){
   ASPx.Attr.RestoreStyleAttribute(headerCell, "height");
  }.aspxBind(this));
 },
 CreateAdaptiveDetailsContent: function(parentElement, visibleIndex) {
  this.CheckAdaptiveDetailsFormLayout(parentElement);
  if(this.hasAdaptiveDetailsFormLayout)
   this.CreateAdaptiveDetailsFormLayoutContent(parentElement, visibleIndex);
  else
   GridViewColumnAdaptivityHelperBase.prototype.CreateAdaptiveDetailsContent.call(this, parentElement, visibleIndex);
 },
 CheckAdaptiveDetailsFormLayout: function(parentElement) {
  if(this.hasAdaptiveDetailsFormLayout !== null) return;
  this.hasAdaptiveDetailsFormLayout = this.GetAdaptiveDetailsFormLayout(parentElement) != null;
 },
 GetAdaptiveDetailsFormLayout: function(parentElement) {
  var formLayoutElement = this.GetAdaptiveDetailsFormLayoutElement(parentElement);
  return formLayoutElement ? ASPx.GetControlCollection().Get(formLayoutElement.id) : null;
 },
 GetAdaptiveDetailsFormLayoutElement: function(parentElement) {
  if(!ASPx.FormLayoutConsts) return null;
  return ASPx.GetChildByPartialClassName(parentElement,  ASPx.FormLayoutConsts.FORM_LAYOUT_PARTIAL_CLASS_NAME);
 },
 CreateAdaptiveDetailsFormLayoutContent: function(parentElement, visibleIndex){
  this.CreateAdaptiveDetailsFormLayoutClientObject(parentElement, visibleIndex);
  for(var i = 0; i < this.GetColumnCount(); i++) {
   var column = this.GetColumn(i);
   if(!column || !column.adaptiveHidden) continue;
   var sampleDataCell = this.GetDataCell(visibleIndex, column.index);
   var dataCell = ASPx.GetNodeByClassName(parentElement, ASPx.GridViewConsts.AdaptiveDetailLayoutItemContentCssClass + column.index);
   if(dataCell) {
    if(ASPx.Data.ArrayIndexOf(this.GetVisibleColumnIndices(), column.index) > -1) {
     dataCell.innerHTML = "";
     ASPx.MoveChildrenToElement(sampleDataCell, dataCell);
     this.UpdateAdaptiveDetailsFormLayoutNestedControl(dataCell, visibleIndex);
     dataCell.columnIndex = column.index;
     this.StoreAdaptiveDetailCell(parentElement, column.index, dataCell);
    }
    else{
     var itemElement = this.GetAdaptiveDetailsFormLayoutItemElement(dataCell);
     if(itemElement.tagName === "TABLE")
      itemElement.style.visibility = "hidden";
     else
      itemElement.style.display = "none";
    }
   }
   if(this.GetBatchEditHelper())
    this.GetBatchEditHelper().UpdateItemByVI(visibleIndex, [ column.index ], false, false, false);
  }
 },
 GetAdaptiveDetailsFormLayoutItemElement: function(dataCell) {
  return ASPx.GetParent(dataCell, function(el) { return !!el.id; });
 },
 UpdateAdaptiveDetailsFormLayoutNestedControl: function(dataCell, visibleIndex){
  var itemElement = ASPx.GetParentByPartialClassName(dataCell, ASPx.FormLayoutConsts.ITEM_SYSTEM_CLASS_NAME);
  if(itemElement) ASPxClientFormLayout.UpdateNestedControlTypeClassName(itemElement, this.grid.IsEditingItem(visibleIndex));
 },
 CreateAdaptiveDetailsFormLayoutClientObject: function(parentElement, visibleIndex){
  if(parentElement.formLayout) return;
  var sampleFormLayout = this.GetAdaptiveDetailsFormLayout(parentElement);
  if(sampleFormLayout) {
   var formLayoutName = sampleFormLayout.name + visibleIndex;
   this.GetAdaptiveDetailsFormLayoutElement(parentElement).id = formLayoutName;
   var formLayout = new ASPxClientFormLayout(formLayoutName);
   formLayout.adaptivityMode = sampleFormLayout.adaptivityMode;
   formLayout.switchToSingleColumnAtWindowInnerWidth = sampleFormLayout.switchToSingleColumnAtWindowInnerWidth;
   formLayout.alignItemCaptionsInAllGroups = sampleFormLayout.alignItemCaptionsInAllGroups;
   formLayout.leftAndRightCaptionsWidth = sampleFormLayout.leftAndRightCaptionsWidth;
   formLayout.showItemCaptionColon = sampleFormLayout.showItemCaptionColon;
   formLayout.AfterCreate();
   formLayout.Initialize();
   formLayout.AfterInitialize();
   parentElement.formLayout = formLayout;
  }
 },
 GetAdaptiveHeaderPanel: function() { return this.grid.GetAdaptiveHeaderPanel(); }
});
var GridViewColumnAdaptivityCalculatorBase = ASPx.CreateClass(null, {
 constructor: function(layoutHelper) {
  this.grid = layoutHelper.grid;
  this.forceRecalculateAdaptivity = false;
  this.layout = layoutHelper;
 },
 CalculateAdaptivity: function(forceCalculate) {
  if(!forceCalculate && !this.RequireRecalculateAdaptivity())
   return;
  this.layout.ResetAdaptivity();
  this.CalculateAdaptivityCore();
  this.layout.UpdateAdaptivity();
 },
 ApplySettings: function(data) {
 },
 RequireRecalculateAdaptivity: function() {
  return !this.grid.isInitialized || this.forceRecalculateAdaptivity;
 },
 CalculateAdaptivityCore: function() {
 }
});
var GridViewResponsiveModeCalculatorBase = ASPx.CreateClass(GridViewColumnAdaptivityCalculatorBase, {
 constructor: function(layoutHelper) {
  this.constructor.prototype.constructor.call(this, layoutHelper);
  this.gridWidth = -1;
  this.containerWidth = 0;
  this.allowTextTruncationInAdaptiveMode = null;
  this.sizes = [];
  this.calcResultInfo = null;
  this.containerWidth = 0;
  this.bordersWidth = 0;
  this.indentWidth = 0;
  this.utils = this.CreateCalculationUtils();
 },
 CalculateAdaptivity: function(forceCalculate) {
  if(this.ShouldHideAllAdaptiveColumns())
   this.layout.HideAllAdaptiveColumns();
  else
   GridViewColumnAdaptivityCalculatorBase.prototype.CalculateAdaptivity.call(this, forceCalculate);
 },
 RequireRecalculateAdaptivity: function() {
  if(GridViewColumnAdaptivityCalculatorBase.prototype.RequireRecalculateAdaptivity.call(this))
   return true;
  return !this.grid.isInsideHierarchyAdjustment || this.GridWidthChanged();
 },
 CalculateAdaptivityCore: function() {
  var tables = this.layout.GetAllTables();
  this.GetGridViewAdjuster().SaveDocumentScrollPosition();
  this.CalculateAdaptivityInternal(tables);
  this.GetGridViewAdjuster().RestoreDocumentScrollPosition();
 },
 ApplySettings: function(data) {
  this.allowTextTruncationInAdaptiveMode = data.allowTextTruncationInAdaptiveMode;
  GridViewColumnAdaptivityCalculatorBase.prototype.ApplySettings.call(this, data);
 },
 CalculateAdaptivityInternal: function(tables) {
  var savedStyles = this.layout.CollapseTables(tables);
  this.ReadSizes(tables);
  this.CalculateColumns();
  this.layout.ExpandTables(tables, savedStyles);
 },
 ReadSizes: function(tables) {
  var mainTable = this.layout.GetMainTable(),
   mainElement = this.layout.GetMainElement(),
   indent = this.layout.GetAdaptiveIndent();
  this.containerWidth = mainElement.offsetWidth;
  this.bordersWidth = ASPx.GetHorizontalBordersWidth(mainElement) + ASPx.GetLeftRightBordersAndPaddingsSummaryValue(mainTable);
  this.indentWidth = indent ? (indent.scrollWidth + ASPx.GetHorizontalBordersWidth(indent)) : 0;
  this.sizes = this.GetColumnSizes(tables);
 },
 CalculateColumns: function() {
  this.calcResultInfo = this.CalculateColumnsToBeHidden();
  this.layout.HideAdaptiveColumns(this.calcResultInfo.columnsToHide);
 },
 CalculateColumnsToBeHidden: function() {
 },
 GetColumnSizes: function(tables) {
 },
 GetColumns: function() {
  return this.grid.columns;
 },
 GetDataCellIndex: function(columnIndex) {
  return this.grid.GetDataCellIndex(columnIndex);
 },
 AllowTextTruncationInAdaptiveMode: function(columnIndex) {
  return this.allowTextTruncationInAdaptiveMode[columnIndex];
 },
 CreateCalculationUtils: function() {
  return new GridViewColumnAdaptivityCalculationUtils(this);
 },
 ShouldHideAllAdaptiveColumns: function() {
  return GetGridViewAdaptivityAdjuster().CheckNeedCollapseDetailGrid(this.grid);
 },
 GridWidthChanged: function() {
  var result = false;
  if(this.IsWidthValueSetInPercentage()) {
   var containerWidth = this.grid.percentSizeConfig.markerWidth;
   result = containerWidth !== this.containerWidth;
   this.containerWidth = containerWidth;
  }
  if(!result) {
   var gridWidth = this.layout.GetMainElement().clientWidth;
   result = this.gridWidth !== gridWidth;
   this.gridWidth = gridWidth;
  }
  return result;
 },
 GetGridViewAdjuster: function() {
  return ASPx.GetGridViewAdjuster();
 },
 IsWidthValueSetInPercentage: function() {
  return this.grid.widthValueSetInPercentage;
 }
});
var GridViewAutoTableLayoutAdaptivityCalculator = ASPx.CreateClass(GridViewResponsiveModeCalculatorBase, {
 constructor: function(layoutHelper) {
  this.constructor.prototype.constructor.call(this, layoutHelper);
  this.parentNodeClientWidth = 0;
 },
 CalculateColumnsToBeHidden: function() {
  return this.utils.Auto_CalculateColumnsToBeHidden(this.sizes, this.containerWidth, this.bordersWidth, this.indentWidth);
 },
 GetColumnSizes: function(tables) {
  var sizes = this.GetDataColumnSizes(tables);
  var dataColumnSummaryWidth = this.utils.Auto_GetGridWidth(sizes);
  var restWidth = 0;
  for(var i = 0, table; table = tables[i]; i++) {
   var tableRestWidth = table.clientWidth - dataColumnSummaryWidth;
   if(restWidth < tableRestWidth)
    restWidth = tableRestWidth;
  }
  var indent = this.layout.GetAdaptiveIndent();
  if(indent)
   restWidth -= indent.offsetWidth;
  if(restWidth > 0) {
   var info = {
    index: -3, 
    width: restWidth
   };
   sizes.push(info);
  }
  return sizes;
 },
 GetDataColumnSizes: function(tables) {
  var sizes = [];
  var columns = this.GetColumns();
  for(var i = 0, table; table = tables[i]; i++) {
   if(table.rows.length === 0)
    continue;
   var row = table.rows[0];
   for(var j = 0, column; column = columns[j]; j++) {
    if(!column.visible)
     continue;
    var cellIndex = this.GetDataCellIndex(j);
    if(cellIndex === -1)
     continue;
    var cell = row.cells[cellIndex];
    if(!cell)
     continue;
    var width = cell.offsetWidth;
    var info = {
     index: j,
     width: width
    };
    sizes.push(info);
   }
  }
  return sizes;
 },
 ReadSizes: function(tables) {
  this.parentNodeClientWidth = this.GetParentNodeClientWidth();
  GridViewResponsiveModeCalculatorBase.prototype.ReadSizes.call(this, tables);
 },
 CalculateAdaptivityInternal: function(tables) {
  GridViewResponsiveModeCalculatorBase.prototype.CalculateAdaptivityInternal.call(this, tables);
  if(!this.IsWidthValueSetInPercentage() || this.calcResultInfo.overflow)
   return;
  var parentNodeNewClientWidth = this.GetParentNodeClientWidth();
  if(parentNodeNewClientWidth < this.parentNodeClientWidth) {
   this.layout.ShowAdaptiveColumns();
   var diff = this.parentNodeClientWidth - parentNodeNewClientWidth;
   var percWidthStr = this.GetGridPercentWidthValue();
   var percWidth = ASPx.PercentageToFloat(percWidthStr);
   var containerWidthDiff = percWidth * diff;
   this.containerWidth -= containerWidthDiff;
   this.CalculateColumns();
  }
  this.parentNodeClientWidth = parentNodeNewClientWidth;
 },
 GetGridPercentWidthValue: function() {
  return this.grid.percentSizeConfig.width;
 },
 GetParentNodeClientWidth: function() {
  return this.layout.GetMainElement().parentNode.clientWidth;
 }
});
var GridViewFixedTableLayoutAdaptivityCalculator = ASPx.CreateClass(GridViewResponsiveModeCalculatorBase, {
 constructor: function(layoutHelper) {
  this.constructor.prototype.constructor.call(this, layoutHelper);
  this.allowHideDataCellsByColumnMinWidth = false;
 },
 CalculateAdaptivityInternal: function(tables) {
  this.layout.PrepareForCalculation(tables);
  GridViewResponsiveModeCalculatorBase.prototype.CalculateAdaptivityInternal.call(this, tables);
  if(this.ShouldEnsureAdaptivityBestFit())
   this.EnsureAdaptivityBestFit(tables);
  this.layout.RestoreAfterCalculation(tables);
 },
 ShouldEnsureAdaptivityBestFit: function() {
  return !this.GetColumnAdjustor().HasRestrictions();
 },
 EnsureAdaptivityBestFit: function(tables) {
  var canShowColumns = true,
   canHideColumns = true;
  do {
   if(this.IsColumnsContentCut(tables)) {
    canShowColumns = false;
    if(!this.layout.HideNextAdaptiveColumn())
     canHideColumns = false;
   }
   else {
    canHideColumns = false;
    if(canShowColumns && !this.layout.ShowNextAdaptiveColumn())
     canShowColumns = false;
   }
  } while(canHideColumns || canShowColumns);
 },
 IsColumnsContentCut: function(tables) {
  if(this.GetGridOffsetWidth() > this.containerWidth)
   return true;
  for(var i = 0, table; table = tables[i]; i++) {
   if(this.IsColumnsContentCutCore(table))
    return true;
  }
  return false;
 },
 IsColumnsContentCutCore: function(table) {
  var result = false;
  this.layout.ForEachCell(table, function(cell) { 
   if(!this.NeedCheckCellContentCut(cell)) return;
   if(cell.colSpan == 1 && cell.offsetWidth < cell.scrollWidth) {
    result = true;
    return true;
   }
  }, this);
  return result;
 },
 NeedCheckCellContentCut: function(cell){
  if(ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.AdaptiveHiddenCssClass) || 
   (ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.HeaderCellCssClass) && cell.cellIndex < this.layout.GetIndentColumnCount()) || 
   ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.CommandColumnCellCssClass) ||
   ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.InlineEditCellCssClass) ||
   ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.DetailCellCssClass) ||
   ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.DetailButtonCellCssClass) ||
   ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.AdaptiveIndentCellCssClass) ||
   ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.IndentCellCssClass) ||
   ASPx.ElementContainsCssClass(cell.parentNode, ASPx.GridViewConsts.GroupRowCssClass)) return false;
  var columnIndex = this.layout.TryGetColumnIndex(cell);
  if(columnIndex > -1 && (this.allowTextTruncationInAdaptiveMode[columnIndex] || this.layout.GetColumn(columnIndex).isCommandColumn))
   return false;
  return true;
 },
 GetGridOffsetWidth: function() {
  var correction = this.layout.HasAnyAdaptiveElement() ? 0 : this.indentWidth;
  return this.layout.GetMainElement().offsetWidth - correction;
 },
 CalculateColumnsToBeHidden: function() {
  var resultInfo = this.utils.Fixed_CalculateColumnsToBeHidden(this.sizes, this.containerWidth, this.bordersWidth, this.indentWidth);
  if(this.ShouldEnsureAdaptivityBestFit())
   resultInfo.columnsToHide.pop();
  return resultInfo;
 },
 GetColumnSizes: function(tables) {
  var minContentWidths = this.GetColumnMinContentWidths(tables);
  var sizes = [];
  var armRow = this.layout.GetMainTable().rows[0];
  var columnInfos = this.GetColumnAdjustor().columnInfos;
  for(var columnInfo, i = 0; columnInfo = columnInfos[i]; i++) {
   var cellIndex = this.GetDataCellIndex(columnInfo.column.index);
   var armCell = armRow.cells[cellIndex];
   var ignoreContentWidth = this.ShouldIgnoreColumnContentWidth(columnInfo.column);
   var minContentWidth = 0;
   if(columnInfo.hasFixedWidth || !ignoreContentWidth) {
    minContentWidth = this.allowHideDataCellsByColumnMinWidth && columnInfo.minWidth > 0
     ? columnInfo.minWidth : (minContentWidths[i] || 0);
   }
   var isAlwaysCut = columnInfo.hasFixedWidth && !ignoreContentWidth && armCell.offsetWidth < minContentWidth;
   var info = ASPx.CloneObject(columnInfo);
   info.minContentWidth = minContentWidth;
   info.isAlwaysCut = isAlwaysCut;
   info.violation = null;
   sizes.push(info);
  }
  return sizes;
 },
 GetColumnMinContentWidths: function(tables) {
  var result = { };
  for(var i = 0, table; table = tables[i]; i++)
   this.ReadColumnMinContentWidths(table, result);
  return result;
 },
 ReadColumnMinContentWidths: function(table, widthsObj) {
  this.layout.ForEachCell(table, function(cell) {
   if(!this.NeedCheckCellContentCut(cell))
    return;
   if(cell.colSpan !== 1)
    return;
   var columnIndex = this.layout.TryGetColumnIndex(cell);
   if(columnIndex === -1)
    return;
   var maxWidth = widthsObj[columnIndex] || 0;
   var width = cell.scrollWidth + ASPx.GetHorizontalBordersWidth(cell);
   if(maxWidth < width)
    widthsObj[columnIndex] = width;
  }, this);
 },
 ShouldIgnoreColumnContentWidth: function(column) {  
  return column.isCommandColumn || this.AllowTextTruncationInAdaptiveMode(column.index);
 },
 CalculateColumns: function() {
  GridViewResponsiveModeCalculatorBase.prototype.CalculateColumns.call(this);
  if(this.GetColumnAdjustor().ShouldAdjustColumns()) {
   var displayedColumnInfos = this.GetColumnAdjustor().columnInfos;
   if(this.calcResultInfo.columnsToHide.length > 0) {
    displayedColumnInfos = displayedColumnInfos.filter(function(c) { return !c.column.adaptiveHidden; });
    var indentInfo = this.utils.Fixed_CreateIndentSizeInfo(this.indentWidth);
    displayedColumnInfos.push(indentInfo);
   }
   var gridInnerWidth = this.containerWidth - this.bordersWidth;   
   this.GetColumnAdjustor().AdjustColumnsCore(displayedColumnInfos, gridInnerWidth);
  }
 },
 ReadSizes: function(tables) {
  GridViewResponsiveModeCalculatorBase.prototype.ReadSizes.call(this, tables);
  if(this.grid.HasVertScroll())
   this.bordersWidth += this.grid.GetScrollHelper().GetScrollContainerPadding();
 },
 ApplySettings: function(data) {
  this.allowHideDataCellsByColumnMinWidth = data.allowHideDataCellsByColumnMinWidth;
  GridViewResponsiveModeCalculatorBase.prototype.ApplySettings.call(this, data);
 },
 GetColumnAdjustor: function() {
  return this.grid.GetColumnAdjustor();
 }
});
var GridViewAdaptiveModeCalculator = ASPx.CreateClass(GridViewColumnAdaptivityCalculatorBase, {
 constructor: function(layoutHelper) {
  this.constructor.prototype.constructor.call(this, layoutHelper);
  this.shouldHideDataCellsByWindowInnerWidth = undefined;
  this.hideDataCellsWindowInnerWidth = -1;
 },
 CalculateAdaptivity: function(forceCalculate) {
  this.ResetShouldHideDataCellsByWindowInnerWidth();
  GridViewColumnAdaptivityCalculatorBase.prototype.CalculateAdaptivity.call(this, forceCalculate);
 },
 RequireRecalculateAdaptivity: function() {
  if(GridViewColumnAdaptivityCalculatorBase.prototype.RequireRecalculateAdaptivity.call(this))
   return true;
  return this.layout.HasAnyAdaptiveElement() !== this.GetShouldHideDataCellsByWindowInnerWidth();
 },
 CalculateAdaptivityCore: function() {
  if(this.GetShouldHideDataCellsByWindowInnerWidth())
   this.layout.UpdateAdaptiveViewVisibility(true);
 },
 ApplySettings: function(data) {
  this.hideDataCellsWindowInnerWidth = data.hideDataCellsWindowInnerWidth;
  GridViewColumnAdaptivityCalculatorBase.prototype.ApplySettings.call(this, data);
 },
 ResetShouldHideDataCellsByWindowInnerWidth: function() {
  this.shouldHideDataCellsByWindowInnerWidth = undefined;
 },
 GetShouldHideDataCellsByWindowInnerWidth: function() {
  if(this.shouldHideDataCellsByWindowInnerWidth === undefined)
   this.shouldHideDataCellsByWindowInnerWidth = this.hideDataCellsWindowInnerWidth > 0 && ASPx.GetCurrentDocumentWidth() <= this.hideDataCellsWindowInnerWidth;
  return this.shouldHideDataCellsByWindowInnerWidth;
 }
});
var GridViewColumnAdaptivityCalculationUtils = ASPx.CreateClass(null, {
 constructor: function(helper) {
  this.helper = helper;
  this.layout = helper.layout;
 },
 Auto_CalculateColumnsToBeHidden: function(sizes, containerWidth, bordersWidth, indentWidth) {
  return this.CalculateColumnsToBeHiddenCore(
   this.Auto_GetGridWidth.aspxBind(this),
   this.Auto_CreateIndentSizeInfo.aspxBind(this),
   this.Auto_HasAnyAlwaysCutColumn.aspxBind(this),
   sizes, containerWidth, bordersWidth, indentWidth);
 },
 Auto_CreateIndentSizeInfo: function(indentWidth) {
  return {
   index: Constants.SpecColumnIndex.INDENT,
   width: indentWidth
  };
 },
 Auto_GetGridWidth: function(sizes) {
  var result = 0;
  for(var i = 0, info; info = sizes[i]; i++)
   result += info.width;
  return result;
 },
 Auto_HasAnyAlwaysCutColumn: function(sizes) {
  return false;
 },
 Fixed_CalculateColumnsToBeHidden: function(sizes, containerWidth, bordersWidth, indentWidth) {
  return this.CalculateColumnsToBeHiddenCore(
   this.Fixed_GetCompleteResolvedGridMinWidth.aspxBind(this),
   this.Fixed_CreateIndentSizeInfo.aspxBind(this),
   this.Fixed_HasAnyAlwaysCutColumn.aspxBind(this),
   sizes, containerWidth, bordersWidth, indentWidth, true);
 },
 Fixed_GetCompleteResolvedGridMinWidth: function(sizes) {
  var adjustor = this.Fixed_GetColumnAdjustor();
  if(!adjustor.HasValidColumnWidths() || !adjustor.CheckHasRestrictions(sizes))
   return this.Fixed_GetGridMinWidthInfo(sizes).gridWidth;
  this.Fixed_GetColumnAdjustor().ResetColumnViolations(sizes);
  var violation = null;
  var minWidthInfo = null;
  var counter = 0;
  do {
   var resolvedColumnInfos = this.Fixed_GetResolvedColumnInfos(sizes);
   var minWidthInfo = this.Fixed_GetGridMinWidthInfo(resolvedColumnInfos);
   violation = this.Fixed_GetColumnAdjustor().GetWidthViolation(minWidthInfo.widthInfos);
   if(violation)
    this.Fixed_GetColumnAdjustor().ResolveViolation(violation);
   if(++counter > Constants.MAX_ITERATION_COUNT)
    throw "GridView column adaptivity calculation error.";
  } while(violation);
  return minWidthInfo.gridWidth;
 },
 Fixed_GetColumnAdjustor: function() {
  return this.helper.GetColumnAdjustor();
 },
 Fixed_CreateColumnInfoObject: function(sourceInfo, widthType, width) {
  var hasFixedWidth = widthType === Constants.WidthType.FIXED;
  var hasPercentageWidth = widthType === Constants.WidthType.PERCENTAGE;
  var result = this.Fixed_GetColumnAdjustor().CreateColumnInfoObject(
   sourceInfo.index, sourceInfo.column, hasPercentageWidth, hasFixedWidth, width, sourceInfo);
  result.minContentWidth = sourceInfo.minContentWidth;
  result.isAlwaysCut = sourceInfo.isAlwaysCut;
  return result;
 },
 Fixed_GetResolvedColumnInfos: function(columnInfos) {
  var groupedInfos = this.Fixed_GroupSizesByWidthType(columnInfos);
  if(!this.Fixed_GetColumnAdjustor().HasRestrictions() || (groupedInfos.violatedSizes.length == 0 && !this.Fixed_IsHideDataCellsByColumnMinWidthAllowed()))
   return columnInfos.slice();
  var autoWidthInfos = groupedInfos.autoWidthSizes,
   percentageWidthInfos = groupedInfos.percentageSizes;
  if(autoWidthInfos.length > 0 && percentageWidthInfos.length > 0)
   return null;
  var result = [];
  var actualPercWidthInfos = [];
  var percWidthSummary = 0;
  for(var info, i = 0; info = columnInfos[i]; i++) {
   if(info.hasFixedWidth || info.violation || this.Fixed_IsHideDataCellsByColumnMinWidthAllowed() && info.minWidth > 0) {
    var width = info.width;
    if(info.violation)
     width = info.violation.violatedWidth;
    else if(!info.hasFixedWidth)
     width = info.minWidth;
    var columnInfo = this.Fixed_CreateColumnInfoObject(info, Constants.WidthType.FIXED, width);
    result.push(columnInfo);
   }
   else if(!info.hasPercentageWidth) {
    var columnInfo = this.Fixed_CreateColumnInfoObject(info, Constants.WidthType.AUTO, info.width);
    result.push(columnInfo);
   }
   else {
    percWidthSummary += info.width;
    actualPercWidthInfos.push(info);
   }
  }
  for(var info, i = 0; info = actualPercWidthInfos[i]; i++) {
   var width = 0;
   if(percWidthSummary > 0)
    width = info.width / percWidthSummary;
   var columnInfo = this.Fixed_CreateColumnInfoObject(info, Constants.WidthType.PERCENTAGE, width);
   result.push(columnInfo);
  }
  result.sort(function(c1, c2) { return c1.index - c2.index; });
  return result;
 },
 Fixed_GetGridMinWidthInfo: function(sizes) {
  var groupedSizes = this.Fixed_GroupSizesByWidthType(sizes);
  var autoWidthSizes = groupedSizes.autoWidthSizes,
   fixedSizes = groupedSizes.fixedSizes,
   percentageSizes = groupedSizes.percentageSizes;
  var autoWidthsInfo = this.Fixed_GetAutoWidthColumnsGridMinWidthInfo(autoWidthSizes);
  var fixedWidthsInfo = this.Fixed_GetFixedColumnsGridMinWidthInfo(fixedSizes);
  var summaryWidth = autoWidthsInfo.gridWidth + fixedWidthsInfo.gridWidth;
  if(autoWidthSizes.length > 0 && percentageSizes.length > 0) {
   var newInfo = this.Fixed_CreatePercentSizeForNonPercentColumns(percentageSizes, summaryWidth);
   if(newInfo) {
    if(newInfo.isAlwaysCut)
     return Constants.INFINITY_WIDTH;
    else
     percentageSizes.push(newInfo);
   }
   summaryWidth = 0;
  }
  var percentageWidthsInfo = this.Fixed_GetPercentageColumnsGridMinWidthInfo(percentageSizes);
  summaryWidth += percentageWidthsInfo.gridWidth;
  var widthInfos = autoWidthsInfo.widthInfos.concat(fixedWidthsInfo.widthInfos.concat(percentageWidthsInfo.widthInfos));
  widthInfos.sort(function(w1, w2) { return w1.columnInfo.index - w2.columnInfo.index; });
  return {
   gridWidth: summaryWidth,
   widthInfos: widthInfos
  };
 },
 Fixed_CreateIndentSizeInfo: function(indentWidth) {
  var result = this.Fixed_GetColumnAdjustor().CreateColumnInfoObject(
   Constants.SpecColumnIndex.INDENT, null, false, true, indentWidth, null);
  result.minContentWidth = indentWidth - 1;
  return result;
 },
 Fixed_HasAnyAlwaysCutColumn: function(sizes) {
  for(var i = 0, info; info = sizes[i]; i++) {
   if(info.isAlwaysCut)
    return true;
  }
  return false;
 },
 Fixed_CreatePercentSizeForNonPercentColumns: function(percentSizes, nonPercentColumnsSummaryWidth) {
  var percentWidthSum = 0;
  for(var i = 0, info; info = percentSizes[i]; i++)
   percentWidthSum += info.width;
  var spaceForNonPercentWidth = 1 - percentWidthSum;
  if(spaceForNonPercentWidth > 0) {
   var result = this.Fixed_GetColumnAdjustor().CreateColumnInfoObject(
    Constants.SpecColumnIndex.NON_PERCENT_SPACE, null, true, false, spaceForNonPercentWidth, null);
   result.minContentWidth = nonPercentColumnsSummaryWidth;
   return result;
  }
  else if(nonPercentColumnsSummaryWidth > 0) {
   return { isAlwaysCut: true };  
  }
  else
   return null;
 },
 Fixed_GetAutoWidthColumnsGridMinWidthInfo: function(autoWidthSizes) {
  var maxMinContentWidth = 0;
  for(var i = 0, info; info = autoWidthSizes[i]; i++) {
   if(maxMinContentWidth < info.minContentWidth)
    maxMinContentWidth = info.minContentWidth;
  }
  var result = {};
  result.gridWidth = maxMinContentWidth * autoWidthSizes.length;
  result.widthInfos = [];
  for(var info, i = 0; info = autoWidthSizes[i]; i++) {
   var widthInfo = this.Fixed_GetColumnAdjustor().CreateWidthInfoObject(maxMinContentWidth, info);
   result.widthInfos.push(widthInfo);
  }
  return result;
 },
 Fixed_GetFixedColumnsGridMinWidthInfo: function(fixedSizes) {
  var result = {
   gridWidth: 0,
   widthInfos: []
  };
  for(var i = 0, info; info = fixedSizes[i]; i++) {
   result.gridWidth += info.width;
   var widthInfo = this.Fixed_GetColumnAdjustor().CreateWidthInfoObject(info.width, info);
   result.widthInfos.push(widthInfo);
  }
  return result;
 },
 Fixed_GetPercentageColumnsGridMinWidthInfo: function(percentageSizes) {
  var result = {
   gridWidth: 0,
   widthInfos: []
  };
  if(percentageSizes.length == 0)
   return result;
  var maxPercentageWidth = 0;
  var maxPercetageIndex = -1;
  for(var i = 0, info; info = percentageSizes[i]; i++) {
   if(maxPercentageWidth < info.width) {
    maxPercentageWidth = info.width;
    maxPercetageIndex = i;
   }
  }
  var maxPercentageWidthInfo = percentageSizes[maxPercetageIndex];
  var maxPercentageWidthColumnMinContentWidth = maxPercentageWidthInfo.minContentWidth > 0 ? maxPercentageWidthInfo.minContentWidth : 1;
  var maxCoefficient = 1;
  for(var i = 0, info; info = percentageSizes[i]; i++) {
   var coefficient = info.minContentWidth / (maxPercentageWidthColumnMinContentWidth * info.width / maxPercentageWidth);
   if(maxCoefficient < coefficient)
    maxCoefficient = coefficient;
  }
  for(var i = 0, info; info = percentageSizes[i]; i++) {
   var width = maxPercentageWidthColumnMinContentWidth * maxCoefficient * info.width / maxPercentageWidth;
   result.gridWidth += width;
   var widthInfo = this.Fixed_GetColumnAdjustor().CreateWidthInfoObject(width, info);
   result.widthInfos.push(widthInfo);
  }
  return result;
 },
 Fixed_GroupSizesByWidthType: function(sizes) {
  var autoWidthSizes = [],
   fixedSizes = [],
   percentageSizes = [],
   violatedSizes = [];
  for(var i = 0, info; info = sizes[i]; i++) {
   if(info.hasFixedWidth)
    fixedSizes.push(info);
   else if(info.hasPercentageWidth)
    percentageSizes.push(info);
   else
    autoWidthSizes.push(info);
   if(info.violation)
    violatedSizes.push(info);
  }
  return {
   autoWidthSizes: autoWidthSizes,
   fixedSizes: fixedSizes,
   percentageSizes: percentageSizes,
   violatedSizes: violatedSizes
  };
 },
 Fixed_IsHideDataCellsByColumnMinWidthAllowed: function() {
  return this.helper.allowHideDataCellsByColumnMinWidth;
 },
 CalculateColumnsToBeHiddenCore: function(getGridWidthFunc, createIndentSizeInfoFunc, hasAnyAlwaysCutColumnFunc, sizes, containerWidth,
   bordersWidth, indentWidth, allowHideTruncatedColumns) {
  var sizes = sizes.slice(0);
  var columnsToHide = [];
  var gridInnerWidth = getGridWidthFunc(sizes);
  var gridWidth = bordersWidth + gridInnerWidth;
  var overflow = gridInnerWidth === Constants.INFINITY_WIDTH || containerWidth < gridWidth;
  if(overflow) {
   var adaptiveColumnsOrder = this.GetAdaptiveColumnsOrder();
   for(var i = 0; i < adaptiveColumnsOrder.length - 1; i++) {
    var columnIndex = adaptiveColumnsOrder[i];
    if(!allowHideTruncatedColumns && this.AllowTextTruncationInAdaptiveMode(columnIndex))
     continue;
    var column = this.GetColumn(columnIndex);
    if(column.adaptiveHidden)
     continue;
    if(!ASPx.Data.ArrayContains(this.GetVisibleColumnIndices(), columnIndex))
     continue;
    if(columnsToHide.length == 0) {
     var indentInfo = createIndentSizeInfoFunc(indentWidth);
     sizes.push(indentInfo);
    }
    columnsToHide.push(columnIndex);
    var infoIndex = ASPx.Data.ArrayIndexOf(sizes, columnIndex, function(info, colIndex) { return info.index === colIndex; });
    ASPx.Data.ArrayRemoveAt(sizes, infoIndex);
    if(hasAnyAlwaysCutColumnFunc(sizes))
     continue;
    gridInnerWidth = getGridWidthFunc(sizes);
    overflow = gridInnerWidth === Constants.INFINITY_WIDTH;
    if(overflow)
     continue;
    gridWidth = bordersWidth + gridInnerWidth;
    overflow = containerWidth < gridWidth;
    if(!overflow)
     break;
   }
  }
  return {
   columnsToHide: columnsToHide,
   overflow: overflow
  };
 },
 GetAdaptiveColumnsOrder: function() {
  return this.layout.GetAdaptiveColumnsOrder();
 },
 AllowTextTruncationInAdaptiveMode: function(columnIndex) {
  return this.helper.AllowTextTruncationInAdaptiveMode(columnIndex);
 },
 GetColumn: function(columnIndex) {
  return this.layout.GetColumn(columnIndex);
 },
 GetVisibleColumnIndices: function() {
  return this.layout.GetVisibleColumnIndices();
 }
});
var GridViewAdaptivityAdjuster = ASPx.CreateClass(null, {
 constructor: function() {
  this.needCollapseMasterGrid = false;
 },
 SetNeedCollapseMasterGrid: function(masterGrid) {
  this.needCollapseMasterGrid = masterGrid.IsResponsiveAdaptivityMode();
 },
 CheckNeedCollapseDetailGrid: function(detailGrid) {
  var masterGrid = this.GetGridViewAdjuster().GetMasterGridForAdjust();
  return masterGrid && masterGrid.IsMasterGridFor(detailGrid);
 },
 CollapseMasterGridIfNeed: function(detailGrid) {
  var masterGrid = this.GetGridViewAdjuster().GetMasterGridForAdjust();
  if(this.needCollapseMasterGrid && masterGrid.IsMasterGridFor(detailGrid)) {
   masterGrid.ResetAdaptivityOnCallback();
   masterGrid.GetAdaptivityHelper().HideAllAdaptiveColumns();
   this.needCollapseMasterGrid = false;
  }
 },
 CalculateMasterDetailGridsAdaptivity: function(grid) {
  var calculated = grid.HasAdaptivity();
  this.needCollapseMasterGrid = false;
  this.GetGridViewAdjuster().SetMasterGridForAdjust(null);
  grid.CalculateAdaptivity(true);
  if(grid.hasDetailRows)
   calculated = this.CalculateDetailGridsAdaptivity(grid.GetMainElement()) || calculated;
  grid.RestoreAdaptivityState();
  if(calculated)
   this.GetGridViewAdjuster().RestoreDocumentScrollPosition(true);
 },
 CalculateDetailGridsAdaptivity: function(container) {
  var controlCollection = ASPx.GetControlCollection();
  var filter = function(control) {
   return control instanceof ASPxClientGridView && control.IsResponsiveAdaptivityMode();
  };
  var controlTree = new ASPx.ControlTree(controlCollection, container, filter);
  return this.CalculateGridControlsAdaptivityInTree(controlTree.rootNode);
 },
 CalculateGridControlsAdaptivityInTree: function(node) {
  var calculated = false;
  var grid = node.control;
  if(grid) {
   grid.CalculateAdaptivity(true);
   calculated = true;
  }
  for(var childNode, i = 0; childNode = node.children[i]; i++)
   calculated = this.CalculateGridControlsAdaptivityInTree(childNode) || calculated;
  return calculated;
 },
 GetGridViewAdjuster: function() {
  return ASPx.GetGridViewAdjuster();
 }
});
var gridViewAdaptivityAdjuster = new GridViewAdaptivityAdjuster();
function GetGridViewAdaptivityAdjuster() {
 return gridViewAdaptivityAdjuster;
}
ASPx.GridViewColumnAdaptivityCalculatorBase = GridViewColumnAdaptivityCalculatorBase;
ASPx.GridViewResponsiveModeCalculatorBase = GridViewResponsiveModeCalculatorBase;
ASPx.GridViewAutoTableLayoutAdaptivityCalculator = GridViewAutoTableLayoutAdaptivityCalculator;
ASPx.GridViewFixedTableLayoutAdaptivityCalculator = GridViewFixedTableLayoutAdaptivityCalculator;
ASPx.GridViewAdaptiveModeCalculator = GridViewAdaptiveModeCalculator;
ASPx.GridViewColumnAdaptivityCalculationUtils = GridViewColumnAdaptivityCalculationUtils;
ASPx.GridViewAutoTableLayoutAdaptivityHelper = GridViewAutoTableLayoutAdaptivityHelper;
ASPx.GridViewFixedTableLayoutAdaptivityHelper = GridViewFixedTableLayoutAdaptivityHelper;
ASPx.GridViewAdaptiveModeAdaptivityHelper = GridViewAdaptiveModeAdaptivityHelper;
ASPx.GetGridViewAdaptivityAdjuster = GetGridViewAdaptivityAdjuster;
})();
(function() {
 var Constants = {
  ALLOWED_CALC_WIDTH_DIFF: 0.5,
  ALLOWED_RENDER_WIDTH_DIFF: 0.01,
  MAX_ITERATION_COUNT: 1000
 };
 var GridViewColumnAdjustor = ASPx.CreateClass(null, {
  constructor: function(grid) {
   this.grid = grid;
   this.columnInfos = [];
   this.hasRestrictions = false;
   this.hasValidColumnWidths = true;
  },
  Initialize: function() {
   if(!this.IsFixedTableLayout())
    return;
   this.columnInfos = this.GetColumnInfos();
   this.hasRestrictions = this.CheckHasRestrictions(this.columnInfos);
   this.hasValidColumnWidths = this.IsValidGridLayout(this.columnInfos);
  },
  GetColumnInfos: function() {
   var columnInfos = [];
   var armRow = this.GetMainTableArmRow();
   var columns = this.grid.columns;
   for(var i = 0, column; column = columns[i]; i++) {
    if(!column.visible)
     continue;
    var cellIndex = this.grid.GetDataCellIndex(i);
    if(cellIndex === -1)
     continue;
    var armCell = armRow.cells[cellIndex];
    if(!armCell || armCell.colSpan > 1)
     continue;
    var styleWidth = armCell.style.width;
    var hasPercentageWidth = false;
    var hasFixedWidth = false;
    var width = -1;
    if(styleWidth) {
     hasPercentageWidth = ASPx.IsPercentageSize(styleWidth);
     hasFixedWidth = !hasPercentageWidth;
     width = hasPercentageWidth ? ASPx.PercentageToFloat(styleWidth) : ASPx.PxToInt(styleWidth);
    }
    var info = this.CreateColumnInfoObject(i, column, hasPercentageWidth, hasFixedWidth, width);
    columnInfos.push(info);
   }
   return columnInfos;
  },
  CheckHasRestrictions: function(columnInfos) {
   for(var info, i = 0; info = columnInfos[i]; i++) {
    if(info.minWidth > 0 || info.maxWidth > 0)
     return true;
   }
   return false;
  },
  HasRestrictions: function() {
   return this.hasRestrictions;
  },
  IsValidGridLayout: function(columnInfos) {
   var hasPercWidths = false,
    hasAutoWidths = false;
   if(!this.IsGridWidthValueSetInPercentage())
    return false;
   for(var info, i = 0; info = columnInfos[i]; i++) {
    if(info.hasPercentageWidth) {
     if(hasAutoWidths)
      return false;
     hasPercWidths = true;
    }
    else if(!info.hasFixedWidth) {
     if(hasPercWidths)
      return false;
     hasAutoWidths = true;
    }
   }
   return true;
  },
  HasValidColumnWidths: function() {
   return this.hasValidColumnWidths;
  },
  ShouldAdjustColumns: function() {
   return this.HasRestrictions() && this.HasValidColumnWidths();
  },
  IsColumnAdjustmentAllowed: function() {
   return !this.grid.AllowResizing() && !this.grid.IsResponsiveAdaptivityMode();
  },
  OnAfterCallback: function() {
   this.Initialize();
   this.AdjustColumns();
  },
  AdjustColumns: function() {
   if(!this.ShouldAdjustColumns() || !this.IsColumnAdjustmentAllowed())
    return;
   var savedStyle = this.CollapseTables();
   var gridWidth = this.GetGridOffsetWidth(); 
   this.AdjustColumnsCore(this.columnInfos, gridWidth);
   this.ExpandTables(savedStyle);
  },
  AdjustColumnsCore: function(columnInfos, gridWidth) {
   this.ResetColumnViolations(columnInfos);
   var resolvedGridInfo = this.CalculateCompleteResolvedColumnInfos(columnInfos, gridWidth);
   this.ApplyColumnInfosToRender(resolvedGridInfo.columnInfos, resolvedGridInfo.maxWidth);
  },
  ResetColumnViolations: function(columnInfos) {
   for(var info, i = 0; info = columnInfos[i]; i++)
    info.violation = null;
  },
  GetModifiedColumnInfos: function(newColumnInfos, oldColumnInfos) {
   var result = [];
   for(var newInfo, i = 0; newInfo = newColumnInfos[i]; i++) {
    oldInfo = oldColumnInfos[i];
    if(!this.AreEqualByWidth(newInfo, oldInfo))
     result.push(newInfo);
   }
   return result;
  },
  CalculateCompleteResolvedColumnInfos: function(sourceColumnInfos, gridWidth) {
   var violation = null;
   var resolvedGridInfo = null;
   var counter = 0;
   do {
    resolvedGridInfo = this.CalculateResolvedGridInfo(gridWidth, sourceColumnInfos);
    var resolvedGridWidth = ASPx.IsExists(resolvedGridInfo.resolvedWidth) ? resolvedGridInfo.resolvedWidth : gridWidth;
    var widthInfos = this.CalculateColumnsCurrentWidths(resolvedGridWidth, resolvedGridInfo.columnInfos);
    violation = this.GetWidthViolation(widthInfos);
    if(violation)
     this.ResolveViolation(violation);
    if(++counter > Constants.MAX_ITERATION_COUNT)
     throw "GridView column calculation error.";
   } while(violation);
   return resolvedGridInfo;
  },
  CollapseTables: function() {
   var styles = [];
   var cell = this.GetMainElementCell();
   var style = cell.style;
   var savedStyle = { display: style.display, width: style.width, height: style.height, overflow: style.overflow };
   ASPx.SetStyles(cell, { display: "block", width: "0px", height: "0px", overflow: "hidden", maxWidth: "" });
   styles.push(savedStyle);
   if(this.IsGridWidthValueSetInPercentage()) {
    var mainElement = this.grid.GetMainElement();
    savedStyle = { width: mainElement.style.width };
    mainElement.style.width = this.grid.percentSizeConfig.width;
    styles.push(savedStyle);
   }
   return styles;
  },
  ExpandTables: function(styles) {
   var cell = this.GetMainElementCell();
   ASPx.SetStyles(cell, styles[0]);
   if(this.IsGridWidthValueSetInPercentage())
    this.grid.GetMainElement().style.width = styles[1].width;
  },
  IsGridWidthValueSetInPercentage: function() { return this.grid.widthValueSetInPercentage; },
  RestoreTableRenderColumnWidths: function(table) {
   this.ApplyColumnInfosToTable(table, this.columnInfos);
  },
  ApplyColumnInfosToTable: function(table, columnInfos) {
   var armRow = table.rows[0];
   for(var info, i = 0; info = columnInfos[i]; i++) {
    if(!info.column) continue;
    var widthStr = this.GetColumnInfoWidthString(info);
    var columnIndex = info.column.index;
    var cellIndex = this.grid.GetDataCellIndex(columnIndex);
    var armCell = armRow.cells[cellIndex];
    armCell.style.width = widthStr;
   }
  },
  ApplyColumnInfosToRender: function(columnInfos, maxGridWidth) {
   var tables = this.grid.GetLayoutHelper().GetAllTables();
   for(var table, i = 0; table = tables[i]; i++)
    this.ApplyColumnInfosToTable(table, columnInfos);
   if(ASPx.IsExists(maxGridWidth))
    this.grid.GetMainElement().style.maxWidth = maxGridWidth + "px";
  },
  ResolveViolation: function(violation) {
   violation.columnInfo.violation = violation;
  },
  GetWidthViolation: function(widthInfos) {
   var minViolation = null,
    maxViolation = null,
    summaryWidthDiff = 0;
   for(var info, i = 0; info = widthInfos[i]; i++) {
    var columnInfo = info.columnInfo.sourceColumnInfo || info.columnInfo;
    if(columnInfo.minWidth > 0) {
     var widthDiff = columnInfo.minWidth - info.width;
     if(widthDiff > Constants.ALLOWED_CALC_WIDTH_DIFF) {
      summaryWidthDiff += widthDiff;
      if(!minViolation)
       minViolation = this.CreateViolationObject(true, columnInfo, widthDiff, columnInfo.minWidth);
      continue;
     }
    }
    if(columnInfo.maxWidth > 0) {
     var widthDiff = info.width - columnInfo.maxWidth;
     if(widthDiff > Constants.ALLOWED_CALC_WIDTH_DIFF) {
      summaryWidthDiff -= widthDiff;
      if(!maxViolation)
       maxViolation = this.CreateViolationObject(false, columnInfo, -widthDiff, columnInfo.maxWidth);
      continue;
     }
    }
   }
   return summaryWidthDiff >= 0 ? minViolation : maxViolation;
  },
  CreateViolationObject: function(minWidthViolation, columnInfo, widthDiff, violatedWidth) {
   return {
    minWidthViolation: minWidthViolation,
    columnInfo: columnInfo,
    widthDiff: widthDiff,
    violatedWidth: violatedWidth
   };
  },
  CalculateResolvedGridInfo: function(gridWidth, columnInfos) {
   var groupedInfos = this.GroupInfosByWidthType(columnInfos);
   var autoWidthInfos = groupedInfos.autoWidthInfos,
    fixedWidthInfos = groupedInfos.fixedWidthInfos,
    percentageWidthInfos = groupedInfos.percentageWidthInfos;
   if(autoWidthInfos.length > 0 && percentageWidthInfos.length == 0) {
    return this.CalculateResolvedAutoWidthColumnsGridInfo(gridWidth, columnInfos);
   }
   if(autoWidthInfos.length == 0 && fixedWidthInfos.length > 0 && percentageWidthInfos.length == 0) {
    return this.CalculateResolvedFixedWidthColumnsGridInfo(gridWidth, columnInfos);
   }
   if(autoWidthInfos.length == 0 && percentageWidthInfos.length > 0) {
    return this.CalculateResolvedPercentageWidthColumnsGridInfo(gridWidth, columnInfos);
   }
   return null;
  },
  CalculateResolvedPercentageWidthColumnsGridInfo: function(gridWidth, columnInfos) {
   var result = { columnInfos: [] };
   var fixedColumnCount = 0;
   var fixedWidthSummary = 0;
   var percWidthSummary = 0;
   for(var info, i = 0; info = columnInfos[i]; i++) {
    if(info.hasFixedWidth || info.violation) {
     fixedColumnCount++;
     fixedWidthSummary += info.hasFixedWidth ? info.width : info.violation.violatedWidth;
    }
    else
     percWidthSummary += info.width;
   }
   var percColumnSummaryWidth = gridWidth - fixedWidthSummary;
   var percColumnCount = columnInfos.length - fixedColumnCount;
   if(percColumnSummaryWidth > 0 && percColumnCount == 0)
    result.maxWidth = result.resolvedWidth = fixedWidthSummary;
   if(percWidthSummary == 0)
    percWidthSummary = 1;
   for(var info, i = 0; info = columnInfos[i]; i++) {
    var hasFixedWidth = true;
    var width = info.width;
    if(info.violation)
     width = info.violation.violatedWidth;
    else if(!info.hasFixedWidth) {
     hasFixedWidth = false;
     width = info.width / percWidthSummary;
    }
    var columnInfo = this.CreateColumnInfoObject(info.index, info.column, !hasFixedWidth, hasFixedWidth, width, info);
    result.columnInfos.push(columnInfo);
   }
   return result;
  },
  CalculateResolvedFixedWidthColumnsGridInfo: function(gridWidth, columnInfos) {
   var result = { columnInfos: [] };
   var violatedWidthSummary = 0;
   var violatedColumnCount = 0;
   var normalColumnMinSummaryWidth = 0;
   for(var info, i = 0; info = columnInfos[i]; i++) {
    if(info.violation) {
     violatedWidthSummary += info.violation.violatedWidth;
     violatedColumnCount++;
    }
    else
     normalColumnMinSummaryWidth += info.width;
   }
   var newMinGridWidth = violatedWidthSummary + normalColumnMinSummaryWidth;
   if(gridWidth <= newMinGridWidth) {
    for(var info, i = 0; info = columnInfos[i]; i++) {
     var columnInfo = this.CreateColumnInfoObject(info.index, info.column, false, true, info.width, info);
     result.columnInfos.push(columnInfo);
    }
    return result;
   }
   else if(violatedColumnCount == columnInfos.length)
    result.maxWidth = result.resolvedWidth = gridWidth = violatedWidthSummary;
   var normalColumnSummaryWidth = gridWidth - violatedWidthSummary;
   var normalColumnSummaryPart = normalColumnSummaryWidth / gridWidth;
   var violatedColumnSummaryPart = 1 - normalColumnSummaryPart;
   for(var info, i = 0; info = columnInfos[i]; i++) {
    var part = info.violation
     ? (info.violation.violatedWidth / violatedWidthSummary) * violatedColumnSummaryPart
     : (info.width / normalColumnMinSummaryWidth) * normalColumnSummaryPart;
    var width = part * gridWidth;
    var columnInfo = this.CreateColumnInfoObject(info.index, info.column, false, true, width, info);
    result.columnInfos.push(columnInfo);
   }
   return result;
  },
  CalculateResolvedAutoWidthColumnsGridInfo: function(gridWidth, columnInfos) {
   var result = { columnInfos: [] };
   var fixedColumnCount = 0;
   var fixedWidthSummary = 0;
   for(var info, i = 0; info = columnInfos[i]; i++) {
    if(info.hasFixedWidth || info.violation) {
     fixedColumnCount++;
     fixedWidthSummary += info.hasFixedWidth ? info.width : info.violation.violatedWidth;
    }
   }
   var autoColumnSummaryWidth = gridWidth - fixedWidthSummary;
   var autoColumnCount = columnInfos.length - fixedColumnCount;
   var autoWidth = 0;
   if(autoColumnSummaryWidth > 0) {
    if(autoColumnCount > 0)
     autoWidth = autoColumnSummaryWidth / autoColumnCount;
    else
     result.maxWidth = result.resolvedWidth = fixedWidthSummary;
   }
   for(var info, i = 0; info = columnInfos[i]; i++) {
    var hasFixedWidth = !!info.violation || info.hasFixedWidth;
    var width = autoWidth;
    if(info.hasFixedWidth)
     width = info.width;
    else if(info.violation)
     width = info.violation.violatedWidth;
    var columnInfo = this.CreateColumnInfoObject(info.index, info.column, false, hasFixedWidth, width, info);
    result.columnInfos.push(columnInfo);
   }
   return result;
  },
  CalculateColumnsCurrentWidths: function(gridWidth, columnInfos) {
   var groupedInfos = this.GroupInfosByWidthType(columnInfos);
   var autoWidthInfos = groupedInfos.autoWidthInfos,
    fixedWidthInfos = groupedInfos.fixedWidthInfos,
    percentageWidthInfos = groupedInfos.percentageWidthInfos;
   var result = [];
   if(percentageWidthInfos.length > 0 && autoWidthInfos.length > 0)
    return null;
   var fixedWidthSum = 0;
   for(var info, i = 0; info = fixedWidthInfos[i]; i++)
    fixedWidthSum += info.width;
   if(fixedWidthInfos.length == columnInfos.length) {
    var coefficient = 1;
    if(fixedWidthSum > 0)
     coefficient = gridWidth / fixedWidthSum;
    if(coefficient < 1)
     coefficient = 1;
    for(var info, i = 0; info = fixedWidthInfos[i]; i++) {
     var width = coefficient * info.width;
     var widthInfo = this.CreateWidthInfoObject(width, info);
     result.push(widthInfo);
    }
   }
   else {
    var flexWidthSum = gridWidth - fixedWidthSum;
    var autoWidthColumnWidth = 0;
    if(autoWidthInfos.length > 0 && flexWidthSum > 0)
     autoWidthColumnWidth = flexWidthSum / autoWidthInfos.length;
    var percWidthColumnSum = 0;
    for(var info, i = 0; info = percentageWidthInfos[i]; i++)
     percWidthColumnSum += info.width;
    if(percWidthColumnSum == 0)
     percWidthColumnSum = 1;
    for(var info, i = 0; info = columnInfos[i]; i++) {
     var width = info.width;
     if(info.hasPercentageWidth)
      width = flexWidthSum * info.width / percWidthColumnSum;
     else if(!info.hasFixedWidth)
      width = autoWidthColumnWidth;
     var widthInfo = this.CreateWidthInfoObject(width, info);
     result.push(widthInfo);
    }
   }
   return result;
  },
  GetColumnInfoWidthString: function(columnInfo) {
   if(columnInfo.hasFixedWidth)
    return columnInfo.width + "px";
   else if(columnInfo.hasPercentageWidth)
    return (columnInfo.width * 100) + "%";
   else
    return "";
  },
  AreEqualByWidth: function(columnInfo1, columnInfo2) {
   return columnInfo1.hasFixedWidth === columnInfo2.hasFixedWidth &&
    columnInfo1.hasPercentageWidth === columnInfo2.hasPercentageWidth &&
    (!columnInfo1.hasFixedWidth && !columnInfo1.hasPercentageWidth ||
     Math.abs(columnInfo1.width - columnInfo2.width) < Constants.ALLOWED_RENDER_WIDTH_DIFF);
  },
  CreateWidthInfoObject: function(width, columnInfo) {
   return {
    width: width,
    columnInfo: columnInfo
   };
  },
  CreateColumnInfoObject: function(index, column, hasPercentageWidth, hasFixedWidth, width, sourceColumnInfo) {
   return {
    index: index,
    column: column,
    hasPercentageWidth: hasPercentageWidth,
    hasFixedWidth: hasFixedWidth,
    width: width,
    minWidth: column ? column.minWidth : 0,
    maxWidth: column ? column.maxWidth : 0,
    sourceColumnInfo: sourceColumnInfo
   };
  },
  GroupInfosByWidthType: function(infos) {
   var autoWidthInfos = [],
    fixedWidthInfos = [],
    percentageWidthInfos = [],
    violatedWidthInfos = [];
   for(var i = 0, info; info = infos[i]; i++) {
    if(info.hasFixedWidth)
     fixedWidthInfos.push(info);
    else if(info.hasPercentageWidth)
     percentageWidthInfos.push(info);
    else
     autoWidthInfos.push(info);
    if(info.violation)
     violatedWidthInfos.push(info);
   }
   return {
    autoWidthInfos: autoWidthInfos,
    fixedWidthInfos: fixedWidthInfos,
    percentageWidthInfos: percentageWidthInfos,
    violatedWidthInfos: violatedWidthInfos
   };
  },
  GetGridOffsetWidth: function() {
   return this.grid.GetMainElement().offsetWidth;
  },
  GetMainTableArmRow: function () {
   return this.grid.GetMainTable().rows[0];
  },
  GetMainElementCell: function() {
   return this.grid.GetLayoutHelper().GetMainElementCell();
  },
  IsFixedTableLayout: function() {
   return this.grid.GetLayoutHelper().IsFixedTableLayout();
  }
 });
 ASPx.GridViewColumnAdjustor = GridViewColumnAdjustor;
})();
(function() {
var GridViewColumnHelper = ASPx.CreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
  this.visibleHeaderTree = null;
  this.visibleDataRowTree = null;
  this.headerLayout = null;
  this.dataRowLayout = null;
  this.headerLeafs = null;
  this.dataRowLeafs = null;
  this.headerNodeHash = { };
  this.dataRowNodeHash = { };
  this.sortedVisibleChildColumnsHash = { };
  this.childColumnHash = { };
  this.fixedColumnsHash = null;
  this.visibleColumnIndices = null;
  this.rightTreeLines = null;
  this.cachedGroupColumns = -1;
 },
 GetAllColumns: function() { return this.grid.columns; },
 GetShowGroupedColumns: function() { return this.grid.showGroupedColumns; },
 FindColumn: function(index) {
  index = parseInt(index);
  return this.GetAllColumns().filter(function(c) { return c.index === index; })[0] || null;
 },
 HasColumnChildren: function(index) {
  return this.GetAllColumns().filter(function(c) { return c.parentIndex === index; }).length > 0;
 },
 GetGroupColumns: function() {
  if(this.cachedGroupColumns === -1)
   this.cachedGroupColumns = this.GetAllColumns().filter(function(c) { return c.groupIndex > -1; }).sort(function(c1, c2) { return c1.groupIndex - c2.groupIndex; });
  return this.cachedGroupColumns;
 },
 GetGroupColumnCount: function() { 
  return this.GetGroupColumns().length;
 },
 GetParentColumnIndices: function(columnIndex) {
  var node = this.FindNode(columnIndex);
  if(!node)
   return [ ];
  return this.CreateTreeLine(node, false).map(function(n) { return n.columnIndex; });
 },
 FindColumnLayoutPos: function(layout, columnIndex) {
  for(var i = 0; i < layout.length; i++) {
   var level = layout[i];
   for(var j = 0; j < level.length; j++) {
    if(level[j].columnIndex === columnIndex)
     return { levelIndex: i, cellIndex: j };
   }
  }
  return { levelIndex: -1, cellIndex: -1 };
 },
 FindNode: function(columnIndex, isDataRowTree) {
  this.EnsureTrees();
  var hash = isDataRowTree ? this.dataRowNodeHash : this.headerNodeHash;
  return hash[columnIndex];
 },
 IsColumnFixed: function(columnIndex) {
  this.EnsureFixedColumnsHash();
  return this.fixedColumnsHash[columnIndex];
 },
 EnsureFixedColumnsHash: function() {
  if(this.fixedColumnsHash) 
   return;
  var firstLevelColumnsFixedState = { };
  var firstLevelColumns = this.GetVisibleChildColumns(-1, true);
  for(var i = 0; i < firstLevelColumns.length; i++) {
   var column = firstLevelColumns[i];
   firstLevelColumnsFixedState[column.index] = this.IsColumnFixedRecursive(column);
  }
  this.fixedColumnsHash = { };
  var allColumns = this.GetAllColumns();
  for(var i = 0; i < allColumns.length; i++) {
   var column = allColumns[i];
   var firstLevelColumn = column;
   while(firstLevelColumn.parentIndex >= 0)
    firstLevelColumn = this.FindColumn(firstLevelColumn.parentIndex);
   this.fixedColumnsHash[column.index] = firstLevelColumnsFixedState[firstLevelColumn.index];
  }
 },
 IsColumnFixedRecursive: function(column) {
  if(column.isFixed) return true;
  var childColumns = this.GetVisibleChildColumns(column.index, true);
  for(var i = 0; i < childColumns.length; i++) {
   if(this.IsColumnFixedRecursive(childColumns[i]))
    return true;
  }
  return false;
 },
 IsColumnInRightTreeLine: function(columnIndex, isHeader) {
  this.EnsureRightTreeLines();
  var treeLine = isHeader ? this.rightTreeLines.header : this.rightTreeLines.data;
  return treeLine.filter(function(n) { return n.columnIndex === columnIndex; }).length !== 0;
 },
 EnsureRightTreeLines: function() {
  if(this.rightTreeLines) return;
  this.rightTreeLines = { };
  var headerLeafs = this.GetHeaderLeafs();
  var dataRowLeafs = this.GetDataRowLeafs();
  this.rightTreeLines.header = this.CreateTreeLine(headerLeafs[headerLeafs.length - 1], true);
  this.rightTreeLines.data = this.CreateTreeLine(dataRowLeafs[dataRowLeafs.length - 1], true);
 },
 GetVisibleColumnIndices: function(isDataRowLayout) {
  if(!this.visibleColumnIndices)
   this.visibleColumnIndices = { header: this.CalculateVisibleColumnIndices(false), data: this.CalculateVisibleColumnIndices(true) };
  return isDataRowLayout ? this.visibleColumnIndices.data : this.visibleColumnIndices.header;
 },
 CalculateVisibleColumnIndices: function(isDataRowLayout) {
  var layout = isDataRowLayout ? this.GetDataRowLayout() : this.GetHeaderLayout();
  return ASPx.Data.ArrayFlatten(layout).map(function(n) { return n.columnIndex; });
 },
 GetAdaptiveRowInfo: function() {
  var adaptiveNodes = [ ];
  var tree = this.GetVisibleDataRowTree();
  this.FindAdaptiveNodes(tree, adaptiveNodes, false);
  for(var i = 0; i < adaptiveNodes.length; i++) {
   var node = adaptiveNodes[i];
   ASPx.Data.ArrayRemove(node.parent.children, node);
  }
  var dataRowLayout = [ ];
  this.PopulateRowLayout(tree, dataRowLayout);
  this.Invalidate();
  return { 
   dataRowLayout: dataRowLayout, 
   adaptiveColumnIndices: adaptiveNodes.map(function(n) { return n.columnIndex; }) 
  };
 },
 FindAdaptiveNodes: function(node, adaptiveNodes, isAdaptiveParent) {
  var isColumnAdaptive = node.column && node.column.adaptiveHidden;
  if(isColumnAdaptive || isAdaptiveParent) {
   adaptiveNodes.push(node);
   isAdaptiveParent |= isColumnAdaptive;
  }
  for(var i = 0; i < node.children.length; i++)
   this.FindAdaptiveNodes(node.children[i], adaptiveNodes, isAdaptiveParent);
 },
 EnsureTrees: function() {
  this.GetVisibleHeaderTree();
  this.GetVisibleDataRowTree();
 },
 GetVisibleHeaderTree: function() {
  if(!this.visibleHeaderTree) {
   var root = this.CreateTreeNode(-1, null);
   this.PopulateVisualTreeNode(root, this.GetVisibleChildColumns(-1), false);
   this.PopulateHeaderNodeSpans(root);
   this.visibleHeaderTree = root;
  }
  return this.visibleHeaderTree;
 },
 GetVisibleDataRowTree: function() {
  if(!this.visibleDataRowTree) {
   var root = this.CreateTreeNode(-1, null);
   this.PopulateVisualTreeNode(root, this.GetVisibleChildColumns(-1), true);
   this.PopulateDataRowNodeSpans(root);
   this.visibleDataRowTree = root;
  }
  return this.visibleDataRowTree;
 },
 GetHeaderLayout: function() {
  if(!this.headerLayout) {
   this.headerLayout = [ ];
   this.PopulateRowLayout(this.GetVisibleHeaderTree(), this.headerLayout);
  }
  return this.headerLayout;
 },
 GetDataRowLayout: function() {
  if(!this.dataRowLayout) {
   this.dataRowLayout = [ ];
   this.PopulateRowLayout(this.GetVisibleDataRowTree(), this.dataRowLayout);
  }
  return this.dataRowLayout;
 },
 GetHeaderLeafs: function() { 
  if(!this.headerLeafs) {
   this.headerLeafs = [ ];
   this.PopulateLeafs(this.GetVisibleHeaderTree(), this.headerLeafs);
  }
  return this.headerLeafs;
 },
 GetDataRowLeafs: function() { 
  if(!this.dataRowLeafs) {
   this.dataRowLeafs = [ ];
   this.PopulateLeafs(this.GetVisibleDataRowTree(), this.dataRowLeafs);
  }
  return this.dataRowLeafs;
 },
 PopulateVisualTreeNode: function(node, visibleColumns, isDataRowTree) {
  var nodeHash = isDataRowTree ? this.dataRowNodeHash : this.headerNodeHash;
  for(var i = 0; i < visibleColumns.length; i++) {
   var bandNode = node;
   var column = visibleColumns[i];
   var childColumns = this.GetVisibleChildColumns(column.index);
   if(this.UseColumnInVisualTree(column, childColumns, isDataRowTree)) {
    var child = this.CreateTreeNode(column.index, node);
    node.children.push(child);
    nodeHash[column.index] = child;
    bandNode = child;
   }
   if(childColumns.length > 0)
    this.PopulateVisualTreeNode(bandNode, childColumns, isDataRowTree);
  }
 },
 UseColumnInVisualTree: function(column, childColumns, isDataRowTree) {
  if(column.groupIndex > -1 && !this.GetShowGroupedColumns())
   return false;
  if(isDataRowTree && column.isBand) {
   var childBandColumns = childColumns.filter(function(c) { return c.isBand; });
   if(childBandColumns.length > 0)
    return false;
   var visibleChildrenInTree = childColumns.filter(function(c) { return this.UseColumnInVisualTree(c, this.GetVisibleChildColumns(c.index), isDataRowTree); }.bind(this));
   return visibleChildrenInTree.length === 0;
  }
  return true;
 },
 GetChildColumns: function(columnIndex) {
  if(!this.childColumnHash[columnIndex])
   this.childColumnHash[columnIndex] = this.GetAllColumns().filter(function(c) { return c.parentIndex === columnIndex; });
  return this.childColumnHash[columnIndex];
 },
 GetVisibleChildColumns: function(columnIndex, unsorted) {
  columnIndex = parseInt(columnIndex);
  if(unsorted)
   return this.FindVisibleChildColumns(columnIndex, unsorted);
  if(!this.sortedVisibleChildColumnsHash[columnIndex])
   this.sortedVisibleChildColumnsHash[columnIndex] = this.FindVisibleChildColumns(columnIndex);
  return this.sortedVisibleChildColumnsHash[columnIndex];
 },
 FindVisibleChildColumns: function(columnIndex, unsorted) {
  var columns = this.GetChildColumns(columnIndex).filter(function(c) { return c.visible; }.bind(this));
  if(!unsorted)
   columns.sort(function(c1, c2) {
    var isRootLevel = columnIndex === -1;
    if(isRootLevel && this.IsColumnFixed(c1.index) !== this.IsColumnFixed(c2.index))
     return this.IsColumnFixed(c1.index) ? -1 : 1;
    if(c1.visibleIndex > c2.visibleIndex)
     return 1;
    if(c1.visibleIndex < c2.visibleIndex)
     return -1;
    return c1.collectionIndex - c2.collectionIndex;
   }.aspxBind(this));
  return columns;
 },
 PopulateRowLayout: function(node, layout) {
  for(var i = 0; i < node.children.length; i++) {
   var child = node.children[i];
   var levelIndex = this.FindNodeLayoutLevelIndex(child);
   while(layout.length < levelIndex + 1)
    layout.push([ ]);
   layout[levelIndex].push(child);
   this.PopulateRowLayout(child, layout);
  }
 },
 PopulateLeafs: function(node, leafs) {
  for(var i = 0; i < node.children.length; i++) {
   var child = node.children[i];
   if(child.children.length > 0)
    this.PopulateLeafs(child, leafs);
   else
    leafs.push(child);
  }
 },
 FindNodeLayoutLevelIndex: function(node) {
  var level = 0;
  node = node.parent;
  while(node.parent) {
   level += node.rowSpan;
   node = node.parent;
  }
  return level;
 },
 PopulateDataRowNodeSpans: function(root) {
  this.GetVisibleHeaderTree(); 
  root.rowSpan = root.colSpan = 1;
  var useBandedRowLayout = true; 
  for(var key in this.dataRowNodeHash) {
   if(!this.dataRowNodeHash.hasOwnProperty(key)) continue;
   var dataRowNode = this.dataRowNodeHash[key];
   var headerNode = this.headerNodeHash[key];
   dataRowNode.colSpan = headerNode.colSpan;
   dataRowNode.rowSpan = useBandedRowLayout ? headerNode.rowSpan : 1;
  }
  var bandColumnIndices = [ ];
  for(var key in this.headerNodeHash) {
   if(!this.headerNodeHash.hasOwnProperty(key)) continue;
   var headerNode = this.headerNodeHash[key];
   if(headerNode.column && headerNode.column.isBand)
    bandColumnIndices.push(headerNode.column.index);
  }
  if(bandColumnIndices.length > 0 && useBandedRowLayout)
   this.NormalizeDataRowTreeNodeRowSpans(bandColumnIndices);
 },
 NormalizeDataRowTreeNodeRowSpans: function(bandColumnIndices) {
  var matrix = this.CreateLayoutMatrixInfo(this.GetHeaderLayout()).matrix;
  var height = matrix.length;
  var width = matrix[0].length;
  for(var j = 0; j < width; j++) {
   var lastNotBandColumnIndex = matrix[height - 1][j];
   for(var i = height - 2; i >= 0; i--) {
    var columnIndex = matrix[i][j];
    if(bandColumnIndices.indexOf(columnIndex) > -1)
     matrix[i][j] = lastNotBandColumnIndex;
    else 
     lastNotBandColumnIndex = columnIndex;
   }
  }
  for(var i = height - 1; i > 0; i--) {
   if(this.IsMatrixRowEqual(matrix, i, i - 1))
    matrix.splice(i, 1);
  }
  height = matrix.length;
  var columnRowSpan = { };
  for(var j = 0; j < width; j++) {
   var columnIndices = this.GetColumnIndicesByColInd(height, j, matrix);
   var groupedIndices = columnIndices.reduce(function(r, cI) { (r[cI] = r[cI] || [ ]).push(cI); return r; }, { });
   for(var columnIndex in groupedIndices) {
    if(!groupedIndices.hasOwnProperty(columnIndex)) continue;
    columnRowSpan[columnIndex] = groupedIndices[columnIndex].length;
   }
  }
  for(var columnIndex in columnRowSpan) {
   if(!columnRowSpan.hasOwnProperty(columnIndex)) continue;
   this.dataRowNodeHash[columnIndex].rowSpan = columnRowSpan[columnIndex];
  }
 },
 GetColumnIndicesByColInd: function(height, colInd, matrix) {
  return ASPx.Data.Range(height).map(function(i) { return matrix[i][colInd]; });
 },
 PopulateHeaderNodeSpans: function(root) {
  var leafs = [ ];
  this.PopulateLeafs(root, leafs);
  if(leafs.length === 0)
   return;
  var leafTreeLines = [ ];
  for(var i = 0; i < leafs.length; i++) {
   var treeLine = [ ];
   var current = leafs[i];
   while(current != null) {
    current.colSpan |= 0;
    current.colSpan++;
    current.rowSpan = current.column ? current.column.rowSpan : 1;
    treeLine.push(current);
    current = current.parent;
   }
   leafTreeLines.push(treeLine);
  }
  var normalizeIterationCount = 2;
  for(var i = 0; i < normalizeIterationCount; i++)
   this.NormalizeHeaderNodesRowSpan(leafTreeLines);
 },
 NormalizeHeaderNodesRowSpan: function(leafTreeLines) {
  var height = leafTreeLines.reduce(function(prevValue, treeLine) { return Math.max(prevValue, treeLine.length); }, 0);
  for(var i = 0; i < leafTreeLines.length; i++) {
   var treeLine = leafTreeLines[i];
   var rowSpanHeight = treeLine.reduce(function(prevValue, node) { return prevValue + node.rowSpan; }, 0);
   var diff = height - rowSpanHeight;
   if(diff < 0)
    this.CalculateTreeLineRowSpanProportionally(treeLine, height);
   else
    treeLine[0].rowSpan += diff; 
  }
 },
 CalculateTreeLineRowSpanProportionally: function(treeLine, requiredHeight) {
  var rowSpans = this.CalculateTreeLineRowSpanProportionallyCore(treeLine, requiredHeight);
  for(var i = 0; i < treeLine.length; i++)
   treeLine[i].rowSpan = rowSpans[i];
 },
 CalculateTreeLineRowSpanProportionallyCore: function(treeLine, requiredHeight) {
  var result = [ ];
  var height = treeLine.reduce(function(prevValue, node) { return prevValue + node.rowSpan; }, 0);
  var delta = requiredHeight - height;
  if(delta >= 0) 
   return result;
  delta *= -1;
  var excess = delta;
  for(var i = 0; i < treeLine.length; i++) {
   var node = treeLine[i];
   result[i] = node.rowSpan;
   if(excess <= 0) continue;
   var k = Math.ceil(delta * node.rowSpan / height) + 1;
   if(k >= node.rowSpan)
    k = node.rowSpan - 1;
   excess -= k;
   if(excess < 0)
    k += excess;
   result[i] -= k;
  }
  return result;
 },
 CreateTreeNode: function(columnIndex, parent) {
  if(parent === undefined)
   parent = null;
  return { columnIndex: columnIndex, children: [ ], parent: parent, column: this.FindColumn(columnIndex) };
 },
 CreateTreeLine: function(node, insertCurrent) {
  var result = [ ];
  var current = insertCurrent ? node : node.parent;
  while(current.column !== null) {
   result.push(current);
   current = current.parent;
  }
  return result;
 },
 Invalidate: function() {
  this.visibleHeaderTree = null;
  this.visibleDataRowTree = null;
  this.headerLayout = null;
  this.dataRowLayout = null;
  this.headerLeafs = null;
  this.dataRowLeafs = null;
  this.headerNodeHash = { };
  this.dataRowNodeHash = { };
  this.sortedVisibleChildColumnsHash = { };
  this.childColumnHash = { };
  this.fixedColumnsHash = null;
  this.visibleColumnIndices = null;
  this.rightTreeLines = null;
  this.cachedGroupColumns = -1;
 },
 GetOrderedColumns: function() {
  var columns = this.GetAllColumns();
  columns.sort(function(c1, c2) { return c1.index - c2.index; });
  return columns;
 },
 SerializeColumnVisibleState: function() {
  var state = [ ];
  var columns = this.GetOrderedColumns();
  state.push("clientvis" + columns.length);
  for(var i = 0; i < columns.length; i++) {
   var column = columns[i];
   state.push((column.visible ? "t" : "f") + column.visibleIndex);
  }
  return state.join("|");
 },
 SerializeColumnHierarchyState: function() {
  var state = [ ];
  var columns = this.GetOrderedColumns();
  state.push("clienthierar" + columns.length);
  for(var i = 0; i < columns.length; i++) {
   var column = columns[i];
   state.push(column.index + "|" + column.parentIndex);
  }
  return state.join("|");
 },
 CreateLayoutMatrixInfo: function(layout) {
  var matrix = [ ];
  var inverseMatrix = { };
  for(var i = 0; i < layout.length; i++) {
   var lastFreeIndex = 0;
   var level = layout[i];
   for(var j = 0; j < level.length; j++) {
    var node = level[j];
    lastFreeIndex = this.FindMatrixFreeCellIndex(matrix, i, lastFreeIndex);
    this.FillMatrixBlock(matrix, inverseMatrix, i, lastFreeIndex, node.rowSpan, node.colSpan, node.columnIndex);
    lastFreeIndex += node.colSpan;
   }
  }
  return { matrix: matrix, inverseMatrix: inverseMatrix };
 },
 FindMatrixFreeCellIndex: function(matrix, rowIndex, lastFreeCell) {
  var row = matrix[rowIndex];
  var result = lastFreeCell;
  if(row) {
   while(!isNaN(row[result]))
    result++;
  } 
  return result;
 },
 FillMatrixBlock: function(matrix, inverseMatrix, rowIndex, cellIndex, rowSpan, colSpan, columnIndex) {
  var rect = {
   top: rowIndex,
   bottom: rowIndex + rowSpan - 1,
   left: cellIndex,
   right: cellIndex + colSpan - 1
  };
  for(var i = rect.top; i <= rect.bottom; i++) {
   while(!matrix[i])
    matrix.push([]);
   for(var j = rect.left; j <= rect.right; j++)
    matrix[i][j] = columnIndex;
  }
  inverseMatrix[columnIndex] = rect;
 },
 IsMatrixRowEqual: function(matrix, i1, i2) {
  var row1 = matrix[i1];
  var row2 = matrix[i2];
  for(var j = 0; j < row1.length; j++) {
   if(row1[j] !== row2[j])
    return false;
  }
  return true;
 }
});
ASPx.GridViewColumnHelper = GridViewColumnHelper;
})();
(function(){
var GridViewConsts = {
 AdaptiveGroupPanelID: "DXAGroupPanel",
 AdaptiveHeaderPanelID: "DXAHeaderPanel",
 AdaptiveFooterPanelID: "DXAFooterPanel",
 AdaptiveGroupHeaderID: "DXADGroupHeader",
 AdaptiveHeaderID: "DXADHeader",
 HeaderTableID: "DXHeaderTable",
 FooterTableID: "DXFooterTable",
 FilterRowID: "DXFilterRow",
 DataRowID: "DXDataRow",
 DetailRowID: "DXDRow",
 EditingRowID: "DXEditingRow",
 EditingErrorItemID: "DXEditingErrorItem",
 EditFormTableCellID: "DXEFC",
 AdaptiveDetailRowID: "DXADRow",
 PreviewRowID: "DXPRow",
 GroupRowID: "DXGroupRow",
 GroupRowExpID: "DXGroupRowExp",
 EmptyDataRowID: "DXEmptyRow",
 FooterRowID: "DXFooterRow",
 GroupFooterRowID: "DXGFRow",
 HeaderRowID: "DXHeadersRow",
 BatchChangesPreviewGroupRowID: "DXBatchChangesPreviewGroupRow",
 CommandButtonID: "DXCBtn",
 DataRowTemplateCellID: "tcrow",
 GroupFooterRowTemplateCellID: "tcgfr",
 FooterRowTemplateCellID: "tcFooterRow",
 FilterRowTemplateCellID: "tcFR",
 CustDialogWindowID: "DXCDWindow",
 DataRowPattern: "_DXDataRow(?:-?\\d+|new)(?:_\\d+)?$",
 BandedRowPattern: "_DXDataRow(-?\\d+|new)_(\\d+)$",
 GridViewMarkerCssClass: "dxgv",
 ControlClassName: "dxgvControl",
 DataRowCssClass: "dxgvDataRow",
 GroupRowCssClass: "dxgvGroupRow",
 EmptyPagerRowCssClass: "dxgvEPDR",
 GroupFooterRowClass: "dxgvGroupFooter",
 GroupPanelCssClass: "dxgvGroupPanel",
 FooterRowClass: "dxgvFooter",
 FooterScrollDivContainerCssClass: "dxgvFSDC",
 HeaderScrollDivContainerCssClass: "dxgvHSDC",
 HeaderCellCssClass: "dxgvHeader",
 HeaderCellEllipsisContainerCssClass: "dxgvHCEC",
 CommandColumnCellCssClass: "dxgvCommandColumn",
 IndentCellCssClass: "dxgvIndentCell",
 InlineEditCellCssClass: "dxgvInlineEditCell",
 DetailCellCssClass: "dxgvDetailCell",
 DetailIndentCellCssClass: "dxgvDIC",
 DetailButtonCellCssClass: "dxgvDetailButton",
 AdaptivityDisabledCssClass: "dxgvAdD",
 AdaptivityEnabledCssClass: "dxgvAE",
 AdaptivityWithLimitEnabledCssClass: "dxgvALE",
 AdaptiveHiddenCssClass: "dxgvAH",
 AdaptiveIndentCellCssClass: "dxgvAIC",
 AdaptiveDetailShowButtonCssClass: "dxgvADSB",
 AdaptiveDetailHideButtonCssClass: "dxgvADHB",
 AdaptiveDetailTableCssClass: "dxgvADT",
 AdaptiveDetailCaptionCellCssClass: "dxgvADCC",
 AdaptiveDetailDataCellCssClass: "dxgvADDC",
 AdaptiveDetailSpacerCellCssClass: "dxgvADSC",
 AdaptiveDetailCommandCellCssClass: "dxgvADCMDC",
 AdaptiveDetailLayoutItemContentCssClass: "dxgvADLIC",
 HorizontalExtraCellClassName: "dxgvHEC",
 HiddenHorizontalExtraCellMarkerClassName: "dxgvHHEC",
 FirstVisibleRowClassName: "dxgvFVR",
 LastVisibleRowClassName: "dxgvLVR",
 AccessibilityInvisibleRowClassName: "dxAIR",
 PageBottomVisibleCellsMarkerClassName: "dxgvPBVC",
 RemoveRightBorderClassName: "dxgRRB",
 BatchEditHiddenItemClassName: "dxgvBEHI",
 BatchEditChangesPreviewClassName: "dxgvBECP",
 BatchEditChangesPreviewScrollDivClassName: "dxgvBECPSD",
 CommandButtonTemplateReplacementMarkerCssClass: "dxgvCBTR",
 UnspecifiedScrollPosition: -1
};
var GridViewRowType = { Header: 1, Filter: 2, Data: 3, Group: 4, GroupFooter: 5, Footer: 6, InlineEdit: 7, BatchEtalon: 8 };
var GridViewAdaptiveDetailButtonPosition = { None: 0, Left: 1, Right: 2 };
var ASPxClientGridView = ASPx.CreateClass(ASPxClientGridBase, {
 NewRowVisibleIndex: -2147483647,
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.editMode = 2;
  this.enablePostponeResizing = false;
  this.FocusedRowChanged = new ASPxClientEvent();
  this.RowFocusing = new ASPxClientEvent();
  this.ColumnStartDragging  = new ASPxClientEvent();
  this.ColumnResizing  = new ASPxClientEvent();
  this.ColumnResized  = new ASPxClientEvent();
  this.ColumnMoving = new ASPxClientEvent();
  this.RowExpanding  = new ASPxClientEvent();
  this.RowCollapsing  = new ASPxClientEvent();
  this.DetailRowExpanding  = new ASPxClientEvent();
  this.DetailRowCollapsing  = new ASPxClientEvent();
  this.RowClick  = new ASPxClientEvent();
  this.RowDblClick  = new ASPxClientEvent();
  this.ContextMenu = new ASPxClientEvent();
  this.ContextMenuItemClick = new ASPxClientEvent();
  this.BatchEditRowValidating = new ASPxClientEvent();
  this.BatchEditRowInserting = new ASPxClientEvent();
  this.BatchEditRowDeleting = new ASPxClientEvent();
  this.BatchEditRowRecovering = new ASPxClientEvent();
  this.BatchEditChangesPreviewShowing = new ASPxClientEvent();
  this.BatchEditChangesPreviewShown = new ASPxClientEvent();
  this.allowFixedGroups = false;
  this.virtualScrollMode = 0;
  this.fixedColumnCount = 0;
  this.hasDetailRows = false;
  this.showDetailButton = true;
  this.showGroupButton = true;
  this.adaptiveButtonPos = GridViewAdaptiveDetailButtonPosition.None;
  this.showColumnHeaders = true;
  this.showGroupedColumns = false;
  this.hasMergedGroups = false;
  this.hasFilterRowTemplate = false;
  this.hasDataRowTemplate = false;
  this.hasGroupRowTemplate = false;
  this.hasFooterRowTemplate = false;
  this.hasGroupFooterRowTemplate = false;
  this.allowChangeColumnHierarchy = false;
  this.allowColumnClientMove = false;
  this.tableHelper = null;
  this.dragHelper = null;
  this.batchEditHelper = null;
  this.custDialogHelper = null;
  this.columnAdjustor = null;
  this.virtualScrollingDelay = 500;
  this.adaptivityMode = 0;
  this.adaptiveColumnsOrder = [];
  this.adaptivityHelper = null;
  this.enableCustDialog = false;
  this.custDialogApplyButtonName = "";
  this.custDialogCloseButtonName = "";
 },
 applyAccessibilityAttributes: function() {
  this.setAriaDescription("headerLayoutElements");
 },
 GetGroupPanelContextMenu: function() { return ASPx.GetControlCollection().Get(this.name + "_DXContextMenu_GroupPanel"); },
 GetColumnContextMenu: function() { return ASPx.GetControlCollection().Get(this.name + "_DXContextMenu_Columns"); },
 GetRowContextMenu: function() { return ASPx.GetControlCollection().Get(this.name + "_DXContextMenu_Rows"); },
 GetFooterContextMenu: function() { return ASPx.GetControlCollection().Get(this.name + "_DXContextMenu_Footer"); },
 GetGroupFooterContextMenu: function() { return ASPx.GetControlCollection().Get(this.GetGroupFooterContextMenuName()); },
 GetCustDialogWindow: function() { return ASPx.GetControlCollection().Get(this.name + "_" + GridViewConsts.CustDialogWindowID); },
 GetCustDialogHelper: function() {
  if(!this.custDialogHelper && typeof(ASPx.GridViewCustDialogHelper) != "undefined" && this.GetCustDialogWindow())
   this.custDialogHelper = this.CreateCustDialogHelper();
  return this.custDialogHelper;
 },
 CreateCustDialogHelper: function() { return new ASPx.GridViewCustDialogHelper(this); },
 GetGroupFooterContextMenuName: function() { return this.name + "_DXContextMenu_GroupFooter"; },
 GetColumnCaption: function(columnIndex) {
  var result = "";
  if (this.columnCaptions && this.columnCaptions[columnIndex]) {
   result = this.columnCaptions[columnIndex];
  }
  return result;
 },
 GetItem: function(visibleIndex, level){
  var res = this.GetDataRow(visibleIndex, level);
  if(res == null) res = this.GetGroupRow(visibleIndex);
  return res;
 },
 GetDataItem: function(visibleIndex) { return this.GetDataRow(visibleIndex); },
 IsDataItem: function(visibleIndex) { return this.IsDataRow(visibleIndex); },
 GetRow: function(visibleIndex) { return this.GetItem(visibleIndex); },
 GetDataItemIDPrefix: function() { return GridViewConsts.DataRowID; },
 GetEmptyDataItemIDPostfix: function() { return GridViewConsts.EmptyDataRowID; },
 GetHotTrackItemPostfixes: function(){
  if(!this.HasBandedDataRows())
   return ASPxClientGridBase.prototype.GetHotTrackItemPostfixes.call(this);
  var postfixes = [ ];
  var layout = this.GetLayoutHelper().GetEtalonDataRowLayout();
  for(var i = 0; i < layout.length; i++)
   postfixes.push('_' + i);
  return postfixes;
 },
 GetEmptyDataItemCell: function() { 
  var row = this.GetEmptyDataItem();
  return row ? this.GetLastNonAdaptiveIndentCell(row) : null;
 },
 GetDataRow: function(visibleIndex, level) {
  return this.GetChildElement(GridViewConsts.DataRowID + visibleIndex + this.GetBandedRowLevelPostfix(level));
 },
 GetDataRowSelBtn: function(index) { 
  var rowsToCheck = this.GetRowsToFindSelectButton(index);
  var idPostfix = this.GetDataRowSelBtnIDPrefix(index);
  for(var i = 0; i < rowsToCheck.length; i++) {
   var button = this.FindSelectButton(rowsToCheck[i], idPostfix);
   if(button) return button;
  }  
  return null; 
 },
 GetRowsToFindSelectButton: function(visibleIndex) {
  var rows = this.GetBandedDataRows(visibleIndex);
  if(this.HasAnyAdaptiveElement())
   rows.push(this.GetAdaptiveDetailRow(visibleIndex));
  return rows;
 },
 GetEditingRow: function(obj, level) {
  if(!this.HasBandedDataRows())
   return ASPxClientGridBase.prototype.GetEditingRow.call(this, obj);
  return ASPx.GetElementById((obj ? obj.name : this.name) + this.EditingRowID + this.GetBandedRowLevelPostfix(level));
 },
 GetEditingRowElements: function() {
  var rows = [];
  ASPx.GetNodesByPartialId(this.GetMainTable(), this.EditingRowID, rows);
  var adaptiveInlineEditRow = this.GetAdaptiveInlineEditRow();
  if(adaptiveInlineEditRow)
   rows.push(adaptiveInlineEditRow);
  return rows;
 },
 GetBatchEtalonRow: function(levelIndex) {
  var partialId = this.GetDataItemIDPrefix() + this.EtalonBatchRecordPostFix;
  return this.GetChildElement(partialId + this.GetBandedRowLevelPostfix(levelIndex));
 },
 GetBandedRowLevelPostfix: function(level){
  if(!this.HasBandedDataRows()) return "";
  if(!ASPx.IsExists(level))
   level = 0;
  return "_" + level;
 },
 GetBatchDataRow: function(visibleIndex) {   
  return this.GetDataRow(visibleIndex);
 },
 GetBatchBandedDataRows: function(visibleIndex) { 
  return this.GetBandedDataRows(visibleIndex);
 },
 GetBatchDataCell: function(visibleIndex, columnIndex) {
  var column = this.GetColumn(columnIndex);
  if(!column) return null;
  var adaptiveCell = column.adaptiveHidden ? this.GetAdaptiveCell(visibleIndex, columnIndex) : null;
  return adaptiveCell ? adaptiveCell : this.GetDataCell(visibleIndex, columnIndex);
 },
 GetBatchChangesPreviewGroupRow: function(groupIndex) { return this.GetChildElement(GridViewConsts.BatchChangesPreviewGroupRowID + groupIndex); },
 GetBatchEditPreviewChangesGroupCells: function() {  
  var rows = ASPx.GetNodesByPartialClassName(this.GetGridTD(), "dxgvBatchEditChangesPreviewGroupRow");  
  return rows.map(function(row) { return this.GetLastNonAdaptiveIndentCell(row);}.bind(this));
 },
 IsBatchChagesViewMode: function () {
  var helper = this.GetBatchEditHelper();
  return helper && helper.IsChangesViewVisible();
 },
 GetRecordKeysForNavigation: function(includeDeleted) {
  if(this.IsBatchChagesViewMode())
   return this.GetBatchEditHelper().GetChangedRecordKeys();
  return this.GetRecordKeys(includeDeleted);
 },
 GetBatchOtherPagesChangedRecordVisibleIndices: function () {
  return this.GetBatchEditHelper().GetOtherPagesChangedRecordKeys().map(function(key) { return this.ConvertKeyToVisibleIndex(key); }.bind(this));
 },
 GetEditFormTableCell: function() { return ASPx.GetElementById(this.name + "_" + GridViewConsts.EditFormTableCellID); },
 HasBandedDataRows: function() { return this.GetLayoutHelper().GetEtalonDataRowLayout().length > 1; }, 
 GetBandedDataRows: function(visibleIndex) {
  var height = this.GetLayoutHelper().GetLayoutHeight();
  var rows = ASPx.Data.Range(height, 0).map(function(i) { return this.GetDataRow(visibleIndex, i); }.bind(this));
  return rows.filter(function(row) { return !!row; });
 },
 GetBandedInlineEditRows: function() {
  var height = this.GetLayoutHelper().GetLayoutHeight();
  var rows = ASPx.Data.Range(height, 0).map(function(i) { return this.GetEditingRow(this, i); }.bind(this));
  return rows.filter(function(row) { return !!row; });
 },
 GetEditingCell: function(columnIndex) { 
  var row = this.GetEditingRow();
  var cellIndex = this.GetDataCellIndex(columnIndex);
  return row ? row.cells[cellIndex] : null;
 },
 GetEditingErrorCell: function(row) { 
  var row = row || this.GetEditingErrorItem();
  return row ? this.GetLastNonAdaptiveIndentCell(row) : null;
 },
 GetErrorTextContainer: function(displayIn) {
  var errorRow = this.GetEditingErrorItem(displayIn);
  if(!errorRow) {
   var editRow = this.GetEditingRow(displayIn);
   if(editRow) {
    errorRow = this.CreateEditingErrorItem();
    errorRow.id = editRow.id.replace("DXEditingRow", this.EditingErrorItemID);
    this.UpdateEditingErrorRowColSpan(errorRow, editRow);
    ASPx.InsertElementAfter(errorRow, editRow);
   }
  }
  return this.GetEditingErrorCell(errorRow);
 },
 CreateEditingErrorItem: function() {
  var wrapperElement = document.createElement("div");
  var helper = this.GetStyleHelper();
  wrapperElement.innerHTML = "<table><tbody>" + helper.GetErrorItemHtml() + "</tbody></table>";
  var row = wrapperElement.firstChild.rows[0];
  for(var i = 0; i < row.cells.length; i++) {
   var cell = row.cells[i];
   var colSpan = parseInt(ASPx.Attr.GetAttribute(cell, "data-colSpan"));
   if(!isNaN(colSpan)) 
    cell.colSpan = colSpan;
  }
  return row;
 },
 UpdateEditingErrorRowColSpan: function(row, previousRow) {
  if(this.HasAnyAdaptiveElement()) {
   var errorCell = this.GetLastNonAdaptiveIndentCell(row);
   var adaptiveSampleCell = this.GetSampleAdaptiveDetailCell();
   errorCell.colSpan = adaptiveSampleCell.colSpan;
   errorCell.originalColSpan = adaptiveSampleCell.originalColSpan;
  } 
  if(this.GetFixedColumnsHelper() && this.IsEditFormEditMode()) {
   var errorCell = this.GetLastNonAdaptiveIndentCell(row);
   var editRowCell = this.GetLastNonAdaptiveIndentCell(previousRow);
   errorCell.colSpan = editRowCell.colSpan;
  }
 },
 GetCustDialogApplyButton: function() { return ASPx.GetControlCollection().Get(this.custDialogApplyButtonName); },
 GetCustDialogCloseButton: function() { return ASPx.GetControlCollection().Get(this.custDialogCloseButtonName); },
 PrepareCommandButton: function(button) {
  ASPxClientGridBase.prototype.PrepareCommandButton.call(this, button);
  if(this.enableCustDialog) {
   this.EnsureCommandButtonClickArgs(button);
   var commandName = button.gvClickArgs && button.gvClickArgs[0][0];
   if(commandName === "CustDialogApply")
    this.custDialogApplyButtonName = button.name;
   if(commandName === "CustDialogClose")
    this.custDialogCloseButtonName = button.name;
  }
 },
 GetDetailRow: function(visibleIndex) { return this.GetChildElement(GridViewConsts.DetailRowID + visibleIndex); },
 GetDetailCell: function(visibleIndex) { 
  var row = this.GetDetailRow(visibleIndex);
  return row ? this.GetLastNonAdaptiveIndentCell(row) : null;
 },
 GetPreviewRow: function(visibleIndex) { return this.GetChildElement(GridViewConsts.PreviewRowID + visibleIndex); },
 GetPreviewCell: function(visibleIndex) { 
  var row = this.GetPreviewRow(visibleIndex);
  return row ? this.GetLastNonAdaptiveIndentCell(row) : null;
 },
 GetSampleAdaptiveDetailRow: function() { return this.GetChildElement(GridViewConsts.AdaptiveDetailRowID); },
 GetSampleAdaptiveDetailCell: function() { 
  var row = this.GetSampleAdaptiveDetailRow();
  return row ? this.GetLastNonAdaptiveIndentCell(row) : null;
 },
 GetAdaptiveDataRow: function(visibleIndex) { 
  var getDataItem = this.GetDataRow.aspxBind(this);
  var isValidDataItem = function(item) { return !!item; };
  var getInlineEditItem = this.GetEditingRow.aspxBind(this);
  return this.GetAdaptiveItem(visibleIndex, getDataItem, isValidDataItem, getInlineEditItem);
 },
 GetBandedAdaptiveDataRows: function(visibleIndex) {
  var getDataItem = this.GetBandedDataRows.aspxBind(this);
  var isValidDataItem = function(item) { return item && item.length; };
  var getInlineEditItem = this.GetBandedInlineEditRows.aspxBind(this);
  return this.GetAdaptiveItem(visibleIndex, getDataItem, isValidDataItem, getInlineEditItem) || [ ];
 },
 GetAdaptiveItem: function(visibleIndex, getDataItem, isValidDataItem, getInlineEditItem) {
  if(this.IsGroupRow(visibleIndex))
   return null;
  var item = getDataItem(visibleIndex);
  if(isValidDataItem(item))
   return item;
  if(this.IsInlineEditMode())
   return getInlineEditItem();
  return null;
 },
 GetAdaptiveDetailRow: function(visibleIndex, forceCreate) {
  var row = this.GetChildElement(GridViewConsts.AdaptiveDetailRowID + visibleIndex);
  if(!row && forceCreate) {
   var sampleRow = this.GetSampleAdaptiveDetailRow();
   var dataRow = null;
   if(this.HasBandedDataRows()){
    var bandedRows = this.GetBandedAdaptiveDataRows(visibleIndex);
    if(bandedRows.length)
     dataRow = bandedRows[bandedRows.length - 1];
   } else {
    dataRow = this.GetAdaptiveDataRow(visibleIndex);
   }
   if(sampleRow && dataRow) {
    row = sampleRow.cloneNode(true);
    row.id = this.name + "_" + GridViewConsts.AdaptiveDetailRowID + visibleIndex;
    this.GetLastNonAdaptiveIndentCell(row).originalColSpan = this.GetLastNonAdaptiveIndentCell(sampleRow).originalColSpan;
    this.EnsureAdaptiveDetailRowStyle(row, dataRow);
    ASPx.InsertElementAfter(row, dataRow);
    for(var i = 0; i < this.indentColumnCount; i++)
     row.cells[i].style.borderBottomWidth = dataRow.cells[i].style.borderBottomWidth;
   }
  }
  return row;
 },
 GetAdaptiveInlineEditRow: function() {
  if(!this.IsInlineEditMode() || !this.HasAdaptivity())
   return null;
  return this.GetAdaptiveDetailRow(this.editItemVisibleIndex);
 },
 GetAdaptiveHeaderContainer: function(columnIndex, adaptivePanel) { 
  if(!adaptivePanel) return null;
  var isGroupHeader = adaptivePanel === this.GetAdaptiveGroupPanel();
  var headerID = this.GetAdaptiveHeaderID(columnIndex, isGroupHeader);
  var adaptiveHeader = document.getElementById(headerID);
  if(!adaptiveHeader)
   adaptiveHeader = this.CreateAdaptiveHeader(adaptivePanel, headerID, isGroupHeader);
  return adaptiveHeader.dxHeaderContainer;
 },
 GetAdaptiveHeaderID: function(columnIndex, isGroupHeader) {
  return this.name + "_" + (isGroupHeader ? GridViewConsts.AdaptiveGroupHeaderID : GridViewConsts.AdaptiveHeaderID) + columnIndex;
 },
 CreateAdaptiveHeader: function(adaptivePanel, headerID, isGroupHeader) {
  var header = this.GetSampleAdaptiveHeader(isGroupHeader).cloneNode(true);
  header.id = headerID;
  ASPx.SetElementDisplay(header, true);
  header.dxHeaderContainer = this.FindAdaptiveHeaderContainer(header);
  adaptivePanel.appendChild(header);
  return header;
 },
 FindAdaptiveHeaderContainer: function(header) {
  var table = ASPx.GetChildByTagName(header, "TABLE", 0);
  return table.rows[0];
 },
 RemoveAdaptiveHeaders: function() {
  var columnIndices = this.GetVisibleColumnIndices();
  for(var i = 0; i < columnIndices.length; i++) {
   var column = this.GetColumn(columnIndices[i]);
   var headerID = this.GetAdaptiveHeaderID(column.index, column.groupIndex > -1);
   var header = document.getElementById(headerID);
   ASPx.RemoveElement(header);
  }
 },
 GetAdaptiveGroupPanel: function() { return this.GetChildElement(GridViewConsts.AdaptiveGroupPanelID); },
 GetAdaptiveHeaderPanel: function() { return this.GetChildElement(GridViewConsts.AdaptiveHeaderPanelID); },
 GetAdaptiveFooterPanel: function() { return this.GetChildElement(GridViewConsts.AdaptiveFooterPanelID); },
 GetSampleAdaptiveHeader: function(isGroupHeader) { return this.GetChildElement(isGroupHeader ? GridViewConsts.AdaptiveGroupHeaderID : GridViewConsts.AdaptiveHeaderID); },
 IsCellAdaptiveHidden: function(cell) {
  return ASPx.ElementContainsCssClass(cell, ASPx.GridViewConsts.AdaptiveHiddenCssClass);
 },
 IsAdaptiveDetailHideButton: function(button) {
  return ASPx.ElementContainsCssClass(button.GetMainElement(), ASPx.GridViewConsts.AdaptiveDetailHideButtonCssClass);
 },
 IsAdaptiveDetailShowButton: function(button) {
  return ASPx.ElementContainsCssClass(button.GetMainElement(), ASPx.GridViewConsts.AdaptiveDetailShowButtonCssClass);
 },
 GetAdaptiveCell: function(visibleIndex, columnIndex) {
  var adaptiveDetailsCell = this.GetAdaptiveDetailCell(visibleIndex, false);
  return adaptiveDetailsCell && adaptiveDetailsCell.adaptiveDetailsCells ? adaptiveDetailsCell.adaptiveDetailsCells[columnIndex] : null;
 },
 GetAdaptiveDetailCell: function(visibleIndex, forceCreate) { 
  var row = this.GetAdaptiveDetailRow(visibleIndex, forceCreate);
  return row ? this.GetLastNonAdaptiveIndentCell(row) : null;
 },
 GetDetailButtonCell: function(visibleIndex, fromAdaptiveRow) {
  var row = fromAdaptiveRow ? this.GetAdaptiveDetailRow(visibleIndex) : this.GetAdaptiveDataRow(visibleIndex);
  return ASPx.GetChildByPartialClassName(row, GridViewConsts.DetailButtonCellCssClass);
 },
 GetGroupRow: function(visibleIndex) { 
  var element = this.GetChildElement(GridViewConsts.GroupRowID + visibleIndex);
  if(!element)
   element = this.GetExpandedGroupRow(visibleIndex);
  return element; 
 },
 GetGroupCell: function(visibleIndex) { 
  var row = this.GetGroupRow(visibleIndex);
  return row ? this.GetLastNonAdaptiveIndentCell(row) : null;
 },
 GetGroupLevel: function(visibleIndex){
  var group = this.GetGroupRow(visibleIndex);
  return group ? this.GetFooterIndentCount(group) : -1;
 },
 GetExpandedGroupRow: function(visibleIndex) { return this.GetChildElement(GridViewConsts.GroupRowID + "Exp" + visibleIndex); },
 GetGroupFooterRow: function(visibleIndex, level) { return this.GetChildElement(GridViewConsts.GroupFooterRowID + visibleIndex + this.GetBandedRowLevelPostfix(level)); },
 GetGroupFooterVisibleIndices: function() { 
  var ids = [].slice.call(this.GetMainTable().rows).map(function(row) { return row.id; });
  return this.GetGroupFooterVisibleIndicesCore(ids);
 },
 GetGroupFooterVisibleIndicesCore: function(ids) {
  var result = [ ];
  var regex = this.GetGroupFooterVisibleIndicesRegExp();
  for(var i = 0; i < ids.length; i++) {
   var matches = ids[i].match(regex);
   if(matches && matches[1]) {
    var index = parseInt(matches[1]);
    if(result.indexOf(index) === -1)
     result.push(index);
   }
  }
  return result;
 },
 GetGroupFooterVisibleIndicesRegExp: function() {
  var pattern = "^" + this.name + "_" + GridViewConsts.GroupFooterRowID + "(\\d+)(_(\\d+))?$";
  return new RegExp(pattern);
 },
 _isGroupRow: function(row) { return row.id.indexOf(GridViewConsts.GroupRowID) > -1; },
 IsHeaderRow: function(row) { return this.IsHeaderRowID(row.id); },
 IsHeaderRowID: function(id) { return id.indexOf(this.name + "_" + GridViewConsts.HeaderRowID) == 0; },
 IsEmptyHeaderID: function(id) { return id.indexOf(this.EmptyHeaderSuffix) > -1; },
 IsBandedDataRowID: function(id) {
  var pattern = new RegExp(this.name + GridViewConsts.BandedRowPattern);
  return pattern.test(id);
 },
 CreateEndlessPagingHelper: function(){
  return new ASPx.GridViewEndlessPagingHelper(this);
 },
 GetCssClassNamePrefix: function() { return "dxgv"; },
 GetFilterRow: function(level) { return this.GetChildElement(GridViewConsts.FilterRowID + this.GetBandedRowLevelPostfix(level)); },
 GetFilterCell: function(columnIndex) { return this.GetLayoutHelper().GetFilterCell(columnIndex); },
 GetDataCellIndex: function(columnIndex, visibleIndex) { 
  return this.GetLayoutHelper().GetDataCellIndex(columnIndex, visibleIndex);
 },
 GetColumnIndexByDataCell: function(dataCell) { 
  if(!dataCell) return -1;
  if(ASPx.IsExists(dataCell.columnIndex)) return dataCell.columnIndex;
  var dataRow = this.GetDataItemByChild(dataCell);
  var visibleIndex = dataRow ? this.getItemIndex(dataRow.id) : -1;
  var level = dataRow ? this.GetBandedDataRowLevelByID(dataRow.id) : -1;
  return this.GetLayoutHelper().GetColumnIndex(dataCell.cellIndex, visibleIndex, level);
 },
 GetColumnIndexByHeaderCell: function(headerCell){
  var match = headerCell.id.match(/_col(\d+)$/);
  if(match)
   return match[1];
  return -1;
 },
 GetDataItemByChild: function(element) { return ASPx.GetParent(element, this.IsDataItemElement.aspxBind(this)); },
 IsDataItemElement: function(item) {
  if(!item || !item.id) return false;
  var regex = new RegExp(GridViewConsts.DataRowPattern);
  return regex.test(item.id) || item.id.indexOf(GridViewConsts.BatchChangesViewRowID) > 0;
 },
 GetDataCell: function(visibleIndex, columnIndex) {
  return this.GetLayoutHelper().GetDataCell(visibleIndex, columnIndex);
 },
 GetDataCellByRow: function(row, columnIndex, visibleIndex){
  if(!row)
   return null;
  var cellIndex = this.GetDataCellIndex(columnIndex, visibleIndex);
  return (0 <= cellIndex && cellIndex < row.cells.length) ? row.cells[cellIndex] : null;
 },
 GetVisibleColumnIndices: function() { return this.GetColumnHelper().GetVisibleColumnIndices(); },
 GetArmatureCells: function(columnIndex) {
  var result = [ ];
  var cellIndex = this.GetDataCellIndex(columnIndex); 
  var tableHelper = this.GetTableHelper();
  if(tableHelper) {
   if(tableHelper.GetHeaderTable()) {
    var cells = tableHelper.GetArmatureCells(tableHelper.GetHeaderTable());
    if(cells) result.push(cells[cellIndex]);
   }
   if(tableHelper.GetContentTable()) {
    var cells = tableHelper.GetArmatureCells(tableHelper.GetContentTable());
    if(cells) result.push(cells[cellIndex]);
   }
   if(tableHelper.GetFooterTable()) {
    var cells = tableHelper.GetArmatureCells(tableHelper.GetFooterTable());
    if(cells) result.push(cells[cellIndex]);
   }
  }
  else {
   var mainTable = this.GetMainTable();
   result.push(mainTable.rows[0].cells[cellIndex]);
  }
  return result;
 },
 GetDataTableAccessibilityHeaderCells: function(columnIndex) {
  var result = [ ];
  if(this.accessibilityCompliant) {
   var cellIndex = this.GetDataCellIndex(columnIndex);
   var mainTable = this.GetMainTable();
   if(ASPx.ElementHasCssClass(mainTable.rows[1], GridViewConsts.AccessibilityInvisibleRowClassName))
    result.push(mainTable.rows[1].cells[cellIndex]);
  }
  return result;
 },
 GetLastNonAdaptiveIndentCell: function(row) {
  var count = 1;
  while(count <= row.cells.length){
   var cell = row.cells[row.cells.length - count];
   if(!ASPx.ElementHasCssClass(cell, GridViewConsts.AdaptiveIndentCellCssClass) && !ASPx.ElementHasCssClass(cell, GridViewConsts.HorizontalExtraCellClassName))
    return cell;
   count++;
  }
  return null;
 },
 GetHeaderScrollContainer:function() {
  return ASPx.GetNodeByClassName(this.GetMainElement(), GridViewConsts.HeaderScrollDivContainerCssClass);
 },
 GetFooterScrollContainer:function() {
  return ASPx.GetNodeByClassName(this.GetMainElement(), GridViewConsts.FooterScrollDivContainerCssClass);
 },
 SetHeadersClientEvents: function() {
  ASPxClientGridBase.prototype.SetHeadersClientEvents.call(this);
  if(!this.AllowResizing())
   return;
  var helper = this.GetResizingHelper();
  var attachMouseMove = function(headerCell) { 
   ASPx.Evt.AttachEventToElement(headerCell, "mousemove", function(e) { helper.UpdateCursor(e, headerCell); });
  };
  this.AttachEventToHeaderCells(attachMouseMove, false);
 },
 GetFooterRow: function(level){
  return this.GetChildElement(GridViewConsts.FooterRowID + this.GetBandedRowLevelPostfix(level));
 },
 GetFooterCell: function(columnIndex) { return this.GetLayoutHelper().GetFooterCell(columnIndex); },
 GetUserCommandNamesForRow: function() { return ASPxClientGridBase.prototype.GetUserCommandNamesForRow().concat([ "ShowAdaptiveDetail", "HideAdaptiveDetail" ]); },
 GetItemVisibleIndexRegExp: function(dataAndGroupOnly) {
  var idParts = [ GridViewConsts.DataRowID, GridViewConsts.GroupRowID + "(?:Exp)?", GridViewConsts.AdaptiveDetailRowID ];
  if(!dataAndGroupOnly) {
   idParts.push(GridViewConsts.PreviewRowID);
   idParts.push(GridViewConsts.DetailRowID);
  }
  return this.GetItemVisibleIndexRegExpByIdParts(idParts);
 },
 IsMainTableChildElement: function(src) {
  if(!src) return true;
  var tables = [ this.GetMainTable() ];
  var tableHelper = this.GetTableHelper();
  if(tableHelper) {
   tables.push(tableHelper.GetHeaderTable());
   tables.push(tableHelper.GetFooterTable());
  }
  for(var i = 0; i < tables.length; i++) {
   if(ASPx.GetIsParent(tables[i], src))
    return true;
  }
  return false;
 },
 CreateBatchEditApi: function() { return new ASPxClientGridViewBatchEditApi(this); },
 IsVirtualScrolling: function() { return this.virtualScrollMode > 0; },
 IsVirtualSmoothScrolling: function() { return this.virtualScrollMode === 2; },
 SetData: function(data){
  if(data.adaptiveModeInfo)
   this.SetAdaptiveMode(data.adaptiveModeInfo);
 },
 CreateColumn: function(prop) { return new ASPxClientGridViewColumn(prop); },
 InitializeBubbleEvents: function() {
  ASPxClientGridBase.prototype.InitializeBubbleEvents.call(this);
  this.AttachHeaderTableClickEvents();
 },
 AttachHeaderTableClickEvents: function() {
  var tableHelper = this.GetTableHelper();
  if(!tableHelper)
   return;
  var headerTable = tableHelper.GetHeaderTable();
  if(headerTable)
   this.AttachTableClickEvents(headerTable);
 },
 InlineInitialize: function() {
  ASPxClientGridBase.prototype.InlineInitialize.call(this);
  this.UpdateAdjustmentFlags();
  this.GetColumnAdjustor().Initialize();
 },
 Initialize: function() {
  ASPxClientGridBase.prototype.Initialize.call(this);
  if(this.enableKeyboard) {
   this.kbdHelper = this.customKbdHelperName ? new ASPx[this.customKbdHelperName](this) : new ASPx.GridViewKbdHelper(this);
   this.kbdHelper.Init();
   ASPx.KbdHelper.RegisterAccessKey(this);
  }
  this.ResetStretchedColumnWidth();
  this.PrepareEditorsToKeyboardNavigation();
  this.AttachInternalContexMenuEventHandler();
  this.InitializeDropDownElementsScrolling();
  this.SetFixedColumnScrollableRows();
  this.PrepareFixedGroups();
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.Initialize();
  var custDialogHelper = this.GetCustDialogHelper();
  if(custDialogHelper)
   custDialogHelper.OnInit();
  var adaptivityHelper = this.GetAdaptivityHelper();
  if(adaptivityHelper)
   adaptivityHelper.OnInitialize();
 },
 AfterInitialize: function() {
  if(this.HasAdaptivityAdjuster())
   this.GetAdaptivityAdjuster().CollapseMasterGridIfNeed(this);
  ASPxClientControl.prototype.AfterInitialize.call(this);
 },
 PrepareFixedGroups: function() {
  var helper = this.GetFixedGroupsHelper();
  if(helper)
   helper.Initialize();
 },
 InitializeDropDownElementsScrolling: function() {
  if(this.HasVertScroll()) {
   this.ScrollableContainerDropDownEditors = null;
   var vertScrollableControl = this.GetScrollHelper().GetVertScrollableControl();
   ASPx.Evt.AttachEventToElement(vertScrollableControl, "scroll", function(evt) {
    if(ASPx.Evt.GetEventSource(evt) === vertScrollableControl)
     this.AdjustDropDownElements();
   }.aspxBind(this));
  }
 },
 InitializeCommandButtonsInContainer: function(container) {
  var buttons = container.querySelectorAll("*[id*=_" + GridViewConsts.CommandButtonID + "].dxbButtonSys." + GridViewConsts.CommandButtonTemplateReplacementMarkerCssClass);
  this.cButtonIDs = ASPx.NodeListToArray(buttons).filter(function(el) { return !el.cpGVCommandButtonInitialized; }).map(function(el) { return el.id; });
  this.PrepareCommandButtons();
 },
 AttachInternalContexMenuEventHandler: function() {
  if(this.IsDetailGrid()) {
   ASPx.Evt.AttachEventToElement(this.GetMainElement(), "contextmenu", function(e) {
    var showDefaultMenu = ASPx.EventStorage.getInstance().Load(e);
    if(showDefaultMenu)
     ASPx.Evt.CancelBubble(e);
    else 
     ASPx.EventStorage.getInstance().Save(e, true);
   }.aspxBind(this), true);
  }
 },
 AdjustControlCore: function() {
  ASPxClientGridBase.prototype.AdjustControlCore.call(this);
  this.GetColumnAdjustor().AdjustColumns();
  this.CalculateAdaptivity();
  this.UpdateIndentCellWidths();
  this.ValidateColumnWidths();
  this.UpdateFixedColumnsFrozenRowWidths();
 },
 IsAdjustmentRequired: function() {
  if(ASPxClientControl.prototype.IsAdjustmentRequired.call(this))
   return true;
  var scrollHelper = this.GetScrollHelper();
  return scrollHelper ? scrollHelper.IsRestoreScrollPosition() : false;
 },
 SaveCallbackSettings: function() {
  ASPxClientGridBase.prototype.SaveCallbackSettings.call(this);
  var helper = this.GetFixedColumnsHelper();
  if(helper != null) helper.SaveCallbackSettings();
 },
 RestoreCallbackSettings: function() {
  this.ResetStretchedColumnWidth();
  this.SetFixedColumnScrollableRows();
  var fixedColumnsHelper = this.GetFixedColumnsHelper();
  if(fixedColumnsHelper != null)
   fixedColumnsHelper.RestoreCallbackSettings();
  this.SaveAdaptiveScrollTop();
  this.UpdateScrollableControls();
  if(fixedColumnsHelper != null)
   fixedColumnsHelper.HideColumnsRelyOnScrollPosition();
  this.UpdateIndentCellWidths();
  this.ValidateColumnWidths();
  ASPxClientGridBase.prototype.RestoreCallbackSettings.call(this);
 },
 SaveAdaptiveScrollTop: function() {
  this.adaptiveScrollTop = this.stateObject.scrollState ? this.stateObject.scrollState[1] : null;
 },
 ApplyAdaptiveScrollTop: function() {
  if(ASPx.IsExists(this.adaptiveScrollTop)) {
   this.SetVerticalScrollPosition(this.adaptiveScrollTop);
   this.adaptiveScrollTop = null;
  }
 },
 GetPopupEditFormHorzOffsetCorrection: function(popup) {
  var scrollHelper = this.GetScrollHelper();
  return scrollHelper ? scrollHelper.GetPopupEditFormHorzOffsetCorrection(popup) : 0;
 },
 UpdateIndentCellWidths: function() {
  var tableHelper = this.GetTableHelper();
  if(tableHelper)
     tableHelper.UpdateIndentCellWidths();
 },
 UpdateFixedColumnsFrozenRowWidths: function() {
  var helper = this.GetFixedColumnsHelper();
  if(helper)
   helper.UpdateFrozenRowWidths();
 },
 OnBeforeCallbackOrPostBack: function() {
  ASPxClientGridBase.prototype.OnBeforeCallbackOrPostBack.call(this);
  this.SaveControlDimensions();
 },
 OnBeforeCallback: function(command) {
  ASPxClientGridBase.prototype.OnBeforeCallback.call(this, command);
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper && this.IsVirtualScrolling())
   scrollHelper.ClearVirtualScrollTimer();
 },
 OnAfterCallback: function() {
  ASPxClientGridBase.prototype.OnAfterCallback.call(this);
  this.GetColumnAdjustor().OnAfterCallback();
  this.SaveControlDimensions();
  this.GetContextMenuHelper().OnAfterCallack();
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.OnAfterCallback();
  var fixedGroupsHelper = this.GetFixedGroupsHelper();
  if(fixedGroupsHelper)
   fixedGroupsHelper.OnAfterCallback();
  this.PrepareEditorsToKeyboardNavigation();
  this.InitializeDropDownElementsScrolling();
  if(this.accessibilityCompliant)
   this.applyAccessibilityAttributes();
  var custDialogHelper = this.GetCustDialogHelper();
  if(custDialogHelper)
   custDialogHelper.OnAfterCallback();
  var adaptivityHelper = this.GetAdaptivityHelper();
  if(adaptivityHelper)
   adaptivityHelper.OnAfterCallback();
 },
 PrepareEditorsToKeyboardNavigation: function() {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  for(var i = 0; i < this.columns.length; i++) {
   this.AttachEventToEditor(this.columns[i].index, "GotFocus", function(s, e) { this.OnEditorGotFocus(s, e); }.aspxBind(this));
   this.AttachEventToEditor(this.columns[i].index, "KeyDown", function(s, e) { this.OnEditorKeyDown(s, e); }.aspxBind(this));
  }
 },
 RequireEditorsKeyboardNavigation: function() {
  return this.GetFixedColumnsHelper() && (this.IsInlineEditMode() || this.IsEditFormEditMode());
 },
 OnEditorGotFocus: function(s, e) {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  this.TryMakeNeighborEditorVisible(s);
 },
 OnEditorKeyDown: function(s, e) {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  var keyCode = ASPx.Evt.GetKeyCode(e.htmlEvent);
  if(keyCode !== ASPx.Key.Tab) return;
  var neighborEditor = this.GetNeighborEditor(s, e.htmlEvent.shiftKey);
  if(neighborEditor && this.TryMakeNeighborEditorVisible(neighborEditor)) {
   ASPx.Evt.PreventEventAndBubble(e.htmlEvent);
   ASPx.Selection.SetCaretPosition(s.GetInputElement());
   neighborEditor.Focus();
  }
 },
 GetNeighborEditor: function(editor, left) {
  var neighborEditor = null;
  if(this.IsEditFormEditMode()) {
   var neighborEditorIndex = this.editorIDList.indexOf(editor.name) + (left ? -1 : 1);
   var neighborEditorName = this.editorIDList[neighborEditorIndex];
   neighborEditor = ASPx.GetControlCollection().GetByName(neighborEditorName);
  } else {
   var matrix = this.GetHeaderMatrix();
   var neighborColumnIndex = left ? matrix.GetLeftNeighbor(editor.dxgvColumnIndex, true) : matrix.GetRightNeighbor(editor.dxgvColumnIndex, true);
   neighborEditor = this.GetEditorByColumnIndex(neighborColumnIndex);
  }
  return neighborEditor;
 },
 TryMakeNeighborEditorVisible: function(editor) {
  var helper = this.GetFixedColumnsHelper();
  if(this.IsEditFormEditMode())
   return helper.TryScrollToFocusedEditor(editor);
  var columnIndex = this.tryGetNumberFromEndOfString(editor.name).value;
  return helper.TryShowColumn(columnIndex, true);
 },
 IsInlineEditMode: function() { return this.editMode === 0; },
 IsEditFormEditMode: function() { return this.editMode === 1 || this.editMode === 2; },
 IsBatchEditMode: function() { return this.editMode === 4; },
 IsEditRowHasDisplayedDataRow: function() { return this.editMode >= 2; },
 canSortByColumn: function(headerElement) {
  if(this.IsBatchChagesViewMode())
   return false;
  return ASPxClientGridBase.prototype.canSortByColumn.call(this,headerElement);
 },
 canGroupByColumn: function(headerElement) {
  if(this.IsBatchChagesViewMode())
   return false;
  return this.getColumnObject(headerElement.id).allowGroup;
 },
 canDragColumn: function(headerElement) {
  if(this.IsBatchChagesViewMode() && !this.GetColumnMovingHelper())
   return false;
  var column = this._getColumnObjectByArg(this.getColumnIndex(headerElement.id));
  return !this.RaiseColumnStartDragging(column) && this.getColumnObject(headerElement.id).allowDrag;
 },
 doPagerOnClick: function(id) {
  if(!ASPx.IsExists(id)) return;
  this.AssignSlideAnimationDirectionByPagerArgument(id, this.pageIndex);
  if(ASPx.Browser.IE && this.kbdHelper)
   this.kbdHelper.Focus();
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.ResetScrollTop();
  ASPxClientGridBase.prototype.doPagerOnClick.call(this, id);
 },
 TryStartColumnResizing: function(e, headerCell) {
  var helper = this.GetResizingHelper();
  if(!helper || !helper.CanStartResizing(e, headerCell))
   return false;
  var columnIndex = helper.GetResizingColumnIndex(e, headerCell);
  var column = this.columns.filter(function(c) { return c.index == columnIndex; })[0];
  if(this.RaiseColumnResizing(column))
   return false;
  helper.StartResizing(column.index);
  return true;
 },
 IsPossibleSelectItem: function(visibleIndex, newSelectedValue){  
  if(!this.IsDataRow(visibleIndex) || !ASPxClientGridBase.prototype.IsPossibleSelectItem.call(this, visibleIndex))
   return false;
  return !this.IsRowHiddenInBatchChangesPreviewMode(visibleIndex);
 },
 _isRowSelected: function(visibleIndex) {
  return this.IsDataRow(visibleIndex) && ASPxClientGridBase.prototype._isRowSelected.call(this, visibleIndex);
 },
 GetDataItemCountOnPage: function(){
  var dataRowCount = 0;
  for(var i = 0; i < this.pageRowCount; i++){
   var index = i + this.visibleStartIndex;
   if(!this.IsGroupRow(index))
    dataRowCount++;
  }
  return dataRowCount;
 },
 RequireProcessTableClickLikeCheckBoxClick: function(tableClickSource, visibleIndex) { 
  var dataCell = this.GetLayoutHelper().GetDataCellByChild(tableClickSource);
  if(dataCell) {
   var column = this.GetColumn(this.GetColumnIndexByDataCell(dataCell));
   if(column && column.isCommandColumn) {
    var checkBoxElement = this.GetDataRowSelBtn(visibleIndex);
    return checkBoxElement && ASPx.GetIsParent(dataCell, checkBoxElement);
   }
  }
  return false; 
 },
 IsPossibleFocusItem: function(visibleIndex) { 
  if(!ASPxClientGridBase.prototype.IsPossibleFocusItem.call(this, visibleIndex))
   return false;
  return !this.IsRowHiddenInBatchChangesPreviewMode(visibleIndex);
 },
 IsRowHiddenInBatchChangesPreviewMode: function(visibleIndex) { return this.IsBatchChagesViewMode() && !this.batchEditApi.HasChanges(visibleIndex); },
 GetFocusedItemStyle: function(visibleIndex, focused){
  var row = this.GetItem(visibleIndex);
  if(focused && row) {
   var helper = this.GetStyleHelper();
   return this._isGroupRow(row) ? helper.GetFocusedGroupItemStyle() : helper.GetFocusedItemStyle();
  }
  return ASPxClientGridBase.prototype.GetFocusedItemStyle.call(this, visibleIndex, focused);
 },
 RequireChangeItemStyle: function(visibleIndex, itemStyle){
  if(!ASPxClientGridBase.prototype.RequireChangeItemStyle.call(this, visibleIndex, itemStyle))
   return false;
  var helper = this.GetStyleHelper();
  return !helper.IsSelectedItemStyle(itemStyle) || !this.IsGroupRow(visibleIndex); 
 },
 UpdateItemsStyle: function() {
  this.UpdateFirstAndLastVisibleRowMarkers();
  ASPxClientGridBase.prototype.UpdateItemsStyle.call(this);
 },
 GetItemStyle: function(visibleIndex){
  var style = ASPxClientGridBase.prototype.GetItemStyle.call(this, visibleIndex);
  var helper = this.GetStyleHelper();
  if(helper.IsFocusedItemStyle(style) && this.IsGroupRow(visibleIndex))
   style = helper.GetFocusedGroupItemStyle();
  return style;
 },
 ApplyItemStyle: function(visibleIndex, styleInfo) {
  if(this.HasBandedDataRows() && !this.IsGroupRow(visibleIndex)){
   var rows = this.GetBandedDataRows(visibleIndex);
   for(var i = 0; i < rows.length; i++)
    this.ApplyElementStyle(rows[i], styleInfo);
  } else
   ASPxClientGridBase.prototype.ApplyItemStyle.call(this, visibleIndex, styleInfo);
  var adaptivityHelper = this.GetAdaptivityHelper();
  if(adaptivityHelper && !adaptivityHelper.IsResponsiveMode()) {
   if(adaptivityHelper.HasAnyAdaptiveElement() && !this.IsGroupRow(visibleIndex)) {
    var dataRows = this.HasBandedDataRows() ? this.GetBandedAdaptiveDataRows(visibleIndex) : [this.GetDataRow(visibleIndex)];
    var hideRow = function(row) { if(row) ASPx.AddClassNameToElement(row, GridViewConsts.AdaptiveHiddenCssClass); };
    dataRows.forEach(hideRow);
   }
   var adaptiveItem = this.GetAdaptiveDetailRow(visibleIndex);
   if(adaptiveItem) {
    ASPx.Attr.SaveStyleAttribute(adaptiveItem, "display");
    this.ApplyElementStyle(adaptiveItem, styleInfo);
    ASPx.Attr.RestoreStyleAttribute(adaptiveItem, "display");
   }
  }
 },
 EnsureAdaptiveDetailRowStyle: function(adaptiveRow, dataRow) {
  if(this.GetAdaptivityHelper().IsResponsiveMode()) 
   return;
  var visibleIndex = this.getItemIndex(dataRow.id);
  this.ApplyItemStyle(visibleIndex, this.GetStyleHelper().GetClearItemStyle());
  var exceptions = [ GridViewConsts.DataRowCssClass, GridViewConsts.AdaptiveHiddenCssClass, GridViewConsts.FirstVisibleRowClassName, GridViewConsts.LastVisibleRowClassName ];
  var classNames = ASPx.GetClassNameList(dataRow);
  classNames = classNames.filter(function(name) { 
   for(var i = 0; i < exceptions.length; i++) {
    if(exceptions[i].indexOf(name) > -1)
     return false;
   }
   return true; 
  });
  for(var i = 0; i < classNames.length; i++)
   ASPx.AddClassNameToElement(adaptiveRow, classNames[i]);
  adaptiveRow.style.cssText = dataRow.style.cssText + " " + adaptiveRow.style.cssText;
  this.UpdateItemStyle(visibleIndex);
 },
 OnScroll: function(evt){
 },
 getItemByHtmlEvent: function(evt) {
  return this.getItemByHtmlEventCore(evt, GridViewConsts.DataRowID) || this.getItemByHtmlEventCore(evt, GridViewConsts.GroupRowID) || this.getItemByHtmlEventCore(evt, GridViewConsts.AdaptiveDetailRowID);
 },
 IsHeaderChild: function(source) {
  if(!this.showColumnHeaders) return false;
  var headerRowCount = this.GetHeaderMatrix().GetRowCount();
  for(var i = 0; i < headerRowCount; i++) {
   if(ASPx.GetIsParent(this.GetHeaderRow(i), source))
    return true;
  }
  return false;
 },
 IsActionElement: function(mainElement, source) {
  if(this.testActionElement(source))
   return true;
  var parent = source;
  var controlCollection = ASPx.GetControlCollection();
  while(parent.id !== mainElement.id) {
   var control = controlCollection.Get(parent.id);
   if(this.IsActionClientControl(control))
    return true;
   parent = parent.parentElement;
  }  
  return false;
 },
 IsActionClientControl: function(control) {
  if(!ASPx.IsExists(control)) return false;
  var isClientButton = typeof(ASPxClientButton) !== "undefined" && control instanceof ASPxClientButton;
  var isClientEditBase = typeof(ASPxClientEditBase) !== "undefined" && control instanceof ASPxClientEditBase;
  return isClientButton || isClientEditBase;
 },
 IsDetailGridFocused: function(evt) {
  var result = false;
  var mainTable = this.GetMainTable();
  var target = ASPx.Evt.GetEventSource(evt);  
  ASPx.GetControlCollection().ForEachControl(function(control) {   
   var isDetailGrid = control instanceof ASPxClientGridView && control !== this && ASPx.GetIsParent(mainTable, control.GetMainElement());
   if(isDetailGrid) {
    var helper = control.GetCellFocusHelper();
    if(helper && ASPx.GetIsParent(helper.GetCurrentFocusedCell(), target)) {
     result = true;
     return true;
    }
   }
  }, this);
  return result;
 },
 IsMasterGridFor: function(detailGrid) {
  return ASPx.GetIsParent(this.GetMainTable(), detailGrid.GetMainElement());
 },
 NeedPreventGestures: function(element, mainElement) {
  var gridElement = ASPx.GetParent(element, function(el) { return ASPx.GetControlCollection().GetByName(el.id) instanceof ASPxClientGridView; });
  if(gridElement !== this.GetMainElement())
   return true;
  return ASPxClientGridBase.prototype.NeedPreventGestures.call(this, element, mainElement);
 },
 getItemIndex: function(rowId) {
  if(this.IsHeaderRowID(rowId))
   return -1;
  if(this.IsBandedDataRowID(rowId))
   return this.GetBandedDataRowVisibleIndexByID(rowId);
  return ASPxClientGridBase.prototype.getItemIndex.call(this, rowId);
 },
 GetBandedDataRowLevelByID: function(rowId){
  if(!rowId) return -1;
  var matches = rowId.match(this.name + GridViewConsts.BandedRowPattern);
  return matches && matches.length > 2 ? parseInt(matches[2]) : -1;
 },
 GetBandedDataRowVisibleIndexByID: function(rowId){
  if(!rowId) return -1;
  var matches = rowId.match(this.name + GridViewConsts.BandedRowPattern);
  return matches && matches.length > 2 ? parseInt(matches[1]) : -1;
 },
 CreateBatchEditHelperOwner: function() { return new ASPx.GridViewBatchEditHelperOwner(this); },
 CreateCellFocusHelper: function() { return new ASPx.GridViewCellFocusHelper(this); },
 CreateStyleHelper: function() { return new GridViewStyleHelper(this); },
 GetColumnHelper: function() {
  if(!this.columnHelper)
   this.columnHelper = new ASPx.GridViewColumnHelper(this);
  return this.columnHelper;
 },
 GetColumnMovingHelper: function() {
  if(!this.allowColumnClientMove) return;
  if(!this.columnMovingHelper && typeof(ASPx.GridViewColumnMovingHelper) != "undefined")
   this.columnMovingHelper = new ASPx.GridViewColumnMovingHelper(this);
  return this.columnMovingHelper;
 },
 GetTableHelper: function() {
  if(!this.tableHelper)
   this.tableHelper = this.CreateTableHelper(this.MainTableID, GridViewConsts.HeaderTableID, GridViewConsts.FooterTableID, this.horzScroll, this.vertScroll);
  return this.tableHelper;
 },
 CreateTableHelper: function(contentTableIDSuffix, headerTableIDSuffix, footerTableIDSuffix, horzScroll, vertScroll) {
  if(typeof(ASPx.GridViewTableHelper) != "undefined")
   return new ASPx.GridViewTableHelper(this, contentTableIDSuffix, headerTableIDSuffix, footerTableIDSuffix, horzScroll, vertScroll);
 },
 GetScrollHelper: function() {
  if(!this.HasScrolling()) return null;
  if(!this.scrollableHelper)
   this.scrollableHelper = new ASPx.GridViewTableScrollHelper(this.GetTableHelper());
  return this.scrollableHelper;
 },
 GetFixedColumnsHelper: function() {
  if(!this.GetFixedColumnsDiv()) return null;
  if(!this.fixedColumnsHelper)
   this.fixedColumnsHelper = new ASPx.GridViewTableFixedColumnsHelper(this.GetTableHelper(), this.FixedColumnsDivID, this.FixedColumnsContentDivID, this.fixedColumnCount);
  return this.fixedColumnsHelper;
 },
 GetFixedGroupsHelper: function() {
  if(!this.allowFixedGroups) return null;
  if(!this.fixedGroupsHelper)
   this.fixedGroupsHelper = new ASPx.GridViewFixedGroupsHelper(this.GetTableHelper());
  return this.fixedGroupsHelper;
 },
 GetResizingHelper: function() {
  if(!this.AllowResizing()) return null;
  if(!this.resizingHelper)
   this.resizingHelper = new ASPx.GridViewTableResizingHelper(this.GetTableHelper());
  return this.resizingHelper;
 },
 GetHeaderMatrix: function() {
  if(!this.headerMatrix)
   this.headerMatrix = new GridViewHeaderMatrix(this);
  return this.headerMatrix;
 },
 GetContextMenuHelper: function() {
  if(!this.contextMenuHelper)
   this.contextMenuHelper = this.CreateContextMenuHelper();
  return this.contextMenuHelper;
 },
 CreateContextMenuHelper: function() { return new ASPx.GridViewContextMenuHelper(this); },
 CreateLayoutHelper: function() { return new ASPx.GridViewLayoutHelper(this); },
 CreateNavigationHelper: function() { return typeof(ASPx.GridViewNavigationHelper) != "undefined" ? new ASPx.GridViewNavigationHelper(this) : null; },
 CreateFilterHelper: function() { return new ASPx.GridViewFilterHelper(this); },
 CreateCallbackHelper: function() { return new GridViewCallbackHelper(this); },
 CreateToolbarHelper: function() { return new ASPx.GridViewToolbarHelper(this); },
 Invalidate: function() {
  this.GetColumnHelper().Invalidate();
  this.GetHeaderMatrix().Invalidate();
  ASPxClientGridBase.prototype.Invalidate.call(this);
 },
 ValidateColumnWidths: function() {
  var helper = this.GetResizingHelper();
  if(helper)
   helper.ValidateColumnWidths();
 },
 ResetStretchedColumnWidth: function() {
  var helper = this.GetResizingHelper();
  if(helper)
   helper.ResetStretchedColumnWidth();
 },
 SaveControlDimensions: function() {
  var helper = this.GetResizingHelper();
  if(helper)
   helper.SaveControlDimensions(true);
 },
 AdjustDropDownElements: function() {
  var vertScrollableControl = this.GetScrollHelper().GetVertScrollableControl();
  var scrollableRect = vertScrollableControl.getBoundingClientRect();
  ASPx.Data.ForEach(this.GetDropDownEditors(), function(dropDownEditor) {
   if(!ASPx.IsExists(dropDownEditor))
    return;
   var editorRect = dropDownEditor.GetMainElement().getBoundingClientRect();
   var editorBottomIsVisible = editorRect.top + editorRect.height < scrollableRect.bottom
    && editorRect.top + editorRect.height > scrollableRect.top;
   if(dropDownEditor.GetPopupControl().IsVisible())
    if(editorBottomIsVisible)
     dropDownEditor.AdjustDropDownWindow();
    else
     dropDownEditor.HideDropDown();
  });
 },
 GetDropDownEditors: function() {
  if(this.ScrollableContainerDropDownEditors === null) {
   var dropDownEditorPopupElementPostfixRegex = /_DDD_PW-\d+$/g;
   var controlCollection = ASPx.GetControlCollection();
   var vertScrollableControl = this.GetScrollHelper().GetVertScrollableControl();
   var popupElements = ASPx.GetNodesByClassName(vertScrollableControl, "dxpc-ddSys")
    .filter(function(element) { return element.id.match(dropDownEditorPopupElementPostfixRegex); });
   var editorNames = popupElements.map(function(element) { return element.id.replace(dropDownEditorPopupElementPostfixRegex, ""); });
   this.ScrollableContainerDropDownEditors = editorNames.map(controlCollection.GetByName.aspxBind(controlCollection));
  }
  return this.ScrollableContainerDropDownEditors;
 },
 BrowserWindowResizeSubscriber: function() {
  return this.IsFixedLayoutWithUnsetWidth() || this.enableCustDialog || ASPxClientGridBase.prototype.BrowserWindowResizeSubscriber.call(this);
 }, 
 IsFixedLayoutWithUnsetWidth: function() {
  var mainElement = this.GetMainElement();
  var mainTable = this.GetMainTable();
  if(mainElement && mainTable) {
   var mainElementStyle = ASPx.GetCurrentStyle(mainElement);
   var mainTableStyle = ASPx.GetCurrentStyle(mainTable);
   return mainTableStyle.tableLayout === "fixed" && mainElementStyle.width === "";
  }
 }, 
 OnBrowserWindowResize: function(e) {
  this.EndBatchEdit(e);
  if(this.AllowResizing() && !this.HasScrolling())
   this.ValidateColumnWidths();
  var custDialogHelper = this.GetCustDialogHelper();
  if(custDialogHelper)
   custDialogHelper.OnBrowserWindowResize(e);
  var fixedGroupsHelper = this.GetFixedGroupsHelper();
  if(fixedGroupsHelper)
   fixedGroupsHelper.OnBrowserWindowResize(e);
  this.AdjustControl();
 },
 ShowCustomizationDialog: function() {
  var window = this.GetCustDialogWindow();
  if(window)
   window.Show();
 },
 EndBatchEdit: function(e){ 
  var batchEditHelper = this.GetBatchEditHelper();
  if(this.HasAdaptivity() && batchEditHelper && e.prevWndWidth != e.wndWidth)
   batchEditHelper.EndEdit();
 },
 GetColumnAdjustor: function() {
  if(!this.columnAdjustor)
   this.columnAdjustor = this.CreateColumnAdjustor();
  return this.columnAdjustor;
 },
 CreateColumnAdjustor: function() {
  return new ASPx.GridViewColumnAdjustor(this);
 },
 GetAdaptivityHelper: function() {
  if(this.adaptivityMode === 0) return null;
  if(!this.adaptivityHelper)
   this.adaptivityHelper = this.CreateAdaptivityHelper();
  return this.adaptivityHelper;
 },
 HasAdaptivity: function() { return !!this.GetAdaptivityHelper(); },
 HasAnyAdaptiveElement: function() { 
  var helper = this.GetAdaptivityHelper();
  return helper && helper.HasAnyAdaptiveElement();
 },
 CreateAdaptivityHelper: function() {
  if(this.adaptivityMode === 1) {
   return this.GetLayoutHelper().IsFixedTableLayout()
    ? this.CreateFixedTableLayoutAdaptivityHelper()
    : this.CreateAutoTableLayoutAdaptivityHelper();
  }
  else if(this.adaptivityMode === 2)
   return this.CreateAdaptiveModeAdaptivityHelper();
  throw "Incorrect adaptivity mode.";
 },
 CreateFixedTableLayoutAdaptivityHelper: function() {
  return new ASPx.GridViewFixedTableLayoutAdaptivityHelper(this);
 },
 CreateAutoTableLayoutAdaptivityHelper: function() {
  return new ASPx.GridViewAutoTableLayoutAdaptivityHelper(this);
 },
 CreateAdaptiveModeAdaptivityHelper: function() {
  return new ASPx.GridViewAdaptiveModeAdaptivityHelper(this);
 },
 SetAdaptiveMode: function(data) {
  this.adaptivityMode = data.adaptivityMode;
  var adaptivityHelper = this.GetAdaptivityHelper();
  if(adaptivityHelper)
   adaptivityHelper.ApplySettings(data);
 },
 IsResponsiveAdaptivityMode: function() {
  var adaptivityHelper = this.GetAdaptivityHelper();
  return adaptivityHelper && adaptivityHelper.IsResponsiveMode();
 },
 HasAdaptivityAdjuster: function() {
  return !!this.GetAdaptivityAdjuster();
 },
 GetAdaptivityAdjuster: function() {
  if(ASPx.GetGridViewAdaptivityAdjuster)
   return ASPx.GetGridViewAdaptivityAdjuster();
  return null;
 },
 CalculateAdaptivity: function(forceCalculate) {
  var adaptivityHelper = this.GetAdaptivityHelper();
  if(adaptivityHelper)
   adaptivityHelper.CalculateAdaptivity(forceCalculate);
 },
 ResetAdaptivityOnCallback: function(){
  var adaptivityHelper = this.GetAdaptivityHelper();
  if(adaptivityHelper)
   adaptivityHelper.ResetAdaptivityOnCallback();
 },
 RestoreAdaptivityState: function() {
  var adaptivityHelper = this.GetAdaptivityHelper();
  if(adaptivityHelper)
   adaptivityHelper.RestoreAdaptivityState();
 },
 ToggleAdaptiveDetails: function(visibleIndex) {
  var adaptivityHelper = this.GetAdaptivityHelper();
  if(adaptivityHelper) {
   adaptivityHelper.ToggleAdaptiveDetails(visibleIndex, false, true);
   this.InvalidateLayout();
  }
 },
 UA_ShowAdaptiveDetail: function(visibleIndex) {
  this.ToggleAdaptiveDetails(visibleIndex);
 },
 UA_HideAdaptiveDetail: function(visibleIndex) {
  this.ToggleAdaptiveDetails(visibleIndex);
 },
 UA_ApplyMultiColumnAutoFilter: function() {
  this.ApplyOnClickRowFilter();
 },
 UA_CustDialogApply: function() {
  var helper = this.GetCustDialogHelper();
  if(helper)
   helper.ApplyChanges();
 },
 UA_CustDialogClose: function() {
  var helper = this.GetCustDialogHelper();
  if(helper)
   helper.CancelChanges();
 },
 UA_PreviewChanges: function() {
  var helper = this.GetBatchEditHelper();
  if(helper)
   helper.ShowPreviewChanges();
 },
 UA_HidePreview: function() {
  var helper = this.GetBatchEditHelper();
  if(helper)
   helper.HideChanges();
 },
 IsLastDataRow: function(visibleIndex) {
  return visibleIndex == this.visibleStartIndex + this.pageRowCount - 1 && (this.IsLastPage() || this.pageIndex < 0);
 },
 UpdateFirstAndLastVisibleRowMarkers: function() {
  if(this.HasBandedDataRows())
   return;
  if(!this.GetHeaderRow(0))
   this.UpdateExtemeVisibleRowMarker(true);
  this.UpdateExtemeVisibleRowMarker(false);
 },
 UpdateExtemeVisibleRowMarker: function(isFirstVisibleRow) {
  var tBody = ASPx.GetNodeByTagName(this.GetMainTable(), "TBODY", 0);
  var markerClassName = isFirstVisibleRow ? GridViewConsts.FirstVisibleRowClassName : GridViewConsts.LastVisibleRowClassName;
  var prevMarkedRows = ASPx.GetChildNodesByClassName(tBody, markerClassName);
  var styleHelper = this.GetStyleHelper();
  for(var i = 0; i < prevMarkedRows.length; i++) {
   styleHelper.RemoveClassFromElement(prevMarkedRows[i], markerClassName);
  }
  var exteremeRow = this.FindExtemeVisibleRow(isFirstVisibleRow);
  if(exteremeRow) {
   styleHelper.AddClassToElement(exteremeRow, markerClassName);
   if(!isFirstVisibleRow && this.GetLayoutHelper().HasCellMerging())
    this.MarkPageBottomVisibleCells(exteremeRow);
  }
 },
 MarkPageBottomVisibleCells: function(row) {
  var helper = this.GetLayoutHelper();
  var visibleIndex = this.getItemIndex(row.id);
  if(visibleIndex === -1)
   return;
  var headerLayout = helper.GetHeaderLayout()[helper.GetLayoutHeight(true) - 1];
  var headerColumnIndices = headerLayout.map(function(item) { return item.columnIndex; });
  for(var i = 0; i < headerColumnIndices.length; i++) {
   var columnIndex = headerColumnIndices[i];
   if(helper.IsHiddenMergedCell(visibleIndex, columnIndex))
    ASPx.AddClassNameToElement(this.GetDataCell(visibleIndex, columnIndex), GridViewConsts.PageBottomVisibleCellsMarkerClassName);
  }
 },
 FindExtemeVisibleRow: function(isFirstVisibleRow) {
  var rows = this.GetMainTable().rows;
  var rowCount = rows.length;
  for(var i = 0; i < rowCount; i++) {
   var row = isFirstVisibleRow ? rows[i] : rows[rowCount - 1 - i];
   if(this.IsVisibleRow(row))
    return row;
  }
  return this.GetEmptyDataItem();
 },
 IsVisibleRow: function(row) {
  var isDataRow = this.GetItemVisibleIndexRegExp(false).test(row.id);
  var isEditingRow = row.id && row.id.indexOf(this.EditingRowID) > -1;
  return ASPx.ElementContainsCssClass(row, this.EmptyPagerRowCssClass) || ((isDataRow || isEditingRow) && ASPx.GetElementDisplay(row));
 },
 OnGeneralCallback: function(result) {
  GetGridViewAdjuster().SaveDocumentScrollPosition(true);
  ASPxClientGridBase.prototype.OnGeneralCallback.call(this, result);
  if(this.hasDetailRows) {
   GetGridViewAdjuster().SetMasterGridForAdjust(this);
   if(this.HasAdaptivityAdjuster())
    this.GetAdaptivityAdjuster().SetNeedCollapseMasterGrid(this);
  }
 },
 OnCallbackFinalized: function() {
  this.ResetAdaptivityOnCallback();
  ASPxClientGridBase.prototype.OnCallbackFinalized.call(this);
  this.AdjustPagerControls();
  if(this.HasAdaptivityAdjuster())
   this.GetAdaptivityAdjuster().CalculateMasterDetailGridsAdaptivity(this);
  GetGridViewAdjuster().ResetDocumentScrollPosition();
 },
 SetWidth: function(width) {
  if(this.IsControlCollapsed())
   this.ExpandControl();
  var mainElemnt = this.GetMainElement();
  if(!ASPx.IsExistsElement(mainElemnt) || mainElemnt.offsetWidth === width) return;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.OnSetWidth(width);
  this.ResetControlAdjustment();
  ASPxClientControl.prototype.SetWidth.call(this, width);
 },
 NeedCollapseControlCore: function() {
  return this.IsResponsiveAdaptivityMode() || ASPxClientGridBase.prototype.NeedCollapseControlCore.call(this);
 },
 SortBy: function(column, sortOrder, reset, sortIndex){
    ASPxClientGridBase.prototype.SortBy.call(this, column, sortOrder, reset, sortIndex);
 },
 MoveColumn: function(column, columnMoveTo, moveBefore, moveToGroup, moveFromGroup){
  ASPxClientGridBase.prototype.MoveColumn.call(this, column, columnMoveTo, moveBefore, moveToGroup, moveFromGroup);
 },
 MoveColumnCore: function(sourceIndex, targetIndex, direction, moveToGroup, moveFromGroup) {
  var helper = this.GetColumnMovingHelper();
  var requireCallback = !helper || !helper.MoveColumn(sourceIndex, targetIndex, direction, moveToGroup, moveFromGroup);
  this.Invalidate();
  if(requireCallback)
   ASPxClientGridBase.prototype.MoveColumnCore.call(this, sourceIndex, targetIndex, direction, moveToGroup, moveFromGroup);
  else {
   var adaptivityHelper = this.GetAdaptivityHelper();
   if(adaptivityHelper) {
    adaptivityHelper.ResetAdaptivity();
    this.RemoveAdaptiveHeaders();
    adaptivityHelper.CalculateAdaptivity(true);
   }
   var fixedHelper = this.GetFixedColumnsHelper();
   if(fixedHelper)
    fixedHelper.OnColumnClientMove();
   this.SaveClientColumnStateToCookies();
   this.stateObject.columnMoveState = helper.GetColumnMoveState();
  }
 },
 GetColumnLayout: function() {
  var helper = this.GetColumnMovingHelper();
  return helper ? helper.GetColumnLayout() : null;
 },
 SetColumnLayout: function(layout) {
  var helper = this.GetColumnMovingHelper();
  if(helper)
   helper.SetColumnLayout(layout);
 },
 SaveClientColumnStateToCookies: function() {
  if(!this.cookieName) return;
  var cookieValue = ASPx.Cookie.GetCookie(this.cookieName);
  if(!cookieValue) return;
  var prevClientStateIndex = cookieValue.indexOf("|clientvis");
  if(prevClientStateIndex > -1)
   cookieValue = cookieValue.substr(0, prevClientStateIndex);
  var columnHelper = this.GetColumnHelper();
  var visibleState = columnHelper.SerializeColumnVisibleState();
  var hierarchyState = columnHelper.SerializeColumnHierarchyState();
  cookieValue += "|" + hierarchyState + "|" + visibleState;
  ASPx.Cookie.SetCookie(this.cookieName, cookieValue);
 },
 GroupBy: function(column, groupIndex, sortOrder){
  ASPxClientGridBase.prototype.GroupBy.call(this, column, groupIndex, sortOrder);
 },
 UnGroup: function(column){
  this.Ungroup(column);
 },
 Ungroup: function(column){
  ASPxClientGridBase.prototype.Ungroup.call(this, column);
 },
 ExpandAll: function(){
  ASPxClientGridBase.prototype.ExpandAll.call(this);
 },
 CollapseAll: function(){
  ASPxClientGridBase.prototype.CollapseAll.call(this);
 },
 ExpandAllDetailRows: function(){
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ShowAllDetail]);
 },
 CollapseAllDetailRows: function(){
  this.gridCallBack([ASPxClientGridViewCallbackCommand.HideAllDetail]);
 },
 ExpandRow: function(visibleIndex, recursive){
  if(this.RaiseRowExpanding(visibleIndex)) return;
  recursive = !!recursive;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ExpandRow, visibleIndex, recursive]);
 },
 CollapseRow: function(visibleIndex, recursive){
  if(this.RaiseRowCollapsing(visibleIndex)) return;
  recursive = !!recursive;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.CollapseRow, visibleIndex, recursive]);
 },
 MakeRowVisible: function(visibleIndex) {
  if(!this.HasVertScroll()) return;
  var row = this.GetItem(visibleIndex);
  if(row == null && visibleIndex >= this.visibleStartIndex && visibleIndex < this.visibleStartIndex + this.pageRowCount) 
   row = this.GetEditingRow();
  if(row == null) return;
  this.GetScrollHelper().MakeRowVisible(row);
 },
 ExpandDetailRow: function(visibleIndex){
  var key = this.GetRowKey(visibleIndex);
  if(key == null) return;
  if(this.RaiseDetailRowExpanding(visibleIndex)) return;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.ShowDetailRow, key]);
 },
 CollapseDetailRow: function(visibleIndex){
  var key = this.GetRowKey(visibleIndex);
  if(key == null) return;
  if(this.RaiseDetailRowCollapsing(visibleIndex)) return;
  this.gridCallBack([ASPxClientGridViewCallbackCommand.HideDetailRow, key]);
 },
 GetRowKey: function(visibleIndex) {
  return this.GetItemKey(visibleIndex);
 },
 StartEditRow: function(visibleIndex) {
    this.StartEditItem(visibleIndex);
 },
 StartEditRowByKey: function(key) {
  this.StartEditItemByKey(key);
 },
 IsNewRowEditing: function() {
  return this.IsNewItemEditing();
 },
 AddNewRow: function(){
    this.AddNewItem();
 },
 DeleteRow: function(visibleIndex){
  this.DeleteItem(visibleIndex);
 },
 DeleteRowByKey: function(key) {
  this.DeleteItemByKey(key);
 },
 GetFocusedRowIndex: function() {
  return this._getFocusedItemIndex();
 },
 SetFocusedRowIndex: function(visibleIndex) {
  return this._setFocusedItemIndex(visibleIndex);
 },
 SelectRows: function(visibleIndices, selected){
  this.SelectItemsCore(visibleIndices, selected, false);
 },
 SelectRowsByKey: function(keys, selected){
  this.SelectItemsByKey(keys, selected);
 },
 UnselectRowsByKey: function(keys){
  this.SelectRowsByKey(keys, false);
 },
 UnselectRows: function(visibleIndices){
  this.SelectRows(visibleIndices, false);
 },
 UnselectFilteredRows: function() {
  this.UnselectFilteredItemsCore();
 },
 SelectRowOnPage: function(visibleIndex, selected){
  if(!ASPx.IsExists(selected)) selected = true;
  this.SelectItem(visibleIndex, selected);
 },
 UnselectRowOnPage: function(visibleIndex){
  this.SelectRowOnPage(visibleIndex, false);
 },
 SelectAllRowsOnPage: function(selected){
  this.SelectAllItemsOnPage(selected);
 },
 UnselectAllRowsOnPage: function(){
  this.UnselectAllItemsOnPage();
 },
 GetSelectedRowCount: function() {
  return this._getSelectedRowCount();
 },
 IsRowSelectedOnPage: function(visibleIndex) {
  return this._isRowSelected(visibleIndex);
 },
 IsGroupRow: function(visibleIndex) {
  return this.GetGroupRow(visibleIndex) != null;
 },
 IsDataRow: function(visibleIndex) {
  return this.GetDataRow(visibleIndex) != null || this.HasBandedDataRows() && this.GetBandedDataRows(visibleIndex).length > 0;
 },
 IsGroupRowExpanded: function(visibleIndex) { 
  return this.GetExpandedGroupRow(visibleIndex) != null;
 },
 GetVertScrollPos: function() {
  return this.GetVerticalScrollPosition();
 },
 GetVerticalScrollPosition: function() {
  if(this.IsVirtualScrolling())
   return 0;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   return scrollHelper.GetVertScrollPosition();
  return 0;
 },
 GetHorzScrollPos: function() {
  return this.GetHorizontalScrollPosition();
 },
 GetHorizontalScrollPosition: function() {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   return scrollHelper.GetHorzScrollPosition();
  return 0;
 },
 SetVertScrollPos: function(value) {
  this.SetVerticalScrollPosition(value);
 },
 SetVerticalScrollPosition: function(value) {
  if(this.IsVirtualScrolling())
   return;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetVertScrollPosition(value);
 },
 SetHorzScrollPos: function(value) {
  this.SetHorizontalScrollPosition(value);
 },
 SetHorizontalScrollPosition: function(value) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetHorzScrollPosition(value);
 },
 SetFixedColumnScrollableRows: function(scrollableRowSettings) {
  var helper = this.GetFixedColumnsHelper();
  if(helper)
   helper.SetFixedColumnScrollableRows(scrollableRowSettings);
 },
 ExportTo: function(format) {
  ASPxClientGridBase.prototype.ExportTo.call(this, format);
 },
 RaiseItemClick: function(visibleIndex, htmlEvent) {
  if(!this.RowClick.IsEmpty()){
   var args = new ASPxClientGridViewRowClickEventArgs(visibleIndex, htmlEvent);
   this.RowClick.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseItemDblClick: function(visibleIndex, htmlEvent) {
  if(!this.RowDblClick.IsEmpty()){
   ASPx.Selection.Clear(); 
   var args = new ASPxClientGridViewRowClickEventArgs(visibleIndex, htmlEvent);
   this.RowDblClick.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseContextMenu: function(objectType, index, htmlEvent, menu, showBrowserMenu) {
  var args = new ASPxClientGridViewContextMenuEventArgs(objectType, index, htmlEvent, menu, showBrowserMenu);
  if(!this.ContextMenu.IsEmpty())
   this.ContextMenu.FireEvent(this, args);
  return !!args.showBrowserMenu;
 },
 RaiseFocusedItemChanged: function(isChangedOnServer) {
  if(!this.FocusedRowChanged.IsEmpty()){
   var args = new ASPxClientGridViewFocusEventArgs(isChangedOnServer);
   this.FocusedRowChanged.FireEvent(this, args);
   if(args.processOnServer)
    this.gridCallBack([ASPxClientGridViewCallbackCommand.FocusedRow]);
  }
  return false; 
 },
 RaiseItemFocusing: function(visibleIndex, htmlEvent) { 
  if(!this.RowFocusing.IsEmpty()){
   var args = new ASPxClientGridViewRowFocusingEventArgs(visibleIndex, htmlEvent);
   this.RowFocusing.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseColumnStartDragging: function(column) {
  if(!this.ColumnStartDragging.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnStartDragging.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseColumnResizing: function(column) {
  if(!this.ColumnResizing.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnResizing.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseColumnResized: function(column) {
  if(!this.ColumnResized.IsEmpty()){
   var args = new ASPxClientGridViewColumnProcessingModeEventArgs(column);
   this.ColumnResized.FireEvent(this, args);
   if(args.processOnServer)
    this.Refresh();
  }
 },
 RaiseRowExpanding: function(visibleIndex) {
  if(!this.RowExpanding.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.RowExpanding.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseRowCollapsing: function(visibleIndex) {
  if(!this.RowCollapsing.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.RowCollapsing.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseDetailRowExpanding: function(visibleIndex) {
  if(!this.DetailRowExpanding.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.DetailRowExpanding.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseDetailRowCollapsing: function(visibleIndex) {
  if(!this.DetailRowCollapsing.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.DetailRowCollapsing.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseBatchEditConfirmShowing: function(requestTriggerID) {
  if(!this.BatchEditConfirmShowing.IsEmpty()) {
   var args = new ASPxClientGridViewBatchEditConfirmShowingEventArgs(requestTriggerID);
   this.BatchEditConfirmShowing.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseBatchEditStartEditing: function(visibleIndex, column, rowValues) {
  var args = new ASPxClientGridViewBatchEditStartEditingEventArgs(visibleIndex, column, rowValues, this.ConvertVisibleIndexToKey(visibleIndex));
  if(!this.BatchEditStartEditing.IsEmpty())
   this.BatchEditStartEditing.FireEvent(this, args);
  return args;
 },
 RaiseBatchEditEndEditing: function(visibleIndex, rowValues) {
  var args = new ASPxClientGridViewBatchEditEndEditingEventArgs(visibleIndex, rowValues, this.ConvertVisibleIndexToKey(visibleIndex));
  if(!this.BatchEditEndEditing.IsEmpty())
   this.BatchEditEndEditing.FireEvent(this, args);
  return args;
 },
 RaiseBatchEditItemValidating: function(visibleIndex, validationInfo) {
  var args = new ASPxClientGridViewBatchEditRowValidatingEventArgs(visibleIndex, validationInfo, this.ConvertVisibleIndexToKey(visibleIndex));
  if(!this.BatchEditRowValidating.IsEmpty())
   this.BatchEditRowValidating.FireEvent(this, args);
  return args.validationInfo;
 },
 RaiseBatchEditTemplateCellFocused: function(columnIndex) {
  var column = this._getColumn(columnIndex);
  if(!column) return false;
  var args = new ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs(column);
  if(!this.BatchEditTemplateCellFocused.IsEmpty())
   this.BatchEditTemplateCellFocused.FireEvent(this, args);
  return args.handled;
 },
 RaiseBatchEditChangesSaving: function(valuesInfo) { 
  if(!this.BatchEditChangesSaving.IsEmpty()){
   var args = new ASPxClientGridViewBatchEditChangesSavingEventArgs(valuesInfo.insertedValues, valuesInfo.deletedValues, valuesInfo.updatedValues);
   this.BatchEditChangesSaving.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseBatchEditChangesCanceling: function(valuesInfo) { 
  if(!this.BatchEditChangesCanceling.IsEmpty()){
   var args = new ASPxClientGridViewBatchEditChangesCancelingEventArgs(valuesInfo.insertedValues, valuesInfo.deletedValues, valuesInfo.updatedValues);
   this.BatchEditChangesCanceling.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseBatchEditItemInserting: function(visibleIndex) { 
  if(!this.BatchEditRowInserting.IsEmpty()){
   var args = new ASPxClientGridViewBatchEditRowInsertingEventArgs(visibleIndex);
   this.BatchEditRowInserting.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseBatchEditItemDeleting: function(visibleIndex, itemValues) { 
  if(!this.BatchEditRowDeleting.IsEmpty()){
   var args = new ASPxClientGridViewBatchEditRowDeletingEventArgs(visibleIndex, itemValues, this.ConvertVisibleIndexToKey(visibleIndex));
   this.BatchEditRowDeleting.FireEvent(this, args);
   return args.cancel;
  }
  return false; 
 },
 RaiseBatchEditItemRecovering: function(visibleIndex, itemValues) { 
  if(!this.BatchEditRowRecovering.IsEmpty()){
   var args = new ASPxClientGridViewBatchEditRowRecoveringEventArgs(visibleIndex, itemValues, this.ConvertVisibleIndexToKey(visibleIndex));
   this.BatchEditRowRecovering.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseBatchEditChangesPreviewShowing: function() { 
  if(!this.BatchEditChangesPreviewShowing.IsEmpty()){
   var args = new ASPxClientCancelEventArgs();
   this.BatchEditChangesPreviewShowing.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseBatchEditChangesPreviewShown: function() { 
  if(!this.BatchEditChangesPreviewShown.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.BatchEditChangesPreviewShown.FireEvent(this, args);
  }
 },
 RaiseContextMenuItemClick: function(e, itemInfo) {
  if(this.ContextMenuItemClick.IsEmpty())
   return false;
  var args = new ASPxClientGridViewContextMenuItemClickEventArgs(e.item, itemInfo.objectType, itemInfo.index);
  this.ContextMenuItemClick.FireEvent(this, args);
  if(!args.handled && args.processOnServer) {
   this.GetContextMenuHelper().ProcessCustomContextMenuItemClick(args.usePostBack);
   return true;
  }
  return args.handled;
 },
 RaiseColumnMoving: function(targets) {
  if(this.ColumnMoving.IsEmpty()) return;
  var srcColumn = this.getColumnObject(targets.obj.id);
  var destColumn = this.getColumnObject(targets.targetElement.id);
  var isLeft = targets.isLeftPartOfElement();
  var isGroupPanel = targets.targetElement == targets.control.GetGroupPanel();
  var args = new ASPxClientGridViewColumnMovingEventArgs(srcColumn, destColumn, isLeft, isGroupPanel);
  this.ColumnMoving.FireEvent(this, args);
  if(!args.allow)
   targets.targetElement = null;
 },
 CreateCommandCustomButtonEventArgs: function(index, id){
  return new ASPxClientGridViewCustomButtonEventArgs(index, id);
 },
 CreateSelectionEventArgs: function(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer){
  return new ASPxClientGridViewSelectionEventArgs(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer);
 },
 CreateColumnCancelEventArgs: function(column){
  return new ASPxClientGridViewColumnCancelEventArgs(column);
 },
 CreateColumnMovingEventArgs: function(sourceColumn, destinationColumn, isDropBefore, isGroupPanel){
  return new ASPxClientGridViewColumnMovingEventArgs(sourceColumn, destinationColumn, isDropBefore, isGroupPanel);
 },
 CreateCellInfo: function(visibleIndex, column, key) { return new ASPxClientGridViewCellInfo(visibleIndex, column, key); },
 CreateFocusedCellChangingArgs: function(cellInfo) { return new ASPxClientGridViewFocusedCellChangingEventArgs(cellInfo); },
 GetRowValues: function(visibleIndex, fieldNames, onCallBack) {
  this.GetItemValues(visibleIndex, fieldNames, onCallBack);
 },
 GetPageRowValues: function(fieldNames, onCallBack) {
  this.GetPageItemValues(fieldNames, onCallBack);
 },
 GetVisibleRowsOnPage: function() {
  return this.GetVisibleItemsOnPage();
 }, 
 GetVisibleRowsIndicesForAdaptivity: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  var currentPageIndices = this.GetCurrentPageIndices();
  if(batchEditHelper) {
   if(batchEditHelper.IsChangesViewVisible())
    return batchEditHelper.GetChangedRecordKeys().map(function(key) { return this.ConvertKeyToVisibleIndex(key); }.bind(this));
   var indices = this.GetDataItemVisibleIndices(batchEditHelper.GetHighlightDeletedItems());
   var groupRowIndices = currentPageIndices.filter(function(index){ this.IsGroupRow(index); }.bind(this));
   return indices.concat(groupRowIndices);
  }
  if(this.IsInlineEditMode() && this.IsNewRowEditing()) 
   currentPageIndices.push(this.NewRowVisibleIndex);
  return currentPageIndices;
 },
 GetClientChangedVisibleIndices: function(includeDeleted, fromAPI) {
  var helper = this.GetBatchEditHelper();
  if(!helper) 
   return [ ];
  return helper.GetChangedRecordKeys().map(function(key) { return this.ConvertKeyToVisibleIndex(key); }.bind(this));
 },
 GetRowIndicesVisibleInViewPort: function(includePartiallyVisible) {
  var mainTable = this.GetMainTable();
  var treeLine = ASPx.GetElementTreeLine(mainTable).filter(function(element) {
   var style = ASPx.GetCurrentStyle(element);
   return style.overflow !== "visible" || style.overflowY !== "visible";
  });
  treeLine.push(mainTable);
  treeLine.push(document.body);
  var treeLineDimensions = treeLine.map(function(element) { 
   var y = ASPx.GetAbsoluteY(element);
   var height = element.tagName === "BODY" ? ASPx.GetDocumentClientHeight() : element.offsetHeight;
   return { element: element, top: y, bottom: y + height - 1 };
  });
  var mainTableViewPortTop = ASPx.Data.Max(treeLineDimensions, function(info) { return info.top; });
  var mainTableViewPortBottom = ASPx.Data.Min(treeLineDimensions, function(info) { return info.bottom; });
  var dataRowVisibleIndices = this.GetLayoutHelper().GetDataItemVisibleIndices();
  var groupRowVisibleIndices = ASPx.Data.Range(this.GetVisibleRowsOnPage(), this.GetTopVisibleIndex()).filter(function(i) { return this.IsGroupRow(i); }.bind(this));
  var dataRows = dataRowVisibleIndices.map(function(i) {   return { visibleIndex: i, row: this.GetDataRow(i) }; }.bind(this));
  var groupRows = groupRowVisibleIndices.map(function(i) { return { visibleIndex: i, row: this.GetGroupRow(i) }; }.bind(this));
  var result = dataRows.concat(groupRows).filter(function(rowInfo) {
   var rowTop = ASPx.GetAbsoluteY(rowInfo.row);
   var rowBottom = rowTop + rowInfo.row.offsetHeight - 1;
   if(includePartiallyVisible)
    return rowTop <= mainTableViewPortBottom && rowBottom >= mainTableViewPortTop;
   return rowTop >= mainTableViewPortTop && rowBottom <= mainTableViewPortBottom;
  }).map(function(rowInfo) { return rowInfo.visibleIndex; });
  ASPx.Data.ArrayIntegerSort(result);
  return result;
 },
 ApplyOnClickRowFilter: function() {
  this.GetFilterHelper().ApplyMultiColumnAutoFilter();
 },
 GetEditFormLayoutIDPostfix: function() {
  return "_DXEFL";
 }
});
ASPxClientGridView.Cast = ASPxClientControl.Cast;
var ASPxClientGridViewColumn = ASPx.CreateClass(ASPxClientGridColumnBase, {
 constructor: function(prop){
  this.constructor.prototype.constructor.call(this, prop);
  this.visibleIndex =    ASPx.IsExists(prop[8])  ? prop[8]  : -1;
  this.groupIndex =      ASPx.IsExists(prop[9])  ? prop[9]  : -1;
  this.columnType =      ASPx.IsExists(prop[10]) ? prop[10] : 0;
  this.filterRowTypeKind =  ASPx.IsExists(prop[11]) ? prop[11] : "";
  this.isFixed =      ASPx.IsExists(prop[12]) ?  !!prop[12] : false;
  this.allowGroup =      ASPx.IsExists(prop[13]) ?  !!prop[13] : true;
  this.allowDrag =    ASPx.IsExists(prop[14]) ?  !!prop[14] : true;
  this.parentIndex =     ASPx.IsExists(prop[15]) ? prop[15] : -1;
  this.inCustWindow =    ASPx.IsExists(prop[16]) ?  !!prop[16] : false;
  this.minWidth =     ASPx.IsExists(prop[17]) ? prop[17] : 0;
  this.maxWidth =     ASPx.IsExists(prop[18]) ? prop[18] : 0;
  this.rowSpan =      ASPx.IsExists(prop[19]) ? prop[19] : 1;
  this.showFilterMenuLikeItem =   ASPx.IsExists(prop[20]) ?  !!prop[20] : false;
  this.collectionIndex  =   ASPx.IsExists(prop[21]) ? prop[21] : -1;
  this.showInCustomizationForm =  ASPx.IsExists(prop[22]) ?  !!prop[22] : true;
  this.hasGroupRowTemplate =   ASPx.IsExists(prop[23]) ?  !!prop[23] : false;
  this.isCommandColumn = this.columnType === 1;
  this.isBand = this.columnType === 2;
 }
});
var ASPxClientGridViewColumnCancelEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(column){
  this.constructor.prototype.constructor.call(this);
  this.column = column;
 }
});
var ASPxClientGridViewColumnProcessingModeEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(column){
  this.constructor.prototype.constructor.call(this, false);
  this.column = column;
 }
});
var ASPxClientGridViewRowCancelEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex){
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
 }
});
var ASPxClientGridViewSelectionEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer){
  this.constructor.prototype.constructor.call(this, false);
  this.visibleIndex = visibleIndex;
  this.isSelected = isSelected;
  this.isAllRecordsOnPage = isAllRecordsOnPage;
  this.isChangedOnServer = !!isChangedOnServer;
 }
});
var ASPxClientGridViewFocusEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(isChangedOnServer){
  this.constructor.prototype.constructor.call(this, false);
  this.isChangedOnServer = !!isChangedOnServer;
 }
});
var ASPxClientGridViewRowFocusingEventArgs = ASPx.CreateClass(ASPxClientGridViewRowCancelEventArgs, {
 constructor: function(visibleIndex, htmlEvent){
  this.constructor.prototype.constructor.call(this, visibleIndex);
  this.htmlEvent = htmlEvent;
 }
});
var ASPxClientGridViewRowClickEventArgs = ASPx.CreateClass(ASPxClientGridViewRowCancelEventArgs, {
 constructor: function(visibleIndex, htmlEvent){
  this.constructor.prototype.constructor.call(this, visibleIndex);
  this.htmlEvent = htmlEvent;
 }
});
var ASPxClientGridViewContextMenuEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(objectType, index, htmlEvent, menu, showBrowserMenu) {
  this.constructor.prototype.constructor.call(this);
  this.objectType = objectType;
  this.index = index;
  this.htmlEvent = htmlEvent;
  this.menu = menu;
  this.showBrowserMenu = showBrowserMenu;
 }
});
var ASPxClientGridViewContextMenuItemClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(item, objectType, elementIndex, processOnServer){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.item = item;
  this.objectType = objectType;
  this.elementIndex = elementIndex;
  this.usePostBack = false;
  this.handled = false;
 }
});
var ASPxClientGridViewCustomButtonEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(visibleIndex, buttonID) {
  this.constructor.prototype.constructor.call(this, false);
  this.visibleIndex = visibleIndex;
  this.buttonID = buttonID;
 } 
});
var ASPxClientGridViewColumnMovingEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(sourceColumn, destinationColumn, isDropBefore, isGroupPanel) {
  this.constructor.prototype.constructor.call(this);
  this.allow = true;
  this.sourceColumn = sourceColumn;
  this.destinationColumn = destinationColumn;
  this.isDropBefore = isDropBefore;
  this.isGroupPanel = isGroupPanel;
 }
});
var ASPxClientGridViewBatchEditConfirmShowingEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditConfirmShowingEventArgs, {
 constructor: function(requestTriggerID) {
  this.constructor.prototype.constructor.call(this, requestTriggerID);
 }
});
var ASPxClientGridViewBatchEditStartEditingEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditStartEditingEventArgs, {
 constructor: function(visibleIndex, focusedColumn, itemValues, key) {
  this.constructor.prototype.constructor.call(this, visibleIndex, focusedColumn, itemValues);
  this.rowValues = this.itemValues;
  this.key = key;
 }
});
var ASPxClientGridViewBatchEditEndEditingEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditEndEditingEventArgs, {
 constructor: function(visibleIndex, itemValues, key) {
  this.constructor.prototype.constructor.call(this, visibleIndex, itemValues);
  this.rowValues = this.itemValues;
  this.key = key;
 }
});
var ASPxClientGridViewBatchEditRowValidatingEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditItemValidatingEventArgs, {
 constructor: function(visibleIndex, validationInfo, key) {
  this.constructor.prototype.constructor.call(this, visibleIndex, validationInfo);
  this.key = key;
 }
});
var ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditTemplateCellFocusedEventArgs, {
 constructor: function(column) {
  this.constructor.prototype.constructor.call(this, column);
 }
});
var ASPxClientGridViewBatchEditChangesSavingEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditClientChangesEventArgs, {
 constructor: function(insertedValues, deletedValues, updatedValues) {
  this.constructor.prototype.constructor.call(this, insertedValues, deletedValues, updatedValues);
 }
});
var ASPxClientGridViewBatchEditChangesCancelingEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditClientChangesEventArgs, {
 constructor: function(insertedValues, deletedValues, updatedValues) {
  this.constructor.prototype.constructor.call(this, insertedValues, deletedValues, updatedValues);
 }
});
var ASPxClientGridViewBatchEditRowInsertingEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditItemInsertingEventArgs, {
 constructor: function(visibleIndex) {
  this.constructor.prototype.constructor.call(this, visibleIndex);
 }
});
var ASPxClientGridViewBatchEditRowDeletingEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditItemDeletingEventArgs, {
 constructor: function(visibleIndex, itemValues, key) {
  this.constructor.prototype.constructor.call(this, visibleIndex, itemValues, key);  
  this.rowValues = this.itemValues;  
  this.key = key;
 }
});
var ASPxClientGridViewBatchEditRowRecoveringEventArgs = ASPx.CreateClass(ASPxClientGridBatchEditItemDeletingEventArgs, {
 constructor: function(visibleIndex, itemValues, key) {
  this.constructor.prototype.constructor.call(this, visibleIndex, itemValues, key);  
  this.rowValues = this.itemValues; 
  this.key = key;
 }
});
var ASPxClientGridViewFocusedCellChangingEventArgs = ASPx.CreateClass(ASPxClientGridFocusedCellChangingEventArgs, {
 constructor: function(cellInfo) {
  this.constructor.prototype.constructor.call(this, cellInfo);
 }
});
var ASPxClientGridViewCellInfo = ASPx.CreateClass(ASPxClientGridCellInfo, {
 constructor: function(visibleIndex, column, key) {
  this.constructor.prototype.constructor.call(this, visibleIndex, column);
  this.rowVisibleIndex = this.itemVisibleIndex;
  this.key = key;
 }
});
ASPx.GVContextMenu = function(name, e) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  var showDefaultMenu = gv.GetContextMenuHelper().OnContextMenuClick(e);
  if(!showDefaultMenu)
   ASPx.Evt.PreventEventAndBubble(e);
  return showDefaultMenu;
  }
 return true;
};
ASPx.GVContextMenuItemClick = function(name, e) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null)
  gv.GetContextMenuHelper().OnContextMenuItemClick(e);
};
ASPx.GVExpandRow = function(name, visibleIndex, event) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(ASPx.Evt.GetEventSource(event), true);
  gv.ExpandRow(visibleIndex);
 }
};
ASPx.GVCollapseRow = function(name, visibleIndex, event) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(ASPx.Evt.GetEventSource(event), true);
  gv.CollapseRow(visibleIndex);
 }
};
ASPx.GVShowDetailRow = function(name, visibleIndex, event) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(ASPx.Evt.GetEventSource(event), true);
  gv.ExpandDetailRow(visibleIndex);
 }
};
ASPx.GVHideDetailRow = function(name, visibleIndex, event) {
 var gv = ASPx.GetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(ASPx.Evt.GetEventSource(event), true);
  gv.CollapseDetailRow(visibleIndex);
 }
};
ASPx.Evt.AttachEventToElement(window, "scroll", function(evt) {
 ASPx.GetControlCollection().ForEachControl(function(control){
  if(control instanceof ASPxClientGridView && ASPx.IsExists(control.GetMainElement()))
   control.OnScroll(evt);
 });
});
var GridViewCallbackHelper = ASPx.CreateClass(ASPx.GridCallbackHelper, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
 },
 GetResizingState: function() { return this.grid.stateObject.resizingState; },
 GetContextMenuState: function() { return this.grid.GetContextMenuHelper().GetCallbackState(); },
 GetGridCallbackState: function() {
  var state = ASPx.GridCallbackHelper.prototype.GetGridCallbackState.call(this);
  return state.concat([
   [ "CR", this.GetResizingState() ],
   [ "CM", this.GetContextMenuState() ]
  ]);
 },
 ValidateCommand: function(command) {
  if(!ASPx.GridCallbackHelper.prototype.ValidateCommand.call(this, command))
   return false;
  if(this.IsBatchChangesViewMode() && command !== ASPxClientGridViewCallbackCommand.UpdateEdit)
   return false;
  return true;
 },
 IsBatchChangesViewMode: function() { return this.grid.IsBatchChagesViewMode(); }
});
var GridViewKbdHelper = ASPx.CreateClass(ASPx.KbdHelper, {
 constructor: function(control) {
  this.constructor.prototype.constructor.call(this, control);
  this.preventBrowserScrollOnFocus = false;
 },
 RequirePreventScrollOnFocus: function() { return this.preventBrowserScrollOnFocus; },
 CanFocus: function(e) {
  var grid = this.control;
  if(grid.IsDetailGridFocused(e))
   return false;
  var batchEditHelper = grid.GetBatchEditHelper();
  if(batchEditHelper && batchEditHelper.CanStartEditOnTableClick(grid.getItemByHtmlEvent(e), e))
   return false;  
  var popupsToCheck = [grid.GetCustomizationWindow(), grid.GetCustDialogWindow(), grid.GetFilterControlPopup(), grid.GetPopupEditForm(), grid.GetHeaderFilterPopup()];
  var isPopupVisible = popupsToCheck.some(function(p) { return p && p.IsVisible(); });
  if(isPopupVisible)
   return false;
  if(!this.canFocusOnActiveDropDownEditPopup())
   return false;
  return ASPx.KbdHelper.prototype.CanFocus(e);
 },
 canFocusOnActiveDropDownEditPopup: function() {
  return !this.getActiveDropDownEditPopup();
 },
 getActiveDropDownEditPopup: function() {
  var result = null;
  var activePopup = ASPx.GetPopupControlCollection && ASPx.GetPopupControlCollection().GetCurrentActiveWindowElement();
  if(activePopup) {
   var activePopupControl = ASPx.GetClientControlByElementID(activePopup.id);
   var isDropDownEditPopup = ASPx.IsExists(activePopupControl) && activePopupControl.usedInDropDown;
   if(isDropDownEditPopup) 
    result = activePopupControl;
  }
  return result;
 },
 HandleKeyDown: function(e) {
  this.moveIterationCount = 0;
  var grid = this.control;
  var index = grid.GetFocusedRowIndex();
  var busy = grid.keyboardLock;
  var key = ASPx.Evt.GetKeyCode(e);
  if(grid.rtl) {
   if(key == ASPx.Key.Left)
    key = ASPx.Key.Right;
   else if(key == ASPx.Key.Right)
    key = ASPx.Key.Left;
  }
  switch(key) {
   case ASPx.Key.Down:
    if(!busy) 
     this.TryMoveFocusDown(index, e.shiftKey, e);
    return true;
   case ASPx.Key.Up:
    if(!busy) 
     this.TryMoveFocusUp(index, e.shiftKey, e);
    return true;
   case ASPx.Key.Right:
    if(!busy) {
     if(!this.TryExpand(index))
      this.TryMoveFocusDown(index, e.shiftKey, e);
    }
    return true;
   case ASPx.Key.Left:
    if(!busy) {
     if(!this.TryCollapse(index))
      this.TryMoveFocusUp(index, e.shiftKey, e);
    }
    return true;
   case ASPx.Key.PageDown:
    if(e.shiftKey) {
     if(!busy && grid.pageIndex < grid.pageCount - 1)
      grid.NextPage();
     return true; 
    }
    break;
   case ASPx.Key.PageUp:
    if(e.shiftKey) {
     if(!busy && grid.pageIndex > 0)
      grid.PrevPage();
     return true; 
    }
    break;     
  }
  return false;
 },
 HandleKeyPress: function(e) {
  var grid = this.control;
  var index = grid.GetFocusedRowIndex();
  var busy = grid.keyboardLock;
  switch(ASPx.Evt.GetKeyCode(e)) {
   case ASPx.Key.Space:
    if(!busy && this.IsRowSelectable(index))
     if(grid.IsRowSelectedOnPage(index)) {
      grid.UnselectRowOnPage(index);
     } else {
      grid.SelectRowOnPage(index);
     }
    return true;
    case 43:
    if(!busy)
     this.TryExpand(index);
    return true;
    case 45: 
    if(!busy)   
     this.TryCollapse(index);    
    return true;
  }
  return false;
 },
 EnsureFocusedRowVisible: function() {
  var grid = this.control;
  if(!grid.HasVertScroll()) return;
  var row = grid.GetItem(grid.GetFocusedRowIndex());
  grid.GetScrollHelper().MakeRowVisible(row, true);
 },
 HasDetailButton: function(expanded) {
  var grid = this.control;
  var row = grid.GetItem(grid.GetFocusedRowIndex());
  if(!row) return;
  var needle = expanded ? "ASPx.GVHideDetailRow" : "ASPx.GVShowDetailRow";
  return row.innerHTML.indexOf(needle) > -1;
 },
 IsRowSelectable: function(index) {
  if(this.control.allowSelectByItemClick)
   return true;
  var row = this.control.GetItem(index);
  if(row && row.innerHTML.indexOf("aspxGVSelectRow") > -1)
   return true;
  var check = this.control.GetDataRowSelBtn(index); 
  if(check && this.control.internalCheckBoxCollection && !!this.control.internalCheckBoxCollection.Get(check.id))
   return true;
  return false;
 },
 UpdateShiftSelection: function(start, end) {
  var grid = this.control;
  grid.UnselectAllRowsOnPage();
  if(grid.lastMultiSelectIndex > -1)   
   start = grid.lastMultiSelectIndex;
  else   
   grid.lastMultiSelectIndex = start;
  if(grid.allowSelectSingleRowOnly)
   start = end;
  for(var i = Math.min(start, end); i <= Math.max(start, end); i++)
   grid.SelectRowOnPage(i);
 },
 TryExpand: function(index) {
  var grid = this.control;
  if(grid.IsGroupRow(index) && !grid.IsGroupRowExpanded(index)) {
   grid.ExpandRow(index);
   return true;
  }
  if(this.HasDetailButton(false)) {
   grid.ExpandDetailRow(index);
   return true;
  }
  return false;
 },
 TryCollapse: function(index) {
  var grid = this.control;
  if(grid.IsGroupRow(index) && grid.IsGroupRowExpanded(index)) {
   grid.CollapseRow(index);
   return true;
  }
  if(this.HasDetailButton(true)) {
   grid.CollapseDetailRow(index);
   return true;
  }
  return false;
 },
 TryMoveFocusDown: function(index, select, htmlEvent) {
  this.moveIterationCount++;
  var grid = this.control;
  if(index < grid.visibleStartIndex + grid.pageRowCount - 1) {
   var focusedRowIndex = index >= 0 ? index + 1 : grid.visibleStartIndex;
   var focusChanged = grid.TryFocusItem(focusedRowIndex, htmlEvent);
   this.EnsureFocusedRowVisible();
   if(this.IsRowSelectable(index)) {
    if(select) {
     this.UpdateShiftSelection(index, index + 1);
    } else {
     grid.lastMultiSelectIndex = -1;
    }
   }
   if(grid.allowFocusedRow && !grid.InCallback() && !focusChanged && this.moveIterationCount < 100)
    this.TryMoveFocusDown(++index, select, htmlEvent);
  } else {
   if(grid.pageIndex < grid.pageCount - 1 && grid.pageIndex >= 0) {       
    grid.NextPage();
   }
  }  
 },
 TryMoveFocusUp: function(index, select, htmlEvent) {
  this.moveIterationCount++;
  var grid = this.control;
  if(index > grid.visibleStartIndex || index == -1) {
   var focusedRowIndex = index >= 0 ? index - 1 : grid.visibleStartIndex + grid.pageRowCount - 1;
   var focusChanged = grid.TryFocusItem(focusedRowIndex, htmlEvent);
   this.EnsureFocusedRowVisible();
   if(this.IsRowSelectable(index)) {
    if(select) {
     this.UpdateShiftSelection(index, index - 1);
    } else {
     grid.lastMultiSelectIndex = -1;
    }
   }
   if(grid.allowFocusedRow && !grid.InCallback() && !focusChanged && this.moveIterationCount < 100)
    this.TryMoveFocusUp(--index, select, htmlEvent);
  } else {
   if(grid.pageIndex > 0) {
    grid.PrevPage(true);
   }
  }
 }
});
var GridViewHeaderMatrix = ASPx.CreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
 },
 Invalidate: function() {
  this.matrix = null;
  this.inverseMatrix = null;
 },
 GetRowCount: function() {
  this.EnsureMatrix();
  return this.matrix.length;
 },
 IsLeftmostColumn: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].left == 0;
 },
 IsRightmostColumn: function(columnIndex) {
  this.EnsureMatrix();  
  return this.inverseMatrix[columnIndex].right == this.matrix[0].length - 1;
 },
 IsLeaf: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix.hasOwnProperty(columnIndex) && this.inverseMatrix[columnIndex].bottom == this.matrix.length - 1;
 },
 GetLeaf: function(columnIndex, isLeft, isOuter) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  var row = this.matrix[this.matrix.length - 1];
  if(isLeft) {
   if(isOuter)
    return row[rect.left - 1];
   return row[rect.left];
  }
  if(isOuter)
   return row[rect.right + 1];
  return row[rect.right];
 },
 GetLeafIndex: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].left;
 },
 GetLeafIndices: function() {
  return this.GetRowIndices(this.GetRowCount() - 1);
 },
 GetRowIndices: function(rowIndex) {
  this.EnsureMatrix();
  return this.matrix[rowIndex] || [];
 },
 GetRowSpan: function(columnIndex) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  return rect.bottom - rect.top + 1;
 },
 GetLeftNeighbor: function(columnIndex, skipHidden) {
  return this.GetNeighbor(columnIndex, true, skipHidden);
 },
 GetRightNeighbor: function(columnIndex, skipHidden) {
  return this.GetNeighbor(columnIndex, false, skipHidden);
 },
 GetNeighbor: function(columnIndex, isLeft, skipHidden) {
  this.EnsureMatrix();
  if(!skipHidden)
   return this.GetNeighborCore(columnIndex, isLeft);
  var boundLeafIndex = this.GetBoundLeaf(isLeft);
  while(columnIndex !== boundLeafIndex) {
   columnIndex = this.GetNeighborCore(columnIndex, isLeft);
   if(isNaN(columnIndex) || !this.GetColumn(columnIndex).adaptiveHidden)
    return columnIndex;
  }
 },
 GetNeighborCore: function(columnIndex, isLeft) {
  var rect = this.inverseMatrix[columnIndex];
  var cellIndex = isLeft ? rect.left - 1 : rect.right + 1;
  return this.matrix[rect.top][cellIndex];
 },
 GetBoundLeaf: function(isLeft) {
  var leafs = this.GetLeafIndices();
  var cellIndex = isLeft ? 0 : leafs.length - 1;
  return leafs[cellIndex];
 },
 GetColumnLevel: function(columnIndex) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  return rect ? rect.top : -1;
 },
 GetColumnHelper: function() { return this.grid.GetColumnHelper(); },
 GetColumn: function(columnIndex) { return this.grid.GetColumn(columnIndex); },
 EnsureMatrix: function() {
  if(!this.matrix)
   this.Fill();
 },
 Fill: function() {
  var columnHelper = this.GetColumnHelper();
  var headerLayout = columnHelper.GetHeaderLayout();
  var info = columnHelper.CreateLayoutMatrixInfo(headerLayout);
  this.matrix = info.matrix;
  this.inverseMatrix = info.inverseMatrix;
 }
});
var GridViewAdjuster = ASPx.CreateClass(null, {
 constructor: function() {
  this.masterGridForAdjust = null;
  this.documentScrollTop = GridViewConsts.UnspecifiedScrollPosition;
  this.lockDocumentScrollRestoring = false;
 },
 GetMasterGridForAdjust: function() {
  return this.masterGridForAdjust;
 },
 SetMasterGridForAdjust: function(grid) {
  this.masterGridForAdjust = grid;
 },
 SaveDocumentScrollPosition: function(lockRestoring) {
  if(this.documentScrollTop === GridViewConsts.UnspecifiedScrollPosition)
   this.documentScrollTop = ASPx.GetDocumentScrollTop();
  this.lockDocumentScrollRestoring = this.lockDocumentScrollRestoring || lockRestoring;
 },
 RestoreDocumentScrollPosition: function(forceRestoring) {
  if((!this.lockDocumentScrollRestoring || forceRestoring) && this.documentScrollTop !== GridViewConsts.UnspecifiedScrollPosition) {
   if(this.documentScrollTop !== ASPx.GetDocumentScrollTop())
    ASPx.SetDocumentScrollTop(this.documentScrollTop);
   this.documentScrollTop = GridViewConsts.UnspecifiedScrollPosition;
  }
  this.lockDocumentScrollRestoring = this.lockDocumentScrollRestoring && !forceRestoring;
 },
 ResetDocumentScrollPosition: function() {
  this.documentScrollTop = GridViewConsts.UnspecifiedScrollPosition;
  this.lockDocumentScrollRestoring = false;
 }
});
var gridViewAdjuster = new GridViewAdjuster();
function GetGridViewAdjuster() {
 return gridViewAdjuster;
}
var GridViewStyleHelper = ASPx.CreateClass(ASPx.GridStyleHelper, {
 BatchEditNewItemKey: "beni",
 FocusedGroupItemKey: "fgi",
 GetFocusedGroupItemStyle: function() { return this.GetStyleInfo(this.FocusedGroupItemKey); },
 GetBatchEditNewItemStyle: function() { return this.GetStyleInfo(this.BatchEditNewItemKey); },
 IsFocusedItemStyle: function(style) { 
  return  ASPx.GridStyleHelper.prototype.IsFocusedItemStyle.call(this, style) || this.IsFocusedGroupItemStyle(style);
 },
 IsFocusedGroupItemStyle: function(style) { return this.CheckStyleInfoByKey(style, this.FocusedGroupItemKey); }
});
var ASPxClientGridViewBatchEditApi = ASPx.CreateClass(ASPxClientGridBatchEditApi, {
 constructor: function(grid) {
  this.constructor.prototype.constructor.call(this, grid);
 },
 ValidateRows: function(validateOnlyModified, validateOnCurrentPageOnly) { 
  var res = this.ValidateItems(validateOnlyModified, validateOnCurrentPageOnly); 
  var helper = this.GetHelper();
  var needShowPreviewChanges = !res && !validateOnCurrentPageOnly && !!helper && helper.IsCallbacksEnabled();
  if(needShowPreviewChanges)
   helper.ShowPreviewChanges(true);
  return res;
 },
 ValidateRow: function(visibleIndex) { return this.ValidateItem(visibleIndex); },
 ValidateRowByKey: function(key) { return this.ValidateItemByKey(key); },
 GetRowVisibleIndices: function(includeDeleted) { return !this.IsPreviewChangesVisible() ?  this.GetItemVisibleIndices(includeDeleted) : [ ]; },
 GetDeletedRowIndices: function() { return !this.IsPreviewChangesVisible() ? this.GetDeletedItemVisibleIndices() : [ ]; },
 GetInsertedRowIndices: function() { return this.GetInsertedItemVisibleIndices(); },
 GetUpdatedRowIndices: function() { return !this.IsPreviewChangesVisible() ? this.GetUpdatedItemVisibleIndices() : [ ]; },
 IsDeletedRow: function(visibleIndex) { return this.IsDeletedItem(visibleIndex); },
 IsDeletedRowByKey: function(key) { return this.IsDeletedItemByKey(key); },
 IsNewRow: function(visibleIndex) { return this.IsNewItem(visibleIndex); },
 AddNewRow: function() { this.AddNewItem(); },
 DeleteRow: function(visibleIndex) { this.DeleteItem(visibleIndex); },
 DeleteRowByKey: function(key) { this.DeleteItemByKey(key); },
 RecoverRow: function(visibleIndex) { this.RecoverItem(visibleIndex); },
 RecoverRowByKey: function(key) { this.RecoverItemByKey(key); },
 ShowChangesPreview: function () {
  var helper = this.GetHelper();
  if(helper)
   helper.ShowPreviewChanges();
 },
 HideChangesPreview: function () {
  var helper = this.GetHelper();
  if(helper)
   helper.HideChanges();
 },
 IsCurrentPageRow: function(key) { return this.IsCurrentPageRecord(key); },
 IsPreviewChangesVisible: function() {
  var helper = this.GetHelper();
  return !!helper && helper.IsChangesViewVisible();
 }
});
var ASPxClientGridViewGlobalEventsListener = ASPx.CreateClass(ASPxClientComponent, {
 OnGlobalEndCallback: function(args) {
  ASPxClientControl.prototype.OnGlobalEndCallback.call(this, args);
  var control = args.control;
  if(control instanceof ASPxClientGridView)
   return;
  var ownerGrid = control.findParentByType(ASPxClientGridView);
  if(ownerGrid && ownerGrid !== control)
   ownerGrid.InitializeCommandButtonsInContainer.call(ownerGrid, control.GetMainElement());
 }
});
var dummyGridViewGlobalEventsListener = new ASPxClientGridViewGlobalEventsListener("gvGlobalEventListener");
window.ASPxClientGridView = ASPxClientGridView;
window.ASPxClientGridViewColumn = ASPxClientGridViewColumn;
window.ASPxClientGridViewColumnCancelEventArgs = ASPxClientGridViewColumnCancelEventArgs;
window.ASPxClientGridViewColumnProcessingModeEventArgs = ASPxClientGridViewColumnProcessingModeEventArgs;
window.ASPxClientGridViewRowCancelEventArgs = ASPxClientGridViewRowCancelEventArgs;
window.ASPxClientGridViewSelectionEventArgs = ASPxClientGridViewSelectionEventArgs;
window.ASPxClientGridViewRowClickEventArgs = ASPxClientGridViewRowClickEventArgs;
window.ASPxClientGridViewContextMenuEventArgs = ASPxClientGridViewContextMenuEventArgs;
window.ASPxClientGridViewContextMenuItemClickEventArgs = ASPxClientGridViewContextMenuItemClickEventArgs;
window.ASPxClientGridViewCustomButtonEventArgs = ASPxClientGridViewCustomButtonEventArgs;
window.ASPxClientGridViewColumnMovingEventArgs = ASPxClientGridViewColumnMovingEventArgs;
window.ASPxClientGridViewBatchEditConfirmShowingEventArgs = ASPxClientGridViewBatchEditConfirmShowingEventArgs;
window.ASPxClientGridViewBatchEditStartEditingEventArgs = ASPxClientGridViewBatchEditStartEditingEventArgs;
window.ASPxClientGridViewBatchEditEndEditingEventArgs = ASPxClientGridViewBatchEditEndEditingEventArgs;
window.ASPxClientGridViewBatchEditRowValidatingEventArgs = ASPxClientGridViewBatchEditRowValidatingEventArgs;
window.ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs = ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs;
window.ASPxClientGridViewBatchEditChangesSavingEventArgs = ASPxClientGridViewBatchEditChangesSavingEventArgs;
window.ASPxClientGridViewBatchEditChangesCancelingEventArgs = ASPxClientGridViewBatchEditChangesCancelingEventArgs;
window.ASPxClientGridViewBatchEditRowInsertingEventArgs = ASPxClientGridViewBatchEditRowInsertingEventArgs;
window.ASPxClientGridViewBatchEditRowDeletingEventArgs = ASPxClientGridViewBatchEditRowDeletingEventArgs;
window.ASPxClientGridViewBatchEditRowRecoveringEventArgs = ASPxClientGridViewBatchEditRowRecoveringEventArgs;
window.ASPxClientGridViewFocusedCellChangingEventArgs = ASPxClientGridViewFocusedCellChangingEventArgs;
ASPx.GridViewHeaderMatrix = GridViewHeaderMatrix;
ASPx.GridViewKbdHelper = GridViewKbdHelper;
ASPx.GridViewConsts = GridViewConsts;
ASPx.GridViewRowType = GridViewRowType;
ASPx.GridViewCallbackHelper = GridViewCallbackHelper;
ASPx.GridViewAdaptiveDetailButtonPosition = GridViewAdaptiveDetailButtonPosition;
ASPx.GetGridViewAdjuster = GetGridViewAdjuster;
ASPx.GridViewStyleHelper = GridViewStyleHelper;
window.ASPxClientGridViewBatchEditApi = ASPxClientGridViewBatchEditApi;
window.ASPxClientGridViewCellInfo = ASPxClientGridViewCellInfo;
window.ASPxClientGridViewExportFormat = ASPx.ASPxClientGridExportFormat;
})();
(function() {
var ASPxClientEditBase = ASPx.CreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.EnabledChanged = new ASPxClientEvent();
  this.captionPosition = ASPx.Position.Left;
  this.showCaptionColon = true;
  this.scPrefix = "dxe";
 },
 InlineInitialize: function(){
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeEnabled(); 
  this.InitializeEvents();
 },
 InitializeEnabled: function() {
  this.SetEnabledInternal(this.clientEnabled, true);
 },
 InitializeEvents: function() { },
 AddDefaultReadOnlyStateControllerItem: function(cssClass, mainElementId) {
  ASPx.AddReadOnlyItems(mainElementId, [[[cssClass], [''], ['']]]);
 },
 AddDefaultDisabledStateControllerItem: function(cssClass, mainElementId) {
  ASPx.AddDisabledItems(mainElementId, [[[cssClass], [''], ['']]]);
 },
 GetValue: function() {
  var element = this.GetMainElement();
  if(ASPx.IsExistsElement(element))
   return element.innerHTML;
  return "";
 },
 GetValueString: function(){
  var value = this.GetValue();
  return (value == null) ? null : value.toString();
 },
 EnsureValueStringIsActual: function() {
  if(this.maskInfo != null)
   this.ParseValue();
 },
 SetValue: function(value) {
  if(value == null)
   value = "";
  var element = this.GetMainElement();
  if(ASPx.IsExistsElement(element))
   element.innerHTML = value;
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(enabled){
  if(this.clientEnabled != enabled) {
   var errorFrameRequiresUpdate = this.GetIsValid && !this.GetIsValid();
   if(errorFrameRequiresUpdate && !enabled)
    this.UpdateErrorFrameAndFocus(false , null , true );
   this.clientEnabled = enabled;
   this.SetEnabledInternal(enabled, false);
   if(errorFrameRequiresUpdate && enabled)
    this.UpdateErrorFrameAndFocus(false );
   this.RaiseEnabledChangedEvent();
  }
 },
 SetEnabledInternal: function(enabled, initialization){
  if(!this.enabled) return;
  if(!initialization || !enabled)
   this.ChangeEnabledStateItems(enabled);
  this.ChangeEnabledAttributes(enabled);
  if(ASPx.Browser.Chrome) {   
   var mainElement = this.GetMainElement();
   if(mainElement)
    mainElement.className = mainElement.className;
  } 
 },
 ChangeEnabledAttributes: function(enabled){
 },
 ChangeEnabledStateItems: function(enabled){
 },
 RaiseEnabledChangedEvent: function(){
  if(!this.EnabledChanged.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.EnabledChanged.FireEvent(this, args);
  }
 },
 GetDecodeValue: function (value) { 
  if(typeof (value) == "string" && value.length > 1)
   value = this.SimpleDecodeHtml(value);
  return value;
 },
 SimpleDecodeHtml: function (html) {
  return ASPx.Str.ApplyReplacement(html, [
   [/&lt;/g, '<'],
   [/&amp;/g, '&'],
   [/&quot;/g, '"'],
   [/&#39;/g, '\''],
   [/&#32;/g, ' ']
  ]);
 },
 GetCachedElementById: function(idSuffix) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.name + idSuffix);
 },
 GetCaptionCell: function() {
  return this.GetCachedElementById(EditElementSuffix.CaptionCell);
 },
 GetExternalTable: function() {
  return this.GetCachedElementById(EditElementSuffix.ExternalTable);
 },
 getCaptionRelatedCellCount: function() {
  if(!this.captionRelatedCellCount)
   this.captionRelatedCellCount = ASPx.GetNodesByClassName(this.GetExternalTable(), CaptionRelatedCellClassName).length;
  return this.captionRelatedCellCount;
 },
 addCssClassToCaptionRelatedCells: function() {
  if(this.captionPosition == ASPx.Position.Left || this.captionPosition == ASPx.Position.Right) {
   var captionRelatedCellsIndex = this.captionPosition == ASPx.Position.Left ? 0 : this.GetCaptionCell().cellIndex;
   for(var i = 0; i < this.GetExternalTable().rows.length; i++)
    ASPx.AddClassNameToElement(this.GetExternalTable().rows[i].cells[captionRelatedCellsIndex], CaptionRelatedCellClassName);
  }
  if(this.captionPosition == ASPx.Position.Top || this.captionPosition == ASPx.Position.Bottom)
   for(var i = 0; i < this.GetCaptionCell().parentNode.cells.length; i++)
    ASPx.AddClassNameToElement(this.GetCaptionCell().parentNode.cells[i], CaptionRelatedCellClassName);
 },
 GetCaption: function() {
  if(ASPx.IsExists(this.GetCaptionCell()))
   return this.getCaptionInternal();
  return "";
 },
 SetCaption: function(caption) {
  if(!ASPx.IsExists(this.GetCaptionCell()))
   return;
  if(this.getCaptionRelatedCellCount() == 0)
   this.addCssClassToCaptionRelatedCells();
  if(caption !== "")
   ASPx.RemoveClassNameFromElement(this.GetExternalTable(), ASPxEditExternalTableClassNames.TableWithEmptyCaptionClassName);
  else
   ASPx.AddClassNameToElement(this.GetExternalTable(), ASPxEditExternalTableClassNames.TableWithEmptyCaptionClassName);
  this.setCaptionInternal(caption);
 },
 getCaptionTextNode: function() {
  var captionElement = ASPx.GetNodesByPartialClassName(this.GetCaptionCell(), CaptionElementPartialClassName)[0];
  return ASPx.GetNormalizedTextNode(captionElement);
 },
 getCaptionInternal: function() {
  var captionText = this.getCaptionTextNode().nodeValue;
  if(captionText !== "" && captionText[captionText.length - 1] == ":")
   captionText = captionText.substring(0, captionText.length - 1);
  return captionText;
 },
 setCaptionInternal: function(caption) {
  caption = ASPx.Str.Trim(caption);
  var captionTextNode = this.getCaptionTextNode();
  if(this.showCaptionColon && caption[caption.length - 1] != ":" && caption !== "")
   caption += ":";
  captionTextNode.nodeValue = caption;
 },
 onVirtualKeyboardUITouchStart: function(evt) { }
});
var ValidationPattern = ASPx.CreateClass(null, {
 constructor: function(errorText) {
  this.errorText = errorText;
 }
});
var RequiredFieldValidationPattern = ASPx.CreateClass(ValidationPattern, {
 constructor: function(errorText) {
  this.constructor.prototype.constructor.call(this, errorText);
 },
 EvaluateIsValid: function(value) {
  return value != null && (value.constructor == Array || ASPx.Str.Trim(value.toString()) != "");
 }
});
var RegularExpressionValidationPattern = ASPx.CreateClass(ValidationPattern, {
 constructor: function(errorText, pattern) {
  this.constructor.prototype.constructor.call(this, errorText);
  this.pattern = pattern;
 },
 EvaluateIsValid: function(value) {
  if(value == null) 
   return true;
  var strValue = value.toString();
  if(ASPx.Str.Trim(strValue).length == 0)
   return true;
  var regEx = new RegExp(this.pattern);
  var matches = regEx.exec(strValue);
  return matches != null && strValue == matches[0];
 }
});
function _aspxIsEditorFocusable(inputElement) {
 return ASPx.IsFocusableCore(inputElement, function(container) {
  return container.getAttribute("errorFrame") == "errorFrame";
 });
}
var invalidEditorToBeFocused = null;
var ValidationType = {
 PersonalOnValueChanged: "ValueChanged",
 PersonalViaScript: "CalledViaScript",
 MassValidation: "MassValidation"
};
var ErrorFrameDisplay = {
 None: "None",
 Static: "Static",
 Dynamic: "Dynamic"
};
var EditElementSuffix = {
 ExternalTable: "_ET",
 ControlCell: "_CC",
 ErrorCell: "_EC",
 ErrorTextCell: "_ETC",
 ErrorImage: "_EI",
 CaptionCell: "_CapC",
 AccessibilityAdditionalTextRow: "_AHTR"
};
var ASPxEditExternalTableClassNames = {
 ValidStaticTableClassName: "dxeValidStEditorTable",
 ValidDynamicTableClassName: "dxeValidDynEditorTable",
 TableWithSeparateBordersClassName: "tableWithSeparateBorders",
 TableWithEmptyCaptionClassName: "tableWithEmptyCaption"
};
var CaptionRelatedCellClassName = "dxeCaptionRelatedCell";
var CaptionElementPartialClassName = "dxeCaption";
var AccessibilityAssistantID = "AcAs";
var ASPxClientEdit = ASPx.CreateClass(ASPxClientEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientEdit = true;
  this.inputElement = null;
  this.convertEmptyStringToNull = true;
  this.readOnly = false;
  this.clientReadOnly = false;
  this.focused = false;
  this.focusEventsLocked = false;
  this.receiveGlobalMouseWheel = true;
  this.styleDecoration = null;
  this.heightCorrectionRequired = false;
  this.customValidationEnabled = false;
  this.display = ErrorFrameDisplay.Static;
  this.initialErrorText = "";
  this.causesValidation = false;
  this.validateOnLeave = true;
  this.validationGroup = "";
  this.sendPostBackWithValidation = null;
  this.validationPatterns = [];
  this.setFocusOnError = false;
  this.errorDisplayMode = "it";
  this.errorText = "";
  this.isValid = true;
  this.errorImageIsAssigned = false;
  this.notifyValidationSummariesToAcceptNewError = false;
  this.isErrorFrameRequired = false;
  this.enterProcessed = false;
  this.keyDownHandlers = {};
  this.keyPressHandlers = {};
  this.keyUpHandlers = {};
  this.specialKeyboardHandlingUsed = false;
  this.onKeyDownHandler = null;
  this.onKeyPressHandler = null;
  this.onKeyUpHandler = null;
  this.onGotFocusHandler = null;
  this.onLostFocusHandler = null;
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.Validation = new ASPxClientEvent();
  this.ValueChanged = new ASPxClientEvent();
  this.KeyDown = new ASPxClientEvent();
  this.KeyPress = new ASPxClientEvent();
  this.KeyUp = new ASPxClientEvent();
  this.eventHandlersInitialized = false;
  this.ariaExplanatoryTextManager = null;
 },
 SetData: function(data){
  if(data.decorationStyles){
   for(var i = 0; i < data.decorationStyles.length; i++)
    this.AddDecorationStyle(data.decorationStyles[i].key, 
     data.decorationStyles[i].className, 
     data.decorationStyles[i].cssText);
  }
 },
 Initialize: function() {
  this.initialErrorText = this.errorText;
  ASPxClientEditBase.prototype.Initialize.call(this);
  this.InitializeKeyHandlers();
  this.UpdateClientValidationState();
  this.UpdateValidationSummaries(null , true );
 },
 InlineInitialize: function() {
  ASPxClientEditBase.prototype.InlineInitialize.call(this);
  this.UpdateStyleDecorations();
  var externalTable = this.GetExternalTable();
  if(externalTable && ASPx.IsPercentageSize(externalTable.style.width)) {
   this.width = "100%";
   this.GetMainElement().style.width = "100%";
   if(this.isErrorFrameRequired)
    externalTable.setAttribute("errorFrame", "errorFrame");
  }
  this.ariaExplanatoryTextManager = this.CreateAriaExplanatoryTextManager();
  if(this.clientReadOnly)
   this.SetReadOnlyInternal(true);
  this.UpdateErrorCellParentRowVisibility();
 }, 
 AfterInitialize: function() {
  this.ariaExplanatoryTextManager.SetCaptionAssociating();
  this.ariaExplanatoryTextManager.UpdateText();
  this.ariaExplanatoryTextManager.UpdateValidationState();
  ASPxClientEditBase.prototype.AfterInitialize.call(this);
 },
 UpdateStyleDecorations: function() {
  if(this.styleDecoration)
   this.styleDecoration.Update();
 },
 InitSpecialKeyboardHandling: function(){
  var name = this.name;
  this.onKeyDownHandler = function(evt) { ASPx.KBSIKeyDown(name,evt); };
  this.onKeyPressHandler = function(evt) { ASPx.KBSIKeyPress(name, evt); };
  this.onKeyUpHandler = function(evt) { ASPx.KBSIKeyUp(name, evt); };
  this.onGotFocusHandler = function(evt) { ASPx.ESGotFocus(name); };
  this.onLostFocusHandler = function(evt) { ASPx.ESLostFocus(name); };
  this.specialKeyboardHandlingUsed = true;
  this.InitializeDelayedSpecialFocus();
 },
 InitializeKeyHandlers: function() {
 },
 AddKeyDownHandler: function(key, handler) {
  this.keyDownHandlers[key] = handler;
 },
 AddKeyPressHandler: function(key, handler) {
  this.keyPressHandlers[key] = handler;
 },
 ChangeSpecialInputEnabledAttributes: function(element, method, doNotChangeAutoComplete){
  if(!doNotChangeAutoComplete) 
   element.autocomplete = "off";
  if(this.onKeyDownHandler != null)
   method(element, "keydown", this.onKeyDownHandler);
  if(this.onKeyPressHandler != null)
   method(element, "keypress", this.onKeyPressHandler);
  if(this.onKeyUpHandler != null)
   method(element, "keyup", this.onKeyUpHandler);
  if(this.onGotFocusHandler != null)
   method(element, "focus", this.onGotFocusHandler);
  if(this.onLostFocusHandler != null)
   method(element, "blur", this.onLostFocusHandler);
 },
 CreateAriaExplanatoryTextManager: function() {
  if(this.accessibilityCompliant)
   return new EditAccessibilityExplanatoryTextManager(this);
  else 
   return new DisableAccessibilityExplanatoryTextManager(this);
 },
 UpdateClientValidationState: function() {
  if(!this.customValidationEnabled)
   return;
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var validationState = !this.GetIsValid() ? ("-" + this.GetErrorText()) : "";
   this.UpdateStateObjectWithObject({ validationState: validationState });
  }
 },
 UpdateValidationSummaries: function(validationType, initializing) {
  if(ASPx.Ident.scripts.ASPxClientValidationSummary) {
   var summaryCollection = ASPx.GetClientValidationSummaryCollection();
   summaryCollection.OnEditorIsValidStateChanged(this, validationType, initializing && this.notifyValidationSummariesToAcceptNewError);
  }
 },
 FindInputElement: function(){
  return null;
 },
 GetInputElement: function(){
  if(!ASPx.IsExistsElement(this.inputElement))
   this.inputElement = this.FindInputElement();
  return this.inputElement;
 },
 GetFocusableInputElement: function() {
  return this.GetInputElement();
 },
 GetAccessibilityActiveElements: function() {
  return [this.GetInputElement()];
 },
 GetAccessibilityFirstActiveElement: function() {
  return this.accessibilityHelper ? 
    this.accessibilityHelper.getMainElement() : 
    this.GetAccessibilityActiveElements()[0];
 },
 GetAccessibilityAssistantElement: function() {
  return this.GetChildElement(AccessibilityAssistantID);
 },
 GetErrorImage: function() {
  return this.GetCachedElementById(EditElementSuffix.ErrorImage);
 },
 GetControlCell: function() {
  return this.GetCachedElementById(EditElementSuffix.ControlCell);
 },
 GetErrorCell: function() {
  return this.GetCachedElementById(EditElementSuffix.ErrorCell);
 },
 GetErrorTextCell: function() {
  return this.GetCachedElementById(this.errorImageIsAssigned ? EditElementSuffix.ErrorTextCell : EditElementSuffix.ErrorCell);
 },
 GetReadOnly: function() {
  return this.readOnly || this.clientReadOnly;
 },
 SetReadOnly: function(readOnly) {
  readOnly = !!readOnly;
  if(this.clientReadOnly === readOnly || this.readOnly)
   return;
  this.SetReadOnlyInternal(readOnly);
 },
 SetReadOnlyInternal: function(readOnly) {
  this.clientReadOnly = readOnly;
  this.ChangeReadOnlyStateItems(readOnly);
 },
 ChangeReadOnlyStateItems: function(readOnly) {
  ASPx.GetStateController().SetElementReadOnly(this.GetMainElement(), readOnly);
 },
 SetVisible: function (isVisible) {
  if(this.clientVisible == isVisible)
   return;
  var externalTable = this.GetExternalTable();
  if(externalTable) {
   ASPx.SetElementDisplay(externalTable, isVisible);
   if(this.customValidationEnabled) {
    var isValid = !isVisible ? true : void (0);
    this.UpdateErrorFrameAndFocus(false , true , isValid );
   }
  }
  ASPxClientControl.prototype.SetVisible.call(this, isVisible);
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID + "$State";
 },
 GetValueInputToValidate: function() {
  return this.GetInputElement();
 },
 IsVisible: function() {
  if(!this.clientVisible)
   return false;
  var element = this.GetMainElement();
  if(!element) 
   return false;
  while(element && element.tagName != "BODY") {
   if(element.getAttribute("errorFrame") != "errorFrame" && (!ASPx.GetElementVisibility(element) || !ASPx.GetElementDisplay(element)))
    return false;
   element = element.parentNode;
  }
  return true;
 },
 AdjustControlCore: function() {
  this.CollapseEditor();
  this.UnstretchInputElement();
  if(this.heightCorrectionRequired)
   this.CorrectEditorHeight();
 },
 CorrectEditorHeight: function() {
 },
 UnstretchInputElement: function() {
 },
 UseDelayedSpecialFocus: function() {
  return false;
 },
 GetDelayedSpecialFocusTriggers: function() {
  return [ this.GetMainElement() ];
 },
 InitializeDelayedSpecialFocus: function() {
  if(!this.UseDelayedSpecialFocus())
   return;
  this.specialFocusTimer = -1;    
  var handler = function(evt) { this.OnDelayedSpecialFocusMouseDown(evt); }.aspxBind(this);
  var triggers = this.GetDelayedSpecialFocusTriggers();
  for(var i = 0; i < triggers.length; i++)
   ASPx.Evt.AttachEventToElement(triggers[i], "mousedown", handler);
 },
 OnDelayedSpecialFocusMouseDown: function(evt) {
  window.setTimeout(function() { this.SetFocus(); }.aspxBind(this), 0);
 },
 IsFocusEventsLocked: function() {
  return this.focusEventsLocked;
 },
 LockFocusEvents: function() {
  if(!this.focused) return;
  this.focusEventsLocked = true;
 },
 UnlockFocusEvents: function() {
  this.focusEventsLocked = false;
 },
 ForceRefocusEditor: function(evt, isNativeFocus) {
  if(ASPx.Browser.VirtualKeyboardSupported && !this.ownerListBox) {
   var focusedEditor = ASPx.VirtualKeyboardUI.getFocusedEditor();
   if(ASPx.VirtualKeyboardUI.getInputNativeFocusLocked() && (!focusedEditor || focusedEditor === this))
     return;
   ASPx.VirtualKeyboardUI.setInputNativeFocusLocked(!isNativeFocus);
  }
  this.LockFocusEvents();
  this.BlurInputElement();
  window.setTimeout(function() { 
   if(ASPx.Browser.VirtualKeyboardSupported && !this.ownerListBox) {
    ASPx.VirtualKeyboardUI.setFocusEditorCore(this);
   } else {
    this.SetFocus();
   }
  }.aspxBind(this), 0);
 },
 BlurInputElement: function() {
  var inputElement = this.GetFocusableInputElement();
  if(inputElement && inputElement.blur)
   inputElement.blur();
 },
 IsEditorElement: function(element) {
  return this.GetMainElement() == element || ASPx.GetIsParent(this.GetMainElement(), element);
 },
 IsClearButtonElement: function(element) {
  return false;
 },
 IsElementBelongToInputElement: function(element) {
  return this.GetInputElement() == element;
 },
 OnFocusCore: function() {
  if(this.UseDelayedSpecialFocus())
   window.clearTimeout(this.specialFocusTimer);
  if(!this.IsFocusEventsLocked()){
   this.focused = true;
   ASPx.SetFocusedEditor(this);
   if(this.styleDecoration)
    this.styleDecoration.Update();
   if(this.isInitialized)
    this.RaiseFocus();
  }
  else
   this.UnlockFocusEvents();
 },
 OnLostFocusCore: function() {
  if(!this.IsFocusEventsLocked()){
   this.focused = false;
   if(ASPx.GetFocusedEditor() === this)
    ASPx.SetFocusedEditor(null);
   if(this.styleDecoration)
    this.styleDecoration.Update();
   this.RaiseLostFocus();
  }
 },
 OnFocus: function() {
  if(!this.specialKeyboardHandlingUsed)
   this.OnFocusCore();
 },
 OnLostFocus: function() {
  if(this.isInitialized && !this.specialKeyboardHandlingUsed)
   this.OnLostFocusCore();
 },
 OnSpecialFocus: function() {
  if(this.isInitialized)
   this.OnFocusCore();
 },
 OnSpecialLostFocus: function() {
  if(this.isInitialized)
   this.OnLostFocusCore();
 },
 OnMouseWheel: function(evt){
 },
 OnValidation: function(validationType) {
  if(this.customValidationEnabled && this.isInitialized && ASPx.IsExistsElement(this.GetMainElement()) &&
   (!this.IsErrorFrameDisplayed() || this.GetElementRequiredForErrorFrame())) {
   this.BeginErrorFrameUpdate();
   try {
    if(this.validateOnLeave || validationType != ValidationType.PersonalOnValueChanged) {
     this.SetIsValid(true, true );
     this.SetErrorText(this.initialErrorText, true );
     this.ValidateWithPatterns();
     this.RaiseValidation();
    }
    this.UpdateErrorFrameAndFocus(this.editorFocusingRequired(validationType));
   } finally {
    this.EndErrorFrameUpdate();
   }
   this.UpdateValidationSummaries(validationType);
   this.ariaExplanatoryTextManager.UpdateValidationState(validationType);
  }
 },
 GetElementRequiredForErrorFrame: function() {
  return this.GetExternalTable();
 },
 editorFocusingRequired: function(validationType) {
  return !this.GetIsValid() &&
   validationType == ValidationType.PersonalViaScript && this.setFocusOnError;
 },
 OnValueChanged: function() {
  if(this.getProcessOnServerOnValueChanged())
   this.SendPostBackInternal("");
 },
 getProcessOnServerOnValueChanged: function() {
  var processOnServer = this.RaiseValidationInternal();
  return this.RaiseValueChangedEvent() && processOnServer;
 },
 ParseValue: function() {
 },
 RaisePersonalStandardValidation: function() {
  if(ASPx.IsFunction(window.ValidatorOnChange)) {
   var inputElement = this.GetValueInputToValidate();
   if(inputElement && inputElement.Validators)
    window.ValidatorOnChange({ srcElement: inputElement });
  }
 },
 RaiseValidationInternal: function() {
  if(this.isPostBackAllowed() && this.causesValidation && this.validateOnLeave)
   return ASPxClientEdit.ValidateGroup(this.validationGroup);
  else {
   this.OnValidation(ValidationType.PersonalOnValueChanged);
   return this.GetIsValid();
  }
 },
 RaiseValueChangedEvent: function(){
  return this.RaiseValueChanged();
 },
 SendPostBackInternal: function(postBackArg) {
  if(ASPx.IsFunction(this.sendPostBackWithValidation))
   this.sendPostBackWithValidation(postBackArg);
  else
   this.SendPostBack(postBackArg);
 },
 SetElementToBeFocused: function() {
  if(this.IsVisible())
   invalidEditorToBeFocused = this;
 },
 GetFocusSelectAction: function() {
  return null;
 },
 SetFocus: function() {
  var inputElement = this.GetFocusableInputElement();
  if(!inputElement) return; 
  var isIE9 = ASPx.Browser.IE && ASPx.Browser.Version >= 9;
  if((ASPx.GetActiveElement() != inputElement || isIE9) && _aspxIsEditorFocusable(inputElement))
   ASPx.SetFocus(inputElement, this.GetFocusSelectAction());
 },
 SetFocusOnError: function() {
  if(invalidEditorToBeFocused == this) {
   this.SetFocus();
   invalidEditorToBeFocused = null;
  }
 },
 BeginErrorFrameUpdate: function() {
  if(!this.errorFrameUpdateLocked)
   this.errorFrameUpdateLocked = true;
 },
 EndErrorFrameUpdate: function() {
  this.errorFrameUpdateLocked = false;
  var args = this.updateErrorFrameAndFocusLastCallArgs;
  if(args) {
   this.UpdateErrorFrameAndFocus(args[0], args[1]);
   delete this.updateErrorFrameAndFocusLastCallArgs;
  }
 },
 UpdateErrorFrameAndFocus: function(setFocusOnError, ignoreVisibilityCheck, isValid) {
  if(!this.GetEnabled() || !ignoreVisibilityCheck && !this.GetVisible())
   return;
  if(this.errorFrameUpdateLocked) {
   this.updateErrorFrameAndFocusLastCallArgs = [ setFocusOnError, ignoreVisibilityCheck ];
   return;
  }
  if(this.styleDecoration)
   this.styleDecoration.Update();
  if(typeof(isValid) == "undefined")
   isValid = this.GetIsValid();
  if(isValid && this.IsErrorFrameDisplayed())
   this.ChangeErrorFrameVisibility(false);
  else {
   var editorLocatedWithinVisibleContainer = this.IsVisible();
   if(this.IsErrorFrameDisplayed()) {
    this.UpdateErrorCellContent();
    this.ChangeErrorFrameVisibility(true);
   }
   if(editorLocatedWithinVisibleContainer) {
    if(setFocusOnError && this.setFocusOnError && invalidEditorToBeFocused == null) {
     this.SetElementToBeFocused();
     this.SetFocusOnError();
    }
   }
  }
 },
 ChangeErrorFrameVisibility: function(visible) {
  var externalTable = this.GetExternalTable();
  var isStaticDisplay = this.display == ErrorFrameDisplay.Static;
  if(!isStaticDisplay && visible) {
   this.EnsureControlCellStylesLoaded();
   this.RestoreControlCellStyles();
  }
  this.ChangeErrorCellVisibility(visible, isStaticDisplay);
  if(!isStaticDisplay && !visible) {
   this.EnsureControlCellStylesLoaded();
   this.ClearControlCellStyles();
  }
  var validExternalTableClassName = isStaticDisplay ? ASPxEditExternalTableClassNames.ValidStaticTableClassName
   : ASPxEditExternalTableClassNames.ValidDynamicTableClassName;
  ASPx.ToggleClassNameToElement(externalTable, validExternalTableClassName, !visible);
  this.UpdateErrorCellParentRowVisibility();
 },
 ChangeErrorCellVisibility: function(visible, useVisibilityAttribute) {
  var errorCell = this.GetErrorCell();
  if(errorCell) {
   if(useVisibilityAttribute)
    ASPx.SetElementVisibility(errorCell, visible);
   else
    ASPx.SetElementDisplay(errorCell, visible);
  }
 },
 UpdateErrorCellParentRowVisibility: function() {
  var errorCell = this.GetErrorCell();
  if(!errorCell || this.display == ErrorFrameDisplay.Static)
   return;
  var displayedCellCount = 0;
  var errorCellParentRow = errorCell.parentNode;
  for(var i = 0; i < errorCellParentRow.cells.length; i++) {
   var cell = errorCellParentRow.cells[i];
   if(ASPx.GetElementDisplay(cell))
    displayedCellCount++;
  }
  ASPx.SetElementDisplay(errorCellParentRow, displayedCellCount > 0);
 },
 EnsureControlCellStylesLoaded: function() {
  if(typeof(this.controlCellStyles) == "undefined") {
   var controlCell = this.GetControlCell();
   this.controlCellStyles = {
    cssClass: controlCell.className,
    style: this.ExtractElementStyleStringIgnoringVisibilityProps(controlCell)
   };
  }
 },
 ClearControlCellStyles: function() {
  this.ClearElementStyle(this.GetControlCell());
 },
 RestoreControlCellStyles: function() {
  var controlCell = this.GetControlCell();
  var externalTable = this.GetExternalTable();
  if(ASPx.Browser.WebKitFamily)
   this.MakeBorderSeparateForTable(externalTable);
  controlCell.className = this.controlCellStyles.cssClass;
  controlCell.style.cssText = this.controlCellStyles.style;
  if(ASPx.Browser.WebKitFamily)
   this.UndoBorderSeparateForTable(externalTable);
 },
 MakeBorderSeparateForTable: function(table) {
  ASPx.AddClassNameToElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
 },
 UndoBorderSeparateForTable: function(table) {
  setTimeout(function () {
   ASPx.RemoveClassNameFromElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
  }, 0);
 },
 ExtractElementStyleStringIgnoringVisibilityProps: function(element) {
  var savedVisibility = element.style.visibility;
  var savedDisplay = element.style.display;
  element.style.visibility = "";
  element.style.display = "";
  var styleStr = element.style.cssText;
  element.style.visibility = savedVisibility;
  element.style.display = savedDisplay;
  return styleStr;
 },
 ClearElementStyle: function(element) {
  if(!element)
   return;
  element.className = "";
  var excludedAttrNames = [
   "width", "display", "visibility",
   "position", "left", "top", "z-index",
   "margin", "margin-top", "margin-right", "margin-bottom", "margin-left",
   "float", "clear"
  ];
  var savedAttrValues = { };
  for(var i = 0; i < excludedAttrNames.length; i++) {
   var attrName = excludedAttrNames[i];
   var attrValue = element.style[attrName];
   if(attrValue)
    savedAttrValues[attrName] = attrValue;
  }
  element.style.cssText = "";
  for(var styleAttrName in savedAttrValues)
   if(savedAttrValues.hasOwnProperty(styleAttrName))
    element.style[styleAttrName] = savedAttrValues[styleAttrName];
 },
 Clear: function() {
  this.SetValue(null);
  this.SetIsValid(true);
  return true;
 },
 UpdateErrorCellContent: function() {
  if(this.errorDisplayMode.indexOf("t") > -1)
   this.UpdateErrorText();
  if(this.errorDisplayMode == "i")
   this.UpdateErrorImage();
 },
 UpdateErrorImage: function() {
  var image = this.GetErrorImage();
  if(ASPx.IsExistsElement(image)) {
   if(this.accessibilityCompliant) {
    ASPx.Attr.SetAttribute(image, "aria-label", this.errorText);
    var innerImg = ASPx.GetNodeByTagName(image, "IMG", 0);
    if(ASPx.IsExists(innerImg))
     innerImg.alt = this.errorText;
   }
   image.alt = this.errorText;
   image.title = this.errorText;
  } else {
   this.UpdateErrorText();
  }
 },
 UpdateErrorText: function() {
  var errorTextCell = this.GetErrorTextCell();
  if(ASPx.IsExistsElement(errorTextCell))
   errorTextCell.innerHTML = this.HtmlEncode(this.errorText);
 },
 ValidateWithPatterns: function() {
  if(this.validationPatterns.length > 0) {
   var value = this.GetValue();
   for(var i = 0; i < this.validationPatterns.length; i++) {
    var validator = this.validationPatterns[i];
    if(!validator.EvaluateIsValid(value)) {
     this.SetIsValid(false, true );
     this.SetErrorText(validator.errorText, true );
     return;
    }
   }
  }
 },
 OnSpecialKeyDown: function(evt){
  this.RaiseKeyDown(evt);
  var handler = this.keyDownHandlers[evt.keyCode];
  if(handler) 
   return this[handler](evt);
  return false;
 },
 OnSpecialKeyPress: function(evt){
  this.RaiseKeyPress(evt);
  var handler = this.keyPressHandlers[evt.keyCode];
  if(handler) 
   return this[handler](evt);
  if(ASPx.Browser.NetscapeFamily || ASPx.Browser.Opera){
   if(evt.keyCode == ASPx.Key.Enter)
    return this.enterProcessed;
  }
  return false;
 },
 OnSpecialKeyUp: function(evt){
  this.RaiseKeyUp(evt);
  var handler = this.keyUpHandlers[evt.keyCode];
  if(handler) 
   return this[handler](evt);
  return false;
 },
 OnKeyDown: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyDown(evt);
 },
 OnKeyPress: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyPress(evt);
 },
 OnKeyUp: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyUp(evt);
 },
 RaiseKeyDown: function(evt){
  if(!this.KeyDown.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyDown.FireEvent(this, args);
  }
 },
 RaiseKeyPress: function(evt){
  if(!this.KeyPress.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyPress.FireEvent(this, args);
  }
 },
 RaiseKeyUp: function(evt){
  if(!this.KeyUp.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyUp.FireEvent(this, args);
  }
 },
 RaiseFocus: function(){
  if(!this.GotFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.GotFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  if(!this.LostFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.LostFocus.FireEvent(this, args);
  }
 },
 RaiseValidation: function() {
  if(this.customValidationEnabled && !this.Validation.IsEmpty()) {
   var currentValue = this.GetValue();
   var args = new ASPxClientEditValidationEventArgs(currentValue, this.errorText, this.GetIsValid());
   this.Validation.FireEvent(this, args);
   this.SetErrorText(args.errorText, true );
   this.SetIsValid(args.isValid, true );
   if(args.value != currentValue)
    this.SetValue(args.value);
  }
 },
 RaiseValueChanged: function(){
  var processOnServer = this.isPostBackAllowed();
  if(!this.ValueChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ValueChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;  
 },
 isPostBackAllowed: function() {
  return this.autoPostBack;
 },
 AddDecorationStyle: function(key, className, cssText) {
  if(!this.styleDecoration) 
   this.RequireStyleDecoration();
  this.styleDecoration.AddStyle(key, className, cssText);
 }, 
 RequireStyleDecoration: function() {
  this.styleDecoration = this.CreateStyleDecoration();
  this.PopulateStyleDecorationPostfixes();
 },
 CreateStyleDecoration: function() {
  return new ASPx.EditorStyleDecoration(this);
 },
 PopulateStyleDecorationPostfixes: function() {
  this.styleDecoration.AddPostfix("");
 },
 LockStyleDecorationUpdate: function() {
  if(this.styleDecoration)
   this.styleDecoration.LockUpdate();
 },
 UnlockStyleDecorationUpdate: function() {
  if(this.styleDecoration)
   this.styleDecoration.UnlockUpdate();
 },
 Focus: function(){
  this.SetFocus();
 },
 GetIsValid: function() {
  var hasRequiredInputElement = !this.RequireInputElementToValidate() || ASPx.IsExistsElement(this.GetInputElement());
  if(!hasRequiredInputElement || this.IsErrorFrameDisplayed() && !ASPx.IsExistsElement(this.GetElementRequiredForErrorFrame()))
   return true;
  return this.isValid;
 },
 RequireInputElementToValidate: function() {
  return true;
 },
 IsErrorFrameDisplayed: function() {
  return this.display !== ErrorFrameDisplay.None;
 },
 GetErrorText: function(){
  return this.errorText;
 },
 SetIsValid: function(isValid, validating){
  if(this.customValidationEnabled && this.isValid != isValid) {
   this.isValid = isValid;
   this.UpdateErrorFrameAndFocus(false );
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ValidationType.PersonalViaScript);
  }
 },
 SetErrorText: function(errorText, validating){
  if(this.customValidationEnabled && this.errorText != errorText) {
   this.errorText = errorText;
   this.UpdateErrorFrameAndFocus(false );
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ValidationType.PersonalViaScript);
  }
 },
 Validate: function(){
  this.ParseValue();
  this.OnValidation(ValidationType.PersonalViaScript);
 },
 GetModifyEvent: function() {
  return this.ValueChanged;
 },
 EnsureRequiredNativeAttributesExists: function() { }
});
ASPx.Ident.scripts.ASPxClientEdit = true;
ASPx.focusedEditorName = "";
ASPx.GetFocusedEditor = function() {
 var focusedEditor = ASPx.GetControlCollection().Get(ASPx.focusedEditorName);
 if(focusedEditor && !focusedEditor.focused){
  ASPx.SetFocusedEditor(null);
  focusedEditor = null;
 }
 return focusedEditor;
};
ASPx.SetFocusedEditor = function(editor) {
 ASPx.focusedEditorName = editor ? editor.name : "";
};
ASPx.FindAssociatedLabelElements = function(editor) {
 var assocciatedLabels = [];
 var inputElement = editor.GetInputElement();
 if(!ASPx.IsExists(inputElement) || !inputElement.id) 
  return assocciatedLabels;
 var labels = ASPx.GetNodesByTagName(document, "LABEL");
 for(var i = 0; i < labels.length; i++) {
  if(!!labels[i].htmlFor && labels[i].htmlFor === inputElement.id)
   assocciatedLabels.push(labels[i]);
 }
 return assocciatedLabels;
};
var DisableAccessibilityExplanatoryTextManager = ASPx.CreateClass(null, {
 constructor: function(editor) {
  this.editor = editor;
 },
 GetAdditionalTextRowId: function() {
  return this.editor.name + EditElementSuffix.AccessibilityAdditionalTextRow;
 },
 GetErrorTextElement: function () {
  return !!this.editor.GetErrorTextCell() ? this.editor.GetErrorTextCell() : this.editor.GetErrorImage();
 },
 GetTextElement: function() { return null; },
 SetCaptionAssociating: function() { },
 UpdateText: function() { },
 UpdateValidationState: function(validationType) { },
 ToggleErrorAlert: function() { },
 SetOrRemoveText: function(accessibilityElements, textElement, setText, isLabel, isFirst) { }
});
var EditAccessibilityExplanatoryTextManager = ASPx.CreateClass(DisableAccessibilityExplanatoryTextManager, {
 constructor: function(editor) {
  this.constructor.prototype.constructor.call(this, editor);
  this.invisibleRowCssClassName = "dxAIR";
 },
 GetTextElement: function() {
  var mainElement = this.editor.GetMainElement();
  if(!mainElement) return null;
  var explanatoryText = "";
  var explanatoryTextElement = null;
  if(!!this.editor.nullText)
   explanatoryText = this.editor.nullText;
  else if(!!this.editor.helpTextObj)
   explanatoryTextElement = this.editor.helpTextObj.helpTextElement;
  else if(!!mainElement.title)
   explanatoryText = mainElement.title;
  if(explanatoryText && mainElement.tagName == "TABLE") {
   var assistantElement = this.editor.GetAccessibilityFirstActiveElement();
   if(assistantElement)
    ASPx.Attr.Aria.AppendLabel(assistantElement, explanatoryText, true);
  }
  return explanatoryTextElement;
 },
 SetCaptionAssociating: function() {
  var captionCell = this.editor.GetCaptionCell();
  if(!captionCell || captionCell.childNodes[0].tagName == "LABEL") return;
  var labelElement = captionCell.childNodes[0];
  ASPx.EditAccessibilityExplanatoryTextManager.SetLabelAssociating(this.editor, this.editor.GetAccessibilityFirstActiveElement(), labelElement);
 },
 UpdateText: function() {
  var additionalTextElement = this.GetTextElement();
  if(ASPx.IsExists(additionalTextElement)) {
   var pronounceElement = this.editor.GetAccessibilityFirstActiveElement();
   var hasAnyLabel = !!ASPx.Attr.GetAttribute(pronounceElement, "aria-label") || 
    !!ASPx.Attr.GetAttribute(pronounceElement, "aria-labelledby") ||
    ASPx.FindAssociatedLabelElements(this.editor).length > 0;
   this.SetOrRemoveText([pronounceElement], additionalTextElement, true, !hasAnyLabel, false);
  }
 },
 UpdateValidationState: function(validationType) {
  if(validationType == ValidationType.PersonalOnValueChanged && this.editor.accessibilityHelper) return;
  var accessibilityElements = this.editor.GetAccessibilityActiveElements();
  var errorTextElement = this.GetErrorTextElement();
  this.SetOrRemoveText(accessibilityElements, errorTextElement, !this.editor.isValid, false, true);
  if(accessibilityElements.length > 0 && !!errorTextElement) {
   for(var i = 0; i < accessibilityElements.length; i++) {
    if(!ASPx.IsExists(accessibilityElements[i])) continue;
    ASPx.Attr.SetOrRemoveAttribute(accessibilityElements[i], "aria-invalid", !this.editor.isValid);
   }
  }
 },
 ToggleErrorAlert: function() {
  var errorTextElement = this.GetErrorTextElement();
  ASPx.SetElementDisplay(errorTextElement, false);
  ASPx.Attr.SetAttribute(errorTextElement, 'role', 'alert');
  ASPx.SetElementDisplay(errorTextElement, true);
  setTimeout(function() { ASPx.Attr.RemoveAttribute(errorTextElement, 'role'); }, 500);
 },
 SetOrRemoveText: function(accessibilityElements, textElement, setText, isLabel, isFirst) {
  var idsRefAttribute = isLabel ? ASPx.Attr.Aria.labelled : ASPx.Attr.Aria.described;
  if(!textElement) return;
  var textId = !!textElement.id ? textElement.id : textElement.parentNode.id;
  for(var i = 0; i < accessibilityElements.length; i++) {
   if(!accessibilityElements[i]) continue;
   var descRefString = ASPx.Attr.GetAttribute(accessibilityElements[i], idsRefAttribute);
   var descRefIds = !!descRefString ? descRefString.split(" ") : [ ];
   var descIndex = descRefIds.indexOf(textId);
   if(setText && descIndex == -1) {
    if(isFirst)
     descRefIds.unshift(textId);
    else
     descRefIds.push(textId);
   }
   else if(!setText && descIndex > -1)
    descRefIds.splice(descIndex, 1);
   ASPx.Attr.SetOrRemoveAttribute(accessibilityElements[i], idsRefAttribute, descRefIds.join(" "));
  }
 }
});
ASPx.DisableAccessibilityExplanatoryTextManager = DisableAccessibilityExplanatoryTextManager;
ASPx.EditAccessibilityExplanatoryTextManager = EditAccessibilityExplanatoryTextManager;
ASPx.EditAccessibilityExplanatoryTextManager.SetLabelAssociating = function(editor, activeElement, labelElement) {
 var clickHandler = function(evt) {
  if(editor && editor.OnAssociatedLabelClick)
   editor.OnAssociatedLabelClick(evt);
  else
   activeElement.click();
 };
 ASPx.Evt.AttachEventToElement(labelElement, "click", clickHandler);
 if(!!editor) {
  var hasAriaLabel = !!ASPx.Attr.GetAttribute(activeElement, "aria-label");
  editor.ariaExplanatoryTextManager.SetOrRemoveText([activeElement], labelElement, true, !hasAriaLabel, true);
 }
};
ASPxClientEdit.ClearEditorsInContainer = function(container, validationGroup, clearInvisibleEditors) {
 invalidEditorToBeFocused = null;
 ASPx.ProcessEditorsInContainer(container, ASPx.ClearProcessingProc, ASPx.ClearChoiceCondition, validationGroup, clearInvisibleEditors, true );
 ASPxClientEdit.ClearExternalControlsInContainer(container, validationGroup, clearInvisibleEditors, true );
};
ASPxClientEdit.ClearEditorsInContainerById = function(containerId, validationGroup, clearInvisibleEditors) {
 var container = document.getElementById(containerId);
 this.ClearEditorsInContainer(container, validationGroup, clearInvisibleEditors);
};
ASPxClientEdit.ClearGroup = function(validationGroup, clearInvisibleEditors) {
 return this.ClearEditorsInContainer(null, validationGroup, clearInvisibleEditors);
};
ASPxClientEdit.ValidateEditorsInContainer = function(container, validationGroup, validateInvisibleEditors) {
 var summaryCollection;
 if(ASPx.Ident.scripts.ASPxClientValidationSummary) {
  summaryCollection = ASPx.GetClientValidationSummaryCollection();
  summaryCollection.AllowNewErrorsAccepting(validationGroup);
 }
 var validationResult = ASPx.ProcessEditorsInContainer(container, ASPx.ValidateProcessingProc, _aspxValidateChoiceCondition, validationGroup, validateInvisibleEditors,
  false );
 validationResult.isValid = ASPxClientEdit.ValidateExternalControlsInContainer(container, validationGroup, validateInvisibleEditors,
  false ) && validationResult.isValid;
 if(typeof(validateInvisibleEditors) == "undefined")
  validateInvisibleEditors = false;
 if(typeof(validationGroup) == "undefined")
  validationGroup = null;    
 validationResult.isValid = ASPx.GetControlCollection().RaiseValidationCompleted(container, validationGroup,
 validateInvisibleEditors, validationResult.isValid, validationResult.firstInvalid, validationResult.firstVisibleInvalid);
 if(summaryCollection)
  summaryCollection.ForbidNewErrorsAccepting(validationGroup);
 if(!validationResult.isValid && !!validationResult.firstVisibleInvalid && validationResult.firstVisibleInvalid.accessibilityCompliant && !validationResult.firstVisibleInvalid.setFocusOnError) {
  var accessInvalidControl = validationResult.firstVisibleInvalid;
  if(!summaryCollection && !accessInvalidControl.focused) {
   var beforeDelayActiveElement = ASPx.GetActiveElement();
   setTimeout(function() {
    var currentActiveElement = ASPx.GetActiveElement();
    if(accessInvalidControl.focused || (currentActiveElement != beforeDelayActiveElement && ASPx.Attr.IsExistsAttribute(currentActiveElement, 'role')))
     return;
    accessInvalidControl.ariaExplanatoryTextManager.ToggleErrorAlert();
   }, 500);    
  }
 }
 return validationResult.isValid;
};
ASPxClientEdit.ValidateEditorsInContainerById = function(containerId, validationGroup, validateInvisibleEditors) {
 var container = document.getElementById(containerId);
 return this.ValidateEditorsInContainer(container, validationGroup, validateInvisibleEditors);
};
ASPxClientEdit.ValidateGroup = function(validationGroup, validateInvisibleEditors) {
 return this.ValidateEditorsInContainer(null, validationGroup, validateInvisibleEditors);
};
ASPxClientEdit.AreEditorsValid = function(containerOrContainerId, validationGroup, checkInvisibleEditors) {
 var container = typeof(containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
 var checkResult = ASPx.ProcessEditorsInContainer(container, ASPx.EditorsValidProcessingProc, _aspxEditorsValidChoiceCondition, validationGroup,
  checkInvisibleEditors, false );
 checkResult.isValid = ASPxClientEdit.AreExternalControlsValidInContainer(containerOrContainerId, validationGroup,
  checkInvisibleEditors, false ) && checkResult.isValid;
 return checkResult.isValid;
};
ASPxClientEdit.AreExternalControlsValidInContainer = function(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors) {
 if(ASPx.Ident.scripts.ASPxClientHtmlEditor)
  return ASPxClientHtmlEditor.AreEditorsValidInContainer(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors);
 return true;
};
ASPxClientEdit.ClearExternalControlsInContainer = function(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors) {
 if(ASPx.Ident.scripts.ASPxClientHtmlEditor)
  return ASPxClientHtmlEditor.ClearEditorsInContainer(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors);
 return true;
};
ASPxClientEdit.ValidateExternalControlsInContainer = function(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors) {
 if(ASPx.Ident.scripts.ASPxClientHtmlEditor)
  return ASPxClientHtmlEditor.ValidateEditorsInContainer(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors);
 return true;
};
ASPxClientEdit.AttachEditorModificationListener = function(handler, predicate) {
 var processAction = function(event) { event.AddHandler(handler); };
 ASPxClientEdit.ProcessEditorModificationListener(handler, processAction, predicate);
};
ASPxClientEdit.DetachEditorModificationListener = function(handler, predicate) {
 var processAction = function(event) { event.RemoveHandler(handler); };
 ASPxClientEdit.ProcessEditorModificationListener(handler, processAction, predicate);
};
ASPxClientEdit.ProcessEditorModificationListener = function(handler, action, predicate) {
 ASPx.GetControlCollection().ForEachControl(function(control) {
  if(control.GetModifyEvent && predicate(control)) {
   if(control.isNative)
    control.EnsureRequiredNativeAttributesExists();
   action(control.GetModifyEvent());
  }
 });
};
var ASPxClientEditKeyEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(htmlEvent) {
  this.constructor.prototype.constructor.call(this);
  this.htmlEvent = htmlEvent;
 }
});
var ASPxClientEditValidationEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(value, errorText, isValid) {
  this.constructor.prototype.constructor.call(this);
  this.errorText = errorText;
  this.isValid = isValid;
  this.value = value;
 }
});
ASPx.ProcessEditorsInContainer = function(container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors) {
 var allProcessedSuccessfull = true;
 var firstInvalid = null;
 var firstVisibleInvalid = null;
 var invalidEditorToBeFocused = null;
 ASPx.GetControlCollection().ForEachControl(function(control) {
  var canValidate = ASPx.CanValidateControl(control, container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors);
  if(!canValidate) return;
  var isSuccess = processingProc(control);
  if(!isSuccess) {
   allProcessedSuccessfull = false;
   if(firstInvalid == null)
    firstInvalid = control;
   var isVisible = control.IsVisible();
   if(isVisible && firstVisibleInvalid == null)
    firstVisibleInvalid = control;
   if(control.setFocusOnError && invalidEditorToBeFocused == null && isVisible)
    invalidEditorToBeFocused = control;
  }
 }, this);
 if(invalidEditorToBeFocused != null)
  invalidEditorToBeFocused.SetFocus();
 return new ASPxValidationResult(allProcessedSuccessfull, firstInvalid, firstVisibleInvalid);
};
ASPx.CanValidateControl = function(control, container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors) {
 var needToProcessRatingControl = window.ASPxClientRatingControl && (control instanceof ASPxClientRatingControl) && processingProc === ASPx.ClearProcessingProc;
 var mainElement = control.GetMainElement(); 
 if(!ASPx.Ident.IsASPxClientEdit(control) && !needToProcessRatingControl)
  return false;
 if(ASPx.Ident.isDialogInvisibleControl(control) || ASPx.Ident.isBatchEditUnusedEditor(control))
  return false; 
 if(!processDisabledEditors && !control.GetEnabled())
  return false;
 if(!mainElement || (container && !ASPx.GetIsParent(container, mainElement)))
  return false;
 if(!processInvisibleEditors && !control.IsVisible())
  return false;
 if(choiceCondition && !choiceCondition(control, validationGroup))
  return false;
 return true;
};
var ASPxValidationResult = ASPx.CreateClass(null, {
 constructor: function(isValid, firstInvalid, firstVisibleInvalid) {
  this.isValid = isValid;
  this.firstInvalid = firstInvalid;
  this.firstVisibleInvalid = firstVisibleInvalid;
 }
});
ASPx.ClearChoiceCondition = function(edit, validationGroup) {
 return !ASPx.IsExists(validationGroup) || (edit.validationGroup == validationGroup);
};
function _aspxValidateChoiceCondition(edit, validationGroup) {
 return ASPx.ClearChoiceCondition(edit, validationGroup) && edit.customValidationEnabled;
}
function _aspxEditorsValidChoiceCondition(edit, validationGroup) {
 return _aspxValidateChoiceCondition(edit, validationGroup);
}
function wrapLostFocusHandler(handler) {
 if(ASPx.Browser.Edge) {
  return function(name) {
   var edit = ASPx.GetControlCollection().Get(name);
   if(edit && !ASPx.IsElementVisible(edit.GetMainElement()))
    setTimeout(handler, 0, name);
   else
    handler(name);
  };
 }
 return handler;
}
ASPx.EGotFocus = function(name) {
 var edit = ASPx.GetControlCollection().Get(name); 
 if(!edit) return;
 if(!edit.isInitialized){
  var inputElement = edit.GetFocusableInputElement();
  if(inputElement && inputElement === document.activeElement) {
   if(ASPx.Browser.Firefox)
    window.setTimeout(function() { document.activeElement.blur(); }, 0);
   else
    document.activeElement.blur();
  }
  return;
 }
 if(ASPx.Browser.VirtualKeyboardSupported && !edit.ownerListBox)
  ASPx.VirtualKeyboardUI.onCallingVirtualKeyboard(edit, false);
 else
  edit.OnFocus();
};
ASPx.ELostFocusCore = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(ASPx.Browser.VirtualKeyboardSupported && (!edit || !edit.ownerListBox)) {
  var supressLostFocus = ASPx.VirtualKeyboardUI.isInputNativeBluring();
  if(supressLostFocus)
   return;
  ASPx.VirtualKeyboardUI.resetFocusedEditor();
 }
 if(edit != null)
  edit.OnLostFocus();
};
ASPx.ELostFocus = wrapLostFocusHandler(ASPx.ELostFocusCore);
ASPx.ESGotFocus = function(name) {
 var edit = ASPx.GetControlCollection().Get(name); 
 if(!edit) return;
   if(ASPx.Browser.VirtualKeyboardSupported && !edit.ownerListBox) {
  ASPx.VirtualKeyboardUI.onCallingVirtualKeyboard(edit, true);
 } else {
  edit.OnSpecialFocus();
 }
};
ASPx.ESLostFocusCore = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(ASPx.Browser.VirtualKeyboardSupported && (!edit || !edit.ownerListBox)) {
  var supressLostFocus = ASPx.VirtualKeyboardUI.isInputNativeBluring();
  if(supressLostFocus)
   return;
  ASPx.VirtualKeyboardUI.resetFocusedEditor();
 }
 if(!edit) return;
 if(edit.UseDelayedSpecialFocus())
  edit.specialFocusTimer = window.setTimeout(function() { edit.OnSpecialLostFocus(); }, 30);
 else
  edit.OnSpecialLostFocus();
};
ASPx.ESLostFocus = wrapLostFocusHandler(ASPx.ESLostFocusCore);
ASPx.EValueChanged = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null)
  edit.OnValueChanged();
};
ASPx.VirtualKeyboardUI = (function() {
 var focusedEditor = null;
 var inputNativeFocusLocked = false;
 function elementBelongsToEditor(element) {
  if(!element) return false;
  var isBelongsToEditor = false;
  ASPx.GetControlCollection().ForEachControl(function(control) {
   if(ASPx.Ident.IsASPxClientEdit(control) && control.IsEditorElement(element)) {
    isBelongsToEditor = true;
    return true;
   }
  }, this);
  return isBelongsToEditor;
 }
 function elementBelongsToFocusedEditor(element) {
  return focusedEditor && focusedEditor.IsEditorElement(element);
 }
 return {
  onTouchStart: function (evt) {
   if (!ASPx.Browser.VirtualKeyboardSupported || this.isGooglePlaceAutocompleteElementTap(evt)) return;
   inputNativeFocusLocked = false;
   if(focusedEditor)
    focusedEditor.onVirtualKeyboardUITouchStart(evt);
   if(ASPx.TouchUIHelper.pointerEnabled) {
    if(evt.pointerType !== ASPx.TouchUIHelper.pointerType.Touch ||
       ASPx.Browser.AndroidMobilePlatform) 
     return;
    this.processFocusEditorControl(evt);
   } else
    ASPx.TouchUIHelper.handleFastTapIfRequired(evt,  function(){ this.processFocusEditorControl(evt); }.aspxBind(this), false);
  },
  processFocusEditorControl: function(evt) {
   var evtSource = ASPx.Evt.GetEventSource(evt);
   var timeEditHasAppliedFocus = focusedEditor && (ASPx.Ident.IsASPxClientTimeEdit && ASPx.Ident.IsASPxClientTimeEdit(focusedEditor));
   var focusedTimeEditBelongsToDateEdit = timeEditHasAppliedFocus && focusedEditor.OwnerDateEdit && focusedEditor.OwnerDateEdit.GetShowTimeSection();
   if(focusedTimeEditBelongsToDateEdit) {
    focusedEditor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
    return;
   }
   var elementWithNativeFocus = ASPx.GetActiveElement();
   var someEditorInputIsFocused = elementBelongsToEditor(elementWithNativeFocus);
   var touchKeyboardIsVisible = someEditorInputIsFocused;
   var tapOutsideEditorAndInputs = !elementBelongsToEditor(evtSource) && !ASPx.Ident.IsFocusableElementRegardlessTabIndex(evtSource);
   var blurToHideTouchKeyboard = touchKeyboardIsVisible && tapOutsideEditorAndInputs;
   if(blurToHideTouchKeyboard) {
    elementWithNativeFocus.blur();
    return;
   }
   var tapOutsideFocusedEditor = focusedEditor && !elementBelongsToFocusedEditor(evtSource);
   if(tapOutsideFocusedEditor) {
    var focusedEditorWithBluredInput = !elementBelongsToFocusedEditor(elementWithNativeFocus);
    if(focusedEditorWithBluredInput) 
     this.lostAppliedFocusOfEditor();
   }
  },
  smartFocusEditor: function(edit) {
   if(!edit.focused) {
    this.setInputNativeFocusLocked(true);
    this.setFocusEditorCore(edit);
   } else {
    edit.ForceRefocusEditor();
   }
  },
  setFocusEditorCore: function(edit) {
   if(ASPx.Browser.MacOSMobilePlatform) {
    var timeoutDuration = ASPx.Browser.Chrome ? 250 : 30;
    window.setTimeout(function(){ edit.SetFocus(); }, timeoutDuration);
   } else {
    edit.SetFocus();
   }
  },
  onCallingVirtualKeyboard: function(edit, isSpecial) {
   this.setAppliedFocusOfEditor(edit, isSpecial);
   if(edit.specialKeyboardHandlingUsed == isSpecial && inputNativeFocusLocked)
    edit.BlurInputElement();
  },
  isInputNativeBluring: function() {
   return focusedEditor && inputNativeFocusLocked;
  },
  setInputNativeFocusLocked: function(locked) {
   inputNativeFocusLocked = locked;
  },
  getInputNativeFocusLocked: function() {
   return inputNativeFocusLocked;
  },
  setAppliedFocusOfEditor: function(edit, isSpecial) {
   if(focusedEditor === edit) {
    if(edit.specialKeyboardHandlingUsed == isSpecial) {
     focusedEditor.UnlockFocusEvents();
     if(focusedEditor.EnsureClearButtonVisibility)
      focusedEditor.EnsureClearButtonVisibility();
    }
    return;
   }
   if(edit.specialKeyboardHandlingUsed == isSpecial) {
    this.lostAppliedFocusOfEditor();
    focusedEditor = edit;
    ASPx.SetFocusedEditor(edit);
   }
   if(isSpecial)
    edit.OnSpecialFocus();
   else
    edit.OnFocus();
  },
  lostAppliedFocusOfEditor: function() {
   if(!focusedEditor) return;
   var curEditorName = focusedEditor.name; 
   var skbdHandlingUsed = focusedEditor.specialKeyboardHandlingUsed;
   var focusedEditorInputElementExists = focusedEditor.GetInputElement();
   focusedEditor = null;
   if(!focusedEditorInputElementExists)
    return;
   ASPx.ELostFocusCore(curEditorName);
   if(skbdHandlingUsed)
    ASPx.ESLostFocusCore(curEditorName);
  },
  getFocusedEditor: function() {
   return focusedEditor;
  },
  resetFocusedEditor: function() {
   focusedEditor = null;
  },
  focusableInputElementIsActive: function(edit) {
   var inputElement = edit.GetFocusableInputElement();
   return !!inputElement ? ASPx.GetActiveElement() === inputElement : false;
  },
  isGooglePlaceAutocompleteElementTap: function(evt) {
   var googlePlaceAutocompleteContainer = ASPx.GetNodeByClassName(document.body, "pac-container", 0);
   if(!googlePlaceAutocompleteContainer)
    return false;
   return ASPx.GetParentByClassName(ASPx.Evt.GetEventSource(evt), "pac-container") != null;
  }
 };
})();
if(ASPx.Browser.VirtualKeyboardSupported) {
 var touchEventName = ASPx.TouchUIHelper.pointerEnabled ? ASPx.TouchUIHelper.pointerDownEventName : 'touchstart';
 ASPx.Evt.AttachEventToDocument(touchEventName, function(evt){ ASPx.VirtualKeyboardUI.onTouchStart(evt); });
}
ASPx.Evt.AttachEventToDocument("mousedown", function(evt) {
 var editor = ASPx.GetFocusedEditor();
 if(!editor) 
  return;
 var evtSource = ASPx.Evt.GetEventSource(evt);
 if(editor.IsClearButtonElement(evtSource))
  return;
 if(editor.OwnerDateEdit && editor.OwnerDateEdit.GetShowTimeSection()) {
  editor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
  return;
 }
 if(editor.ownerListBox && editor.ownerListBox.IsEditorElement(evtSource) && !editor.IsEditorElement(evtSource)) {
  editor.ownerListBox.ForceRefocusEditor(evt);
  ASPx.SetFocusedEditor(editor.ownerListBox);
  return;
 }
 if(editor.IsEditorElement(evtSource) && !editor.IsElementBelongToInputElement(evtSource))
  editor.ForceRefocusEditor(evt);
});
ASPx.Evt.AttachEventToDocument(ASPx.Evt.GetMouseWheelEventName(), function(evt) {
 var editor = ASPx.GetFocusedEditor();
 if(editor != null && ASPx.IsExistsElement(editor.GetMainElement()) && editor.focused && editor.receiveGlobalMouseWheel)
  editor.OnMouseWheel(evt);
});
ASPx.KBSIKeyDown = function(name, evt){
 var control = ASPx.GetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyDown(evt);
  if(isProcessed)
   return ASPx.Evt.PreventEventAndBubble(evt);
 }
};
ASPx.KBSIKeyPress = function(name, evt){
 var control = ASPx.GetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyPress(evt);
  if(isProcessed)
   return ASPx.Evt.PreventEventAndBubble(evt);
 }
};
ASPx.KBSIKeyUp = function(name, evt){
 var control = ASPx.GetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyUp(evt);
  if(isProcessed)
   return ASPx.Evt.PreventEventAndBubble(evt);
 }
};
ASPx.ClearProcessingProc = function(edit) {
 return edit.Clear();
};
ASPx.ValidateProcessingProc = function(edit) {
 edit.OnValidation(ValidationType.MassValidation);
 return edit.GetIsValid();
};
ASPx.EditorsValidProcessingProc = function(edit) {
 return edit.GetIsValid();
};
var CheckEditElementHelper = ASPx.CreateClass(ASPx.CheckableElementHelper, {
 AttachToMainElement: function(internalCheckBox) {
  ASPx.CheckableElementHelper.prototype.AttachToMainElement.call(this, internalCheckBox);
  this.AttachToLabelElement(this.GetLabelElement(internalCheckBox.container), internalCheckBox);
 },
 AttachToLabelElement: function(labelElement, internalCheckBox) {
  var _this = this;
  if(labelElement) {
   ASPx.Evt.AttachEventToElement(labelElement, "click", 
    function (evt) { 
     _this.InvokeClick(internalCheckBox, evt);
    }
   );
   ASPx.Evt.AttachEventToElement(labelElement, "mousedown",
    function (evt) {
     internalCheckBox.Refocus();
    }
   );
  }
 },
 GetLabelElement: function(container) {
  var labelElement = ASPx.GetNodeByTagName(container, "LABEL", 0);
  if(!labelElement) {
   var labelCell = ASPx.GetNodeByClassName(container, "dxichTextCellSys", 0);
   labelElement = ASPx.GetNodeByTagName(labelCell, "SPAN", 0);
  }
  return labelElement;
 }
});
CheckEditElementHelper.Instance = new CheckEditElementHelper();
var CalendarSharedParameters = ASPx.CreateClass(null, {
 updateCalendarCallbackCommand: "UPDATE",
 constructor: function() {
  this.minDate = null;
  this.maxDate = null;
  this.disabledDates = [];
  this.calendarCustomDraw = false;
  this.hasCustomDisabledDatesViaCallback = false;
  this.dateRangeMode = false;
  this.currentDateEdit = null;
  this.DaysSelectingOnMouseOver = new ASPxClientEvent();
  this.VisibleDaysMouseOut = new ASPxClientEvent();
  this.CalendarSelectionChangedInternal = new ASPxClientEvent();
 },
 Assign: function(source) {
  this.minDate = source.minDate ? source.minDate : null;
  this.maxDate = source.maxDate ? source.maxDate : null;
  this.calendarCustomDraw = source.calendarCustomDraw ? source.calendarCustomDraw : false;
  this.hasCustomDisabledDatesViaCallback = source.hasCustomDisabledDatesViaCallback ? source.hasCustomDisabledDatesViaCallback : false;
  this.disabledDates = source.disabledDates ? source.disabledDates : [];
  this.currentDateEdit = source.currentDateEdit ? source.currentDateEdit : null;
 },
 GetUpdateCallbackParameters: function() {
  var callbackArgs = this.GetCallbackArgs();
  callbackArgs = this.FormatCallbackArg(this.updateCalendarCallbackCommand, callbackArgs);
  return callbackArgs;
 },
 GetCallbackArgs: function() {
  var args = {};
  if(this.minDate)
   args.clientMinDate = ASPx.DateUtils.GetInvariantDateString(this.minDate);
  if(this.maxDate)
   args.clientMaxDate = ASPx.DateUtils.GetInvariantDateString(this.maxDate);
  if(args.clientMinDate || args.clientMaxDate) {
   var jsonArgs = JSON.stringify(args);
   return ASPx.Str.EncodeHtml(jsonArgs);
  }
  return null;
 },
 FormatCallbackArg: function(prefix, arg) {
  if(!arg) return prefix;
  return [prefix, '|', arg.length, ';', arg, ';'].join('');
 }
});
ASPx.CalendarSharedParameters = CalendarSharedParameters;
ASPx.ValidationType = ValidationType;
ASPx.ErrorFrameDisplay = ErrorFrameDisplay;
ASPx.EditElementSuffix = EditElementSuffix;
ASPx.ValidationPattern = ValidationPattern;
ASPx.RequiredFieldValidationPattern = RequiredFieldValidationPattern;
ASPx.RegularExpressionValidationPattern = RegularExpressionValidationPattern;
ASPx.CheckEditElementHelper = CheckEditElementHelper;
ASPx.IsEditorFocusable = _aspxIsEditorFocusable;
window.ASPxClientEditBase = ASPxClientEditBase;
window.ASPxClientEdit = ASPxClientEdit;
window.ASPxClientEditKeyEventArgs = ASPxClientEditKeyEventArgs;
window.ASPxClientEditValidationEventArgs = ASPxClientEditValidationEventArgs;
})();

(function() {
ASPx.TEInputSuffix = "_I";
ASPx.PasteCheckInterval = 50;
ASPx.CheckUserInputInterval = 10;
ASPx.TEHelpTextElementSuffix = "_HTE";
ASPx.TempHiddenInputSuffix = "_THI";
var passwordInputClonedSuffix = "_CLND";
var CHROME_AUTOFILL_SELECTOR = ":-webkit-autofill";
var BrowserHelper = {
 SAFARI_SYSTEM_CLASS_NAME: "dxeSafariSys",
 MOBILE_SAFARI_SYSTEM_CLASS_NAME: "dxeIPadSys",
 GetBrowserSpecificSystemClassName: function() {
  if(ASPx.Browser.Safari)
   return ASPx.Browser.MacOSMobilePlatform ? this.MOBILE_SAFARI_SYSTEM_CLASS_NAME : this.SAFARI_SYSTEM_CLASS_NAME;
  return "";
 }
};
var focusedNullTextClassName = "dxeFNTextSys";
var NullTextDisplayMode = {
 Unfocused: "Unfocused",
 UnfocusedAndFocused: "UnfocusedAndFocused"
};
ASPx.NullTextDisplayMode = NullTextDisplayMode;
var ASPxClientTextEdit = ASPx.CreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);      
  this.isASPxClientTextEdit = true;
  this.nullText = "";
  this.nullTextDisplayMode = NullTextDisplayMode.Unfocused;
  this.nullTextOnFocusCssText = "";
  this.focusedNullTextTimerID = -1;
  this.escCount = 0;
  this.raiseValueChangedOnEnter = true;
  this.autoResizeWithContainer = false;
  this.lastChangedValue = null;
  this.autoCompleteAttribute = null;
  this.isTextSelectionOnClickEnabled = false;
  this.passwordNullTextIntervalID = -1;
  this.nullTextInputElement = null;
  this.helpText = "";
  this.helpTextObj = null;  
  this.helpTextStyle = [];
  this.externalTableStyle = [];
  this.helpTextPosition = ASPx.Position.Right;
  this.helpTextMargins = null;
  this.helpTextHAlign = ASPxClientTextEditHelpTextHAlign.Left;
  this.helpTextVAlign = ASPxClientTextEditHelpTextVAlign.Top;
  this.enableHelpTextPopupAnimation = true;
  this.helpTextDisplayMode = ASPxClientTextEditHelpTextDisplayMode.Inline;
  this.maskInfo = null;  
  this.maskValueBeforeUserInput = "";
  this.maskPasteTimerID = -1;
  this.maskPasteLock = false;    
  this.maskPasteCounter = 0;
  this.maskTextBeforePaste = "";    
  this.maskHintHtml = "";
  this.maskHintTimerID = -1;
  this.errorCellPosition = ASPx.Position.Right;
  this.inlineInitializeInputValue = null;
  this.initializeInputValue = null;
  this.displayFormat = null;
  this.TextChanged = new ASPxClientEvent();
  this.UserInput = new ASPxClientEvent();
  this.userInputEventTimerID = -1;
 },
 AddDefaultReadOnlyStateControllerItem: function(cssClass, mainElementId) {
  ASPx.AddReadOnlyItems(mainElementId, [[[cssClass], [''], ['', 'I']]]);
 },
 AddDefaultDisabledStateControllerItem: function(cssClass, mainElementId) {
  ASPx.AddDisabledItems(mainElementId, [[[cssClass], [''], ['', 'I']]]);
 },
 SetData: function(data){
  ASPxClientEdit.prototype.SetData.call(this, data);
  if(data.maskInfo) {
   var maskProperties = data.maskInfo.properties;
   var useInvariantCultureDecimalSymbol = maskProperties && maskProperties.useInvariantCultureDecimalSymbol || false;
   this.maskInfo = ASPx.MaskInfo.Create(data.maskInfo.maskText, data.maskInfo.dateTimeOnly, data.maskInfo.allowEscapingInEnums, useInvariantCultureDecimalSymbol);
   this.SetProperties(data.maskInfo.properties, this.maskInfo);
  }
 },
 InlineInitialize: function() {
  this.SaveInputValue(true);
  ASPxClientEdit.prototype.InlineInitialize.call(this);
  if(this.maskInfo != null)
   this.InitMask();
  this.ApplyBrowserSpecificClassName();
  this.helpTextInitialize();
  if(ASPx.Browser.IE && ASPx.Browser.Version >= 10 && this.nullText != "")
   this.addIEXButtonEventHandler();
 },
 Initialize: function(){
  this.SaveInputValue(false);
  this.SaveChangedValue();
  ASPxClientEdit.prototype.Initialize.call(this);
  this.CorrectInputMaxLength();
  this.SubscribeToIeDropEvent();
  if(ASPx.Browser.WebKitFamily)  
   this.CorrectMainElementWhiteSpaceStyle();
  this.InitializeTextDecoration();
  this.InitializeAutocompleteAttribute();
  if(this.IsValueRestoredByBrowser())
   this.SynchronizeRestoredValue();
 },
 InitializeEvents: function() {
  ASPxClientEdit.prototype.InitializeEvents.call(this);
  ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keydown", this.OnKeyDown.aspxBind(this));
  ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keyup", this.OnKeyUp.aspxBind(this));
  ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keypress", this.OnKeyPress.aspxBind(this));
  if(this.isTextSelectionOnClickEnabled) {
   ASPx.Evt.AttachEventToElement(this.GetInputElement(), ASPx.TouchUIHelper.touchMouseDownEventName, this.OnMouseDown.aspxBind(this));
   ASPx.Evt.AttachEventToElement(this.GetInputElement(), "click", this.OnClick.aspxBind(this));
  }
  this.Unload.AddHandler(this.OnUnload.aspxBind(this));
 },
 InitializeTextDecoration: function() {
  var input = this.GetInputElement();
  if(input.type === "password" && !this.IsInputPasswordFilledAutomaticallyByChrome())
   this.ToggleTextDecoration();
 },
 IsInputPasswordFilledAutomaticallyByChrome: function() {
  if(!ASPx.Browser.Chrome)
   return false;
  var input = this.GetInputElement();
  return ASPx.ElementMatchesSelector(input, CHROME_AUTOFILL_SELECTOR);
 },
 OnMouseDown: function() {
  this.trySelectInputTextOnClick = ASPx.GetActiveElement() !== this.GetInputElement() && !this.IsFocusEventsLocked();
 },
 OnClick: function() {
  if(this.trySelectInputTextOnClick) {
   var input = this.GetInputElement();
   setTimeout(function() {
    var inputSelection = ASPx.Selection.GetInfo(input);
    if (inputSelection.startPos === inputSelection.endPos)
     ASPx.Selection.Set(input);
   }, 0);
  }
 },
 InitializeAutocompleteAttribute: function() {
  var input = this.GetInputElement();
  if(this.IsVCardAttributeRequired())
   ASPx.Attr.SetAttribute(input, this.autoCompleteAttribute.name, this.autoCompleteAttribute.value);
  else if(this.IsAutocompleteOffRequiredOnInitialize())
   ASPx.Attr.SetAttribute(input, "autocomplete", "off");
 },
 SaveInputValue: function(isInlineInitialize) {
  var input = this.GetInputElement();
  if(!input)
   return;
  var inputValue = input.value;
  if(inputValue === null)
   inputValue = "";
  if(isInlineInitialize)
   this.inlineInitializeInputValue = inputValue;
  else
   this.initializeInputValue = inputValue;
 },
 IsValueRestoredByBrowser: function() {
  if(this.displayFormat || this.isNative || this.inlineInitializeInputValue === null || this.initializeInputValue === null)
   return false;
  if(ASPx.Browser.Chrome)
   return this.IsValueRestoredByChrome();
  else if(ASPx.Browser.Firefox)
   return this.IsValueRestoredByFirefox();
  else if(ASPx.Browser.IE)
   return this.IsValueRestoredByIE();
  else
   return this.IsValueRestoredByBrowserCore();
 },
 IsValueRestoredByBrowserCore: function() {
  return this.IsValueChangedBeforeInitialize() || this.IsClientValueNotExists() || this.IsValueChangedOnMaskInitialize();
 },
 IsValueRestoredByChrome: function() {
  return this.IsValueRestoredByBrowserCore();
 },
 IsValueRestoredByFirefox: function() {
  return this.IsValueRestoredByBrowserCore();
 },
 IsValueRestoredByIE: function() {
  return this.IsValueRestoredByBrowserCore();
 },
 IsValueChangedBeforeInitialize: function() {
  return this.inlineInitializeInputValue !== this.initializeInputValue;
 },
 IsClientValueNotExists: function() {
  return this.inlineInitializeInputValue !== "" &&
      this.inlineInitializeInputValue !== this.nullText &&
      this.inlineInitializeInputValue !== this.GetValue() &&
      this.inlineInitializeInputValue !== this.GetText();
 },
 IsValueChangedOnMaskInitialize: function() {
  return this.maskInfo && this.inlineInitializeInputValue !== this.GetInputElement().value;
 },
 SynchronizeRestoredValue: function() {
  this.SetText(this.initializeInputValue);
 },
 AdjustControl: function() {
  ASPxClientEdit.prototype.AdjustControl.call(this);
  if(ASPx.Browser.IE && ASPx.Browser.Version > 8 && !this.isNative)
   this.correctInputElementHeight();
  this.ensureAdjustFocusedNullTextElement();
 },
 correctInputElementHeight: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementHeight = mainElement.style.height;
   var mainElementHeightSpecified = mainElementHeight && mainElementHeight.indexOf('px') !== -1; 
   if(mainElementHeightSpecified) {
    var inputElement = this.GetInputElement();
    var inputElementHeight = this.getInputElementHeight();
    inputElement.style.height = inputElementHeight + "px";
    if(!ASPx.Ident.IsASPxClientMemo(this))
     inputElement.style.lineHeight = inputElementHeight + "px";
   }
  }
 },
 getInputElementHeight: function() {
  var mainElement = this.GetMainElement(),
   inputElement = this.GetInputElement();
  var inputElementHeight = ASPx.PxToInt(mainElement.style.height) - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(mainElement);
  var inputElementContainer = inputElement.parentNode,
   inputContainerStyle = ASPx.GetCurrentStyle(inputElementContainer);
  inputElementHeight -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(inputElementContainer, inputContainerStyle) 
   + ASPx.GetTopBottomMargins(inputElementContainer, inputContainerStyle);
  var mainElementCellspacing = ASPx.GetCellSpacing(mainElement);
  if(mainElementCellspacing)
   inputElementHeight -= mainElementCellspacing * 2;
  var inputStyle = ASPx.GetCurrentStyle(inputElement);
  inputElementHeight -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(inputElement, inputStyle) 
   + ASPx.GetTopBottomMargins(inputElement, inputStyle);
  return inputElementHeight;
 },
 getInputCell: function() {
  var inputElement = this.GetInputElement();
  if(inputElement)
   return inputElement.parentNode;
 },
 addIEXButtonEventHandler: function() {
  var inputElement = this.GetInputElement();
  if(ASPx.IsExists(inputElement)) {
   this.isDeleteOrBackspaceKeyClick = false;
   ASPx.Evt.AttachEventToElement(inputElement, "input", function (evt) {
    if(this.isDeleteOrBackspaceKeyClick) {
     this.isDeleteOrBackspaceKeyClick = false;
     return;
    }
    if(inputElement.value === '') {
     this.SyncRawValue();
    }
   }.aspxBind(this));
   ASPx.Evt.AttachEventToElement(inputElement, "keydown", function (evt) {
    this.isDeleteOrBackspaceKeyClick = (evt.keyCode == ASPx.Key.Delete || evt.keyCode == ASPx.Key.Backspace);
   }.aspxBind(this));
  }   
 },
 ensureOutOfRangeWarningManager: function (minValue, maxValue, defaultMinValue, defaultMaxValue, valueFormatter) {
  if (!this.outOfRangeWarningManager)
   this.outOfRangeWarningManager = new ASPxOutOfRangeWarningManager(this, minValue, maxValue, defaultMinValue, defaultMaxValue,
    this.showOutOfRangeWarningElementAtBottom() ? ASPx.Position.Bottom : ASPx.Position.Right, valueFormatter);
 },
 showOutOfRangeWarningElementAtBottom: function() {
  return this.hasRightPopupHelpText();
 },
 GetOutOfRangeWarningElementPrevSibling: function() {
  return this.GetMainElement();
 },
 helpTextInitialize: function () {
  if(this.helpText) {
   this.helpTextObj = new ASPxClientTextEditHelpText(this, this.helpTextStyle, this.helpText, this.helpTextPosition,
    this.helpTextHAlign, this.helpTextVAlign, this.helpTextMargins, this.enableHelpTextPopupAnimation, this.helpTextDisplayMode);
  }
 },
 hasPopupHelpText: function() {
  return this.helpText && this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup;
 },
 hasRightPopupHelpText: function() {
  return this.hasPopupHelpText() && this.helpTextPosition === ASPx.Position.Right;
 },
 showHelpText: function () {
  if(this.helpTextObj)
   this.helpTextObj.show();
 },
 hideHelpText: function () {
  if(this.helpTextObj)
   this.helpTextObj.hide();
 },
 ApplyBrowserSpecificClassName: function() {
  var mainElement = this.GetMainElement();
  if(ASPx.IsExistsElement(mainElement)) {
   var className = BrowserHelper.GetBrowserSpecificSystemClassName();
   if(className)
    mainElement.className += " " + className;
  }
 },
  CorrectMainElementWhiteSpaceStyle: function() {
  var inputElement = this.GetInputElement();
  if(inputElement && inputElement.parentNode) {
   if(this.IsElementHasWhiteSpaceStyle(inputElement.parentNode))
    inputElement.parentNode.style.whiteSpace = "normal";
  }
 },
 IsElementHasWhiteSpaceStyle: function(element) {
  var currentStyle = ASPx.GetCurrentStyle(element);
  return currentStyle.whiteSpace == "nowrap" || currentStyle.whiteSpace == "pre";  
 },
 FindInputElement: function(){
  return this.isNative ? this.GetMainElement() : ASPx.GetElementById(this.name + ASPx.TEInputSuffix);
 },
 DecodeRawInputValue: function(value) {
  return value;
 },
 GetRawValue: function(value){
  return ASPx.IsExists(this.stateObject) ? this.stateObject.rawValue : null;
 },
 SetRawValue: function(value){
  if(ASPx.IsExists(value))
   value = value.toString();
  this.UpdateStateObjectWithObject({ rawValue: value });
 },
 SyncRawValue: function() {
  if(this.maskInfo != null)
   this.SetRawValue(this.maskInfo.GetValue(true));
  else
   this.SetRawValue(this.GetInputElement().value);
 },
 HasTextDecorators: function() {
  return this.nullText != "" || this.displayFormat != null;
 },
 CanApplyTextDecorators: function(){
  return !this.focused;
 },
 CreateStyleDecoration: function () {
  return new ASPx.TextEditorStyleDecoration(this);
 },
 CanApplyNullTextDecoration: function() {
  var value = this.GetValue();
  return this.IsNull(value);
 },
 GetDecoratedText: function(value) {
  var result = value;
  if(this.IsNull(value) && this.nullText != "" && this.CanApplyNullTextDecoration())
   result = this.nullText;
  else if(this.displayFormat != null)
   result = this.GetDisplayFormatText(value);
  else if(this.maskInfo != null)
   result = this.maskInfo.GetText();
  else if(value == null)
   result = "";
  return result;
 },
 GetDisplayFormatText: function(value) {
  return ASPx.Formatter.Format(this.displayFormat, value);
 },
 ToggleTextDecoration: function() {
  if(this.HasTextDecorators()) {
   if(this.focused) {
    var input = this.GetInputElement();
    var oldValue = input.value;
    var sel = ASPx.Selection.GetExtInfo(input);
    this.ToggleTextDecorationCore();
    this.ensureActivateFocusedNullTextMechanism();
    if(oldValue != input.value || !ASPx.Selection.AreEqual(sel, ASPx.Selection.GetExtInfo(input))) {
     if(sel.startPos == 0 && sel.endPos == oldValue.length)
      sel.endPos = input.value.length;
     else
      sel.endPos = sel.startPos;
     if(!this.accessibilityCompliant || ASPx.GetActiveElement() == input)
      this.SetSelectionOnToggleTextDecoration(input, sel);
    }
   } else {
    this.ToggleTextDecorationCore();
    this.ensureDeactivateFocusedNullTextMechanism();
   }
  }
 },
 SetSelectionOnToggleTextDecoration: function(input, sel) {
  ASPx.Selection.Set(input, sel.startPos, sel.endPos);
 },
 ToggleTextDecorationCore: function() {
  if(this.maskInfo != null) {   
   this.ApplyMaskInfo(false);
  } else {
   var input = this.GetInputElement();
   var rawValue = this.GetRawValue();
   var value = this.CanApplyTextDecorators() ? this.GetDecoratedText(rawValue) : rawValue;
   if(input.value != value) {
    if(input.type == "password")
     this.TogglePasswordInputTextDecoration(value);
    else
     input.value = value;
   }
  }
 },
 GetPasswordNullTextInputElement: function() {
  if(!this.isPasswordNullTextInputElementExists())
   this.nullTextInputElement = this.createPasswordNullTextInputElement();
  return this.nullTextInputElement;
 },
 createPasswordNullTextInputElement: function() {
  var inputElement = this.GetInputElement(),
   nullTextInputElement = document.createElement("INPUT");
  nullTextInputElement.className = inputElement.className;
  nullTextInputElement.style.cssText = inputElement.style.cssText;
  nullTextInputElement.id = inputElement.id + passwordInputClonedSuffix;
  nullTextInputElement.type = "text";
  if(ASPx.IsExists(inputElement.tabIndex))
   nullTextInputElement.tabIndex = inputElement.tabIndex;
  var onFocusEventHandler = function() {
   var inputElement = this.GetInputElement(),
    nullTextInputElement = this.GetPasswordNullTextInputElement();
   if(inputElement) {
    this.LockFocusEvents();  
    ASPx.SetElementDisplay(inputElement, true);
    inputElement.focus();
    ASPx.SetElementDisplay(nullTextInputElement, false);
    this.ensureAdjustFocusedNullTextElement();
    this.ReplaceAssociatedIdInLabels(nullTextInputElement.id, inputElement.id);
   }
  }.aspxBind(this);
  ASPx.Evt.AttachEventToElement(nullTextInputElement, "focus", onFocusEventHandler);
  return nullTextInputElement;
 },
 isPasswordNullTextInputElementExists: function() {
  return ASPx.IsExistsElement(this.nullTextInputElement);
 },
 TogglePasswordNullTextTimeoutChecker: function() {
  if(this.passwordNullTextIntervalID < 0) {
   var timeoutChecker = function() {
    var inputElement = this.GetInputElement();
    if(ASPx.GetControlCollection().GetByName(this.name) !== this || inputElement == null) {
     window.clearTimeout(this.passwordNullTextIntervalID);
     this.passwordNullTextIntervalID = -1;
     return;
    } else {
     if(!this.focused) {
      var passwordNullTextInputElement = this.GetPasswordNullTextInputElement();
      if(passwordNullTextInputElement.value != this.nullText && inputElement.value == "") { 
       passwordNullTextInputElement.value = this.nullText;
       this.SetValue(null);
      }
      if(inputElement.value != "") {
       if(inputElement.style.display == "none") {
        this.SetValue(inputElement.value);
        this.UnhidePasswordInput();
       }
      } else {
       if(inputElement.style.display != "none") {
        this.SetValue(null);
        this.HidePasswordInput();
       }
      }
     }
    }
   }.aspxBind(this);
   timeoutChecker(); 
   this.passwordNullTextIntervalID = window.setInterval(timeoutChecker, 100);
  }
 },
 TogglePasswordInputTextDecoration: function(value) {
  var inputElement = this.GetInputElement();
  var nullTextInputElement = this.GetPasswordNullTextInputElement();
  nullTextInputElement.value = value;
  var parentNode = inputElement.parentNode;
  if(ASPx.Data.ArrayIndexOf(parentNode.childNodes, nullTextInputElement) < 0) {
   ASPx.Attr.ChangeStyleAttribute(nullTextInputElement, "display", "none");
   parentNode.appendChild(nullTextInputElement);
  }
  this.HidePasswordInput();
  this.TogglePasswordNullTextTimeoutChecker();
 },
 HidePasswordInput: function() {
  ASPx.Attr.ChangeStyleAttribute(this.GetInputElement(), "display", "none");
  ASPx.Attr.ChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "");
  this.ReplaceAssociatedIdInLabels(this.GetInputElement().id, this.GetPasswordNullTextInputElement().id);
 },
 UnhidePasswordInput: function() {
  ASPx.Attr.ChangeStyleAttribute(this.GetInputElement(), "display", "");
  ASPx.Attr.ChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "none");
  this.ReplaceAssociatedIdInLabels(this.GetPasswordNullTextInputElement().id, this.GetInputElement().id);
 },
 ReplaceAssociatedIdInLabels: function(oldId, newId) {
  var labels = document.getElementsByTagName("LABEL");
  for(var i = 0; i < labels.length; i++) {
   if(labels[i].attributes["for"] && labels[i].attributes["for"].value == oldId)
    labels[i].attributes["for"].value = newId;
  }
 },
 GetFormattedText: function() {
  var value = this.GetValue();
  if(this.IsNull(value) && this.nullText != "")
   return this.GetText();
  return this.GetDecoratedText(value);
 },
 IsNull: function(value) {
  return value == null || value === "";
 },
 PopulateStyleDecorationPostfixes: function() {
  ASPxClientEdit.prototype.PopulateStyleDecorationPostfixes.call(this);
  this.styleDecoration.AddPostfix(ASPx.TEInputSuffix);
 },
 GetValue: function() {
  var value = null;
  if(this.maskInfo != null)
   value = this.maskInfo.GetValue();
  else if(this.HasTextDecorators())
   value = this.GetRawValue();
  else {
   var input = this.GetInputElement();
   value = input ? input.value : null;
  }
  return (value == "" && this.convertEmptyStringToNull) ? null : value;
 },
 SetValue: function(value) {
  if(value == null || value === undefined) 
   value = "";
  if(this.maskInfo != null) {
   this.maskInfo.SetValue(value.toString());
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  } 
  else if(this.HasTextDecorators()) {
   this.SetRawValue(value);
   this.GetInputElement().value = this.CanApplyTextDecorators() && this.GetInputElement().type != "password" ? this.GetDecoratedText(value) : value;
  }
  else
   this.GetInputElement().value = value;
  this.UpdateStyleDecorations(); 
  this.SaveChangedValue();   
 },
 SetVisible: function(visible) {
  ASPxClientEdit.prototype.SetVisible.call(this, visible);
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   if(visible)
    this.showHelpText();
   else
    this.hideHelpText();
  }
 },
 UnstretchInputElement: function(){
  var inputElement = this.GetInputElement();
  var mainElement = this.GetMainElement();
  var mainElementCurStyle = ASPx.GetCurrentStyle(mainElement);
  if(ASPx.IsExistsElement(mainElement) && ASPx.IsExistsElement(inputElement) && ASPx.IsExists(mainElementCurStyle) && 
   inputElement.style.width == "100%" &&
   (mainElementCurStyle.width == "" || mainElementCurStyle.width == "auto"))
   inputElement.style.width = "";
 },
 RestoreActiveElement: function(activeElement) {
  if(activeElement && activeElement.setActive && activeElement.tagName != "IFRAME")
   activeElement.setActive();
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseTextChanged(processOnServer);
  return processOnServer;
 },
 InitMask: function() {
  var rawValue = this.GetRawValue();
  this.SetValue(rawValue.length ? this.DecodeRawInputValue(rawValue) : this.maskInfo.GetValue());
  this.validationPatterns.unshift(new MaskValidationPattern(this.maskInfo.errorText, this.maskInfo));
 },
 SetMaskPasteTimer: function() {
  this.ClearMaskPasteTimer();
  this.maskPasteTimerID = ASPx.Timer.SetControlBoundInterval(this.MaskPasteTimerProc, this, ASPx.PasteCheckInterval);
 },
 ClearMaskPasteTimer: function() {
  this.maskPasteTimerID = ASPx.Timer.ClearInterval(this.maskPasteTimerID);
 },
 SavePrevMaskValue: function() {
  this.maskValueBeforeUserInput = this.maskInfo.GetValue();
 },
 FillMaskInfo: function() {
  var input = this.GetInputElement();
  if(!input) return; 
  var sel = ASPx.Selection.GetInfo(input);
  this.maskInfo.SetCaret(sel.startPos, sel.endPos - sel.startPos);  
 },
 ApplyMaskInfo: function(applyCaret) {
  this.SyncRawValue();
  var input = this.GetInputElement();
  var text = this.GetMaskDisplayText();
  this.maskTextBeforePaste = text;
  if(input.value != text)
   input.value = text;
  if(applyCaret)
   ASPx.Selection.Set(input, this.maskInfo.caretPos, this.maskInfo.caretPos + this.maskInfo.selectionLength);
 },
 GetMaskDisplayText: function() {
  if(!this.focused && this.HasTextDecorators())
   return this.GetDecoratedText(this.maskInfo.GetValue());
  return this.maskInfo.GetText();
 },
 ShouldCancelMaskKeyProcessing: function(htmlEvent, keyDownInfo) {
  return ASPx.Evt.IsEventPrevented(htmlEvent);
 }, 
 HandleMaskKeyDown: function(evt) {
  var keyInfo = ASPx.MaskManager.CreateKeyInfoByEvent(evt);
  ASPx.MaskManager.keyCancelled = this.ShouldCancelMaskKeyProcessing(evt, keyInfo);
  if(ASPx.MaskManager.keyCancelled) {
   ASPx.Evt.PreventEvent(evt);
   return;
  }
  this.maskPasteLock = true;
  this.FillMaskInfo();  
  var canHandle = ASPx.MaskManager.CanHandleControlKey(keyInfo);   
  ASPx.MaskManager.savedKeyDownKeyInfo = keyInfo;
  if(canHandle) {   
   ASPx.MaskManager.OnKeyDown(this.maskInfo, keyInfo);
   this.ApplyMaskInfo(true);
   ASPx.Evt.PreventEvent(evt);
  }
  ASPx.MaskManager.keyDownHandled = canHandle;
  this.maskPasteLock = false;
  this.UpdateMaskHintHtml();
 },
 HandleMaskKeyPress: function(evt) {
  var keyInfo = ASPx.MaskManager.CreateKeyInfoByEvent(evt);
  ASPx.MaskManager.keyCancelled = ASPx.MaskManager.keyCancelled || this.ShouldCancelMaskKeyProcessing(evt, ASPx.MaskManager.savedKeyDownKeyInfo);
  if(ASPx.MaskManager.keyCancelled) {
   ASPx.Evt.PreventEvent(evt);
   return;
  }
  this.maskPasteLock = true;  
  var printable = ASPx.MaskManager.savedKeyDownKeyInfo != null && ASPx.MaskManager.IsPrintableKeyCode(ASPx.MaskManager.savedKeyDownKeyInfo);
  if(printable) {
   ASPx.MaskManager.OnKeyPress(this.maskInfo, keyInfo);
   this.ApplyMaskInfo(true);
  }
  if(printable || ASPx.MaskManager.keyDownHandled)   
   ASPx.Evt.PreventEvent(evt); 
  this.maskPasteLock = false;
  this.UpdateMaskHintHtml();
 },
 MaskPasteTimerProc: function() {
  if(this.maskPasteLock || !this.maskInfo) return;
  this.maskPasteCounter++;
  var inputElement = this.inputElement;
  if(!inputElement || this.maskPasteCounter > 40) {
   this.maskPasteCounter = 0;
   inputElement = this.GetInputElement();
   if(!ASPx.IsExistsElement(inputElement)) {
    this.ClearMaskPasteTimer();
    return;
   }
  }
  if(this.maskTextBeforePaste !== inputElement.value)
   this.ProcessInputValueChangedOnTimer();
  if(!this.focused)
   this.ClearMaskPasteTimer();
 },
 ProcessInputValueChangedOnTimer: function() {
  var inputElement = this.inputElement;
  var selectionInfo = ASPx.Selection.GetInfo(inputElement);
  var startCaretPosition = selectionInfo.startPos;
  var endCaretPosition = selectionInfo.endPos;
  var oldText = this.maskTextBeforePaste;
  var newText = inputElement.value;
  var isAndroidBackSpacePressed = this.isAndroidBackSpacePressed(oldText, newText, startCaretPosition, endCaretPosition);
  var isLastTypedCharacter = newText.indexOf(oldText) == 0 && newText.length > oldText.length;
  if(isAndroidBackSpacePressed || isLastTypedCharacter) {
   this.SetText(newText);
   this.SetCaretPosition(endCaretPosition);
  } else {
   this.maskInfo.ProcessPaste(newText, endCaretPosition);
   this.ApplyMaskInfo(true);
  }
 },
 isAndroidBackSpacePressed: function(oldText, newText, startCaretPosition, endCaretPosition) {
  if(!ASPx.Browser.AndroidMobilePlatform || startCaretPosition !== endCaretPosition || newText.length >= oldText.length)
   return false;
  var startSubstring = newText.substring(0, startCaretPosition);
  var endSubstring = newText.substring(startCaretPosition);
  var isStartSubstringMatches = oldText.indexOf(startSubstring) == 0;
  var isEndSubstringMatches = endSubstring == "" || oldText.lastIndexOf(endSubstring) == oldText.length - endSubstring.length;
  return isStartSubstringMatches && isEndSubstringMatches;
 },
 BeginShowMaskHint: function() {
  if(!this.GetReadOnly() && this.maskHintTimerID == -1)
   this.maskHintTimerID = window.setInterval(ASPx.MaskHintTimerProc, 500);
 },
 EndShowMaskHint: function() {
  window.clearInterval(this.maskHintTimerID);
  this.maskHintTimerID = -1;
 },
 MaskHintTimerProc: function() {  
  if(this.maskInfo) {
   this.FillMaskInfo();
   this.UpdateMaskHintHtml();
  } else {
   this.EndShowMaskHint();
  }
 },
 UpdateMaskHintHtml: function() {  
  var hint =  this.GetMaskHintElement();
  if(!ASPx.IsExistsElement(hint))
   return;
  var html = ASPx.MaskManager.GetHintHtml(this.maskInfo);
  if(html == this.maskHintHtml)
   return;
  if(html != "") {
   var mainElement = this.GetMainElement();
   if(ASPx.IsExistsElement(mainElement)) {
    hint.innerHTML = html;
    hint.style.position = "absolute";  
    hint.style.left = ASPx.PrepareClientPosForElement(ASPx.GetAbsoluteX(mainElement), mainElement, true) + "px";
    hint.style.top = (ASPx.PrepareClientPosForElement(ASPx.GetAbsoluteY(mainElement), mainElement, false) + mainElement.offsetHeight + 2) + "px";
    hint.style.display = "block";    
   }   
  } else {
   hint.style.display = "none";
  }
  this.maskHintHtml = html;
 },
 HideMaskHint: function() {
  var hint =  this.GetMaskHintElement();
  if(ASPx.IsExistsElement(hint))
   hint.style.display = "none";
  this.maskHintHtml = "";
 },
 GetMaskHintElement: function() {
  return ASPx.GetElementById(this.name + "_MaskHint");
 },
 OnFocus: function() {
  if (this.maskInfo != null && !ASPx.GetControlCollection().InCallback()) {
   this.TrySetCursorToStartPosition();
   this.SetMaskPasteTimer();
  }
  if(this.IsAutocompleteDropDownListRequiredOnFocus())
   ASPx.Attr.RemoveAttribute(this.GetInputElement(), "autocomplete");
  ASPxClientEdit.prototype.OnFocus.call(this);
 },
 OnLostFocus: function() {
  if(this.IsAutocompleteOffRequiredOnLostFocus())
   ASPx.Attr.SetAttribute(this.GetInputElement(), "autocomplete", "off");
  ASPxClientEdit.prototype.OnLostFocus.call(this);
 },
 OnMouseWheel: function(evt){
  if(this.GetReadOnly() || this.maskInfo == null) return;
  this.FillMaskInfo();
  ASPx.MaskManager.OnMouseWheel(this.maskInfo, ASPx.Evt.GetWheelDelta(evt) < 0 ? -1 : 1);
  this.ApplyMaskInfo(true);
  ASPx.Evt.PreventEvent(evt);
  this.UpdateMaskHintHtml();
 }, 
 OnBrowserWindowResize: function(e) {
  if(!this.autoResizeWithContainer)
   this.AdjustControl();
 },
 IsValueChanged: function() {
  return this.GetValue() != this.lastChangedValue; 
 },
 OnKeyDown: function(evt) {        
  if(this.NeedPreventBrowserUndoBehaviour(evt))
   return ASPx.Evt.PreventEvent(evt);
  if(this.RequireHandleMaxlenManually()) {
   this.onKeyDownInputValue = this.GetInputElement().value;
   var selectionInfo = ASPx.Selection.GetExtInfo(this.GetInputElement());
   this.onKeyDownCursorPos = selectionInfo.startPos;
  }
  if(ASPx.Browser.IE && ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Esc) {   
   if(++this.escCount > 1) {
    ASPx.Evt.PreventEvent(evt);
    return;
   }
  } else 
   this.escCount = 0;
  ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
  if(!this.IsRaiseStandardOnChange(evt)) {
   if(!this.GetReadOnly() && this.maskInfo != null)
    this.HandleMaskKeyDown(evt);
  }
 },
 IsCtrlZ: function(evt) {
  return evt.ctrlKey && !evt.altKey && !evt.shiftKey && (ASPx.Evt.GetKeyCode(evt) == 122 || ASPx.Evt.GetKeyCode(evt) == 90);
 },
 NeedPreventBrowserUndoBehaviour: function(evt) {
  var inputElement = this.GetInputElement();
  return this.IsCtrlZ(evt) && !!inputElement && !inputElement.value;
 },
 OnKeyPress: function(evt) {
  ASPxClientEdit.prototype.OnKeyPress.call(this, evt);
  if(!this.GetReadOnly() && this.maskInfo != null && !this.IsRaiseStandardOnChange(evt))
   this.HandleMaskKeyPress(evt);
  if(this.NeedOnKeyEventEnd(evt, true))
   this.OnKeyEventEnd(evt);
 },
 OnKeyUp: function(evt) {
  if(ASPx.Browser.Firefox && !this.focused && ASPx.Evt.GetKeyCode(evt) === ASPx.Key.Tab)
   return;
  if(this.NeedOnKeyEventEnd(evt, false)) {
   var proccessNextCommingPress = ASPx.Evt.GetKeyCode(evt) === ASPx.Key.Alt; 
   this.OnKeyEventEnd(evt, proccessNextCommingPress);
  }
  if(this.RequireHandleMaxlenManually()) {
   var inputValueLength = this.GetInputElement().value.length;
   var maxLength = this.GetInputMaxLength();
   if(inputValueLength > maxLength && inputValueLength > this.onKeyDownInputValue.length) {
    this.GetInputElement().value = this.onKeyDownInputValue;
    this.SetCaretPosition(this.onKeyDownCursorPos);
   }
  }
  ASPxClientEdit.prototype.OnKeyUp.call(this, evt);
 },
 RequireHandleMaxlenManually: function() { 
  return ASPx.Browser.AndroidMobilePlatform && ASPx.Browser.SamsungAndroidDevice && ASPx.Browser.PlaformMajorVersion < 6 && this.GetInputMaxLength() !== -1;
 },
 GetInputMaxLength: function() {
  var input = this.GetInputElement();
  if(ASPx.Attr.IsExistsAttribute(input, "maxlength"))
   return input.maxLength;
  return -1;
 },
 NeedOnKeyEventEnd: function(evt, isKeyPress) { 
  var handleKeyPress = this.maskInfo != null && evt.keyCode == ASPx.Key.Enter;
  return handleKeyPress == isKeyPress;
 },
 OnKeyEventEnd: function(evt, withDelay){
  if(!this.GetReadOnly()) {
   if(this.IsRaiseStandardOnChange(evt))
    this.RaiseStandardOnChange();
   this.SyncRawValueIfHasTextDecorators(withDelay);
  }
 },
 SyncRawValueIfHasTextDecorators: function(withDelay) {
  if(this.HasTextDecorators()) {
   if(withDelay) {
    window.setTimeout(function() {
     this.SyncRawValue();
    }.aspxBind(this), 0);
   } else 
    this.SyncRawValue();
  }
 },
 IsRaiseStandardOnChange: function(evt){
  return !this.specialKeyboardHandlingUsed && this.raiseValueChangedOnEnter && evt.keyCode == ASPx.Key.Enter;
 },
 GetFocusSelectAction: function() {
  if (this.maskInfo)
   return this.maskInfo.IsEmpty() ? null : "start";
  return "all"; 
 },
 CorrectFocusWhenDisabled: function() {
  if(!this.GetEnabled()) {
   var inputElement = this.GetInputElement();
   if(inputElement)
    inputElement.blur();
   return true;
  }
  return false;
 },
 EnsureShowPopupHelpText: function() {
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.showHelpText();
 },
 EnsureHidePopupHelpText: function() {
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.hideHelpText();
 },
 OnFocusCore: function() {
  if(this.CorrectFocusWhenDisabled())
   return;
  var wasLocked = this.IsFocusEventsLocked();
  ASPxClientEdit.prototype.OnFocusCore.call(this);
  this.CorrectInputMaxLength(true);
  if(this.maskInfo != null) {
   this.SavePrevMaskValue();
   this.BeginShowMaskHint();
  }
  if(!wasLocked) {
   this.ToggleTextDecoration();
   this.startUserInputEventTimerIfRequired();
  }
  if(this.isPasswordNullTextInputElementExists())
   setTimeout(function() { this.EnsureShowPopupHelpText(); }.aspxBind(this), 0);
  else
   this.EnsureShowPopupHelpText();
 },
 startUserInputEventTimerIfRequired: function () {
  if(this.shouldStartUserInputTimer() && this.userInputEventTimerID === -1) {
   this.prevInputValue = this.GetInputElement().value;
   this.userInputEventTimerID = ASPx.Timer.SetControlBoundInterval(this.processUserInputEventTimer, this, ASPx.CheckUserInputInterval);
  }
 },
 shouldStartUserInputTimer: function() {
  return !this.UserInput.IsEmpty();
 },
 restartCurrentUserInputTimer: function() {
  if(this.userInputEventTimerID !== -1) {
   this.processUserInputEventTimer(true);
   this.clearUserInputEventTimerIfRequired();
   this.startUserInputEventTimerIfRequired();
  }
 },
 clearUserInputEventTimerIfRequired: function () {
  if (this.userInputEventTimerID !== -1)
   this.userInputEventTimerID = ASPx.Timer.ClearInterval(this.userInputEventTimerID);
 },
 processUserInputEventTimer: function(onRestart) {
  var currentInputValue = this.GetInputElement().value;
  if(currentInputValue !== this.prevInputValue) {
   this.onInputChangedOnUserInputTimer(onRestart);
   this.prevInputValue = currentInputValue;
  }
 },
 onInputChangedOnUserInputTimer: function(onRestart) {
  if(this.raiseUserInputTimeout > -1)
   clearTimeout(this.raiseUserInputTimeout);
  this.raiseUserInputTimeout = setTimeout(function() {
   this.RaiseUserInput();
   this.raiseUserInputTimeout = -1;
  }.bind(this), 0);
 },
 ensureFocusedNullTextElement: function () {
  if(!this.focusedNullTextElement)
   this.createFocusedNullTextElement();
 },
 getFocusedNullTextElementClassName: function() {
  return focusedNullTextClassName;
 },
 getFocusedNullTextElementTagName: function() {
  return "INPUT";
 },
 getCopyFromInputElementStyles: function() {
  return [ "paddingLeft", "paddingTop", "paddingRight", "paddingBottom", "borderCollapse", "borderLeftWidth", "borderTopWidth", "borderRightWidth", "borderBottomWidth" ];
 },
 copyStylesFromInputElementToFocusedNullTextElement: function() {
  var input = this.GetInputElement();
  var inputStyle = ASPx.GetCurrentStyle(input);
  var stylesToCopy = this.getCopyFromInputElementStyles();
  for(var i = 0; i < stylesToCopy.length; i++)
   this.focusedNullTextElement.style[stylesToCopy[i]] = inputStyle[stylesToCopy[i]];
 },
 createFocusedNullTextElement: function() {
  this.focusedNullTextElement = document.createElement(this.getFocusedNullTextElementTagName());
  this.focusedNullTextElement.value = this.nullText;
  this.focusedNullTextElement.className = this.getFocusedNullTextElementClassName();
  this.focusedNullTextElement.tabIndex = -1;
  ASPx.SetElementDisplay(this.focusedNullTextElement, false);
  if(this.accessibilityCompliant) {
   ASPx.Attr.SetAttribute(this.focusedNullTextElement, "aria-label", this.nullText);
   ASPx.Attr.SetAttribute(this.focusedNullTextElement, "aria-hidden", true);
  }
  this.copyStylesFromInputElementToFocusedNullTextElement();
  if (this.nullTextOnFocusCssText) {
   var styleSheet = ASPx.GetCurrentStyleSheet();
   this.focusedNullTextElement.className += " " + ASPx.CreateImportantStyleRule(styleSheet, this.nullTextOnFocusCssText);
  }
  var inputElement = this.GetInputElement();
  inputElement.parentNode.insertBefore(this.focusedNullTextElement, inputElement.nextSibling);
 },
 ensureActivateFocusedNullTextMechanism: function() {
  if (this.nullTextDisplayMode === NullTextDisplayMode.UnfocusedAndFocused) {
   if(this.IsNull(this.GetValue()))
    this.changeFocusedNullTextElementVisibility(true);
   this.setFocusedNullTextTimer();
  }
 },
 ensureDeactivateFocusedNullTextMechanism: function () {
  if (this.nullTextDisplayMode === NullTextDisplayMode.UnfocusedAndFocused) {
   this.clearFocusedNullTextTimer();
   this.changeFocusedNullTextElementVisibility(false);
  }
 },
 setFocusedNullTextTimer: function () {
  if(this.focusedNullTextTimerID === -1)
   this.focusedNullTextTimerID = ASPx.Timer.SetControlBoundInterval(this.onFocusedNullTextVisibilityCheck, this, ASPx.PasteCheckInterval);
 },
 clearFocusedNullTextTimer: function () {
  this.focusedNullTextTimerID = ASPx.Timer.ClearInterval(this.focusedNullTextTimerID);
 },
 onFocusedNullTextVisibilityCheck: function (evt) {
  if(!this.needShowFocusedNullText() && this.isFocusedNullTextElementDisplayed())
   this.changeFocusedNullTextElementVisibility(false);
  else if(this.needShowFocusedNullText() && !this.isFocusedNullTextElementDisplayed())
   this.changeFocusedNullTextElementVisibility(true);
 },
 isFocusedNullTextElementDisplayed: function() {
  return this.focusedNullTextElement && ASPx.GetElementDisplay(this.focusedNullTextElement);
 },
 needShowFocusedNullText: function() {
  if(this.focusedNullTextTimerID === -1)
   return this.IsNull(this.GetValue());
  var result = this.GetInputElement().value === "";
  if(this.CanApplyNullTextDecoration)
   result = result && this.CanApplyNullTextDecoration();
  return result;
 }, 
 changeFocusedNullTextElementVisibility: function (visible) {
  this.ensureFocusedNullTextElement();
  ASPx.SetElementDisplay(this.focusedNullTextElement, visible);
  if(visible)
   this.adjustFocusedNullTextElement();  
 },
 getInputElementAbsoluteX: function(input) {
  var result = ASPx.GetAbsoluteX(input);
  if(ASPx.Browser.Opera || ASPx.Browser.AndroidMobilePlatform) 
   result++;
  return result;
 },
 getInputElementAbsoluteY: function (input) {
  var result = ASPx.GetAbsoluteY(input);
  if(ASPx.Browser.Opera || ASPx.Browser.AndroidMobilePlatform) 
   result++;
  return result;
 },
 adjustFocusedNullTextElement: function() {
  var input = this.GetInputElement();
  this.focusedNullTextElement.style.width = input.offsetWidth + "px";
  this.focusedNullTextElement.style.height = input.offsetHeight + "px";
  var inputXPos = this.getInputElementAbsoluteX(input);
  var inputYPos = this.getInputElementAbsoluteY(input);
  ASPx.SetAbsoluteX(this.focusedNullTextElement, inputXPos);
  ASPx.SetAbsoluteY(this.focusedNullTextElement, inputYPos);
  var shiftByX = inputXPos - ASPx.GetAbsoluteX(this.focusedNullTextElement);
  var shiftByY = inputYPos - ASPx.GetAbsoluteY(this.focusedNullTextElement);
  if (shiftByX !== 0)
   this.focusedNullTextElement.style.left = ASPx.PxToFloat(this.focusedNullTextElement.style.left) + shiftByX + "px";
  if (shiftByY !== 0)
   this.focusedNullTextElement.style.top = ASPx.PxToFloat(this.focusedNullTextElement.style.top) + shiftByY + "px";
 },
 ensureAdjustFocusedNullTextElement: function () {
  if(this.isFocusedNullTextElementDisplayed())
   this.adjustFocusedNullTextElement(this.focusedNullTextElement);
 },
 TrySetCursorToStartPosition: function() {
  var input = this.GetInputElement();
  var sel = ASPx.Selection.GetInfo(input);
  if (sel.startPos === sel.endPos && this.IsMaskInfoEmpty()) {
   var pos = this.maskInfo.GetFirstNonLiteralPosition();
   var setCaret = ASPx.Selection.SetCaretPosition.bind(this, input, pos);
   setTimeout(function() {
    if (document.activeElement === input) {
     setCaret();
     setTimeout(setCaret, 50);
    }
   }, 0);
  }
 },
 IsMaskInfoEmpty: function() {
  return this.maskInfo.IsEmpty();
 },
 OnLostFocusCore: function() {
  var wasLocked = this.IsFocusEventsLocked();
  ASPxClientEdit.prototype.OnLostFocusCore.call(this);
  this.CorrectInputMaxLength();
  if(this.maskInfo != null) {
   this.EndShowMaskHint();
   this.HideMaskHint();   
   if(this.maskInfo.ApplyFixes(null))
    this.ApplyMaskInfo(false);
   this.RaiseStandardOnChange();
  }
  if(!wasLocked) {
   this.clearUserInputEventTimerIfRequired();
   this.ToggleTextDecoration();
  }
  this.escCount = 0;
  this.EnsureHidePopupHelpText();
 },
 InputMaxLengthCorrectionRequired: function () {
  return ASPx.Browser.IE && ASPx.Browser.Version >= 10 && (!this.isNative || this.nullText != "");
 },
 CorrectInputMaxLength: function (onFocus) {
  if(this.InputMaxLengthCorrectionRequired()) {
   var input = this.GetInputElement();
   if(!ASPx.IsExists(this.inputMaxLength))
    this.inputMaxLength = input.maxLength;
   input.maxLength = onFocus ? this.inputMaxLength : -1;
  }
 },
 SubscribeToIeDropEvent: function() {
  if(this.InputMaxLengthCorrectionRequired()) {
   var input = this.GetInputElement();
   ASPx.Evt.AttachEventToElement(input, "drop", function(e) { this.CorrectInputMaxLength(true); }.aspxBind(this));
  }
 },
 SetFocus: function() {
  if(this.isPasswordNullTextInputElementExists()) {
   this.GetPasswordNullTextInputElement().focus();
  } else {
     ASPxClientEdit.prototype.SetFocus.call(this);
  }
 },
 OnValueChanged: function() {
  if(this.maskInfo != null) {
   if(this.maskInfo.GetValue() == this.maskValueBeforeUserInput && !this.IsValueChangeForced())
    return;
   this.SavePrevMaskValue();
  }
  if(this.HasTextDecorators())
   this.SyncRawValue();
  if(!this.IsValueChanged() && !this.IsValueChangeForced())
   return;
  this.SaveChangedValue(); 
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 },
 IsValueChangeForced: function() {
  return false;
 },
 OnTextChanged: function() {
 },
 ForceTextChanged: function() {
  this.OnTextChanged();
 },
 SaveChangedValue: function() {
  this.lastChangedValue = this.GetValue();
 },
 RaiseStandardOnChange: function(){
  var element = this.GetInputElement();
  if(element && element.onchange) {
   element.onchange({ target: this.GetInputElement() });
  }
  else if(this.ValueChanged) {
   this.ValueChanged.FireEvent(this);
  }
 },
 RaiseTextChanged: function(processOnServer){
  if(!this.TextChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.TextChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;  
 },
 RaiseUserInput: function () {
  if(!this.UserInput.IsEmpty()) {
   var args = new ASPxClientEventArgs();
   this.UserInput.FireEvent(this, args);
  }
 },
 GetText: function(){
  if(this.maskInfo != null) {
   return this.maskInfo.GetText();
  } else {
   var value = this.GetValue();
   return value != null ? value : "";
  }
 },
 SetText: function (value){
  if(this.maskInfo != null) {
   this.maskInfo.SetText(value);
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  } else {
   this.SetValue(value);
  }
 },
 SelectAll: function() {
  this.SetSelection(0, -1, false);
 },
 SetCaretPosition: function(pos) {
  var inputElement = this.GetInputElement();
  ASPx.Selection.SetCaretPosition(inputElement, pos);
 },
 GetCaretPosition: function() {
  var inputElement = this.GetInputElement();
  return ASPx.Selection.GetCaretPosition(inputElement);
 },
 SetSelection: function(startPos, endPos, scrollToSelection) { 
  var inputElement = this.GetInputElement();
  ASPx.Selection.Set(inputElement, startPos, endPos, scrollToSelection, true);
 },
 ChangeEnabledAttributes: function(enabled){
  var inputElement = this.GetInputElement();
  if(inputElement){
   this.ChangeInputEnabledAttributes(inputElement, ASPx.Attr.ChangeAttributesMethod(enabled), enabled);
   if(this.specialKeyboardHandlingUsed)
    this.ChangeSpecialInputEnabledAttributes(inputElement, ASPx.Attr.ChangeEventsMethod(enabled), true);
   this.ChangeInputEnabled(inputElement, enabled, this.GetReadOnly());
  }
 },
 SetReadOnlyInternal: function(readOnly) {
  ASPxClientEdit.prototype.SetReadOnlyInternal.call(this, readOnly);
  this.ChangeInputReadOnly(readOnly);
 },
 ChangeReadOnlyStateItems: function(readOnly) {
  ASPxClientEdit.prototype.ChangeReadOnlyStateItems.call(this, readOnly);
  ASPx.GetStateController().SetElementReadOnly(this.GetInputElement(), readOnly);
 },
 ChangeInputReadOnly: function(readOnly) {
  var inputElement = this.GetInputElement();
  if(inputElement)
   inputElement.readOnly = readOnly || !this.GetEnabled() && this.UseReadOnlyForDisabled();
 },
 ChangeEnabledStateItems: function(enabled){
  if(!this.isNative) {
   var sc = ASPx.GetStateController();
   sc.SetElementEnabled(this.GetMainElement(), enabled);
   sc.SetElementEnabled(this.GetInputElement(), enabled);
  }
 },
 ChangeInputEnabled: function(element, enabled, readOnly) {
  if(this.UseReadOnlyForDisabled())
   element.readOnly = !enabled || readOnly;
  else
   element.disabled = !enabled;
 },
 ChangeInputEnabledAttributes: function(element, method, enabled) {
  var ieTabIndexFix = enabled && ASPx.Browser.IE && element.setAttribute && ASPx.Attr.IsExistsAttribute(element, "savedtabIndex");
  method(element, "tabIndex");
  if(!enabled) element.tabIndex = -1;
  if(ieTabIndexFix) { 
   window.setTimeout(function() {
    if(element && element.parentNode)
     element.parentNode.replaceChild(element, element); 
   }, 0);
  }
  method(element, "onclick");
  if(!this.NeedFocusCorrectionWhenDisabled())
   method(element, "onfocus");
  method(element, "onblur");
  method(element, "onkeydown");
  method(element, "onkeypress");
  method(element, "onkeyup");
 },
 UseReadOnlyForDisabled: function() {
  return (ASPx.Browser.IE && ASPx.Browser.Version < 10) && !this.isNative;
 },
 NeedFocusCorrectionWhenDisabled: function(){
  return (ASPx.Browser.IE && ASPx.Browser.Version < 10) && !this.isNative;
 },
 OnPostFinalization: function(args) {
  this.TryRestoreDisabledOnPost(args);
  this.TryClearInputTextDecorationOnPost(args);
 },
 TryRestoreDisabledOnPost: function(args) { 
  if(this.GetEnabled() || !this.UseReadOnlyForDisabled() || args.isDXCallback)
   return;
  var inputElement = this.GetInputElement();
  if(inputElement) {
   var inputDisabled = inputElement.disabled;
   inputElement.disabled = true;
   window.setTimeout(function() {
    inputElement.disabled = inputDisabled;
   }, 0);
  }
 },
 GetTempHiddenInputID: function() {
  return this.name + ASPx.TempHiddenInputSuffix;
 },
 TryClearInputTextDecorationOnPost: function(args) {
  if(ASPx.Platform === "NETCORE")
   return;
  if(this.HasTextDecorators() && !ASPx.IsExists(this.GetValue())) {
   var inputElement = this.GetInputElement();
   if(inputElement) {
    var name = ASPx.Attr.GetAttribute(inputElement, "name");
    if(name)
     this.TryClearInputTextDecorationOnPostCore(inputElement, name);
   }
  }
 },
 TryClearInputTextDecorationOnPostCore: function(inputElement, name) {
  var hiddenInput = ASPx.CreateHiddenField(name, this.GetTempHiddenInputID(), inputElement.parentNode);
  ASPx.Attr.SetAttribute(inputElement, "data-name", name);
  ASPx.Attr.RemoveAttribute(inputElement, "name");
  setTimeout(function() {
   ASPx.Attr.SetAttribute(inputElement, "name", name);
   ASPx.Attr.RemoveAttribute(inputElement, "data-name");
   ASPx.RemoveElement(hiddenInput);
  }, 0);
 },
 OnUnload: function() {
  var input = this.GetInputElement();
  if(!input)
   return;
  if(this.IsAutocompleteOffNotRequiredOnUnload())
   ASPx.Attr.RemoveAttribute(input, "autocomplete");
  if(this.focusedNullTextElement)
   ASPx.RemoveElement(this.focusedNullTextElement);
 },
 IsVCardAttributeRequired: function() {
  return this.autoCompleteAttribute && this.autoCompleteAttribute.name !== "autocomplete";
 },
 IsAutocompleteDropDownListRequiredOnFocus: function() {
  return !this.autoCompleteAttribute || this.IsVCardAttributeRequired();
 },
 IsAutocompleteOffRequiredOnInitialize: function() {
  return !this.isNative && (this.autoCompleteAttribute && this.autoCompleteAttribute.name === "autocomplete" || ASPx.Browser.WebKitFamily);
 },
 IsAutocompleteOffRequiredOnLostFocus: function() {
  return !this.autoCompleteAttribute && this.IsNullTextVisible() && !this.IsVCardAttributeRequired();
 },
 IsAutocompleteOffNotRequiredOnUnload: function() {
  return !this.IsNullTextVisible() || this.IsVCardAttributeRequired() || (this.maskInfo != null && this.GetValue() == null);
 },
 IsNullTextVisible: function() {
  return this.nullText && !this.GetValue() && !this.GetText();
 },
 GetModifyEvent: function() {
  return this.UserInput;
 },
 EnsureRequiredNativeAttributesExists: function() {
  var input = this.GetInputElement();
  if(!input.onfocus)
   ASPx.Evt.AttachEventToElement(input, "focus", function() { ASPx.EGotFocus(this.name); }.aspxBind(this));
  if(!input.onblur)
   ASPx.Evt.AttachEventToElement(input, "blur", function() { ASPx.ELostFocus(this.name); }.aspxBind(this));
 }
});
MaskValidationPattern = ASPx.CreateClass(ASPx.ValidationPattern, {
 constructor: function(errorText, maskInfo) {
  this.constructor.prototype.constructor.call(this, errorText);
  this.maskInfo = maskInfo;
 },
 EvaluateIsValid: function(value) {
  return this.maskInfo.IsValid();
 }
});
ASPx.Ident.IsASPxClientTextEdit = function(obj) {
 return !!obj.isASPxClientTextEdit;
};
var ASPxClientTextBoxBase = ASPx.CreateClass(ASPxClientTextEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.allowSetHeight = false;
  this.sizingConfig.adjustControl = true;
 }
});
var ASPxClientTextBox = ASPx.CreateClass(ASPxClientTextBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientTextBox = true;
  this.isCaptchaTextBox = false;
 },
 NeedProcessUnload: function() {
  return ASPxClientTextBoxBase.prototype.NeedProcessUnload.call(this) && !this.isCaptchaTextBox;
 },
 IsValueRestoredByBrowser: function() {
  if(this.isCaptchaTextBox)
   return this.initializeInputValue !== "" && this.initializeInputValue !== this.nullText;
  return  ASPxClientTextBoxBase.prototype.IsValueRestoredByBrowser.call(this);
 },
 SynchronizeRestoredValue: function() {
  if(this.isCaptchaTextBox)
   this.SetText(null);
  else
   ASPxClientTextBoxBase.prototype.SynchronizeRestoredValue.call(this);
 },
});
ASPxClientTextBox.Cast = ASPxClientControl.Cast;
ASPx.Ident.IsASPxClientTextBox = function(obj) {
 return !!obj.isASPxClientTextBox;
};
var ASPxClientMemo = ASPx.CreateClass(ASPxClientTextEdit, { 
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);        
  this.isASPxClientMemo = true;
  this.raiseValueChangedOnEnter = false;
  this.maxLength = 0;
  this.pasteTimerID = -1;
  this.pasteTimerActivatorCount = 0;
 },
 Initialize: function() {
  ASPxClientTextEdit.prototype.Initialize.call(this);
  this.SaveChangedValue();
  this.maxLengthRestricted = this.maxLength > 0;
 },
 CutString: function() {
  var text = this.GetText();
  if(text.length > this.maxLength) {
   text = text.substring(0, this.maxLength);
   this.SetText(text);
  }
 },
 EventKeyCodeChangesTheInput: function(evt) {
  if(ASPx.IsPasteShortcut(evt))
   return true;
  else if(evt.ctrlKey)
   return false;
  var keyCode = ASPx.Evt.GetKeyCode(evt);
  var isSystemKey = ASPx.Key.Windows <= keyCode && keyCode <= ASPx.Key.ContextMenu;
  var isFKey = ASPx.Key.F1 <= keyCode && keyCode <= 127; 
  return ASPx.Key.Delete < keyCode && !isSystemKey && !isFKey || keyCode == ASPx.Key.Enter || keyCode == ASPx.Key.Space;
 },
 OnTextChangingCheck: function() {
  if(this.maxLengthRestricted)  
   this.CutString(); 
 },
 StartTextChangingTimer: function() {
  if(this.maxLengthRestricted) {
   if(this.pasteTimerActivatorCount == 0) 
    this.SetTextChangingTimer();
   this.pasteTimerActivatorCount ++;
  }
 },
 EndTextChangingTimer: function() {
  if(this.maxLengthRestricted) {
   this.pasteTimerActivatorCount --;
   if(this.pasteTimerActivatorCount == 0) 
    this.ClearTextChangingTimer();
  }
 },
 CollapseEditor: function() {
  if(!this.IsAdjustmentRequired()) return;
  var mainElement = this.GetMainElement();
  var inputElement = this.GetInputElement();
  if(!ASPx.IsExistsElement(mainElement) || !ASPx.IsExistsElement(inputElement))
   return;
  ASPxClientTextEdit.prototype.CollapseEditor.call(this);
  var mainElementCurStyle = ASPx.GetCurrentStyle(mainElement);
  if(this.heightCorrectionRequired && mainElement && inputElement) {
   if(mainElement.style.height == "100%" || mainElementCurStyle.height == "100%") {
    mainElement.style.height = "0";
    mainElement.wasCollapsed = true;
   }
   inputElement.style.height = "0";
  }
 },
 SetWidth: function(width) {
  ASPxClientTextEdit.prototype.SetWidth.call(this, width);
  if(ASPx.Browser.IE)
   this.AdjustControl();
 },
 SetHeight: function(height) {
  var textarea = this.GetInputElement();
  textarea.style.height = "1px";
  ASPxClientTextEdit.prototype.SetHeight.call(this, height);
  textarea.style.height = ASPx.GetClearClientHeight(this.GetMainElement()) - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(textarea) + "px";
 },
 ClearErrorFrameElementsStyles: function() {
  var textarea = this.GetInputElement();
  if(!textarea)
   return;
  var scrollBarPosition = textarea.scrollTop;
  ASPxClientTextEdit.prototype.ClearErrorFrameElementsStyles.call(this);
  if(ASPx.Browser.Firefox)
   textarea.scrollTop = scrollBarPosition;
 },
 OnMouseOver: function() {
  this.StartTextChangingTimer();
 },  
 OnMouseOut: function() {
  this.EndTextChangingTimer();
 },   
 OnFocus: function() {  
  this.StartTextChangingTimer();
  ASPxClientTextEdit.prototype.OnFocus.call(this);
 },
 OnLostFocus: function() {
  this.EndTextChangingTimer();
  ASPxClientTextEdit.prototype.OnLostFocus.call(this);
 },
 OnKeyDown: function(evt) { 
  if(this.NeedPreventBrowserUndoBehaviour(evt))
   return ASPx.Evt.PreventEvent(evt);
  if(this.maxLengthRestricted){
   var selection = ASPx.Selection.GetInfo(this.GetInputElement()); 
   var noCharToReplace = selection.startPos == selection.endPos;
   if(this.GetText().length >= this.maxLength && noCharToReplace && this.EventKeyCodeChangesTheInput(evt)) {
    return ASPx.Evt.PreventEvent(evt);
   }
  }
  ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
 },
 SetTextChangingTimer: function() {
  this.pasteTimerID = ASPx.Timer.SetControlBoundInterval(this.OnTextChangingCheck, this, ASPx.PasteCheckInterval);
 },
 ClearTextChangingTimer: function() {
  this.pasteTimerID = ASPx.Timer.ClearInterval(this.pasteTimerID);
 },
 getFocusedNullTextElementTagName: function() {
  return "TEXTAREA";
 },
 getCopyFromInputElementStyles: function() {
  var result = ASPxClientTextEdit.prototype.getCopyFromInputElementStyles.call(this);
  result.push("resize");
  return result;
 }
});
ASPxClientMemo.Cast = ASPxClientControl.Cast;
ASPx.Ident.IsASPxClientMemo = function(obj) { return obj && !!obj.isASPxClientMemo; };
var CLEAR_BUTTON_INDEX = -100;
var HIDE_CONTENT_CSS_CLASS_NAME = "dxHideContent";
var setContentVisibility = function(clearButtonElement, value) {
 var action = value ? ASPx.RemoveClassNameFromElement : ASPx.AddClassNameToElement;
 action(clearButtonElement, HIDE_CONTENT_CSS_CLASS_NAME);
};
var CLEAR_BUTTON_DISPLAY_MODE = {
 AUTO: 'Auto',
 ALWAYS: 'Always',
 NEVER: 'Never',
 ON_HOVER: 'OnHover'
};
var AccessibilityFocusedButtonClassName = "dxAFB";
var ASPxClientButtonEditBase = ASPx.CreateClass(ASPxClientTextBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);        
  this.allowUserInput = true;
  this.isValueChanging = false;
  this.allowMouseWheel = true;
  this.isMouseOver = false;
  this.buttonCount = 0;
  this.emptyValueMaskDisplayText = "";
  this.clearButtonDisplayMode = CLEAR_BUTTON_DISPLAY_MODE.AUTO;
  this.forceShowClearButtonAlways = false;
  this.recoverClearButtonVisibility = false;
  this.ButtonClick = new ASPxClientEvent();
 },
 Initialize: function() {
  ASPxClientTextBoxBase.prototype.Initialize.call(this);
  this.EnsureEmptyValueMaskDisplayText();
  if(this.HasClearButton())
   this.InitializeClearButton();
  this.InitAccessibilityCompliant();
 },
 InlineInitialize: function() {
  ASPxClientTextBoxBase.prototype.InlineInitialize.call(this);
  if(this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.AUTO) {
   this.clearButtonDisplayMode = this.IsClearButtonVisibleAuto() || this.forceShowClearButtonAlways ?
    CLEAR_BUTTON_DISPLAY_MODE.ALWAYS : CLEAR_BUTTON_DISPLAY_MODE.NEVER;
  }
  this.EnsureClearButtonVisibility();
 },
 InitializeClearButton: function() {
  if(this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ON_HOVER) {
   ASPx.Evt.AttachMouseEnterToElement(this.GetHoverElementToShowClearButton(), this.OnMouseOver.aspxBind(this), this.OnMouseOut.aspxBind(this));
  }
 },
 GetHoverElementToShowClearButton: function() {
  return this.GetMainElement();
 },
 IsClearButtonVisibleAuto: function() {
  return ASPx.Browser.MobileUI;
 },
 SetEnabled: function(enabled) {
  ASPxClientTextBoxBase.prototype.SetEnabled.call(this, enabled);
  this.EnsureClearButtonVisibility();
 },
 EnsureEmptyValueMaskDisplayText: function() {
  if(this.maskInfo && this.HasClearButton()) {
   var savedText = this.maskInfo.GetText();
   this.maskInfo.SetText("");
   this.emptyValueMaskDisplayText = this.maskInfo.GetText();
   this.maskInfo.SetText(savedText);
  }
 },
 GetButton: function(number) {
  return this.GetChildElement("B" + number);
 },
 GetCustomButtonCollection: function() {
  var buttonElements = [];
  for(var i = 0; i < this.buttonCount; i++) {
   var button =  this.GetButton(i);
   if(!!button)
    buttonElements.push(button);
  }
  return buttonElements;
 },
 GetButtonCollection: function() {
  var buttonElements = [];
  var clearButton = this.GetClearButton();
  if(!!clearButton)
   buttonElements.push(clearButton);
  return buttonElements.concat(this.GetCustomButtonCollection());
 },
 GetAccessibilityAnchor: function(buttonElement) {
  var firstChild = buttonElement.firstElementChild;
  var isExistsAnchorElement = ASPx.Attr.GetAttribute(firstChild, "role") === "button";
  return isExistsAnchorElement ? firstChild : null;
 },
 GetButtonByAccessibilityAnchor: function(anchorElement) {
  return anchorElement.parentNode;
 },
 SetAccessibilityAnchorEnabled: function(buttonElement, enabled) {
  var anchorElement = this.GetAccessibilityAnchor(buttonElement);
  if(ASPx.IsExists(anchorElement))
   ASPx.Attr.SetOrRemoveAttribute(anchorElement, "tabindex", enabled ? "0" : "");
 },
 InitAccessibilityCompliant: function() {
  if(!this.accessibilityCompliant) return;
  var buttonElements = this.GetButtonCollection();
  var labelElements = ASPx.FindAssociatedLabelElements(this);
  for(var i = 0; i < buttonElements.length; i++)
   this.InitAccessibilityAnchor(this.GetAccessibilityAnchor(buttonElements[i]), labelElements);     
 },
 InitAccessibilityAnchor: function(anchorElement, labelElements) {
  if(!ASPx.IsExists(anchorElement))
   return;
  for(var i = 0; i < labelElements.length; i++)
   this.ariaExplanatoryTextManager.SetOrRemoveText([anchorElement], labelElements[i], true, false, false);
  this.InitAccessibilityAnchorEvents(anchorElement);
 },
 InitAccessibilityAnchorEvents: function(anchorElement) {
  ASPx.Evt.AttachEventToElement(anchorElement, "keydown", function(evt) { this.OnButtonKeysHandling(evt); }.aspxBind(this));
  ASPx.Evt.AttachEventToElement(anchorElement, "keyup", function(evt) { this.OnButtonKeysHandling(evt); }.aspxBind(this));
  ASPx.Evt.AttachEventToElement(anchorElement, "focus", function(evt) { this.OnButtonGotFocus(evt); }.aspxBind(this));
  ASPx.Evt.AttachEventToElement(anchorElement, "blur", function(evt) { this.OnButtonLostFocus(evt); }.aspxBind(this));
 },
 EmulateButtonMouseEvent: function(sourceElement) {
  var buttonElement = this.GetButtonByAccessibilityAnchor(sourceElement);
  var mouseEvent = buttonElement.onclick || buttonElement.onmousedown || buttonElement.ontouchstart || buttonElement.onpointerdown;
  var emulateMouseEvtArgs = { button: 0, which: 1, srcElement: buttonElement, target: buttonElement };
  if(!!mouseEvent) {
   ASPx.Attr.SetAttribute(sourceElement, "aria-pressed", true);
   setTimeout(function() {
    mouseEvent(emulateMouseEvtArgs);
    ASPx.Attr.RemoveAttribute(sourceElement, "aria-pressed");
   }, 300);
  }
 },
 OnButtonKeysHandling: function(evt) {
  var isKeyUp = evt.type == "keyup";
  var keyCode = ASPx.Evt.GetKeyCode(evt);
  var sourceElement = ASPx.Evt.GetEventSource(evt);
  if((keyCode == ASPx.Key.Space && isKeyUp) || (keyCode == ASPx.Key.Enter && !isKeyUp))
   this.EmulateButtonMouseEvent(sourceElement);
  if(keyCode != ASPx.Key.Tab)
   ASPx.Evt.PreventEventAndBubble(evt);
  return false;
 },
 OnButtonGotFocus: function(evt) {
  var editor = ASPx.GetControlCollection().Get(this.name);
  var sourceElement = ASPx.Evt.GetEventSource(evt);
  if(!!editor && !editor.CorrectAccessibilityButtonFocus(sourceElement)) {
   var buttonElement = editor.GetButtonByAccessibilityAnchor(sourceElement);
   ASPx.AddClassNameToElement(buttonElement, this.GetAccessibilityFocusedButtonClassName());
   ASPx.EGotFocus(editor.name);
   if(editor.specialKeyboardHandlingUsed)
    ASPx.ESGotFocus(editor.name);
  }
 },
 OnButtonLostFocus: function(evt) {
  var editor = ASPx.GetControlCollection().Get(this.name);
  var sourceElement = ASPx.Evt.GetEventSource(evt);
  if(!!editor) {
   var buttonElement = editor.GetButtonByAccessibilityAnchor(sourceElement);
   ASPx.RemoveClassNameFromElement(buttonElement, this.GetAccessibilityFocusedButtonClassName());
  }
  setTimeout(function() {
   if(!!editor && !editor.IsEditorElement(ASPx.GetActiveElement())) {
    ASPx.ELostFocus(editor.name);
    if(editor.specialKeyboardHandlingUsed)
     ASPx.ESLostFocus(editor.name);
   }
  }.aspxBind(this), 0);
 },
 ForceRefocusEditor: function(evt, isNativeFocus) {
  if(this.accessibilityCompliant) {
   var srcElement = ASPx.Evt.GetEventSource(evt);
   var customButtons = this.GetCustomButtonCollection();
   for(var i = 0; i < customButtons.length; i++)
    if(customButtons[i] == srcElement || ASPx.GetIsParent(customButtons[i], srcElement))
     return;
  }
  ASPxClientEdit.prototype.ForceRefocusEditor.call(this, evt, isNativeFocus);
  if(this.GetInputElement().type == "password") {
   window.setTimeout(function() { this.GetInputElement().focus(); }.bind(this), 0);
  }
 },
 CorrectAccessibilityButtonFocus: function(sourceElement) {
  if(ASPx.Attr.IsExistsAttribute(sourceElement, "tabindex"))
   return false;
  setTimeout(function() {
   var buttonElements = this.GetButtonCollection();
   for(var i = 0; i < buttonElements.length; i++)
    if(ASPx.GetIsParent(buttonElements[i], sourceElement))
     this.GetAccessibilityAnchor(buttonElements[i]).focus();
  }.aspxBind(this), 0);
  return true;
 },
 OnKeyDown: function(evt) { 
  if(this.NeedEnsureClearButtonVisibilityOnKeyDown()) {
   var hasClearButtonOnHover = this.HasClearButton() && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ON_HOVER;
   this.recoverClearButtonVisibility = hasClearButtonOnHover && ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Tab && !evt.shiftKey;
  }
  ASPxClientTextBoxBase.prototype.OnKeyDown.call(this, evt);
 },
 NeedEnsureClearButtonVisibilityOnKeyDown: function() {
  return this.accessibilityCompliant;
 },
 GetAccessibilityFocusedButtonClassName: function() {
  return AccessibilityFocusedButtonClassName;
 },
 SetButtonVisible: function(number, value) {
  var button = this.GetButton(number);
  if(!button)
   return;
  var isAlwaysShownClearButton = number === CLEAR_BUTTON_INDEX && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ALWAYS;
  var visibilityModifier = isAlwaysShownClearButton ? setContentVisibility : ASPx.SetElementDisplay;
  if(isAlwaysShownClearButton && this.accessibilityCompliant && this.enabled)
   this.SetAccessibilityAnchorEnabled(button, value);
  visibilityModifier(button, value);
 },
 GetButtonVisible: function(number) {
  var button = this.GetButton(number);
  if(number === CLEAR_BUTTON_INDEX && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ALWAYS)
   return button && !ASPx.ElementHasCssClass(button, this.GetHideContentCssClassName());
  return button && ASPx.IsElementVisible(button);
 },
 GetHideContentCssClassName: function() {
  return HIDE_CONTENT_CSS_CLASS_NAME;
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  return false;
 },
 OnButtonClick: function(number) {
  var processOnServer = this.RaiseButtonClick(number);
  if(!this.ProcessInternalButtonClick(number) && processOnServer)
   this.SendPostBack('BC:' + number);
 },
 GetLastSuccesfullValue: function() {
  return this.lastChangedValue;
 },
 OnClear: function() {
  this.startUserInputEventTimerIfRequired();
  this.ClearEditorValueAndForceOnChange();
  this.ForceRefocusEditor(null, true);
  window.setTimeout(this.EnsureClearButtonVisibility.aspxBind(this), 0);
 },
 ClearEditorValueAndForceOnChange: function() {
  if(this.GetReadOnly() || !this.GetButtonVisible(CLEAR_BUTTON_INDEX))
   return;
  var raiseOnChange = this.ClearEditorValueByClearButton();
  if(raiseOnChange)
   this.ForceStandardOnChange();
 },
 ClearEditorValueByClearButton: function() {
  var prevValue = this.GetLastSuccesfullValue();
  this.ClearEditorValueByClearButtonCore();
  return prevValue !== this.GetValue();
 },
 ClearEditorValueByClearButtonCore: function() {
  this.Clear();
  this.GetInputElement().value = '';
 },
 ForceStandardOnChange: function() {
  this.forceValueChanged = true;
  this.RaiseStandardOnChange();
  this.forceValueChanged = false;
 },
 IsValueChangeForced: function() {
  return this.forceValueChanged || ASPxClientTextBoxBase.prototype.IsValueChangeForced.call(this);
 },
 IsValueChanging: function() { return this.isValueChanging; },
 StartValueChanging: function() { this.isValueChanging = true; },
 EndValueChanging: function() { this.isValueChanging = false; },
 IsClearButtonElement: function(element) {
  return ASPx.GetIsParent(this.GetClearButton(), element);
 },
 OnFocusCore: function() {
  ASPxClientTextBoxBase.prototype.OnFocusCore.call(this);
  this.EnsureClearButtonVisibility();
 },
 OnLostFocusCore: function() {
  ASPxClientTextBoxBase.prototype.OnLostFocusCore.call(this);
  this.EnsureClearButtonVisibility();
  this.recoverClearButtonVisibility = false;
 },
 GetClearButton: function() {
  return this.GetButton(CLEAR_BUTTON_INDEX);
 },
 HasClearButton: function() {
  return !!this.GetClearButton();
 },
 RequireShowClearButton: function() {
  return !this.IsClearButtonDisabled() && !this.IsClearButtonNotRequired() && this.RequireShowClearButtonInternal();
 },
 IsClearButtonDisabled: function() {
  return !this.clientEnabled || !this.HasClearButton() || this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.NEVER;
 },
 IsClearButtonNotRequired: function() {
  return !this.IsFocused() && !this.isMouseOver && this.clearButtonDisplayMode !== CLEAR_BUTTON_DISPLAY_MODE.ALWAYS && !this.recoverClearButtonVisibility;
 },
 RequireShowClearButtonInternal: function () {
  return this.IsFocused() && this.RequireShowClearButtonCore() || !this.IsNullState();
 },
 RequireShowClearButtonCore: function() {
  var inputText = this.GetInputElement().value;
  return inputText !== this.GetEmptyValueDisplayText();
 },
 IsFocused: function() {
  return this === ASPx.GetFocusedEditor();
 },
 IsNullState: function() {
  var value = this.GetValue();
  return this.IsNull(value) || value === this.GetEmptyValueDisplayText();
 },
 GetEmptyValueDisplayText: function() { 
  return this.maskInfo ? this.emptyValueMaskDisplayText : "";
 },
 EnsureClearButtonVisibility: function() {
  this.SetButtonVisible(CLEAR_BUTTON_INDEX, this.RequireShowClearButton());
 },
 OnMouseOver: function() {
  this.isMouseOver = true;
  this.EnsureClearButtonVisibility();
 },
 OnMouseOut: function() {
  this.isMouseOver = false;
  this.EnsureClearButtonVisibility();
 },
 OnKeyPress: function(evt) {
  if(this.allowUserInput)
   ASPxClientTextBoxBase.prototype.OnKeyPress.call(this, evt);
 },
 OnKeyEventEnd: function(evt, withDelay) {
  ASPxClientTextBoxBase.prototype.OnKeyEventEnd.call(this, evt, withDelay);
  this.EnsureClearButtonVisibility();
 },
 RaiseButtonClick: function(number){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ButtonClick");
  if(!this.ButtonClick.IsEmpty()){
   var args = new ASPxClientButtonEditClickEventArgs(processOnServer, number);
   this.ButtonClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientTextEdit.prototype.ChangeEnabledAttributes.call(this, enabled);
  for(var i = 0; i < this.buttonCount; i++){
   var element = this.GetButton(i);
   if(element)
    this.ChangeButtonEnabledAttributes(element, this.GetChangeButtonEnabledAttributesMethod(enabled));
  }
  if(this.accessibilityCompliant)
   this.ChangeAccessibilityButtonEnabledAttributes(enabled);
 },
 ChangeEnabledStateItems: function(enabled){
  ASPxClientTextEdit.prototype.ChangeEnabledStateItems.call(this, enabled);
  for(var i = 0; i < this.buttonCount; i++){
   var element = this.GetButton(i);
   if(element) 
    ASPx.GetStateController().SetElementEnabled(element, enabled);
  }
 },
 GetChangeButtonEnabledAttributesMethod: function(enabled) {
  return ASPx.Attr.ChangeAttributesMethod(enabled);
 },
 ChangeButtonEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "ondblclick");
  if(ASPx.Browser.Edge)
   method(element, "onmousedown");
  method(element, "on" + ASPx.TouchUIHelper.touchMouseDownEventName);
  method(element, "on" + ASPx.TouchUIHelper.touchMouseUpEventName);
 },
 ChangeInputEnabled: function(element, enabled, readOnly) {
  ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled, readOnly || !this.allowUserInput);
 },
 ChangeAccessibilityButtonEnabledAttributes: function(enabled) {
  var buttonElements = this.GetButtonCollection();
  for(var i = 0; i < buttonElements.length; i++)
   this.SetAccessibilityAnchorEnabled(buttonElements[i], enabled);
 },
 SetValue: function(value) {
  ASPxClientTextEdit.prototype.SetValue.call(this, value);
  if(!this.IsFocused())
   this.EnsureClearButtonVisibility();
 },
 OnAssociatedLabelClick: function(focusableElement) {
  var isValidElement = focusableElement && ASPx.IsActionElement(focusableElement) && ASPx.GetIsParent(this.GetMainElement(), focusableElement) && ASPx.IsElementVisible(focusableElement);
  if(isValidElement)
   focusableElement.focus();
  else
   this.SetFocus();
 },
 onClearButtonClick: function() {
  var requireFocus = !ASPx.Browser.VirtualKeyboardSupported || ASPx.Browser.MSTouchUI;
  if(this.ownerListBox)
   this.ownerListBox.ForceLockFocusEvents();
  if(requireFocus && !this.IsFocused())
   this.GetInputElement().focus();
  if(this.IsFocused() || !requireFocus) {
   if(this.ownerListBox)
    this.ownerListBox.UnlockFocusEvents();
   this.OnClear();
  }
  else
   window.setTimeout(this.onClearButtonClick.bind(this), 100);
 }
});
var ASPxClientButtonEdit = ASPx.CreateClass(ASPxClientButtonEditBase, {
});
ASPxClientButtonEdit.Cast = ASPxClientControl.Cast;
var ASPxClientButtonEditClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, buttonIndex){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.buttonIndex = buttonIndex;
 }
});
var ASPxClientTextEditHelpTextHAlign = {
 Left: "Left",
 Right: "Right",
 Center: "Center"
};
var ASPxClientTextEditHelpTextVAlign = {
 Top: "Top",
 Bottom: "Bottom",
 Middle: "Middle"
};
var ASPxClientTextEditHelpTextDisplayMode = {
 Inline: "Inline",
 Popup: "Popup"
};
var ASPxClientTextEditHelpTextConsts = {
 VERTICAL_ORIENTATION_CLASS_NAME: "dxeVHelpTextSys",
 HORIZONTAL_ORIENTATION_CLASS_NAME: "dxeHHelpTextSys"
};
var ASPxClientTextEditHelpText = ASPx.CreateClass(null, {
 constructor: function (editor, helpTextStyle, helpText, position, hAlign, vAlign, margins, animationEnabled, helpTextDisplayMode) {
  this.hAlign = hAlign;
  this.vAlign = vAlign;
  this.animationEnabled = animationEnabled;
  this.displayMode = helpTextDisplayMode;
  this.editor = editor;
  this.editorMainElement = editor.GetMainElement();
  this.margins = margins ? { Top: margins[0], Right: margins[1], Bottom: margins[2], Left: margins[3] } : null;
  this.defaultMargins = { Top: 10, Right: 10, Bottom: 10, Left: 10 };
  this.position = position;
  this.helpTextElement = this.createHelpTextElement();
  this.setHelpTextZIndex(true);
  this.prepareHelpTextElement(helpTextStyle, helpText);
 },
 getRows: function (table) {
  return ASPx.GetChildNodesByTagName(table, "TR");
 },
 getCells: function (row) {
  return ASPx.GetChildNodesByTagName(row, "TD");
 },
 getCellByIndex: function(row, cellIndex) {
  return this.getCells(row)[cellIndex];
 },
 getCellIndex: function(row, cell) {
  var cells = this.getCells(row);
  for(var i = 0; i < cells.length; i++) {
   if(cells[i] === cell)
    return i;
  }
 },
 isHorizontal: function(position) {
  return position === ASPx.Position.Left || position === ASPx.Position.Right;
 },
 isVertical: function (position) {
  return position === ASPx.Position.Top || position === ASPx.Position.Bottom;
 },
 createEmptyCell: function(assignClassName) {
  var cell = document.createElement("TD");
  if(assignClassName)
   cell.className = "dxeFakeEmptyCell";
  return cell;
 },
 addHelpTextCellToExternalTableWithTwoCells: function (captionCell, errorCell, helpTextCell, errorTableBody, tableRows) {
  var captionPosition = this.editor.captionPosition;
  var errorCellPosition = this.editor.errorCellPosition;
  var helpTextRow = this.isVertical(this.position) ? document.createElement("TR") : null;
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
   captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
   captionCell.parentNode.insertBefore(helpTextCell, captionCell);
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
   tableRows[0].appendChild(helpTextCell);
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
  if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
  }
  if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(this.position === ASPx.Position.Bottom) {
   if(captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
    errorTableBody.appendChild(helpTextRow);
   }
  }
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if(this.position === ASPx.Position.Right) {
   if(captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Left || captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Top
    || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right) {
    tableRows[1].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell());
   }
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Bottom || captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell());
   }
  }
  if(this.position === ASPx.Position.Left) {
   if(captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right
    || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Left) {
    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(), tableRows[0].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Bottom) {
    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(errorCellPosition === ASPx.Position.Top), tableRows[0].childNodes[0]);
    tableRows[2].insertBefore(this.createEmptyCell(errorCellPosition !== ASPx.Position.Top), tableRows[2].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Top) {
    tableRows[2].insertBefore(helpTextCell, tableRows[2].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(false), tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
    tableRows[2].insertBefore(this.createEmptyCell(false), tableRows[2].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Bottom
    || captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Right) {
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(), tableRows[1].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Left && this.isVertical(errorCellPosition)) {
    captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
    var emptyCellParentRow = errorCellPosition === ASPx.Position.Top ? tableRows[0] : tableRows[1];
    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
   }
  }
  if(this.position === ASPx.Position.Right) {
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Bottom) {
    tableRows[1].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Top));
    tableRows[2].appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Top));
   }
   if(captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Top) {
    tableRows[2].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell(false));
    tableRows[1].appendChild(this.createEmptyCell(true));
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell(true));
    tableRows[2].appendChild(this.createEmptyCell(false));
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Right) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell());
   }
   if(captionPosition === ASPx.Position.Right && this.isVertical(errorCellPosition)) {
    captionCell.parentNode.insertBefore(helpTextCell, captionCell);
    var emptyCellParentRow = errorCellPosition === ASPx.Position.Top ? tableRows[0] : tableRows[1];
    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
   }
  }
  if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top && this.isHorizontal(errorCellPosition)) {
   if(errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
  }
  if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top && this.isHorizontal(errorCellPosition)) {
   if(errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom && this.isHorizontal(errorCellPosition)) {
   if(errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left) {
   helpTextRow.appendChild(this.createEmptyCell(true));
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   errorTableBody.appendChild(helpTextRow);
  }
  if(this.position === ASPx.Position.Bottom) {
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Right || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Right));
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Right));
    errorTableBody.appendChild(helpTextRow);
   }
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(false));
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
    errorTableBody.appendChild(helpTextRow);
   }
   if(captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(this.createEmptyCell(false));
    errorTableBody.appendChild(helpTextRow);
   }   
  }
  if(this.position === ASPx.Position.Top) {
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Right || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Right));
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Right));
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(false));
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(this.createEmptyCell(false));
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
  }
 },
 addHelpTextCellToExternalTableWithErrorCell: function (errorCell, helpTextCell, errorTableBody, tableRows) {
  var errorCellPosition = this.editor.errorCellPosition;
  var helpTextRow = document.createElement("TR");
  if(this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
  if(this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
   tableRows[0].appendChild(helpTextCell);
  if(this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if(errorCellPosition === ASPx.Position.Left && this.isVertical(this.position)) {
   helpTextRow.appendChild(this.createEmptyCell(true));
   helpTextRow.appendChild(helpTextCell);
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(errorCellPosition === ASPx.Position.Right && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell(true));
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(this.position === ASPx.Position.Left && this.isVertical(errorCellPosition)) {
   var helpTextParentRowIndex = errorCellPosition === ASPx.Position.Top ? 1 : 0;
   var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
   tableRows[emptyCellRowIndex].insertBefore(this.createEmptyCell(true), tableRows[emptyCellRowIndex].childNodes[0]);
  }
  if(this.position === ASPx.Position.Right && this.isVertical(errorCellPosition)) {
   var helpTextParentRowIndex = errorCellPosition === ASPx.Position.Top ? 1 : 0;
   var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
   tableRows[emptyCellRowIndex].appendChild(this.createEmptyCell(true));
  }
 },
 addHelpTextCellToExternalTableWithCaption: function (captionCell, helpTextCell, errorTableBody, tableRows) {
  var captionPosition = this.editor.captionPosition;
  var helpTextRow = document.createElement("TR");
  if(captionPosition === ASPx.Position.Left && this.isVertical(this.position)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(this.position === ASPx.Position.Left && this.isVertical(captionPosition)) {
   var helpTextParentRowIndex = captionPosition === ASPx.Position.Top ? 1 : 0;
   var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
   tableRows[emptyCellParentRowIndex].insertBefore(this.createEmptyCell(), tableRows[emptyCellParentRowIndex].childNodes[0]);
  }
  if(this.position === ASPx.Position.Right && this.isVertical(captionPosition)) {
   var helpTextParentRowIndex = captionPosition === ASPx.Position.Top ? 1 : 0;
   var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
   tableRows[emptyCellParentRowIndex].appendChild(this.createEmptyCell());
  }
  if(captionPosition === ASPx.Position.Right && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(this.isVertical(captionPosition) && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
   if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom)
    errorTableBody.appendChild(helpTextRow);
   if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom)
    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Left)
   captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Right)
   captionCell.parentNode.insertBefore(helpTextCell, captionCell);
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Right)
   tableRows[0].appendChild(helpTextCell);
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Left)
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
 },
 addHelpTextCellToExternalTableWithEditorOnly: function (helpTextCell, errorTableBody, tableRows) {
  if(this.isHorizontal(this.position)) {
   if(this.position === ASPx.Position.Left)
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
   else
    tableRows[0].appendChild(helpTextCell);
  }
  else {
   var helpTextRow = document.createElement("TR");
   helpTextRow.appendChild(helpTextCell);
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
 },
 addHelpTextCellToExternalTable: function (errorTable, helpTextCell) {
  var errorTableBody = ASPx.GetNodeByTagName(errorTable, "TBODY", 0);
  var tableRows = this.getRows(errorTableBody);
  var captionCell = this.editor.GetCaptionCell();
  var errorCell = this.editor.GetErrorCell();
  if(captionCell) {
   if(errorCell)
    this.addHelpTextCellToExternalTableWithTwoCells(captionCell, errorCell, helpTextCell, errorTableBody, tableRows);
   else
    this.addHelpTextCellToExternalTableWithCaption(captionCell, helpTextCell, errorTableBody, tableRows);
  }
  else if(errorCell)
   this.addHelpTextCellToExternalTableWithErrorCell(errorCell, helpTextCell, errorTableBody, tableRows);
  else
   this.addHelpTextCellToExternalTableWithEditorOnly(helpTextCell, errorTableBody, tableRows);
 },
 createExternalTable: function () {
  var externalTable = document.createElement("TABLE");
  externalTable.id = this.editor.name + ASPx.EditElementSuffix.ExternalTable;
  externalTable.cellPadding = 0;
  externalTable.cellSpacing = 0;
  this.applyExternalTableStyle(externalTable);
  var editorWidth = this.editorMainElement.style.width;
  if(ASPx.IsPercentageSize(editorWidth)) {
   externalTable.style.width = editorWidth;
   this.editorMainElement.style.width = "100%";
   this.editor.width = "100%";
  }
  var externalTableBody = document.createElement("TBODY");
  var externalTableRow = document.createElement("TR");
  var externalTableCell = document.createElement("TD");
  externalTable.appendChild(externalTableBody);
  externalTableBody.appendChild(externalTableRow);
  externalTableRow.appendChild(externalTableCell);
  this.editorMainElement.parentNode.appendChild(externalTable);
  ASPx.ChangeElementContainer(this.editorMainElement, externalTableCell, true);
  if(this.editor.accessibilityCompliant)
   ASPx.Attr.SetAttribute(externalTable, "role", "presentation");
  return externalTable;
 },
 applyExternalTableStyle: function (externalTable) {
  var externalTableStyle = this.editor.externalTableStyle;
  if(externalTableStyle.length > 0) {
   this.applyStyleToElement(externalTable, externalTableStyle);
  }
 },
 applyStyleToElement: function(element, style) {
  element.className = style[0];
  if(style[1]) {
   var styleSheet = ASPx.GetCurrentStyleSheet();
   element.className += " " + ASPx.CreateImportantStyleRule(styleSheet, style[1]);
  }
 },
 createInlineHelpTextElement: function () {
  var helpTextElement = document.createElement("TD");
  var externalTable = this.editor.GetExternalTable();
  if(!externalTable)
   externalTable = this.createExternalTable();
  this.addHelpTextCellToExternalTable(externalTable, helpTextElement);
  return helpTextElement;
 },
 createPopupHelpTextElement: function () {
  var helpTextElement = document.createElement("DIV");
  ASPx.InsertElementAfter(helpTextElement, this.editor.GetMainElement());
  ASPx.AnimationHelper.setOpacity(helpTextElement, 0);
  ASPx.SetElementDisplay(helpTextElement, false);
  return helpTextElement;
 },
 createHelpTextElement: function () {
  return this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup ?
   this.createPopupHelpTextElement() : this.createInlineHelpTextElement();
 },
 prepareHelpTextElement: function (helpTextStyle, helpText) {
  this.helpTextElement.id = this.getHelpTextElementId();
  this.applyStyleToElement(this.helpTextElement, helpTextStyle);
  ASPx.SetInnerHtml(this.helpTextElement, "<SPAN>" + helpText + "</SPAN>");
  if(this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.updatePopupHelpTextPosition();
  else {
   var isVerticalOrientation = this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom;
   var orientationClassName = isVerticalOrientation ? ASPxClientTextEditHelpTextConsts.VERTICAL_ORIENTATION_CLASS_NAME :
    ASPxClientTextEditHelpTextConsts.HORIZONTAL_ORIENTATION_CLASS_NAME;
   this.helpTextElement.className += " " + orientationClassName;
   this.setInlineHelpTextElementAlign();
   ASPx.SetElementDisplay(this.helpTextElement, this.editor.clientVisible);
  }
 },
 getHelpTextElementId: function() {
  return this.editor.name + ASPx.TEHelpTextElementSuffix;
 },
 setInlineHelpTextElementAlign: function() {
  var hAlignValue = "", vAlignValue = "";
  switch(this.hAlign) {
   case ASPxClientTextEditHelpTextHAlign.Left: hAlignValue = "left"; break;
   case ASPxClientTextEditHelpTextHAlign.Right: hAlignValue = "right"; break;
   case ASPxClientTextEditHelpTextHAlign.Center: hAlignValue = "center"; break;
  }
  switch(this.vAlign) {
   case ASPxClientTextEditHelpTextVAlign.Top: vAlignValue = "top"; break;
   case ASPxClientTextEditHelpTextVAlign.Bottom: vAlignValue = "bottom"; break;
   case ASPxClientTextEditHelpTextVAlign.Middle: vAlignValue = "middle"; break;
  }
  this.helpTextElement.style.textAlign = hAlignValue;
  this.helpTextElement.style.verticalAlign = vAlignValue;
 },
 getHelpTextMargins: function() {
  if(this.margins)
   return this.margins;
  var result = this.defaultMargins;
  if(this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom)
   result.Left = result.Right = 0;
  else
   result.Top = result.Bottom = 0;
  return result;
 },
 updatePopupHelpTextPosition: function (editorMainElement) {
  var editorWidth = this.editorMainElement.offsetWidth;
  var editorHeight = this.editorMainElement.offsetHeight;
  var helpTextWidth = this.helpTextElement.offsetWidth;
  var helpTextHeight = this.helpTextElement.offsetHeight;
  var editorX = ASPx.GetAbsoluteX(this.editorMainElement);
  var editorY = ASPx.GetAbsoluteY(this.editorMainElement);
  var helpTextX = 0, helpTextY = 0;
  var margins = this.getHelpTextMargins();
  if(this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom) {
   if(this.position === ASPx.Position.Top)
    helpTextY = editorY - margins.Bottom - helpTextHeight;
   else if(this.position === ASPx.Position.Bottom)
    helpTextY = editorY + editorHeight + margins.Top;
   if(this.hAlign === ASPxClientTextEditHelpTextHAlign.Left)
    helpTextX = editorX + margins.Left;
   else if(this.hAlign === ASPxClientTextEditHelpTextHAlign.Right)
    helpTextX = editorX + editorWidth - helpTextWidth - margins.Right;
   else if(this.hAlign === ASPxClientTextEditHelpTextHAlign.Center) {
    var editorCenterX = editorX + editorWidth / 2;
    var helpTextWidthWithMargins = helpTextWidth + margins.Left + margins.Right;
    helpTextX = editorCenterX - helpTextWidthWithMargins / 2 + margins.Left;
   }
  } else {
   if(this.position === ASPx.Position.Left)
    helpTextX = editorX - margins.Right - helpTextWidth;
   else if(this.position === ASPx.Position.Right)
    helpTextX = editorX + editorWidth + margins.Left;
   if(this.vAlign === ASPxClientTextEditHelpTextVAlign.Top)
    helpTextY = editorY + margins.Top;
   else if(this.vAlign === ASPxClientTextEditHelpTextVAlign.Bottom)
    helpTextY = editorY + editorHeight - helpTextHeight - margins.Bottom;
   else if(this.vAlign === ASPxClientTextEditHelpTextVAlign.Middle) {
    var editorCenterY = editorY + editorHeight / 2;
    var helpTextHeightWithMargins = helpTextHeight + margins.Top + margins.Bottom;
    helpTextY = editorCenterY - helpTextHeightWithMargins / 2 + margins.Top;
   }
  }
  helpTextX = helpTextX < 0 ? 0 : helpTextX;
  helpTextY = helpTextY < 0 ? 0 : helpTextY;
  ASPx.SetAbsoluteX(this.helpTextElement, helpTextX);
  ASPx.SetAbsoluteY(this.helpTextElement, helpTextY);
 },
 setHelpTextZIndex: function (hide) { 
  var newZIndex = 41998 * (hide ? -1 : 1);
  if(this.helpTextElement.style.zIndex != newZIndex)
   this.helpTextElement.style.zIndex = newZIndex;
 },
 hide: function () {
  if(this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   ASPx.SetElementDisplay(this.helpTextElement, false);
  }
  else
   this.hidePopupHelpText();
 },
 hidePopupHelpText: function() {
  var onHidePopupHelpTextComplete = function () {
   this.setHelpTextZIndex(true);
   ASPx.SetElementDisplay(this.helpTextElement, false);
  }.aspxBind(this);
  if(this.animationEnabled)
   ASPx.AnimationHelper.fadeOut(this.helpTextElement, onHidePopupHelpTextComplete);
  else {
   ASPx.AnimationHelper.setOpacity(this.helpTextElement, 0);
   onHidePopupHelpTextComplete();
  }    
 },
 show: function () {
  if(this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   ASPx.SetElementDisplay(this.helpTextElement, true);
  }
  else
   this.showPopupHelpText();
 },
 showPopupHelpText: function () {
  ASPx.SetElementDisplay(this.helpTextElement, true);
  this.updatePopupHelpTextPosition();
  if(this.animationEnabled)
   ASPx.AnimationHelper.fadeIn(this.helpTextElement);
  else
   ASPx.AnimationHelper.setOpacity(this.helpTextElement, 1);
  this.setHelpTextZIndex(false);
 }
});
var ASPxOutOfRangeWarningManager = ASPx.CreateClass(null, {
 constructor: function (editor, minValue, maxValue, defaultMinValue, defaultMaxValue, outOfRangeWarningElementPosition, valueFormatter) {
  this.editor = editor;
  this.outOfRangeWarningElementPosition = outOfRangeWarningElementPosition;
  this.minValue = minValue;
  this.maxValue = maxValue;
  this.defaultMinValue = defaultMinValue;
  this.defaultMaxValue = defaultMaxValue;
  this.minMaxValueFormatter = valueFormatter;
  this.animationDuration = 150;
  this.CreateOutOfRangeWarningElement();
 },
 SetMinValue: function (minValue) {
  this.minValue = minValue;
  this.UpdateOutOfRangeWarningElementText();
 },
 SetMaxValue: function (maxValue) {
  this.maxValue = maxValue;
  this.UpdateOutOfRangeWarningElementText();
 },
 CreateOutOfRangeWarningElement: function () {
  this.outOfRangeWarningElement = document.createElement("DIV");
  this.outOfRangeWarningElement.id = this.editor.name + "OutOfRWarn";
  ASPx.InsertElementAfter(this.outOfRangeWarningElement, this.editor.GetOutOfRangeWarningElementPrevSibling());
  ASPx.AnimationHelper.setOpacity(this.outOfRangeWarningElement, 0);
  this.outOfRangeWarningElement.className = this.editor.outOfRangeWarningClassName;
  this.UpdateOutOfRangeWarningElementText();
 },
 IsValueInRange: function (value) {
  return (!this.IsMinValueExists() || value >= this.minValue)
   && (!this.IsMaxValueExists() || value <= this.maxValue);
 },
 IsMinValueExists: function() {
  return ASPx.IsExists(this.minValue) && !isNaN(this.minValue) && this.minValue !== this.defaultMinValue;
 },
 IsMaxValueExists: function () {
  return ASPx.IsExists(this.maxValue) && !isNaN(this.maxValue) && this.maxValue !== this.defaultMaxValue;
 },
 GetFormattedTextByValue: function(value) {
  if (this.minMaxValueFormatter)
   return this.minMaxValueFormatter.Format(value);
  return value;
 },
 GetWarningText: function() {
  var textTemplate = arguments[0];
  var valueTexts = [];
  for (var i = 1; i < arguments.length; i++) {
   var valueText = this.GetFormattedTextByValue(arguments[i]);
   valueTexts.push(valueText);
  }
  return ASPx.Formatter.Format(textTemplate, valueTexts);
 },
 UpdateOutOfRangeWarningElementText: function () {
  var text = "";
  if (this.IsMinValueExists() && this.IsMaxValueExists())
   text = this.GetWarningText(this.editor.outOfRangeWarningMessages[0], this.minValue, this.maxValue);
  if (this.IsMinValueExists() && !this.IsMaxValueExists())
   text = this.GetWarningText(this.editor.outOfRangeWarningMessages[1], this.minValue);
  if (!this.IsMinValueExists() && this.IsMaxValueExists())
   text = this.GetWarningText(this.editor.outOfRangeWarningMessages[2], this.maxValue);
  ASPx.SetInnerHtml(this.outOfRangeWarningElement, "<LABEL>" + text + "</LABEL>");
 },
 UpdateOutOfRangeWarningElementVisibility: function (currentValue) {
  var isValidValue = currentValue == null || this.IsValueInRange(currentValue);
  if (!isValidValue && !this.outOfRangeWarningElementShown)
   this.ShowOutOfRangeWarningElement();
  if (isValidValue && this.outOfRangeWarningElementShown)
   this.HideOutOfRangeWarningElement();
 },
 GetOutOfRangeWarningElementCoordinates: function() {
  var editorMainElement = this.editor.GetMainElement();
  var editorWidth = editorMainElement.offsetWidth;
  var editorHeight = editorMainElement.offsetHeight;
  var editorX = ASPx.GetAbsoluteX(editorMainElement);
  var editorY = ASPx.GetAbsoluteY(editorMainElement);
  var outOfRangeWarningElementX = this.outOfRangeWarningElementPosition === ASPx.Position.Right ? editorX + editorWidth : editorX;
  var outOfRangeWarningElementY = this.outOfRangeWarningElementPosition === ASPx.Position.Right ? editorY : editorY + editorHeight;
  outOfRangeWarningElementX = outOfRangeWarningElementX < 0 ? 0 : outOfRangeWarningElementX;
  outOfRangeWarningElementY = outOfRangeWarningElementY < 0 ? 0 : outOfRangeWarningElementY;
  return {
   x: outOfRangeWarningElementX,
   y: outOfRangeWarningElementY
  };
 },
 ShowOutOfRangeWarningElement: function () {
  this.outOfRangeWarningElement.style.display = "inline";
  var outOfRangeWarningElementCoordinates = this.GetOutOfRangeWarningElementCoordinates();
  ASPx.SetAbsoluteX(this.outOfRangeWarningElement, outOfRangeWarningElementCoordinates.x);
  ASPx.SetAbsoluteY(this.outOfRangeWarningElement, outOfRangeWarningElementCoordinates.y);
  ASPx.AnimationHelper.fadeIn(this.outOfRangeWarningElement, null, this.animationDuration);
  this.ScrollToWarningElementIfRequired(outOfRangeWarningElementCoordinates);
  this.outOfRangeWarningElementShown = true;
 },
 HideOutOfRangeWarningElement: function () {
  ASPx.AnimationHelper.fadeOut(this.outOfRangeWarningElement, function () {
   ASPx.SetElementDisplay(this.outOfRangeWarningElement, false);
  }.aspxBind(this), this.animationDuration);
  this.outOfRangeWarningElementShown = false;
 },
 ScrollToWarningElementIfRequired: function (outOfRangeWarningElementCoordinates) {
  if(this.outOfRangeWarningElementPosition === ASPx.Position.Right) {
   var warnElementRightPos = outOfRangeWarningElementCoordinates.x
    + ASPx.PxToInt(ASPx.GetCurrentStyle(this.outOfRangeWarningElement).marginLeft)
    + this.outOfRangeWarningElement.offsetWidth;
   if(warnElementRightPos > ASPx.GetDocumentClientWidth() + ASPx.GetDocumentScrollLeft())
    ASPx.SetDocumentScrollLeft(warnElementRightPos - ASPx.GetDocumentClientWidth());
  }
  if(this.outOfRangeWarningElementPosition === ASPx.Position.Bottom) {
   var warnElementBottomPos = outOfRangeWarningElementCoordinates.y
    + ASPx.PxToInt(ASPx.GetCurrentStyle(this.outOfRangeWarningElement).marginTop)
    + this.outOfRangeWarningElement.offsetHeight;
   if(warnElementBottomPos > ASPx.GetDocumentClientHeight() + ASPx.GetDocumentScrollTop())
    ASPx.SetDocumentScrollTop(warnElementBottomPos - ASPx.GetDocumentClientHeight());
  }
 }
});
ASPx.MMMouseOut = function(name, evt) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) edit.OnMouseOut(evt);
};
ASPx.MMMouseOver = function(name, evt) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) edit.OnMouseOver(evt);
};
ASPx.MaskHintTimerProc = function() {
 var focusedEditor = ASPx.GetFocusedEditor();
 if(focusedEditor != null && ASPx.IsFunction(focusedEditor.MaskHintTimerProc))
  focusedEditor.MaskHintTimerProc();
};
ASPx.ETextChanged = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) edit.OnTextChanged(); 
};
ASPx.BEClick = function(name,number){
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) edit.OnButtonClick(number);
};
ASPx.BEClear = function(name, evt) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit && (evt.button === 0 || ASPx.Browser.TouchUI))
  edit.onClearButtonClick();
};
ASPx.SetFocusToTextEditWithDelay = function(name) {
 window.setTimeout(function() {
  var edit = ASPx.GetControlCollection().Get(name);
  if(!edit)
   return;
  if(ASPx.Browser.IE)
   edit.SetCaretPosition(0);
  else
   edit.SetFocus();
 }, 500);
};
window.ASPxClientTextEdit = ASPxClientTextEdit;
window.ASPxClientTextBoxBase = ASPxClientTextBoxBase;
window.ASPxClientTextBox = ASPxClientTextBox;
window.ASPxClientMemo = ASPxClientMemo;
window.ASPxClientButtonEditBase = ASPxClientButtonEditBase;
window.ASPxClientButtonEdit = ASPxClientButtonEdit;
window.ASPxClientButtonEditClickEventArgs = ASPxClientButtonEditClickEventArgs;
})();

(function() {
var DateFormatter = ASPx.CreateClass(null, {
 constructor: function() {
  this.date = new Date(2000, 0, 1);
  this.mask = "";
  this.specifiers = {};     
  this.spPositions = [];    
  this.parserKeys = [];
  this.knownSpecifiers = ["d", "M", "y", "H", "h", "m", "s", "f", "F", "g", "t"];
  this.savedYear = -1;
  this.isYearParsed = false;
  this.parsedMonth = -1;
  this.replacers = {
   "d": this.ReplaceDay,
   "M": this.ReplaceMonth,
   "y": this.ReplaceYear,
   "H": this.ReplaceHours23,
   "h": this.ReplaceHours12,
   "m": this.ReplaceMinutes,
   "s": this.ReplaceSeconds,
   "F": this.ReplaceMsTrimmed,
   "f": this.ReplaceMs,
   "g": this.ReplaceEra,
   "t": this.ReplaceAmPm
  };
  this.parsers = {
   "d": this.ParseDay,
   "M": this.ParseMonth,
   "y": this.ParseYear,
   "H": this.ParseHours,
   "h": this.ParseHours,
   "m": this.ParseMinutes,
   "s": this.ParseSeconds,
   "F": this.ParseMs,
   "f": this.ParseMs,
   "g": this.ParseEra,
   "t": this.ParseAmPm
  };
 },
 Format: function(date) {
  this.date = date;
  var sp;
  var pos;
  var replacerKey;
  var result = this.mask;
  for(var i = 0; i < this.spPositions.length; i++) {
   pos = this.spPositions[i];
   sp = this.specifiers[pos];
   replacerKey = sp.substr(0, 1);
   if(this.replacers[replacerKey]) {
    result = result.substr(0, pos) + this.replacers[replacerKey].call(this, sp.length) + result.substr(pos + sp.length);
   }
  }
  return result;
 }, 
 Parse: function(str, rememberParserKeys) {
  var now = new Date();  
  this.savedYear = now.getFullYear();
  this.isYearParsed = false;
  this.parsedMonth = -1;
  this.date = new Date(2000, 0, now.getDate());    
  this.strToParse = str;
  this.catchNumbers(str);  
  var parserKey;
  var sp;
  var pos;
  var parseResult;
  var error = false;
  this.hasAmPm = false;
  for(var i = 0; i < this.spPositions.length; i++) {
   pos = this.spPositions[i];
   sp = this.specifiers[pos];
   parserKey = sp.substr(0, 1);
   if(this.parsers[parserKey]) {
    if(rememberParserKeys)
     this.parserKeys.push(parserKey);
    parseResult = this.parsers[parserKey].call(this, sp.length);
    if(!parseResult) {
     error = true;
     break;
    }
   }
  }
  if(error)
   return false;
  if(this.hasAmPm) {
   if(!this.fixHours())
    return false;
  }
  if(!this.isYearParsed)
   this.date.setYear(this.savedYear);
  if(this.parsedMonth < 0)
   this.parsedMonth = now.getMonth();   
  this.ApplyMonth();
  return this.date;  
 },
 ParseAndMergeWithDate: function(str, sourceDate) {
  this.parserKeys = [];
  var date = this.Parse(str, true);
  if(date && sourceDate)
   date = new Date(
        this.HasYear() ? date.getFullYear() : sourceDate.getFullYear(),
        this.HasMonth() ? date.getMonth() : sourceDate.getMonth(),
        this.HasDay() ? date.getDate() : sourceDate.getDate(),
        this.HasHours() ? date.getHours() : sourceDate.getHours(),
        this.HasMinutes() ? date.getMinutes() : sourceDate.getMinutes(),
        this.HasSeconds() ? date.getSeconds() : sourceDate.getSeconds(),
        this.HasMilliseconds() ? date.getMilliseconds() : sourceDate.getMilliseconds()
        );
  this.parserKeys = [];
  return date;
 },
 HasYear: function() { return this.HasParserKey("y"); },
 HasMonth: function() { return this.HasParserKey("M"); },
 HasDay: function() { return this.HasParserKey("d"); },
 HasHours: function() { return this.HasParserKey("h") || this.HasParserKey("H"); },
 HasMinutes: function() { return this.HasParserKey("m"); },
 HasSeconds: function() { return this.HasParserKey("s"); },
 HasMilliseconds: function() { return this.HasParserKey("f") || this.HasParserKey("F"); },
 HasParserKey: function(key) { return ASPx.Data.ArrayIndexOf(this.parserKeys, key) !== -1; },
 ApplyMonth: function() {
  var trial;
  var day = this.date.getDate();
  while(true) {
   trial = new Date();
   trial.setTime(this.date.getTime());   
   trial.setMonth(this.parsedMonth);
   if(trial.getMonth() == this.parsedMonth)
    break;
   --day;
   this.date.setDate(day);
  }
  ASPx.DateUtils.FixTimezoneGap(this.date, trial);
  this.date = trial;
 },
 SetFormatString: function(mask) {
  if(mask.length == 2 && mask.charAt(0) == "%")
   mask = mask.charAt(1);
  var stringContainsDateSeparator = mask && mask.indexOf(ASPx.CultureInfo.ds) !== -1;
  this.specifiers = {}; 
  this.spPositions = [];
  this.mask = "";
  var subt = 0;
  var pos = 0;
  var startPos = 0;
  var ch;
  var prevCh = "";
  var skip = false;
  var backslash = false;
  var sp = "";
  while(true) {
   ch = mask.charAt(pos);
   if(ch == "") {
    if(sp.length > 0)
     this.RegisterSpecifier(startPos, sp, stringContainsDateSeparator);
    break;
   }
   if(ch == "\\" && !backslash) {
    backslash = true;
    subt++;
   } else {
    if(!backslash && (ch == "'" || ch == '"')) {
     skip = !skip;
     subt++;
    } else {     
     if(!skip) {
      if(ch == "/")
       ch = ASPx.CultureInfo.ds;
      else if(ch == ":")
       ch = ASPx.CultureInfo.ts;
      else if(this.IsKnownSpecifier(ch)) {
       if(prevCh.length == 0)
        prevCh = ch;
       if(ch == prevCh)
        sp += ch;
       else {
        if(sp.length > 0)
         this.RegisterSpecifier(startPos, sp, stringContainsDateSeparator);
        sp = ch;
        startPos = pos - subt;
       }
      }
     }     
     this.mask += ch;
    }      
    backslash = false;
   }            
   prevCh = ch;
   pos++;
  }
  this.spPositions.reverse();
 },
 RegisterSpecifier: function (pos, sp, stringContainsDateSeparator) {
  if(ASPx.CultureInfo.ds.length > 1 && this.mask && !stringContainsDateSeparator) {
   var dateParts = this.mask.split(ASPx.CultureInfo.ds);
   if(dateParts) {
    if(dateParts.length > 0 && dateParts[dateParts.length - 1] == "")
     dateParts.pop();
    pos += (dateParts.length - 1) * (ASPx.CultureInfo.ds.length - 1);
   }
  }
  this.spPositions.push(pos);
  this.specifiers[pos] = sp; 
 },
 ReplaceDay: function(length) {
  if(length < 3) {
   var value = this.date.getDate().toString();
   return length == 2 ? this.padLeft(value, 2) : value;  
  } else if(length == 3) {
   return ASPx.CultureInfo.abbrDayNames[this.date.getDay()];
  } else {
   return ASPx.CultureInfo.dayNames[this.date.getDay()];
  }
 }, 
 ReplaceMonth: function(length) {
  var value = 1 + this.date.getMonth();
  switch(length) {
   case 1:
    return value.toString();
   case 2:
    return this.padLeft(value.toString(), 2);
   case 3:
    return ASPx.CultureInfo.abbrMonthNames[value - 1];
   default:
    for(var i in this.specifiers) {
     if(this.specifiers.hasOwnProperty(i)) {
      var spec = this.specifiers[i];
      if(spec == "d" || spec == "dd")
       return ASPx.CultureInfo.genMonthNames[value - 1];
     }
    }
    return ASPx.CultureInfo.monthNames[value - 1];
  }
 },
 ReplaceYear: function(length) {
  var value = this.date.getFullYear();
  if(length <= 2)
   value = value % 100;
  return this.padLeft(value.toString(), length);
 },
 ReplaceHours23: function(length) {
  var value = this.date.getHours().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceHours12: function(length) {
  var value = this.date.getHours() % 12;
  if(value == 0)
   value = 12;
  value = value.toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceMinutes: function(length) {
  var value = this.date.getMinutes().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceSeconds: function(length) {
  var value = this.date.getSeconds().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceMsTrimmed: function(length) {   
  return this.formatMs(length, true);
 },
 ReplaceMs: function(length) { 
  return this.formatMs(length, false);
 },
 ReplaceEra: function(length) {
  return "A.D.";
 },
 ReplaceAmPm: function(length) {
  var value = this.date.getHours() < 12 ? ASPx.CultureInfo.am : ASPx.CultureInfo.pm;
  return length < 2 ? value.charAt(0) : value;
 },
 catchNumbers: function(str) {
  this.parseNumbers = [];  
  var regex = /\d+/g;  
  var match;
  for(;;) {
   match = regex.exec(str);
   if(!match)
    break;
   this.parseNumbers.push(this.parseDecInt(match[0]));
  }  
  var spCount = 0;
  var now = new Date();
  for(var i in this.specifiers) {
   if(this.specifiers.hasOwnProperty(i)) {
    var sp = this.specifiers[i];
    if (sp.constructor != String || !this.IsNumericSpecifier(sp)) continue;
    spCount++;
    if(this.parseNumbers.length < spCount) {
     var defaultValue = 0;
     if (sp.charAt(0) == "y") defaultValue = now.getFullYear();
     this.parseNumbers.push(defaultValue);
    }
   }
  }
  var excess = this.parseNumbers.length - spCount;
  if(excess > 0)
   this.parseNumbers.splice(spCount, excess);  
  this.currentParseNumber = this.parseNumbers.length - 1;
 },
 popParseNumber: function() {
  return this.parseNumbers[this.currentParseNumber--];
 },
 findAbbrMonth: function() {
  return this.findMonthCore(ASPx.CultureInfo.abbrMonthNames);
 },
 findFullMonth: function() {
  return this.findMonthCore(ASPx.CultureInfo.genMonthNames);
 },
 findMonthCore: function(monthNames) {
  var inputLower = this.strToParse.toLowerCase();
  var matchMonthNames = monthNames.filter(function(n) { return inputLower.indexOf(n.toLowerCase()) > -1; });
  if(matchMonthNames.length == 0)
   return false;
  var sortedMatchNames = matchMonthNames.sort(function(a, b) { return b.length - a.length; });
  var name = sortedMatchNames[0];
  var emptyMonth = new Array(name.length + 1).join(" ");
  this.strToParse = this.strToParse.replace(new RegExp(name, "gi"), emptyMonth);
  return monthNames.indexOf(name) + 1;
 },
 ParseDay: function(length) {
  if(length < 3) {
   var value = this.popParseNumber();
   if(value < 1 || value > 31)
    return false;
   this.date.setDate(value);
  }
  return true;
 },
 ParseMonth: function(length) {
  var value;
  switch(length){
   case 1:
   case 2:
    value = this.popParseNumber();
    break; 
   case 3:
    value = this.findAbbrMonth();
    break;
   default:
    value = this.findFullMonth();
    break;
  }
  if(value < 1 || value > 12)
   return false;
  this.parsedMonth = value - 1;
  if(this.IsActualDayMonthTextContainsDigit("M", length) && length > 2)
   this.currentParseNumber--;
  return true;
 }, 
 ParseYear: function(length) {  
  var value = this.popParseNumber();
  if(value > 9999)
   return false;
  if(value < 100)
   value = ASPx.DateUtils.ExpandTwoDigitYear(value);
  this.date.setFullYear(value);
  this.isYearParsed = true;
  return true;
 },
 ParseHours: function(length) {
  var value = this.popParseNumber();
  if(value > 23)
   return false;
  this.date.setHours(value);
  return true;
 },
 ParseMinutes: function(length) {
  var value = this.parseMinSecCore();
  if(value == -1)
   return false;
  this.date.setMinutes(value);
  return true;
 },
 ParseSeconds: function(length) {
  var value = this.parseMinSecCore();
  if(value == -1)
   return false;
  this.date.setSeconds(value);
  return true;
 },
 ParseMs: function(length) {
  if(length > 3)
   length = 3;
  var thr = 1;
  for(var i = 0; i < length; i++)
   thr *= 10;
  thr -= 1;
  var value = this.popParseNumber();
  while(value > thr)
   value /= 10;
  this.date.setMilliseconds(Math.round(value));
  return true;
 },
 ParseEra: function(length) {
  return true;
 },
 ParseAmPm: function(length) {
  this.hasAmPm = ASPx.CultureInfo.am.length > 0 && ASPx.CultureInfo.pm.length > 0;
  return true;
 },
 parseDecInt: function(str) {
  return parseInt(str, 10);
 },
 padLeft: function(str, length) {
  while(str.length < length)
   str = "0" + str;
  return str;
 },
 formatMs: function(length, trim) {
  var value = Math.floor(this.date.getMilliseconds() * Math.pow(10, length - 3));
  value = this.padLeft(value.toString(), length);    
  if(trim) {
   var pos = value.length - 1;
   var req = false;
   while(value.charAt(pos) == "0") {
    req = true;
    pos--;
   }
   if(req)
    value = value.substring(0, pos + 1);   
  }
  return value;
 },
 parseMinSecCore: function() {
  var value = this.popParseNumber();
  return value > 59 ? -1 : value;
 },
 fixHours: function() {
  var state = this.getAmPmState(this.strToParse);
  if(!state) return true;
  var h = this.date.getHours();
  switch(state) {
   case "P":
    if(h > 12) return false;
    if(h < 12)
     this.date.setHours(12 + h);
    break;
   case "A":
    if(h == 12)
     this.date.setHours(0);
  }
  return true;
 },
 getAmPmState: function(str, skipCorrection) {
  var am = ASPx.CultureInfo.am.charAt(0).toLowerCase();
  var pm = ASPx.CultureInfo.pm.charAt(0).toLowerCase();
  var amMatches = new RegExp(am, "gi").exec(str);
  var pmMatches = new RegExp(pm, "gi").exec(str);
  var amCount = amMatches ? amMatches.length : 0;
  var pmCount = pmMatches ? pmMatches.length : 0;
  var hasAm = amCount > 0;
  var hasPm = pmCount > 0;
  if(hasAm ^ hasPm && amCount < 2 && pmCount < 2)
   return hasAm ? "A" : "P";
  if(!skipCorrection) {
   str = str.replace(new RegExp(this.getDayMonthNameReplacePattern(), "gi"), "");
   return this.getAmPmState(str, true);
  }
  return null;
 },
 getDayMonthNameReplacePattern: function() {
  if(!this.dayMonthNameReplacePattern)
   return this.createDayMonthNameReplacePattern();
  return this.dayMonthNameReplacePattern;
 },
 createDayMonthNameReplacePattern: function() {
  var parts = [ ] ;
  parts.push("(?:");
  parts.push(this.createReplacePattern(ASPx.CultureInfo.monthNames));
  parts.push(this.createReplacePattern(ASPx.CultureInfo.genMonthNames));
  parts.push(this.createReplacePattern(ASPx.CultureInfo.abbrMonthNames));
  parts.push(this.createReplacePattern(ASPx.CultureInfo.abbrDayNames));
  parts.push(this.createReplacePattern(ASPx.CultureInfo.dayNames));
  parts.push(")");
  return parts.join("");
 },
 createReplacePattern: function(names) {
  return names && names.length > 0 ? "\\b" + names.join("\\b|\\b") + "\\b" : "";
 },
 IsNumericSpecifier: function(sp) {
  var ch = sp.charAt(0);
  if(ch == "g" || ch == "t" || ((ch == "M" || ch == "d") && !this.IsActualDayMonthTextContainsDigit(ch, sp.length)))
   return false;
  return true;
 },
 IsActualDayMonthTextContainsDigit: function(datePart, datePartLength) {
  if(datePartLength < 3)
   return true;
  var targetNames;
  var useAbbrNames = datePartLength == 3;
  if(datePart == "d")
   targetNames = useAbbrNames ? ASPx.CultureInfo.abbrDayNames : ASPx.CultureInfo.dayNames;
  else
   targetNames = useAbbrNames ? ASPx.CultureInfo.abbrMonthNames : ASPx.CultureInfo.monthNames;
  return targetNames.length > 0 ? /\d+/g.test(targetNames[0]) : false;
 },
 IsKnownSpecifier: function(sp) {
  if(sp.length > 1)
   sp = sp.charAt(0);
  for(var i = 0; i < this.knownSpecifiers.length; i++) {
   if(this.knownSpecifiers[i] == sp)
    return true;
  }
  return false;
 }
});
DateFormatter.Create = function(format) {
 var instance = new DateFormatter();
 instance.SetFormatString(format);
 return instance;
};
DateFormatter.ExpandPredefinedFormat = function(format) {
 switch(format) {
  case "d":
   return ASPx.CultureInfo.shortDate;
  case "D":
   return ASPx.CultureInfo.longDate;
  case "t":
   return ASPx.CultureInfo.shortTime;
  case "T":
   return ASPx.CultureInfo.longTime;
  case "g":
   return ASPx.CultureInfo.shortDate + " " + ASPx.CultureInfo.shortTime;   
  case "f":
   return ASPx.CultureInfo.longDate + " " + ASPx.CultureInfo.shortTime;
  case "G":
   return ASPx.CultureInfo.shortDate + " " + ASPx.CultureInfo.longTime;
  case "F":
  case "U":
   return ASPx.CultureInfo.longDate + " " + ASPx.CultureInfo.longTime;   
  case "M":
  case "m":
   return ASPx.CultureInfo.monthDay;
  case "Y":
  case "y":
   return ASPx.CultureInfo.yearMonth;   
  case "O":
  case "o":
   return "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffff";
  case "R":
  case "r":
   return "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
  case "s":
   return "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
  case "u":
    return "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
 }
 return format;
};
ASPx.DateFormatter = DateFormatter;
})();
(function() {
ASPx.Formatter = {
 Format: function() {
  if(arguments.length < 1) 
   return "";
  var format = arguments[0];
  if(format == null)
   return "";
  var args;
  if(arguments.length > 1 && arguments[1] != null && arguments[1].constructor == Array) {
   args = arguments[1];
  } else {
   args = [ ];
   for(var i = 1; i < arguments.length; i++)
    args.push(arguments[i]);
  }
  var bag = [ ];
  var pos = 0;
  var savedPos = 0;  
  while(pos < format.length) {
   var ch = format.charAt(pos);
   pos++;
   if(ch == '{') {
    bag.push(format.substr(savedPos, pos - savedPos - 1));    
    if(format.charAt(pos) == "{") {
     savedPos = pos;
     pos++;
     continue;
    }
    var spec = this.ParseSpec(format, pos);
    var pos = spec.pos;
    var arg = args[spec.index];
    var argString;
    if(arg == null) {
     argString = "";
    } else if(typeof arg == "number") {
     argString = ASPx.NumberFormatter.Format(spec.format, arg);
    } else if(arg.constructor == Date) {     
     if(spec.format != this.activeDateFormat) {
      this.activeDateFormat = spec.format;
      if(spec.format == "")
       spec.format = "G";      
      if(spec.format.length == 1)
       spec.format = ASPx.DateFormatter.ExpandPredefinedFormat(spec.format);
      this.GetDateFormatter().SetFormatString(spec.format);
     }
     if(this.activeDateFormat == "U")
      arg = ASPx.DateUtils.ToUtcTime(arg);
     argString = this.GetDateFormatter().Format(arg);
    } else {
     argString = String(arg);     
     if(spec.format != "" && argString.length > 0) {
      var num = Number(argString.replace(",", "."));
      if(!isNaN(num))
       argString = ASPx.NumberFormatter.Format(spec.format, num);
     }
    }
    var padLen = spec.width - argString.length;
    if(padLen > 0) {
     if(spec.left)
      bag.push(argString);
     for(var i = 0; i < padLen; i++)
      bag.push(" ");
     if(!spec.left)
      bag.push(argString);
    } else {
     bag.push(argString);
    }
    savedPos = pos;
   }
   else if(ch == "}" && pos < format.length && format.charAt(pos) == "}") {
    bag.push(format.substr(savedPos, pos - savedPos - 1));
    savedPos = pos;
    pos++;
   }
   else if (ch == "}") {
    return "";
   }
  }
  if(savedPos < format.length)
   bag.push(format.substr(savedPos));   
  return bag.join("");
 },
 ParseSpec: function(format, pos) {
  var result = {
   index: -1,   
   left: false,
   width: 0,
   format: "",
   pos: 0
  };
  var savedPos, ch;
  savedPos = pos;
  while(true) {   
   ch = format.charAt(pos);
   if(ch < "0" || ch > "9")
    break;
   pos++;
  }  
  if(pos > savedPos)
   result.index = Number(format.substr(savedPos, pos - savedPos));  
  if(format.charAt(pos) == ",") {
   pos++;
   while(true) {
    ch = format.charAt(pos);
    if(ch != " " && ch != "\t")
     break;
    pos++;
   }
   result.left = format.charAt(pos) == "-";
   if(result.left)
    pos++;   
   savedPos = pos;
   while(true) {
    ch = format.charAt(pos);
    if(ch < "0" || ch > "9")
     break;
    pos++;
   }
   if(pos > savedPos)
    result.width = Number(format.substr(savedPos, pos - savedPos));
  }
  if(format.charAt(pos) == ":") {
   pos++;
   savedPos = pos;
   while(format.charAt(pos) != "}")
    pos++;
   result.format = format.substr(savedPos, pos - savedPos);
  }
  pos++;
  result.pos = pos;
  return result;
 },
 activeDateFormat: null,
 GetDateFormatter: function() {
  if(!this.__dateFormatter)
   this.__dateFormatter = new ASPx.DateFormatter();
  return this.__dateFormatter;
 }
};
ASPx.NumberFormatter = {
 Format: function(format, value) {
  if(isNaN(value))
   return ASPx.CultureInfo.numNan;
  if(!isFinite(value)) {
   return value > 0 
    ? ASPx.CultureInfo.numPosInf 
    : ASPx.CultureInfo.numNegInf;
  }
  this.FillFormatInfo(format);
  if(this.spec == "X")
   return this.FormatHex(value);
  this.FillDigitInfo(value);  
  switch(this.spec) {
   case "C":
    return this.FormatCurrency();
   case "D":
    return this.FormatDecimal();
   case "E":
    return this.FormatExp();
   case "F":
    return this.FormatFixed();
   case "G":   
    return this.FormatGeneral();
   case "N":
    return this.FormatNumber();
   case "P":
    return this.FormatPercent();
   default:
    if(this.custom)
     return this.FormatCustom(format);
    return "?";
  }
 },
 positive: true,
 digits: null,
 pointPos: 0, 
 spec: "",
 prec: -1,  
 upper: true,
 custom: false,
 FormatCurrency: function() {  
  if(this.prec < 0)
   this.prec = ASPx.CultureInfo.currPrec;
  this.Round(this.prec);
  var bag = [ ];
  if(this.positive) {
   switch(ASPx.CultureInfo.currPosPattern) {
    case 0:
     bag.push(ASPx.CultureInfo.currency);
     break;
    case 2:
     bag.push(ASPx.CultureInfo.currency, " ");     
     break;     
   }
  } else {
   switch(ASPx.CultureInfo.currNegPattern) {
    case 0:
     bag.push("(", ASPx.CultureInfo.currency);
     break;
    case 1:
     bag.push("-", ASPx.CultureInfo.currency);
     break;
    case 2:
     bag.push(ASPx.CultureInfo.currency, "-");
     break;
    case 3:
     bag.push(ASPx.CultureInfo.currency);
     break;
    case 4:
     bag.push("(");
     break;
    case 5:
    case 8:
     bag.push("-");
     break;
    case 9:
     bag.push("-", ASPx.CultureInfo.currency, " ");
     break;
    case 11:
     bag.push(ASPx.CultureInfo.currency, " ");
     break;
    case 12:
     bag.push(ASPx.CultureInfo.currency, " -");
     break;
    case 14:
     bag.push("(", ASPx.CultureInfo.currency, " ");
     break;
    case 15:
     bag.push("(");
     break;
   }
  }
  this.AppendGroupedInteger(bag, ASPx.CultureInfo.currGroups, ASPx.CultureInfo.currGroupSeparator);
  if(this.prec > 0) {
   bag.push(ASPx.CultureInfo.currDecimalPoint);
   this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
  }
  if(this.positive) {
   switch(ASPx.CultureInfo.currPosPattern) {
    case 1:
     bag.push(ASPx.CultureInfo.currency);
     break;
    case 3:
     bag.push(" ", ASPx.CultureInfo.currency);
     break;     
   }   
  } else {
   switch(ASPx.CultureInfo.currNegPattern) {
    case 0:
    case 14:
     bag.push(")");
     break;
    case 3:
     bag.push("-");
     break;
    case 4:
     bag.push(ASPx.CultureInfo.currency, ")");
     break;
    case 5:
     bag.push(ASPx.CultureInfo.currency);
     break;
    case 6:
     bag.push("-", ASPx.CultureInfo.currency);
     break;
    case 7:
     bag.push(ASPx.CultureInfo.currency, "-");
     break;
    case 8:
     bag.push(" ", ASPx.CultureInfo.currency);
     break;
    case 10:
     bag.push(" ", ASPx.CultureInfo.currency, "-");
     break;
    case 11:
     bag.push("-");
     break;
    case 13:
     bag.push("- ", ASPx.CultureInfo.currency);
     break;
    case 15:
     bag.push(" ", ASPx.CultureInfo.currency, ")");
     break;
   }
  }
  return bag.join("");
 }, 
 FormatDecimal: function() {
  if(this.prec < this.pointPos)
   this.prec = this.pointPos;
  if(this.prec < 1)
   return "0";
  var bag = [ ];
  if(!this.positive)
   bag.push("-");
  this.AppendDigits(bag, this.pointPos - this.prec, this.pointPos);
  return bag.join("");
 },
 FormatExp: function() {  
  if(this.prec < 0)
   this.prec = 6;
  this.Round(1 - this.pointPos + this.prec);
  return this.FormatExpCore(3);
 },
 FormatExpCore: function(minExpDigits) {
  var bag = [ ];
  if(!this.positive)
   bag.push("-");
  this.AppendDigits(bag, 0, 1);
  if(this.prec > 0) {
   bag.push(ASPx.CultureInfo.numDecimalPoint);
   this.AppendDigits(bag, 1, 1 + this.prec);
  }
  bag.push(this.upper ? "E" : "e");
  var order = this.pointPos - 1;  
  if(order >= 0) {
   bag.push("+");
  } else {
   bag.push("-");
   order = -order;
  }
  var orderStr = String(order);
  for(var i = orderStr.length; i < minExpDigits; i++)
   bag.push(0);
  bag.push(orderStr);
  return bag.join("");
 },
 FormatFixed: function() {
  if(this.prec < 0)
   this.prec = ASPx.CultureInfo.numPrec;
  this.Round(this.prec);
  var bag = [ ];
  if(!this.positive)
   bag.push("-");
  if(this.pointPos < 1)
   bag.push(0);
  else
   this.AppendDigits(bag, 0, this.pointPos);
  if(this.prec > 0) {
   bag.push(ASPx.CultureInfo.numDecimalPoint);
   this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
  }
  return bag.join(""); 
 },
 FormatGeneral: function() {
  var hasFrac = this.pointPos < this.digits.length;
  var allowExp;
  if(this.prec < 0) {
   allowExp = hasFrac;
   this.prec = hasFrac ? 15 : 10;
  } else {   
   allowExp = true;
   if(this.prec < 1)
    this.prec = hasFrac ? 15 : 10;
   this.Round(this.prec - this.pointPos);
  }
  if(allowExp) {
   if(this.pointPos > this.prec || this.pointPos <= -4) {
    this.prec = this.digits.length - 1;
    return this.FormatExpCore(2);
   }
  }
  this.prec = Math.min(this.prec, Math.max(1, this.digits.length)) - this.pointPos;
  return this.FormatFixed();
 },
 FormatNumber: function() {
  if(this.prec < 0)
   this.prec = ASPx.CultureInfo.numPrec;
  this.Round(this.prec);
  var bag = [ ];
  if(!this.positive) {
   switch(ASPx.CultureInfo.numNegPattern) {
    case 0:
     bag.push("(");
     break;
    case 1:
     bag.push("-");
     break;
    case 2:
     bag.push("- ");
     break;
   }
  }
  this.AppendGroupedInteger(bag, ASPx.CultureInfo.numGroups, ASPx.CultureInfo.numGroupSeparator);
  if(this.prec > 0) {
   bag.push(ASPx.CultureInfo.numDecimalPoint);
   this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
  }
  if(!this.positive) {
   switch(ASPx.CultureInfo.numNegPattern) {
    case 0:
     bag.push(")");
     break;
    case 3:
     bag.push("-");
     break;
    case 4:
     bag.push(" -");
     break;
   }
  }
  return bag.join("");
 },
 FormatPercent: function() {
  if(this.prec < 0)
   this.prec = ASPx.CultureInfo.numPrec;
  if(this.digits.length > 0)
   this.pointPos += 2;
  this.Round(this.prec);
  var bag = [ ];
  if(!this.positive)
   bag.push("-");
  if(ASPx.CultureInfo.percentPattern == 2)
   bag.push("%");    
  this.AppendGroupedInteger(bag, ASPx.CultureInfo.numGroups, ASPx.CultureInfo.numGroupSeparator);
  if(this.prec > 0) {
   bag.push(ASPx.CultureInfo.numDecimalPoint);
   this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
  }  
  switch(ASPx.CultureInfo.percentPattern) {
   case 0:
    bag.push(" %");
    break;
   case 1:
    bag.push("%");
    break;
  }  
  return bag.join("");
 },
 FormatHex: function(value) {
  var result = value.toString(16);
  if(result.indexOf("(") > -1)
   return result;
  result = this.upper ? result.toUpperCase() : result.toLowerCase();
  if(this.prec <= result.length)
   return result;
  var bag = [ ];
  for(var i = result.length; i < this.prec; i++)
   bag.push(0);
  bag.push(result);
  return bag.join("");
 },
 FormatCustom: function(format) {
  var sectionList = this.GetCustomFormatSections(format);
  var section = this.SelectCustomFormatSection(sectionList);
  if(section == "")
   return this.positive ? "" : "-";
  var info = this.ParseCustomFormatSection(section);
  var lists = this.CreateCustomFormatLists(info);
  if(sectionList.length > 2 && section != sectionList[2]) {
   var zero = lists.i.concat(lists.f).join("").split(0).join("") == "";
   if(zero) {
    section = sectionList[2];
    info = this.ParseCustomFormatSection(section);
    lists = this.CreateCustomFormatLists(info);   
   }   
  }
  return this.FormatCustomCore(section, info, lists);
 },
 GetCustomFormatSections: function(format) {
  var sections = [ ];
  var escaping = false;
  var quote = "";
  var length = 0;
  var prevPos = 0;
  for(var i = 0; i < format.length; i++) {
   var ch = format.charAt(i);
   if(!escaping && quote == "" && ch == ";") {
    sections.push(format.substr(prevPos, length));
    length = 0;
    prevPos = i + 1;
    if(sections.length > 2)
     break;
   } else {
    if(escaping)
     escaping = false;
    else if(ch == quote)
     quote = quote == "" ? ch : "";
    else if(ch == "\\")
     escaping = true;
    else if(ch == "'" || ch == '"')
     quote = ch;
    ++length;
   }
  }
  if(length > 0)
   sections.push(format.substr(prevPos, length));
  if(sections.length < 1)
   sections.push(format);
  return sections;
 },
 SelectCustomFormatSection: function(sections) {
  if(!this.positive && sections.length > 1 && sections[1] != "") {
   this.positive = true;
   return sections[1];
  }
  if(this.digits.length < 1 && sections.length > 2 && sections[2] != "")
   return sections[2];
  return sections[0];
 },
 CreateCustomFormatInfo: function() {
  return {
   pointPos: -1,
   grouping: false,
   exp: false,
   expShowPlus: false,
   percent: false,
   scaling: 0,
   intDigits: 0,
   fracDigits: 0,
   expDigits: 0,
   intSharps: 0,
   fracSharps: 0, 
   expSharps: 0
  };
 },
 ParseCustomFormatSection: function(section) {  
  var quote = "";
  var area = "i"; 
  var canParseIntSharps = true;
  var result = this.CreateCustomFormatInfo();
  var groupSeparators = 0;  
  for(var i = 0; i < section.length; i++) {
   var ch = section.charAt(i);   
   if(ch == quote) {
    quote = "";    
    continue;
   }
   if(quote != "")
    continue;
   if(area == "e" && ch != "0" && ch != "#") {
    area = result.pointPos < 0 ? "i" : "f";
    i--;
    continue;
   }
   switch(ch) {
    case "\\":
     i++;
     continue;
    case "'":
    case '"':
     quote = ch;
     continue;
    case "#":
    case "0":
     if(ch == "#") {
      switch(area) {
       case "i":
        if(canParseIntSharps)
         result.intSharps++;
        break;
       case "f":
        result.fracSharps++;
        break;
       case "e":
        result.expSharps++;
        break;
      }
     } else {
      canParseIntSharps = false;
      switch(area) {
       case "f":
        result.fracSharps = 0;        
        break;
       case "e":
        result.expSharps = 0;
        break;
      }
     }
     switch(area) {
      case "i":
       result.intDigits++;
       if(groupSeparators > 0)
        result.grouping = true;
       groupSeparators = 0;
       break;
      case "f":
       result.fracDigits++;  
       break;
      case "e":
       result.expDigits++;
       break;
     }
     break;
    case "e":
    case "E":
     if(result.exp)
      break;
     result.exp = true;     
     area = "e"; 
     if(i < section.length - 1) {
      var next = section.charAt(1 + i);
      if(next == "+" || next == "-") {
       if(next == "+")
        result.expShowPlus = true;
       i++;
      }
      else if(next != "0" && next != "#") {
       result.exp = false;
       if(result.pointPos < 0)
        area = "i";       
      }
     }
     break;
    case ".":
     area = "f";
     if(result.pointPos < 0)
      result.pointPos = i;
     break;
    case "%":
     result.percent = true;     
     break;
    case ",":
     if(area == "i" && result.intDigits > 0)
      groupSeparators++;
     break;
    default:
     break;
   }
  }
  if(result.expDigits < 1)
   result.exp = false;
  else
   result.intSharps = 0;
  if(result.fracDigits < 1)
   result.pointPos = -1;
  result.scaling = 3 * groupSeparators;  
  return result;
 },
 CreateCustomFormatLists: function(info) {
  var intList = [ ];
  var fracList = [ ];
  var expList = [ ];
  if(this.digits.length > 0) {
   if(info.percent)
    this.pointPos += 2;
   this.pointPos -= info.scaling;
  }
  var expPositive = true;
  if(info.exp && (info.intDigits > 0 || info.fracDigits > 0)) {
   var diff = 0;
   if(this.digits.length > 0) {
    this.Round(info.intDigits + info.fracDigits - this.pointPos);
    diff -= this.pointPos - info.intDigits;
    this.pointPos = info.intDigits;
   }
   expPositive = diff <= 0;   
   expList = String(diff < 0 ? -diff : diff).split("");
  } else {
   this.Round(info.fracDigits);
  }
  if(this.digits.length < 1 || this.pointPos < 1)
   intList = [ 0 ];
  else
   this.AppendDigits(intList, 0, this.pointPos);
  this.AppendDigits(fracList, this.pointPos, this.digits.length);
  if(info.exp) {
   while(intList.length < info.intDigits)
    intList.unshift(0);
   while(expList.length < info.expDigits - info.expSharps)
    expList.unshift(0);
   if(expPositive && info.expShowPlus)
    expList.unshift("+");
   else if(!expPositive)
    expList.unshift("-");
  } else {
   while(intList.length < info.intDigits - info.intSharps)
    intList.unshift(0);    
   if(info.intSharps >= info.intDigits) {
    var zero = true;
    for(var i = 0; i < intList.length; i++) {
     if(intList[i] != 0) {
      zero = false;
      break;
     }
    }
    if(zero)
     intList = [ ];
   }
  }
  while(fracList.length < info.fracDigits - info.fracSharps)
   fracList.push(0);
  return {
   i: intList,
   f: fracList,
   e: expList
  };
 },
 FormatCustomCore: function(section, info, lists) {
  var intLen = 0; 
  var total = 0;
  var groupIndex = 0; 
  var counter = 0;
  var groupSize = 0;
  if(info.grouping && ASPx.CultureInfo.numGroups.length > 0) {
   intLen = lists.i.length;
   for(var i = 0; i < ASPx.CultureInfo.numGroups.length; i++) {
    if(total + ASPx.CultureInfo.numGroups[i] <= intLen) {
     total += ASPx.CultureInfo.numGroups[i];
     groupIndex = i;
    }
   }
   groupSize = ASPx.CultureInfo.numGroups[groupIndex];
   var fraction = intLen > total ? intLen - total : 0;
   if(groupSize == 0) {
    while(groupIndex >= 0 && ASPx.CultureInfo.numGroups[groupIndex] == 0)
     groupIndex--;
    groupSize = fraction > 0 ? fraction : ASPx.CultureInfo.numGroups[groupIndex];
   }
   if(fraction == 0) {
    counter = groupSize;
   } else {
    groupIndex += Math.floor(fraction / groupSize);
    counter = fraction % groupSize;
    if(counter == 0)
     counter = groupSize;
    else
     groupIndex++;
   }
  } else {
   info.grouping = false;
  }
  var bag = [ ];
  var area = "i";
  var intSharps = 0;
  var intListIndex = 0;
  var fracListIndex = 0;
  var savedCh = "";
  for(var i = 0; i < section.length; i++) {
   var ch = section.charAt(i);
   if(ch == savedCh) {
    savedCh = "";
    continue;
   }
   if(savedCh != "") {
    bag.push(ch);
    continue;
   }
   switch(ch) {
    case "\\":
     ++i;
     if(i < section.length)
      bag.push(section.charAt(i));
     continue;
    case "'":
    case '"':     
     savedCh = ch;
     continue;
    case "#":     
    case "0":
     if(area == "i") {
      intSharps++;
      if(ch == "0" || info.intDigits - intSharps < lists.i.length + intListIndex) {
       while(info.intDigits - intSharps + intListIndex < lists.i.length) {
        bag.push(lists.i[intListIndex]);
        intListIndex++;
        if(info.grouping && --intLen > 0 && --counter == 0) {
         bag.push(ASPx.CultureInfo.numGroupSeparator);
         if(--groupIndex < ASPx.CultureInfo.numGroups.length && groupIndex >= 0)
          groupSize = ASPx.CultureInfo.numGroups[groupIndex];
         counter = groupSize;
        }
       }
      }
     } else if(area == "f") {
      if(fracListIndex < lists.f.length) {
       bag.push(lists.f[fracListIndex]);
       fracListIndex++;
      }
     }
     break;
    case "e":
    case "E":
     if(lists.e == null || !info.exp) {
      bag.push(ch);
      break;
     }
     for(var q = i + 1; q < section.length; q++) {
      if(q == i + 1 && (section.charAt(q) == "+" || section.charAt(q) == "-"))
       continue;                   
      if(section.charAt(q) == "0" || section.charAt(q) == "#")
       continue;
      break;
     }
     i = q - 1;
     area = info.pointPos < 0 ? "i" : "f";
     bag.push(ch);
     bag = bag.concat(lists.e);
     lists.e = null;      
     break;
    case ".":
     if(info.pointPos == i && lists.f.length > 0)
      bag.push(ASPx.CultureInfo.numDecimalPoint);
     area = "f";
     break;
    case ",":
     break;
    default:
     bag.push(ch);
     break;
   }
  }
  if(!this.positive)
   bag.unshift("-");
  return bag.join("");
 },
 FillDigitInfo: function(value) {
  this.positive = true;
  if(value < 0) {
   value = -value;
   this.positive = false;   
  }
  this.digits = [ ];
  this.pointPos = 0;    
  if(value == 0 || !isFinite(value) || isNaN(value)) {
   this.pointPos = 1;
   return;
  }
  var list = String(value).split("e");
  var str = list[0];
  if(list.length > 1) {   
   this.pointPos = Number(list[1]);
  }
  var frac = false;
  var decimalCount = 0;
  for(var i = 0; i < str.length; i++) {
   var ch = str.charAt(i);
   if(ch == ".") {
    frac = true;
   } else {
    if(frac)
     decimalCount++;     
    if(ch != "0" || this.digits.length > 0)
     this.digits.push(Number(ch));
   }
  }
  this.pointPos += this.digits.length - decimalCount;
 },
 FillFormatInfo: function(format) {
  this.upper = true;
  this.custom = false;
  this.prec = -1;
  var spec;
  if(format == null || format.length < 1)
   spec = "G";
  else
   spec = format.charAt(0);
  if(spec >= "a" && spec <= "z") {
   spec = spec.toUpperCase();
   this.upper = false;
  }
  if(spec >= "A" && spec <= "Z") {   
   if(format != null && format.length > 1) {
    var prec = Number(format.substr(1));
    if(!isNaN(prec))
     this.prec = prec;
    else
     this.custom = true;
   }
  } else {
   this.custom = true;   
  }  
  this.spec = this.custom ? "0" : spec;
 },
 Round: function(shift) {
  var amount = this.digits.length - this.pointPos - shift;
  if(amount <= 0) 
   return;
  var cutPos = this.pointPos + shift;
  if(cutPos < 0) {
   this.digits = [ ];
   this.pointPos = 0;
   return;
  }
  var digit = this.digits[cutPos];
  if(digit > 4) { 
   for(var i = 0; i < amount; i++) {
    var index = cutPos - 1 - i;
    if(index < 0) {
     this.digits.unshift(0);
     this.pointPos++;
     cutPos++;
     index++;
    }
    digit = this.digits[index];    
    if(digit < 9) {
     this.digits[index] = 1 + digit;
     break;
    } else {
     this.digits[index] = 0;
     amount++;
    }
   }
  }
  for(var i = cutPos - 1; i >= 0; i--) {
   if(this.digits[i] > 0) break;
   cutPos--;
  }
  this.digits.splice(cutPos, this.digits.length - cutPos);
 },
 AppendGroupedInteger: function(list, groups, separator) { 
  if(this.pointPos < 1) {
   list.push(0);
   return;
  }
  var total = 0;
  var groupIndex = 0;
  for(var i = 0; i < groups.length; i++) {
   if(total + groups[i] <= this.pointPos) {
    total += groups[i];
    groupIndex = i;
   }
   else
    break;
  }
  if(groups.length > 0 && total > 0) {
   var counter;
   var groupSize = groups[groupIndex];
   var fraction = this.pointPos > total ? this.pointPos - total : 0;
   if(groupSize == 0) {
    while(groupIndex >= 0 && groups[groupIndex] == 0)
     groupIndex--;
    groupSize = fraction > 0 ? fraction : groups[groupIndex];
   }
   if(fraction == 0) {
    counter = groupSize;
   } else {
    groupIndex += Math.floor(fraction / groupSize);
    counter = fraction % groupSize;
    if(counter == 0)
     counter = groupSize;
    else
     groupIndex++;
   }
   var i = 0;
   while(true) {
    if(this.pointPos - i <= counter || counter == 0) {
     this.AppendDigits(list, i, this.pointPos);
     break;
    }
    this.AppendDigits(list, i, i + counter);
    list.push(separator);
    i += counter;    
    groupIndex--;     
    if(groupIndex < groups.length && groupIndex >= 0)
     groupSize = groups[groupIndex];
    counter = groupSize;
   }
  } else {
   this.AppendDigits(list, 0, this.pointPos);   
  }  
 },
 AppendDigits: function(list, start, end) {
  for(var i = start; i < end; i++) {
   if(i < 0 || i >= this.digits.length)
    list.push(0);
   else
    list.push(this.digits[i]);
  }
 }
};
})();
(function() {
var dropDownNameSuffix = "_DDD";
var itemImageCellClassName = "dxeIIC";
var CONSTANTS = {
 DROPDOWN_COMMAND_APPLY: "Apply",
 DROPDOWN_COMMAND_CLOSE: "Close",
 DROPDOWN_HELPTEXT_CLASS: "dxdd-help",
 DROPDOWN_CAPTION_CLASS: "dxdd-caption",
 DROPDOWN_HEADER_CLASS: "dxdd-header",
 DROPDOWN_MODALVISIBLE_CLASS: "dxdd-vmdd"
};
var DROPDOWN_ELEMENT_VISIBILITY = {
 Never: 0,
 DropDown: 1,
 ModalDropDown: 2,
 Always: 3
};
ASPx.DROPDOWN_ELEMENT_VISIBILITY = DROPDOWN_ELEMENT_VISIBILITY;
var ASPxClientDropDownEditBase = ASPx.CreateClass(ASPxClientButtonEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.DropDown = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  this.QueryCloseUp = new ASPxClientEvent();
  this.ddHeightCache = ASPx.InvalidDimension;
  this.ddWidthCache = ASPx.InvalidDimension;
  this.mainElementWidthCache = ASPx.InvalidDimension;
  this.dropDownButtonIndex = -1;
  this.droppedDown = false;
  this.ddButtonPushed = false;
  this.lastSuccessText = "";
  this.isToolbarItem = false;
  this.allowFocusDropDownWindow = false;
  this.pcIsShowingNow = false;
  this.needTimeoutForInputElementFocusEvent = false;
  this.ddButtonsVis = 0;
  this.ddmInput = false;
  this.ddDefCap = true;
  this.ddScrPicker = ASPx.DROPDOWN_ELEMENT_VISIBILITY.Never;
  aspxGetDropDownCollection().Add(this);
 },
 InitializeEvents: function() {
  ASPxClientButtonEditBase.prototype.InitializeEvents.call(this);
  var ddTargets = this.getDropDownEventTargets();
  ddTargets
   .filter(function(trg, index, arr) { return trg && arr.indexOf(trg) === index; })
   .forEach(function(trg) {
    ASPx.Evt.AttachEventToElement(trg, "click", this.onDropDownEvent.bind(this));
    ASPx.Evt.AttachEventToElement(trg, ASPx.TouchUIHelper.touchMouseDownEventName, this.onDropDownEvent.bind(this));
  }.bind(this));
 },
 getDropDownEventTargets: function() {
  return [
   this.GetDropDownItemImageCell(),
   this.GetDropDownButton()
  ];
 },
 onDropDownEvent: function(evt) {
  if(evt.type === this.getDropDownEvent() && ASPx.Evt.IsLeftButtonPressed(evt) && this.GetEnabled())
   return this.OnDropDown(evt);
 },
 getDropDownEvent: function() {
  return this.isDropDownModal() || ASPx.Browser.MobileUI ? "click" : ASPx.TouchUIHelper.touchMouseDownEventName;
 },
 Initialize: function(){
  this.initializePopupControl();
  this.AssignClientAttributes();
  this.InitLastSuccessText();
  if(this.RefocusOnClickRequired()){ 
   ASPx.Evt.AttachEventToElement(this.GetMainElement(), "click", function(evt) {
    if(this.GetInputElement() && ASPx.Evt.GetEventSource(evt).id != this.GetInputElement().id) 
     this.ForceRefocusEditor(evt);
   }.aspxBind(this));
  }
  if(this.accessibilityCompliant && ASPx.IsExists(this.GetAccessibilityAssistantElement())) {
   this.GotFocus.AddHandler(function() { 
    this.ariaExplanatoryTextManager.SetHelperLabel(); 
   }.aspxBind(this));
  }
  ASPxClientButtonEditBase.prototype.Initialize.call(this);
 },
 initializePopupControl: function() {
  var pc = this.GetPopupControl();
  if(!pc) return;
  pc.usedInDropDown = true;
  pc.dropDownEditName = this.name;
  pc.setFocusOnCallback = false;
  this.initializeDropDown(pc);
 },
 initializeDropDown: function(pc) {
  pc = pc || this.GetPopupControl();
  if(!pc)
   return;
  if(this.ddmBP !== undefined) {
   pc.AdaptiveModeChanged.AddHandler(function() {
    this.onDropDownModalChanged(pc.GetAdaptiveModalMode());
   }.bind(this));
   pc.PopUp.AddHandler(function() {
    if(pc.GetAdaptiveModalMode())
     this.onDropDownModalChanged(true);
   }.bind(this));
   pc.Closing.AddHandler(function() {
    if(pc.GetAdaptiveModalMode())
     this.onDropDownModalChanged(false);
   }.bind(this));
  }
  this.initializeDropDownCommandButtons(pc);
  if(this.flSettings) {
   this.initializeDropDownContent(pc, this.flSettings.caption, this.flSettings.helpText);
   delete this.flSettings;
  }
 },
 initializeDropDownCommandButtons: function(pc) {
  this.dropDownCommandButtons = {};
  [CONSTANTS.DROPDOWN_COMMAND_APPLY, CONSTANTS.DROPDOWN_COMMAND_CLOSE].forEach(function(cmd) {
   var button = this.createDropDownCommandButtonClientInstance(pc, cmd);
   if(button) {
    button.useSubmitBehavior = false;
    button.causesValidation = false;
    button.accessibilityCompliant = this.accessibilityCompliant;
    button.Click.AddHandler(this.onDropDownCommandButtonClick.bind(this, cmd));
    button.InlineInitialize();
    this.dropDownCommandButtons[cmd] = button;
   }
  }.bind(this));
  this.ensureDropDownApplyCommandState();
 },
 createDropDownCommandButtonClientInstance: function(pc, cmd) {
  var name = pc.name + "_" + cmd;
  return document.getElementById(name) ? new ASPxClientButton(name) : null;
 },
 initializeDropDownContent: function(pc, caption, helpText) {
  if(this.ddmBP === undefined)
   return;
  var container = pc.GetContentContainer(-1);
  if(helpText) {
   var helpTextContainer = container.querySelector(CONSTANTS.DROPDOWN_HELPTEXT_CLASS);
   if(!helpTextContainer) {
    helpTextContainer = document.createElement("div");
    helpTextContainer.innerHTML = this.HtmlEncode(helpText);
    helpTextContainer.className = CONSTANTS.DROPDOWN_HELPTEXT_CLASS + " " + CONSTANTS.DROPDOWN_MODALVISIBLE_CLASS;
    container.appendChild(helpTextContainer);
   }
  }
  if(caption && this.ddDefCap) {
   var captionContainer = container.querySelector("." + CONSTANTS.DROPDOWN_CAPTION_CLASS);
   if(!captionContainer) {
    captionContainer = document.createElement("div");
    captionContainer.className = CONSTANTS.DROPDOWN_CAPTION_CLASS + " " + CONSTANTS.DROPDOWN_MODALVISIBLE_CLASS;
    var headerContainer = container.querySelector("." + CONSTANTS.DROPDOWN_HEADER_CLASS);
    if(!headerContainer) {
     headerContainer = document.createElement("div");
     headerContainer.className = CONSTANTS.DROPDOWN_HEADER_CLASS + " " + CONSTANTS.DROPDOWN_MODALVISIBLE_CLASS;
     container.insertBefore(headerContainer, container.firstChild);
    }
    headerContainer.insertBefore(captionContainer, headerContainer.firstChild);
   }
   captionContainer.innerHTML = this.HtmlEncode(caption);
  }
 },
 InitLastSuccessText: function(){
  var rawText = this.GetTextInternal();
  this.SetLastSuccessText(rawText);
 },
 AssignClientAttributes: function(){
  var element = this.GetDropDownButton();
  if(ASPx.IsExistsElement(element))
   ASPx.Evt.PreventElementDragAndSelect(element, true);
 },
 RefocusOnClickRequired: function(){
  return false;
 },
 SetReadOnlyInternal: function(readOnly) {
  ASPxClientButtonEditBase.prototype.SetReadOnlyInternal.call(this, readOnly);
  if(this.isDropDownModal())
   this.ensureDropDownModalInputVisibility();
  this.ensureDropDownApplyCommandState();
 },
 SetEnabled: function(enabled) {
  ASPxClientButtonEditBase.prototype.SetEnabled.call(this, enabled);
  this.ensureDropDownApplyCommandState();
 },
 GetDropDownButton: function(){
  return this.GetButton(this.dropDownButtonIndex);
 },
 GetButtonCollection: function(){
  var buttonElements = ASPxClientButtonEditBase.prototype.GetButtonCollection.call(this);
  var dropDownButtonElement = this.GetDropDownButton();
  if(ASPx.IsExists(dropDownButtonElement))
   buttonElements.push(dropDownButtonElement);
  return buttonElements;
 },
 GetPopupControl: function(){
  var pc = ASPx.GetControlCollection().Get(this.name + dropDownNameSuffix);
  if(pc && pc.GetWindowElement(-1))
   return pc;
  else
   return null;
 },
 GetDropDownWindow: function() {
  var pc = this.GetPopupControl();
  if(pc)
   return pc.GetWindowElement(-1);
  return null;
 },
 GetDropDownInnerControlName: function(suffix){
  var pc = this.GetPopupControl();
  if(pc)
   return this.GetPopupControl().name + suffix;
  return "";
 },
 GetDropDownItemImageCell: function() {
  return ASPx.GetNodesByPartialClassName(this.GetMainElement(), itemImageCellClassName)[0];
 },
 GetIsControlWidthWasChanged: function(){
  return this.mainElementWidthCache == ASPx.InvalidDimension || this.mainElementWidthCache != this.GetMainElement().clientWidth;
 },
 GetDropDownHeight: function(){
  return null;
 },
 GetDropDownWidth: function(){
  return null;
 },
 GetDropDownIsWindowElement: function(id, pcPostfix) {
  var pos = id.lastIndexOf(pcPostfix);
  if(pos != -1) {
   var name = id.substring(0, pos);
   var pc = ASPx.GetPopupControlCollection().Get(name);
   if(pc && pc.dropDownEditName)
    return aspxGetDropDownCollection().Get(pc.dropDownEditName);
  }
  return null;
 },
 GetDropDownParents: function() {
  var parents = [ ];
  var mainElement = this.GetMainElement();
  var element = mainElement.parentNode;
  while(element != null){
   if(element.tagName == "BODY")
    break;
   var dropDown = this.GetElementIsDropDownParent(element);
   if(dropDown != null)
    parents.push(dropDown);
   element = element.parentNode;
  }
  return parents.reverse();
 },
 GetElementIsDropDownParent: function(element) {
  return ASPx.Attr.IsExistsAttribute(element, "id") 
   ? this.GetDropDownIsWindowElement(ASPx.Attr.GetAttribute(element, "id"), ASPx.PCWIdSuffix + "-1") : null;
 },
 BeforePopupControlResizing: function() {
 },
 AfterPopupControlResizing: function() {
 },
 AfterPopupControlShown: function() {
 },
 ShowDropDownArea: function(isRaiseEvent, forceSize) {
  this.SetPCIsShowingNow(true);
  aspxGetDropDownCollection().RegisterDroppedDownControl(this, this.GetDropDownParents());
  if(!this.droppedDown) 
   this.SetLockListBoxClick();
  this.lockClosing = true; 
  var pc = this.GetPopupControl();
  var element = this.GetMainElement();
  var pcwElement = pc.GetCurrentWindowElement();
  pc.OnBeforeDropdownShow();
  if(ASPx.Browser.Chrome && pcwElement.clientHeight <= 0) 
   this.RestorePopupInsideNonStaticPositionedContainer();
  var height = forceSize ? forceSize.height : this.GetDropDownHeight();
  var width = forceSize ? forceSize.width : this.GetDropDownWidth();
  this.BeforePopupControlResizing();
  if(this.ddHeightCache != height || this.ddWidthCache != width || forceSize) {
   pc.SetSize(width, height);
   if(!forceSize) {
    this.ddHeightCache = height;
    this.ddWidthCache = width;
   }
  }
  this.AfterPopupControlResizing();
  if(ASPx.Browser.Chrome && pcwElement.clientHeight <= 0) 
   this.RestorePopupInsideNonStaticPositionedContainer();
  this.RaiseDropDownEventRequired = isRaiseEvent;
  pc.ShowAtElement(element, true);
  this.AfterPopupControlShown();
  this.droppedDown = true;
  this.lockClosing = false;
 },
 HideDropDownArea: function(isRaiseEvent){
  if(this.lockClosing || !this.droppedDown) return;
  if(!this.RaiseQueryCloseUp()) {
   return;
  }
  this.RemoveLockListBoxClick();
  this.DropDownButtonPop();
  var pc = this.GetPopupControl();
  if(pc){
   aspxGetDropDownCollection().UnregisterDroppedDownControl(this);
   pc.Hide();
   if(isRaiseEvent)
    this.RaiseCloseUp();
   this.droppedDown = false;
  }
 },
 RaiseLostFocus: function() {
  this.ensureDropDownClosedOnLostFocus();
  ASPxClientButtonEditBase.prototype.RaiseLostFocus.call(this);
 },
 ensureDropDownClosedOnLostFocus: function() {
  if(!this.isDropDownModal())
   this.HideDropDownArea(true);
 },
 RestorePopupInsideNonStaticPositionedContainer: function() {
  var pc = this.GetPopupControl();
  var pcwElement = pc.GetCurrentWindowElement();
  var pcwParentElement = pcwElement.parentNode;
  var offsetParentElement = pcwElement.offsetParent;
  if(!offsetParentElement || offsetParentElement.tagName == "BODY") return;
  pcwParentElement.style.position = "relative";
  setTimeout(
   function() { 
    pcwParentElement.style.position = "";
    if(this.focused)
     pc.ShowAtElement(this.GetMainElement());
   }.aspxBind(this), 0);
 },
 SetLockListBoxClick: function() {
  this.lockListBoxClick = true;
 },
 RemoveLockListBoxClick: function() {
  delete this.lockListBoxClick;
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  return this.dropDownButtonIndex == buttonIndex;
 },
 ToggleDropDown: function(){
  this.OnApplyChanges();
  if(this.droppedDown)
   this.HideDropDownArea(true);
  else
   this.ShowDropDownArea(true);  
 },
 GetTextInternal: function(){
  var text = ASPxClientButtonEditBase.prototype.GetValue.call(this);
  return text != null ? text : "";
 },
 SetTextInternal: function(text){
  if(!this.GetReadOnly())
   this.SetTextBase(text);
 },
 SetTextBase: function(text) {
  ASPxClientButtonEditBase.prototype.SetValue.call(this, text);
 },
 SetValue: function(value) {
  ASPxClientButtonEditBase.prototype.SetValue.call(this, value);
  this.SetLastSuccessText(this.GetTextInternal());
 },
 SetLastSuccessText: function(text){
  var tmpText = text;
  if(text == null) tmpText = "";
  else if(typeof(text) != "string")
     tmpText = text.toString();
  this.lastSuccessText = tmpText;
 },
 SetVisible: function(visible) {
  ASPxClientButtonEditBase.prototype.SetVisible.call(this, visible);
  if(!visible)
   this.HideDropDown();
 },
 RollbackTextInputValue: function () {
  this.SetTextBase(this.lastSuccessText);
 },
 SetPCIsShowingNow: function(value){
  this.pcIsShowingNow = value;
 },
 GetLastSuccesfullValue: function() {
  return this.lastSuccessText !== '' ? this.lastSuccessText : null;
 },
 CreateAriaExplanatoryTextManager: function() {
  if(this.accessibilityCompliant)
   return new DropDownAccessibilityExplanatoryTextManager(this);
  else 
   return new ASPx.DisableAccessibilityExplanatoryTextManager(this);
 },
 GetAccessibilityText: function() {
  var labelText = "";
  var helperContainer = this.GetAccessibilityAssistantElement();
  if(ASPx.IsExists(helperContainer))
   labelText = ASPx.Attr.GetAttribute(helperContainer, "aria-label");
  return !!labelText ? labelText : this.GetTextInternal();
 },
 GetAccessibilityActiveElements: function() {
  var helperContainer = this.GetAccessibilityAssistantElement();
  if(!this.accessibilityCompliant || !ASPx.IsExists(helperContainer))
   return [this.GetInputElement()];
  else if(ASPx.IsExists(this.accessibilityHelper))
   return [this.accessibilityHelper.GetActiveElement(true)];
  else 
   return [helperContainer];
 },
 OnValueChanged: function() {
  this.SetLastSuccessText(this.GetTextInternal());
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 },
 OnApplyChanges: function(){
 },
 OnCancelChanges: function(){
  var isCancelProcessed = (this.GetTextInternal() != this.lastSuccessText);
  this.SetTextInternal(this.lastSuccessText);
  return isCancelProcessed;
 },
 OnFocus: function () {
  if(this.CorrectFocusWhenDisabled())
   return;
  if(ASPx.Browser.IE && this.needTimeoutForInputElementFocusEvent) {
   setTimeout(function () {
    this.OnFocusInternal();
    this.needTimeoutForInputElementFocusEvent = false;
   }.aspxBind(this), 0);
  } else
   this.OnFocusInternal();
 },
 OnFocusInternal: function() {
  this.OnSetFocus(true);
  ASPxClientButtonEditBase.prototype.OnFocus.call(this);
 },
 OnLostFocus: function(){
  this.OnSetFocus(false);
  ASPxClientButtonEditBase.prototype.OnLostFocus.call(this);
 },
 OnSetFocus: function(isFocused){
  aspxGetDropDownCollection().SetFocusedDropDownName(isFocused ? this.name : "");
 },
 IsEditorElement: function(element) {
  if(ASPxClientButtonEditBase.prototype.IsEditorElement.call(this, element))
   return true;
  if(this.allowFocusDropDownWindow)
   return false;
  var pc = this.GetPopupControl();
  if(pc != null) {
   var windowElement = pc.GetCurrentWindowElement();
   return windowElement == element || ASPx.GetIsParent(windowElement, element);
  }
  return false;
 },
 OnPopupControlShown: function(){
  this.SetPCIsShowingNow(false);
  if(this.RaiseDropDownEventRequired){
   this.RaiseDropDownEventRequired = false;
   window.setTimeout(function() { this.RaiseDropDown(); }.aspxBind(this), 0);
  }
 },
 IsCanToDropDown: function(){
  return true;
 },
 OnDropDown: function(evt) { 
  if(!this.isInitialized) 
   return true;
  if(evt.type === ASPx.TouchUIHelper.touchMouseDownEventName && ASPx.Evt.GetEventSource(evt) === this.GetInputElement())
   this.OnMouseDown();
  if(!this.IsCanToDropDown()) {
   this.ForceRefocusEditor(evt);
   return true;
  }
  if(ASPx.Browser.IE && ASPx.Browser.Version < 9 || ASPx.Browser.Opera){
   if(!this.droppedDown) {
    ASPx.Evt.EmulateOnMouseDown(this.GetMainElement(), evt);
    ASPx.GetStateController().ClearSavedCurrentPressedElement();
   }
  }
  this.OnDropDownCore(evt);
  if(this.needCancelBubbleDropDownEvent())
   return ASPx.Evt.CancelBubble(evt); 
  return true;
 },
 OnDropDownCore: function(evt) {
  if(!this.droppedDown)
   this.DropDownButtonPush();
  this.ToggleDropDown();
  var isNativeFocus = this.isNativeFocus(evt);
  if(!isNativeFocus || !ASPx.Browser.MacOSMobilePlatform)
   this.ForceRefocusEditor(evt, isNativeFocus);
 },
 isNativeFocus: function(evt) {
  var inputElement = this.GetInputElement();
  return !!inputElement ? this.IsElementBelongToInputElement(ASPx.Evt.GetEventSource(evt)) : false;
 },
 needCancelBubbleDropDownEvent: function() {
  return true;
 },
 DropDownButtonPush: function(){
  if(this.droppedDown || this.ddButtonPushed) return;
  this.ddButtonPushed = true;
  if(ASPx.Browser.IE && ASPx.Browser.Version < 9 || ASPx.Browser.Opera)
   this.DropDownButtonPushPop(true);
  else
   this.DropDownButtonPushMozilla();
 }, 
 DropDownButtonPop: function(force){
  if((!this.droppedDown || !this.ddButtonPushed) && !force) return;
  this.ddButtonPushed = false;
  if(ASPx.Browser.IE && ASPx.Browser.Version < 9 || ASPx.Browser.Opera)
   this.DropDownButtonPushPop(false);
  else
   this.DropDownButtonPopMozilla();
 },
 DropDownButtonPushPop: function(isPush){
  var buttonElement = this.GetDropDownButton();
  if(buttonElement){
   var controller = ASPx.GetStateController();
   var element = controller.GetPressedElement(buttonElement);
   if(element){
    if(isPush){
     controller.SetCurrentHoverElement(null);
     controller.DoSetPressedState(element);
    } else {
     controller.DoClearPressedState(element);
     controller.SetCurrentPressedElement(null);
     controller.SetCurrentHoverElement(element);
    }
   }
  }
 },
 DropDownButtonPushMozilla: function(){
  this.DisableStyleControllerForDDButton();
  var controller = ASPx.GetStateController();
  controller.savedCurrentPressedElement = null;
 },
 DropDownButtonPopMozilla: function(){
  this.EnableStyleControllerForDDButton();
  var controller = ASPx.GetStateController();
  var buttonElement = this.GetDropDownButton();
  if(buttonElement){
   var element = controller.GetPressedElement(buttonElement);
   if(element)
    controller.DoClearPressedState(element);
   controller.currentPressedElement = null;
   element = controller.GetHoverElement(buttonElement);
   if(element)
    controller.SetCurrentHoverElement(element);
  }
 },
 EnableStyleControllerForDDButton: function(){
  var element = this.GetDropDownButton();
  if(element){
   var controller = ASPx.GetStateController();
   this.ReplaceElementControlStyleItem(controller.hoverItems, ASPx.HoverItemKind, element, this.ddButtonHoverStyle);
   this.ReplaceElementControlStyleItem(controller.pressedItems, ASPx.PressedItemKind, element, this.ddButtonPressedStyle);
   this.ReplaceElementControlStyleItem(controller.selectedItems, ASPx.SelectedItemKind, element, this.ddButtonSelectedStyle);
  }
 },
 DisableStyleControllerForDDButton: function(){
  var element = this.GetDropDownButton();
  if(element){
   var controller = ASPx.GetStateController();
   this.ddButtonHoverStyle = this.ReplaceElementControlStyleItem(controller.hoverItems, ASPx.HoverItemKind, element, null);
   this.ddButtonPressedStyle = this.ReplaceElementControlStyleItem(controller.pressedItems, ASPx.PressedItemKind, element, null);
   this.ddButtonSelectedStyle = this.ReplaceElementControlStyleItem(controller.selectedItems, ASPx.SelectedItemKind, element, null);
  }
 },
 ReplaceElementControlStyleItem: function(items, kind, element, newStyleItem){
  var styleItem = items[element.id];
  items[element.id] = newStyleItem;
  element[kind] = newStyleItem;
  return styleItem;
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing){
  if(!causedByWindowResizing || !this.pcIsShowingNow)
   this.HideDropDownArea(true);
 },
 OnDocumentMouseUp: function() {
  this.DropDownButtonPop();
 },
 OnDDButtonMouseMove: function(evt){
 },
 ShouldCloseOnMCMouseDown: function () {
  return true;
 },
 OnMainCellMouseDown: function (evt) {
  if(this.ShouldCloseOnMCMouseDown())
   this.OnCloseUp(evt);
 },
 OnCloseUp: function (evt) {
  if(ASPx.Browser.IE) {
   this.needTimeoutForInputElementFocusEvent = true;
   setTimeout(function () { this.HideDropDownArea(true); }.aspxBind(this), 0);
  } else {
   this.HideDropDownArea(true);
  }
 },
 OnOpenAnotherDropDown: function(){
  this.HideDropDownArea(true);
 },
 OnTextChanged: function() {
  if(!this.ChangedByEnterKeyPress())
   this.OnTextChangedInternal();
 },
 OnTextChangedInternal: function() {
  this.ParseValue();
 },
 ChangedByEnterKeyPress: function() {
  if(ASPx.Browser.Firefox || ASPx.Browser.WebKitFamily) 
   if(this.enterKeyPressed) {
    this.enterKeyPressed = false;
    return true;
   } 
  return false;
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientButtonEditBase.prototype.ChangeEnabledAttributes.call(this, enabled);
  var btnElement = this.GetDropDownButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, this.GetChangeButtonEnabledAttributesMethod(enabled));
  var inputElement = this.GetInputElement();
  if(inputElement)
   this.ChangeInputCellEnabledAttributes(inputElement.parentNode, ASPx.Attr.ChangeAttributesMethod(enabled));
  var imageCell = this.GetDropDownItemImageCell();
  if(ASPx.IsExists(imageCell))
   this.ChangeImageCellEnabledAttributes(imageCell, ASPx.Attr.ChangeAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled){
  ASPxClientButtonEditBase.prototype.ChangeEnabledStateItems.call(this, enabled);
  var btnElement = this.GetDropDownButton();
  if(btnElement)
   ASPx.GetStateController().SetElementEnabled(btnElement, enabled);
 },
 ChangeInputCellEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "onkeyup");
  if(ASPx.Browser.Edge)
   method(element, "onmousedown");
  method(element, "on" + ASPx.TouchUIHelper.touchMouseDownEventName);
  method(element, "on" + ASPx.TouchUIHelper.touchMouseUpEventName);
 },
 ChangeImageCellEnabledAttributes: function(imageCell, method){
  method(imageCell, "onmousedown");
 },
 InitializeKeyHandlers: function() {
  this.AddKeyDownHandler(ASPx.Key.Enter, "OnEnter");
  this.AddKeyDownHandler(ASPx.Key.Esc, "OnEscape");
  this.AddKeyDownHandler(ASPx.Key.PageUp, "OnPageUp");
  this.AddKeyDownHandler(ASPx.Key.PageDown, "OnPageDown");
  this.AddKeyDownHandler(ASPx.Key.End, "OnEndKeyDown");
  this.AddKeyDownHandler(ASPx.Key.Home, "OnHomeKeyDown");
  this.AddKeyDownHandler(ASPx.Key.Left, "OnArrowLeft");
  this.AddKeyDownHandler(ASPx.Key.Right, "OnArrowRight");
  this.AddKeyDownHandler(ASPx.Key.Up, "OnArrowUp");
  this.AddKeyDownHandler(ASPx.Key.Down, "OnArrowDown");
  this.AddKeyDownHandler(ASPx.Key.Tab, "OnTab");
 },
 OnArrowUp: function(evt){
  if(evt.altKey) {
   this.ToggleDropDown();
   return true;
  }
  return false;
 },
 OnArrowDown: function(evt){
  if(evt.altKey) {
   this.ToggleDropDown();
   return true;
  }
  return false;
 },
 OnPageUp: function(evt){
  return false;
 }, 
 OnPageDown: function(evt){
  return false;
 },
 OnEndKeyDown: function(evt){
  return false;
 },
 OnHomeKeyDown: function(evt){
  return false;
 },
 OnArrowLeft: function(evt){
  return false;
 },
 OnArrowRight: function(evt){
  return false;
 },
 OnEscape: function(evt){
  return this.OnEscapeInternal();
 },
 OnEscapeInternal: function() {
  var isCancelProcessed = this.OnCancelChanges() || this.droppedDown;
  this.HideDropDownArea(true);
  return isCancelProcessed;
 },
 OnEnter: function(evt){
  return false;
 },
 OnTab: function(evt){
  return false;
 },
 isDropDownModal: function(undefinedIfPopupIsDifferent) {
  var result = this.ddmBP && window.innerWidth < this.ddmBP;
  if(undefinedIfPopupIsDifferent) {
   var pc = this.GetPopupControl();
   if(pc && pc.GetAdaptiveModalMode(-1) != result)
    return undefined;
  }
  return !!result;
 },
 onDropDownModalChanged: function(enabled) {
  if(!this.ddmInput)
   return;
  if(enabled)
   this.enableDropDownModal();
  else
   this.disableDropDownModal();
  if(this.focusedNullTextElement)
   this.ensureAdjustFocusedNullTextElement();
 },
 enableDropDownModal: function() {
  this.loadMainElementHeight();
  var pc = this.GetPopupControl();
  var contentContainer = pc.GetContentContainer(-1);
  var inputContainer = contentContainer.querySelector(".dxdd-input");
  var inputElement = this.GetInputElement();
  inputContainer.appendChild(inputElement);
  if(this.focusedNullTextElement)
   inputContainer.appendChild(this.focusedNullTextElement);
  this.initializeDropDownModalClearButton(inputContainer);
  if(this.dropDownModalClearButton)
   this.EnsureClearButtonVisibility();
  this.ensureDropDownModalInputVisibility(inputContainer);
 },
 disableDropDownModal: function() {
  this.resetMainElementHeight();
  var inputElement = this.GetInputElement();
  this.getInputCell().appendChild(inputElement);
  if(this.focusedNullTextElement)
   this.getInputCell().appendChild(this.focusedNullTextElement);
 },
 loadMainElementHeight: function() {
  var mainElement = this.GetMainElement();
  var mainElementHeight = mainElement.style.height;
  if(!mainElementHeight) {
   var currentHeight = mainElement.getBoundingClientRect().height;
   mainElement.style.height = currentHeight + "px";
   ASPx.Attr.SetAttribute(mainElement, "data-hasAssignedHeight", true);
  }
 },
 resetMainElementHeight: function() {
  var mainElement = this.GetMainElement();
  var hasAssignedHeight = ASPx.Attr.GetAttribute(mainElement, "data-hasAssignedHeight");
  if(hasAssignedHeight) {
   mainElement.style.height = "";
   ASPx.Attr.RemoveAttribute(mainElement, "data-hasAssignedHeight");
  }
 },
 ensureDropDownModalInputVisibility: function(inputContainer) {
  if(!inputContainer && this.ddmInput) {
   var pc = this.GetPopupControl();
   inputContainer = pc && pc.GetContentContainer(-1).querySelector(".dxdd-input");
  }
  if(!inputContainer)
   return;
  ASPx.ToggleClassNameToElement(inputContainer, "dxdd-readonly", this.GetReadOnly() || !this.GetEnabled());
 },
 onDropDownCommandButtonClick: function(command) {
  if(command === CONSTANTS.DROPDOWN_COMMAND_APPLY)
   this.onDropDownApplyCommandClick();
  this.onDropDownCloseCommandClick();
 },
 onDropDownApplyCommandClick: function() {
  throw "Not Implemented";
 },
 onDropDownCloseCommandClick: function() {
  throw "Not Implemented";
 },
 ensureDropDownApplyCommandState: function() {
  if(!this.dropDownCommandButtons)
   return;
  var button = this.dropDownCommandButtons[CONSTANTS.DROPDOWN_COMMAND_APPLY];
  if(button)
   button.SetEnabled(this.isDropDownApplyCommandEnabled());
 },
 isDropDownApplyCommandEnabled: function() {
  return this.GetEnabled() && !this.GetReadOnly();
 },
 initializeDropDownModalClearButton: function(inputContainer) {
  if(this.dropDownModalClearButton === undefined) {
   this.dropDownModalClearButton = inputContainer.querySelector(this.getDropDownModalClearButtonSelector()) || null;
   if(this.dropDownModalClearButton)
    ASPx.Evt.AttachEventToElement(this.dropDownModalClearButton, "click", this.onClearButtonClick.bind(this));
  }
 },
 getDropDownModalClearButtonSelector: function() {
  return ".dxdd-clearbutton";
 },
 EnsureClearButtonVisibility: function() {
  ASPxClientButtonEditBase.prototype.EnsureClearButtonVisibility.call(this);
  if(this.dropDownModalClearButton && this.isDropDownModal())
   ASPx.SetElementDisplay(this.dropDownModalClearButton, this.RequireShowClearButton());
 },
 applyFormLayoutItemSettings: function(settings) {
  var pc = this.GetPopupControl();
  if(pc)
   this.initializeDropDownContent(pc, settings.caption, settings.helpText);
  else
   this.flSettings = settings;
 },
 getInputCell: function() {
  var cell = ASPxClientButtonEditBase.prototype.getInputCell.call(this);
  return ASPx.ElementHasCssClass(cell, "dxic") ? cell : this.GetMainElement().querySelector(".dxic");
 },
 RaiseCloseUp: function(){
  if(!this.CloseUp.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.CloseUp.FireEvent(this, args);
  }
 },
 RaiseDropDown: function(){
  if(!this.DropDown.IsEmpty() && this.isInitialized){
   var args = new ASPxClientEventArgs();
   this.DropDown.FireEvent(this, args);
  }
 },
 RaiseQueryCloseUp: function(){
  if(!this.QueryCloseUp.IsEmpty() && this.isInitialized) {
   var args = new ASPxClientCancelEventArgs();
   this.QueryCloseUp.FireEvent(this, args);
   return !args.cancel;
  }
  return true;
 },
 AdjustDropDownWindow: function(){
  var pc = this.GetPopupControl();
  if(pc) {
   if(ASPx.Browser.IE)
    ASPx.GetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
   pc.AdjustSize();
   pc.UpdatePositionAtElement(this.GetMainElement());
   if(ASPx.Browser.IE)
    ASPx.GetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
  }
 },
 ResetDropDownSizeCache: function(){
  this.ddHeightCache = ASPx.InvalidDimension;
  this.ddWidthCache = ASPx.InvalidDimension;
 },
 ShowDropDown: function(){
  if(!this.droppedDown)
   this.ShowDropDownArea(false);
 },
 HideDropDown: function(){
  if(this.droppedDown)
   this.HideDropDownArea(false);
 }
});
var ASPxClientDropDownEdit = ASPx.CreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.LostFocusInternal = new ASPxClientEvent();
  this.dropDownWindowHeight = "";
  this.dropDownWindowWidth = "";
  this.allowFocusDropDownWindow = true;
  this.needAdjustControlsInDropDownWindow = true;
  this.DropDownCommandButtonClick = new ASPxClientEvent();
 },
 InlineInitialize: function(){
  this.InitSpecialKeyboardHandling();
  ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
 },
 getDropDownEventTargets: function() {
  return ASPxClientDropDownEditBase.prototype.getDropDownEventTargets.call(this).concat([
   this.shouldDropDownOnMCMouseDown() ? this.getInputCell() : null,
  ]);
 },
 shouldDropDownOnMCMouseDown: function() {
  return this.readOnly || !this.allowUserInput;
 },
 ShouldCloseOnMCMouseDown: function() {
  return !this.shouldDropDownOnMCMouseDown();
 },
 InitializeEvents: function() {
  this.LostFocus.AddHandler(this.ProcessLostFocus.aspxBind(this));
  this.QueryCloseUp.AddHandler(this.ProcessQueryCloseUp.aspxBind(this));
  ASPxClientDropDownEditBase.prototype.InitializeEvents.call(this);
 },
 RefocusOnClickRequired: function(){
  return ASPx.Browser.IE;
 },
 BeforePopupControlResizing: function() {
  var divContainer = this.GetDropDownDivContainer();
  if(divContainer && this.needAdjustControlsInDropDownWindow) {
   this.AdjustControlsInDropDownWindow();
   ASPx.SetElementDisplay(divContainer, false);
  }
 },
 AfterPopupControlResizing: function() {
  var divContainer = this.GetDropDownDivContainer();
  if(divContainer && this.needAdjustControlsInDropDownWindow) {
   ASPx.SetElementDisplay(divContainer, true);
   this.AdjustControlsInDropDownWindow();
   this.needAdjustControlsInDropDownWindow = false;
  }
 },
 AdjustControlsInDropDownWindow: function() {
  var pc = this.GetPopupControl();
  var pcwElement = pc.GetCurrentWindowElement();
  ASPx.GetControlCollection().ProcessControlsInContainer(pcwElement, function(control) {
   control.AdjustControl(false);
  });
 },
 GetDropDownDivContainer: function() {
  return ASPx.GetElementById(this.name + dropDownNameSuffix + "_DDDC");
 },
 GetDropDownHeight: function(){
  if(this.dropDownWindowHeight != "")
   return this.dropDownWindowHeight;
  return ASPxClientDropDownEditBase.prototype.GetDropDownHeight.call(this);
 },
 GetDropDownWidth: function(){
  if(this.dropDownWindowWidth != "")
   return this.dropDownWindowWidth;
  return this.GetMainElement().offsetWidth;
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing){
  if(!ASPx.GetPopupControlCollection().WindowResizeByBodyScrollVisibilityChangingLocked())
   ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
 },
 OnBrowserWindowResize: function(e){
  this.needAdjustControlsInDropDownWindow = true;
 },
 OnEnter: function(evt){
  return this.droppedDown;
 },
 OnEscape: function(evt){
  var isCancelProcessed = this.droppedDown;
  this.HideDropDownArea(true);
  return isCancelProcessed;
 },
 OnTextChanged: function() {
  this.OnValueChanged();
 },
 ProcessLostFocus: function() {
  if(!this.droppedDown)
   this.RaiseLostFocusInternal();
 },
 ProcessQueryCloseUp: function() {
  if(this.focused)
   return;
  var forceRefocusTimeout = 150;
  setTimeout(function() {
   if(!this.IsDropDownContainsFocus())
    this.RaiseLostFocusInternal();
  }.aspxBind(this), forceRefocusTimeout);
 },
 IsDropDownContainsFocus: function() {
  return ASPx.GetIsParent(this.GetDropDownWindow(), ASPx.GetActiveElement());
 },
 GetKeyValueInternal: function(){
  if(ASPx.IsExists(this.stateObject))
   return this.stateObject.keyValue;
  return null;
 },
 SetKeyValueInternal: function(keyValue){
  this.UpdateStateObjectWithObject({ keyValue: keyValue });
 },
 GetValueString: function() {
  var value = this.GetKeyValue();
  return (value == null) ? ASPxClientDropDownEditBase.prototype.GetValueString.call(this) : value.toString();
 },
 onDropDownCommandButtonClick: function(action) {
  this.raiseDropDownCommandButtonClick(action);
 },
 raiseDropDownCommandButtonClick: function(command) {
  var args = new ASPxClientDropDownCommandEventArgs(command);
  if(!this.DropDownCommandButtonClick.IsEmpty())
   this.DropDownCommandButtonClick.FireEvent(this, args);
  return !args.cancel;
 },
 GetKeyValue: function(){
  return this.GetKeyValueInternal();
 },
 SetKeyValue: function(keyValue){
  this.SetKeyValueInternal(keyValue);
 },
 RaiseLostFocusInternal: function() {
  if(!this.isInitialized)
   return;
  this.ensureDropDownClosedOnLostFocus();
  if(this.LostFocusInternal.IsEmpty())
   return;
  var args = new ASPxClientEventArgs();
  this.LostFocusInternal.FireEvent(this, args);
 },
 ensureDropDownClosedOnLostFocus: function() { }
});
ASPxClientDropDownEdit.Cast = ASPxClientControl.Cast;
var ASPxClientDropDownCollection = ASPx.CreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.droppedControlName = "";
  this.droppedParentNames = [ ];
  this.focusedControlName = "";
 },
 GetCollectionType: function(){
  return "DropDown";
 },
 SetFocusedDropDownName: function(name){
  this.focusedControlName = name;
 },
 ResetDroppedDownControl: function(){
  this.droppedControlName = "";
 },
 ResetDroppedDownParentCollection: function(startDroppedDownControlName) {
  var regArray = [ ];
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == startDroppedDownControlName)
    break;
   regArray.push(this.droppedParentNames[i]);
  }
  this.droppedParentNames = regArray;
  if(this.droppedParentNames.length > 0) {
   this.droppedControlName = this.droppedParentNames[this.droppedParentNames.length - 1];
   ASPx.Data.ArrayRemoveAt(this.droppedParentNames, this.droppedParentNames.length - 1);
  }
 },
 ResetFocusedControl: function(){
  this.focusedControlName = "";
 },
 GetFocusedDropDown: function(){
  var control = this.GetDropDownControlInternal(this.focusedControlName);
  if(control == null) this.ResetFocusedControl();
  return control;
 },
 GetDroppedDropDown: function(){
  var control = this.GetDropDownControlInternal(this.droppedControlName);
  if(control == null) this.ResetDroppedDownControl();
  return control;
 },
 GetDroppedDropDownParents: function(startDroppedDownControlName) {
  var dropDownArray = [ ];
  var isNeedGetControl = false;
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == startDroppedDownControlName) isNeedGetControl = true;
   if(isNeedGetControl) {
    var control = this.GetDropDownControlInternal(this.droppedParentNames[i]);
    if(control != null)
     dropDownArray.push(control);
   }
  }
  return dropDownArray;
 },
 FindFirstNameForClose: function(newDroppedDownParentArray) {
  var firstNameToClose = newDroppedDownParentArray.length > 0 ? "" : this.droppedParentNames[i];
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(ASPx.Data.ArrayIndexOf(newDroppedDownParentArray, this.Get(this.droppedParentNames[i])) == -1) {
    firstNameToClose = this.droppedParentNames[i];
    break;
   }
  }
  return firstNameToClose;
 },
 GetDropDownControlInternal: function(name){
  var control = this.Get(name);
  var isControlExists = control && !control.IsDOMDisposed();
  if(!isControlExists)
   control = null;
  return control;
 },
 IsDroppedDropDownParentExist: function(name) {
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == name)
    return true;
  }
  return false;
 },
 OnDDButtonMouseMove: function(evt){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null)
   dropDownControl.OnDDButtonMouseMove(evt);
 },
 OnDocumentMouseDown: function(evt){
  if(ASPxClientControl.documentDropDownMouseDownLocked) return; 
  if(!ASPx.TouchUIHelper.handleFastTapIfRequired(evt, function(){ this.CloseDropDownByDocumentOrWindowEvent(evt, false); }.aspxBind(this), false))
   this.CloseDropDownByDocumentOrWindowEvent(evt, false);
 },
 OnDocumentMouseUp: function(evt){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null)
   dropDownControl.OnDocumentMouseUp();
 },
 OnBrowserWindowResize: function(e){
  if(typeof(ASPx.GetPopupControlCollection) != "undefined" && !ASPx.GetPopupControlCollection().WindowResizeByBodyScrollVisibilityChangingLocked()){
   this.CloseDropDownByDocumentOrWindowEvent(e.htmlEvent, true);
   this.AdjustControls();
  }
 },
 CloseDropDownByDocumentOrWindowEvent: function(evt, causedByWindowResizing){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null && (this.IsEventNotFromControlSelf(evt, dropDownControl) || causedByWindowResizing))
   dropDownControl.CloseDropDownByDocumentOrWindowEvent(causedByWindowResizing);
  var childrenDropDownsToClose = this.GetDroppedDropDownParents(this.droppedParentNames[0]);
  if(childrenDropDownsToClose.length != 0) {
   childrenDropDownsToClose = childrenDropDownsToClose.reverse();
   this.ResetDroppedDownParentCollection(this.droppedParentNames[0]);
   var rollbackDroppedDownNames = [ ];
   for(var c = 0; c < childrenDropDownsToClose.length; c++) {
    if(this.IsEventNotFromControlSelf(evt, childrenDropDownsToClose[c]))
     childrenDropDownsToClose[c].CloseDropDownByDocumentOrWindowEvent(causedByWindowResizing);
    else
     rollbackDroppedDownNames.push(childrenDropDownsToClose[c].name);
   }
   if(rollbackDroppedDownNames != 0) {
    rollbackDroppedDownNames = rollbackDroppedDownNames.reverse();
    this.droppedParentNames = rollbackDroppedDownNames;
   }
  }
 },
 AdjustControls: function(){
  this.ForEachControl(function(control) {
   control.AdjustControl(false);
  });
 },
 IsEventNotFromControlSelf: function(evt, control){
  var srcElement = ASPx.Evt.GetEventSource(evt);
  var mainElement = control.GetMainElement();
  var dropDownWindow = control.GetDropDownWindow();
  if(!srcElement || !mainElement || !dropDownWindow) return true;
  return (!ASPx.GetIsParent(mainElement, srcElement) &&
   !ASPx.GetIsParent(dropDownWindow, srcElement) &&
   !this.IsEventFromSharedPopupOfInnerEditor(dropDownWindow, srcElement));
 },
 IsEventFromSharedPopupOfInnerEditor: function(dropDownWindow, srcElement) {
  var eventFromPopupOfInnerEditor = false;
  ASPx.GetControlCollection().ProcessControlsInContainer(dropDownWindow,
   function(control){
    if(control.calendarOwnerName) {
     var sharedCalendarPopup = control.GetCalendarOwner().GetDropDownWindow();
     if(ASPx.GetIsParent(sharedCalendarPopup, srcElement))
      eventFromPopupOfInnerEditor = true;
    }
  });
  return eventFromPopupOfInnerEditor;
 },
 RegisterDroppedDownControl: function(dropDownControl, droppedDownParentArray){
  var prevDropDownControl = this.GetDroppedDropDown();
  var areDroppedDownsCollectionParents = ASPx.Data.ArrayIndexOf(droppedDownParentArray, prevDropDownControl) != -1;
  if(prevDropDownControl != null && prevDropDownControl != dropDownControl && !areDroppedDownsCollectionParents)
   prevDropDownControl.OnOpenAnotherDropDown();
  if(this.droppedParentNames.length > 0) {
   var firstDropDownsNameToClose = this.FindFirstNameForClose(droppedDownParentArray);
   if(firstDropDownsNameToClose != "") {
    var childrenDropDownsToClose = this.GetDroppedDropDownParents(firstDropDownsNameToClose);
    this.ResetDroppedDownParentCollection(firstDropDownsNameToClose);
    this.CloseDroppedDownCollection(childrenDropDownsToClose.reverse());
   }
  }
  this.droppedControlName = dropDownControl.name;
  this.droppedParentNames = [ ];
  for(var i = 0; i < droppedDownParentArray.length; i++)
   this.droppedParentNames.push(droppedDownParentArray[i].name);
 },
 UnregisterDroppedDownControl: function(dropDownControl){
  if(this.droppedControlName == dropDownControl.name)
   this.ResetDroppedDownControl();
  if(this.IsDroppedDropDownParentExist(dropDownControl.name)) {
   var prevDropDownControl = this.GetDroppedDropDown();
   if(prevDropDownControl != null)
    prevDropDownControl.OnOpenAnotherDropDown();
   var childrenDropDownsToClose = this.GetDroppedDropDownParents(dropDownControl.name);
   this.ResetDroppedDownParentCollection(dropDownControl.name);
   ASPx.Data.ArrayRemoveAt(childrenDropDownsToClose, 0);
   this.CloseDroppedDownCollection(childrenDropDownsToClose.reverse());
  }
 },
 CloseDroppedDownCollection: function(dropDownParentArray) {
  for(var c = 0; c < dropDownParentArray.length; c++)
   dropDownParentArray[c].OnOpenAnotherDropDown();
 }
});
var DropDownAccessibilityExplanatoryTextManager = ASPx.CreateClass(ASPx.EditAccessibilityExplanatoryTextManager , {
 constructor: function(editor) {
  this.constructor.prototype.constructor.call(this, editor);
 },
 SetHelperLabel: function() {
  var pronounceText = this.editor.GetAccessibilityText();
  var labelElements = ASPx.FindAssociatedLabelElements(this.editor);
  if(labelElements.length > 0) {
   var labelText = labelElements.map(function(label) { return ASPx.GetInnerText(label); }).join(" ");
   if(pronounceText.indexOf(labelText) < 0)
    pronounceText = labelText + " " + pronounceText;
  }
  var pronounceElement = !!this.editor.accessibilityHelper ? 
   this.editor.accessibilityHelper.getItem(true) : 
   this.editor.GetAccessibilityAssistantElement();
  ASPx.Attr.SetAttribute(pronounceElement, "aria-label", pronounceText);
  var textElement = this.GetTextElement();
  if(ASPx.IsExists(textElement)) {
   if(!ASPx.IsExists(ASPx.Attr.GetAttribute(this.editor.GetInputElement(), 'aria-activedescendant')))
    pronounceElement = this.editor.GetInputElement();
   this.SetOrRemoveText([pronounceElement], textElement, true, false, false);
   setTimeout(function() {
    this.SetOrRemoveText([pronounceElement], textElement, false, false, false);
   }.aspxBind(this), 500);
  }
 }
});
var ASPxClientDropDownCommandEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function (command) {
  this.constructor.prototype.constructor.call(this);
  this.commandName = command;
 }
});
var dropDownCollection = null;
function aspxGetDropDownCollection() {
 if(dropDownCollection == null)
  dropDownCollection  = new ASPxClientDropDownCollection();
 return dropDownCollection;
}
ASPx.Ident.IsASPxClientDateEdit = function(obj) {
 return !!obj.isASPxClientDateEdit;
};
ASPx.DDMC_MD = function(name, evt) {
 var dd = ASPx.GetControlCollection().Get(name);
 if(dd)
  dd.OnMainCellMouseDown(evt);
};
ASPx.DDBPCShown = function(name){
 var cb = ASPx.GetControlCollection().Get(name);
 if(cb != null) cb.OnPopupControlShown();
};
ASPx.CBLBSelectedIndexChanged = function(name, evt){
 var cb = ASPx.GetControlCollection().Get(name);
 if(cb != null) cb.OnLBSelectedIndexChanged();
};
ASPx.CBLBItemMouseUp = function(name, evt){
 var cb = ASPx.GetControlCollection().Get(name);
 if(cb != null) cb.OnListBoxItemMouseUp(evt);
};
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseDownEventName, function(evt) {
 return aspxGetDropDownCollection().OnDocumentMouseDown(evt);
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function(evt) {
 return aspxGetDropDownCollection().OnDocumentMouseUp(evt);
});
window.ASPxClientDropDownEditBase = ASPxClientDropDownEditBase;
window.ASPxClientDropDownEdit = ASPxClientDropDownEdit;
ASPx.GetDropDownCollection = aspxGetDropDownCollection;
})();

(function() {
var calendarNameSuffix = "_C";
var timeEditNameSiffix = calendarNameSuffix + "_TE";
var clockNameSiffix = calendarNameSuffix + "_CL";
var lbIPostfixes = ['C', 'I', 'T'];
var verticalTimeSectionClassName = "dxeCalendarVerticalDETS";
var timeSectionFooterClassName = "dxeDETSF";
var calendarWithFullWidthChildsClassName = "dxeCalendarFullWidth";
var calendarWithAutoWidthChildsClassName = "dxeCalendarCollapsed";
var DefaultMinMaxRangeValues = {
 Min: -1,
 Max: 0
};
var ASPxDateRangeHelper = {
 GetCurrentRangeRestrictions: function(dateRangePair) {
  if (dateRangePair.isInRangeMode)
  return {
   startDate: dateRangePair.startDateEdit.GetDate(),
   endDate: dateRangePair.endDateEdit.GetDate()
  };
  else
   return {
    startDate: null,
    endDate: null
   };
 },
 IsBothRangeRestrictionsExist: function (rangeRestricts) {
  return rangeRestricts.startDate && rangeRestricts.endDate;
 },
 IsNegativeRange: function (rangeRestricts) {
  return this.IsBothRangeRestrictionsExist(rangeRestricts)
   && rangeRestricts.startDate > rangeRestricts.endDate;
 },
 IsOneRestrictionExistsOnly: function (rangeRestricts) {
  return this.IsStartRestrictionExistsOnly(rangeRestricts)
   || this.IsEndRestrictionExistsOnly(rangeRestricts);
 },
 IsStartRestrictionExistsOnly: function (rangeRestricts) {
  return rangeRestricts.startDate && !rangeRestricts.endDate;
 },
 IsEndRestrictionExistsOnly: function (rangeRestricts) {
  return !rangeRestricts.startDate && rangeRestricts.endDate;
 },
 AreRestrictionsOfSamePeriod: function (rangeRestricts, pickerType) {
  return this.IsBothRangeRestrictionsExist(rangeRestricts)
   && ASPxClientCalendar.AreDatesOfSamePeriod(rangeRestricts.startDate, rangeRestricts.endDate, pickerType);
 },
 GetFullDaysInCurrentRange: function(rangeRestricts) {
  var timezoneOffsetDifference = ASPx.DateUtils.GetTimeZoneOffsetDifference(rangeRestricts.startDate, rangeRestricts.endDate);
  var rangeLength = rangeRestricts.endDate - rangeRestricts.startDate + timezoneOffsetDifference;
  return Math.floor(rangeLength / ASPx.calendarMsPerDay);
 },
 GetRangeLength: function(currentDateEdit, pickerType) {
  var dateRangePair = this.GetDateEditPair(currentDateEdit);
  if(!dateRangePair.isStart) {
   var rangeRestricts = this.GetCurrentRangeRestrictions(dateRangePair);
   if(this.IsBothRangeRestrictionsExist(rangeRestricts) && !this.IsNegativeRange(rangeRestricts))
    return this.GetRangeLengthCore(rangeRestricts, pickerType);
  }
  return -1;
 },
 GetRangeLengthCore: function(rangeRestricts, pickerType) {
  if(pickerType == ASPx.DatePickerType.Days)
   return this.GetFullDaysInCurrentRange(rangeRestricts);
  if(pickerType == ASPx.DatePickerType.Months)
   return ASPxClientCalendar.GetOffsetInMonths(rangeRestricts.startDate, rangeRestricts.endDate);
  if(pickerType == ASPx.DatePickerType.Years)
   return ASPxClientCalendar.GetOffsetInYears(rangeRestricts.startDate, rangeRestricts.endDate);
  if(pickerType == ASPx.DatePickerType.Decades)
   return ASPxClientCalendar.GetOffsetInDecades(rangeRestricts.startDate, rangeRestricts.endDate);
  return -1;
 },
 NeedCorrectSecondDateOnDateChanging: function (rangeRestricts, isStartDateChanged, minRange) {
  if (this.IsNegativeRange(rangeRestricts))
   return true;
  var isSecondDateEmpty = isStartDateChanged && this.IsStartRestrictionExistsOnly(rangeRestricts)
   || !isStartDateChanged && this.IsEndRestrictionExistsOnly(rangeRestricts);
  return isSecondDateEmpty && minRange > DefaultMinMaxRangeValues.Min;
 },
 GetDateEditPair: function(currentDateEdit) {
  if(currentDateEdit.IsInDateRangeMode()) {
   var startDE = currentDateEdit.GetStartDateEdit();
   startDE = (startDE == null) ? currentDateEdit : startDE;
   var endDE = startDE.endDateEdit;
   var isCurrentDateEditStart = currentDateEdit === startDE;
   return {
    startDateEdit: startDE,
    endDateEdit: endDE,
    isStart: isCurrentDateEditStart,
    isInRangeMode: true
   };
  }
  else
   return {
    startDateEdit: currentDateEdit,
    endDateEdit: null,
    isStart: true,
    isInRangeMode: false
   };
 }
};
var DateRangeValidationPattern = ASPx.CreateClass(ASPx.ValidationPattern, {
 constructor: function (startDateEdit, endDateEdit) {
  this.constructor.prototype.constructor.call(this, endDateEdit.invalidDateRangeErrorText);
  this.startDateEdit = startDateEdit;
  this.endDateEdit = endDateEdit;
  this.pickerType = endDateEdit.pickerType;
 },
 EvaluateIsValid: function(value) {
  var dateEditPair = ASPxDateRangeHelper.GetDateEditPair(this.startDateEdit);
  var rangeRestricts = ASPxDateRangeHelper.GetCurrentRangeRestrictions(dateEditPair);
  if (this.endDateEdit.IsDateChangeProcessing()
   && ASPxDateRangeHelper.NeedCorrectSecondDateOnDateChanging(rangeRestricts, false, this.endDateEdit.minRange))
   return true;
  if (ASPxDateRangeHelper.IsOneRestrictionExistsOnly(rangeRestricts))
   return false;
  if (ASPxDateRangeHelper.IsBothRangeRestrictionsExist(rangeRestricts)) {
   var startDate = rangeRestricts.startDate;
   var endDate = rangeRestricts.endDate;
   return this.IsRangeFitToMinRange(startDate, endDate) && this.IsRangeFitToMaxRange(startDate, endDate);
  }
  return true;
 },
 IsRangeFitToMinRange: function(startDate, endDate) {
  return this.endDateEdit.minRange === DefaultMinMaxRangeValues.Min
   || ASPxClientCalendar.GetDateByOffset(startDate, this.endDateEdit.minRange, this.pickerType) <= endDate;
 },
 IsRangeFitToMaxRange: function(startDate, endDate) {
  return this.endDateEdit.maxRange === DefaultMinMaxRangeValues.Max
   || ASPxClientCalendar.GetDateByOffset(startDate, this.endDateEdit.maxRange, this.pickerType) >= endDate;
 },
});
var ASPxClientDateEdit = ASPx.CreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.dateFormatter = null;
  this.isASPxClientDateEdit = true;
  this.date = null;
  this.dateOnError = "u";
  this.allowNull = true;
  this.calendarOwnerName = null;
  this.calendarConsumerName = null;
  this.textWasLastTemporaryChanged = false;
  this.showTimeSection = false;
  this.enableAdaptiveTimeSection = true;
  this.adjustInnerControls = true;
  this.pasteTimerID = -1;
  this.keyUpProcessing = false;
  this.showOutOfRangeWarning = true;
  this.startDateEditName = "";
  this.minRange = DefaultMinMaxRangeValues.Min;
  this.maxRange = DefaultMinMaxRangeValues.Max;
  this.sharedParameters = new ASPx.CalendarSharedParameters();
  this.endDateEdit = null;
  this.calendarController = null;
  this.rollersController = null;
  this.viewContainer = null;
  this.pickerType = ASPx.DatePickerType.Days;
  this.hasDecadeDisplayFormat = false;
  this.showHourWheel = false;
  this.showMinuteWheel = false;
  this.showSecondWheel = false;
  this.showMillisecondWheel = false;
  this.DateChanged = new ASPxClientEvent();
  this.ParseDate = new ASPxClientEvent();
  this.CalendarCustomDisabledDate = new ASPxClientEvent();
  this.CalendarCellClick = new ASPxClientEvent();
  this.CalendarShowing = new ASPxClientEvent();
  this.ValueSet = new ASPxClientEvent();
 },
 SetData: function(data){
  ASPxClientTextEdit.prototype.SetData.call(this, data);
  if(data.sharedParameters)
   this.SetProperties(data.sharedParameters, this.sharedParameters);
 },
 Initialize: function() {
  this.InitializeControllers();
  this.GetActiveController().InitializeViewHandlers();
  ASPxClientDropDownEditBase.prototype.Initialize.call(this);
  var startDateEdit = this.GetStartDateEdit();
  if(startDateEdit)
   this.GetActiveController().AssignDateRangeMode(startDateEdit);
  this.GetActiveController().AttachToDateEditClientEvents(startDateEdit);
  this.InitializeSharedParameters();
 },
 InitializeControllers: function() {
  var shouldDisplayCalendarOnInit = this.ShouldDisplayCalendarOnInit();
  if(this.ddScrPicker !== ASPx.DROPDOWN_ELEMENT_VISIBILITY.Always) {
   this.calendarController = new DateEditCalendarController(this);
   this.calendarController.Initialize(shouldDisplayCalendarOnInit);
  }
  if(this.ddScrPicker !== ASPx.DROPDOWN_ELEMENT_VISIBILITY.Never) {
   this.rollersController = this.CreateScrollPickerController(this.spOptions); 
   this.rollersController.Initialize(!shouldDisplayCalendarOnInit);   
  }
 },
 InitializeCalendarController: function() {
  if(this.ddScrPicker === ASPx.DROPDOWN_ELEMENT_VISIBILITY.Always)
   return;
  this.calendarController = new DateEditCalendarController(this);
  this.calendarController.Initialize();
 },
 ShouldDisplayCalendarOnInit: function() {
  return this.ddScrPicker === ASPx.DROPDOWN_ELEMENT_VISIBILITY.Never || this.ddScrPicker === ASPx.DROPDOWN_ELEMENT_VISIBILITY.ModalDropDown;
 },
 ShouldDisplayCalendar: function() {
  return this.ddScrPicker === ASPx.DROPDOWN_ELEMENT_VISIBILITY.Never ||
      this.ddScrPicker === ASPx.DROPDOWN_ELEMENT_VISIBILITY.DropDown && this.isDropDownModal() ||
      this.ddScrPicker === ASPx.DROPDOWN_ELEMENT_VISIBILITY.ModalDropDown && !this.isDropDownModal();
 },
 ShouldDisplayRoller: function() {
  return !this.ShouldDisplayCalendar();
 },
 InitializeRollerController: function() {
  if(this.ddScrPicker === ASPx.DROPDOWN_ELEMENT_VISIBILITY.Never)
   return;
  this.rollersController = this.CreateScrollPickerController(this.spOptions);
  this.rollersController.Initialize();
 },
 GetActiveController: function() {
  if(this.calendarController && this.calendarController.IsActive())
   return this.calendarController;
  return this.rollersController;
 },
 CreateScrollPickerController: function(spOptions) {
  return new DateEditScrollPickerController(this, spOptions);
 },
 UpdateActiveController: function(onDropDownShowing) {
  if(!this.calendarController || !this.rollersController)
   return;
  var shouldDisplayCalendar = this.ShouldDisplayCalendar();  
  this.calendarController.SetActive(shouldDisplayCalendar);
  this.rollersController.SetActive(!shouldDisplayCalendar);
  this.GetActiveController().SetSelectedDate(this.date, onDropDownShowing);
 },
 GetViewContainer: function() {
  var popupControl = this.GetPopupControl();
  if(!popupControl)
   return null;
  if(!this.viewContainer)
   this.viewContainer = popupControl.GetContentContainer(-1);
  return this.viewContainer;
 },
 IsInDateRangeMode: function() {
  var startDateEdit = this.GetStartDateEdit();
  return startDateEdit !== null || this.endDateEdit !== null;
 },
 MinOrMaxRangeExist: function() {
  return this.minRange !== DefaultMinMaxRangeValues.Min || this.maxRange !== DefaultMinMaxRangeValues.Max;
 },
 InitializeSharedParameters: function() {
  this.sharedParameters.currentDateEdit = this;
  this.sharedParameters.DaysSelectingOnMouseOver.AddHandler(function(s, e) {
   this.OnCalendarDayMouseOver(s, e);
  }.aspxBind(this));
  this.sharedParameters.VisibleDaysMouseOut.AddHandler(function(s, e) {
   UTILS.SelectRangeInCalendar(s, false);
  }.aspxBind(this));
  if(this.GetShowTimeSection())
   this.sharedParameters.CalendarSelectionChangedInternal.AddHandler(function(s, e) {
    UTILS.SelectRangeInCalendar(s, false);
   }.aspxBind(this));
 },
 OnCalendarDayMouseOver: function(targetCalendar, e) {
  var dateRangePair = ASPxDateRangeHelper.GetDateEditPair(ASPxClientDateEdit.active);
  if(!dateRangePair.isInRangeMode) {
   e.cancel = true;
   return;
  }
  var rangeRestricts = ASPxDateRangeHelper.GetCurrentRangeRestrictions(dateRangePair);
  var isRangeNegative = ASPxDateRangeHelper.IsNegativeRange(rangeRestricts);
  var isOverDateCorrectForSelection = false;
  if (!isRangeNegative) {
   var requiredStartDate = dateRangePair.isStart ? rangeRestricts.endDate : rangeRestricts.startDate;
   e.selectionStartDate = requiredStartDate ? ASPxClientCalendar.CloneDate(requiredStartDate) : null;
   isOverDateCorrectForSelection = e.selectionStartDate
    && (dateRangePair.isStart && e.selectionStartDate >= e.overDate
    || !dateRangePair.isStart && e.selectionStartDate <= e.overDate);
  }
  e.cancel = isRangeNegative || !e.selectionStartDate || !isOverDateCorrectForSelection;
 },   
 InlineInitialize: function(){
  this.InitSpecialKeyboardHandling();
  ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
  this.lastValue = this.GetInputElement().value;
  if (this.UseRestrictions() && this.showOutOfRangeWarning)
   this.EnsureOutOfRangeWarningManager();
 },
 GetStartDateEdit: function() {
  return this.startDateEditName ? ASPx.GetControlCollection().Get(this.startDateEditName) : null;
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing) {
  if((!causedByWindowResizing || !this.pcIsShowingNow) && (this.GetShowTimeSection() || !this.ShouldDisplayCalendar()))
   this.ApplyTimeSectionDateChanges(true);
  ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
 },
 UseRestrictions: function() {
  return this.GetMinDate() || this.GetMaxDate();
 },
 OnDropDownCore: function(evt) {
  ASPxClientDropDownEditBase.prototype.OnDropDownCore.call(this, evt);
  this.GetActiveController().OnDropDownCore();
 },
 CreateUpdateCallback: function(result) {
  this.CreateCallback(this.sharedParameters.GetUpdateCallbackParameters());
 },
 OnCallback: function(result) {
  var calendar = this.GetCalendar();
  if(calendar != null)
   calendar.OnCallback(result);
 },
 ShowDropDownArea: function(isRaiseEvent) {
  this.UpdateActiveController(true);
  this.GetActiveController().OnBeforeShowDropDown(this.date);
  ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);  
  this.GetActiveController().OnAfterShowDropDown();
 },
 BrowserWindowResizeSubscriber: function() {
  return this.droppedDown && this.IsAdaptiveTimeSectionEnabled();
 },
 OnBrowserWindowResize: function(e) {
  this.GetActiveController().OnBrowserWindowResize();
 },
 BeforePopupControlResizing: function() {
  this.adjustTimeSection();
 },
 AfterPopupControlShown: function() {
  if(!this.isDropDownModal())
   this.adjustTimeSection(true);
 },
 adjustTimeSection: function(force) {
  var calendarOwner = this;
  if(this.calendarOwnerName)
   calendarOwner = this.GetCalendarOwner();
  if((force || calendarOwner.adjustInnerControls) && calendarOwner.GetTimeEdit()){
   calendarOwner.GetClock().AdjustControl();
   calendarOwner.GetTimeEdit().AdjustControl();
   calendarOwner.adjustInnerControls = false;
  }
 },
 onDropDownModalChanged: function(enabled) {
  ASPxClientDropDownEditBase.prototype.onDropDownModalChanged.call(this, enabled);
  this.UpdateActiveController();
  this.GetActiveController().onDropDownModalChanged(enabled);
  this.adjustTimeSection(true);
 },
 GetPopupControl: function() { 
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner != null)
   return calendarOwner.GetPopupControl();
  return ASPxClientDropDownEditBase.prototype.GetPopupControl.call(this);
 },
 OnPopupControlShown: function() {
  if(this.calendarConsumerName != null)
   ASPx.GetControlCollection().Get(this.calendarConsumerName).OnPopupControlShown();
  else  
   ASPxClientDropDownEditBase.prototype.OnPopupControlShown.call(this);
  this.GetActiveController().OnPopupControlShown();
 },
 GetCalendar: function() { 
  var name = this.GetDropDownInnerControlName(calendarNameSuffix);
  return ASPx.GetControlCollection().Get(name);
 },
 GetTimeEdit: function() { 
  var name = this.GetDropDownInnerControlName(timeEditNameSiffix);
  return ASPx.GetControlCollection().Get(name);
 },
 GetClock: function() {
  var name = this.GetDropDownInnerControlName(clockNameSiffix);
  return ASPx.GetControlCollection().Get(name);
 },
 GetCalendarOwner: function() {
  if(!this.calendarOwnerName)
   return null;
  return ASPx.GetControlCollection().Get(this.calendarOwnerName);
 },
 GetShowTimeSection: function(){
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner)
   return calendarOwner.showTimeSection;
  return this.showTimeSection;
 },
 IsAdaptiveTimeSectionEnabled: function() {
  if(!this.GetShowTimeSection())
   return false;
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner)
   return calendarOwner.enableAdaptiveTimeSection;
  return this.enableAdaptiveTimeSection;
 },
 GetFormattedDate: function(date) {
  date = date || this.date;
  if(this.maskInfo != null)
   return this.maskInfo.GetValue();
  if(date == null)
   return this.focused ? "" : this.nullText;
  return this.dateFormatter.Format(date);
 },
 SetTextWasLastTemporaryChanged: function(value){
  this.textWasLastTemporaryChanged = value;
 },
 GetTextWasLastTemporaryChanged: function(){
  return this.textWasLastTemporaryChanged;
 },
 RaiseValueChangedEvent: function(isInternal) {
  if(!this.isInitialized) return false;
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseDateChanged(processOnServer, isInternal);
  return processOnServer;
 },
 OnApplyChanges: function(){
  if(this.focused)
   this.OnTextChanged();
 },
 OnCalendarSelectionChanging: function(date, select) {
  if(this.GetShowTimeSection())
   return;
  if(!this.GetCalendar().isDateChangingByKeyboard) {
   this.HideDropDownArea(true);
   if(date != null)
    this.ApplyExistingTime(date);
   this.ChangeDate(date);
   if(select)
    ASPx.Selection.Set(this.GetInputElement());
   this.lastValue = this.GetInputElement().value;
  }
 },
 OnCalendarCustomDisabledDate: function(e) {
  this.RaiseCalendarCustomDisabledDate(e);
 },
 OnCustomDisabledDate: function(date) {
  return this.RaiseCustomDisabledDateEvent(date);
 },
 RaiseCustomDisabledDateEvent: function(date) {
  var args = new ASPxClientCalendarCustomDisabledDateEventArgs(date);
  this.CalendarCustomDisabledDate.FireEvent(this, args);
  return args;
 },
 RaiseCalendarCellClick: function(e) {
  if(!this.CalendarCellClick.IsEmpty())
   this.CalendarCellClick.FireEvent(this, e);
 },
 ForceRefocusTimeSectionTimeEdit: function(mouseDownSource) {
  var dateEdit = this;
  if(this.calendarConsumerName)
   dateEdit = ASPx.GetControlCollection().Get(this.calendarConsumerName);
  var timeEdit = dateEdit.GetTimeEdit();
  var isTimeEditElement = timeEdit.IsEditorElement(mouseDownSource);
  if(isTimeEditElement && !timeEdit.IsElementBelongToInputElement(mouseDownSource)) { 
   if(!ASPx.Browser.VirtualKeyboardSupported) 
    timeEdit.ForceRefocusEditor();
   return;
  }
  if(!dateEdit.IsEditorElement(mouseDownSource)) {
   if(ASPx.Browser.VirtualKeyboardSupported && !isTimeEditElement) {
    this.lockLostFocus = false;
    if(ASPx.VirtualKeyboardUI.focusableInputElementIsActive(timeEdit)) {
     timeEdit.GetInputElement().blur();
    } else {
     ASPx.VirtualKeyboardUI.lostAppliedFocusOfEditor();
    }
   }
   return;
  }
  if(ASPx.Browser.VirtualKeyboardSupported) {
   this.lockLostFocus = true;
  } else {
   dateEdit.ForceRefocusEditor();
   var input = timeEdit.GetInputElement();
   if(input)
    input.blur();
   window.setTimeout(function() { ASPx.SetFocusedEditor(dateEdit); }, 0);
  }
 },
 ApplyTimeSectionDateChanges: function(isApply) {
  if(this.GetReadOnly())
   return;
  var date = isApply ? this.GetActiveController().GetSelectedDate() : this.GetDate();
  this.ApplyParsedDate(date, isApply);
 },
 IsEditorElement: function(element) {
  var timeEdit = this.GetTimeEdit();
  if(this.GetShowTimeSection() && timeEdit && ASPx.GetIsParent(timeEdit.GetMainElement(), element)) {
   this.lockLostFocus = true;
   return false;
  }
  return ASPxClientDropDownEditBase.prototype.IsEditorElement.call(this, element);
 },
 OnFocus: function() {
  this.GetActiveController().SetActiveControl();
  ASPxClientDropDownEditBase.prototype.OnFocus.call(this);
  if(!ASPx.GetControlCollection().InCallback())
   this.SetTextChangingTimer();
 },
 OnLostFocusCore: function() {
  if(!this.isFocusUnlocked())
   return;
  ASPxClientDropDownEditBase.prototype.OnLostFocusCore.call(this);
  this.ClearTextChangingTimer();
  if(this.outOfRangeWarningManager)
   this.outOfRangeWarningManager.HideOutOfRangeWarningElement();
 },
 isFocusUnlocked: function() {
  return this.ensureFocusUnlockedOnShowTimeSection() && this.ensureFocusUnlockedOnShowDropDown();
 },
 ensureFocusUnlockedOnShowTimeSection: function() {
  var result = true;
  if(this.GetShowTimeSection() && this.lockLostFocus) {
   this.lockLostFocus = false;
   result = false;
  }
  return result;
 },
 ensureFocusUnlockedOnShowDropDown: function() {
  var result = true;
  if(this.accessibilityCompliant && ASPx.Browser.IE) {
   var calendar = this.GetCalendar();
   var activeElement = ASPx.GetActiveElement();
   if(calendar) {
    var isAccessibilityAssistantElementFocused = calendar.GetAccessibilityAssistantElement() === activeElement; 
    var isAnyCalendarElementFocused = ASPx.GetIsParent(calendar.GetMainElement(), activeElement); 
    if(isAccessibilityAssistantElementFocused || isAnyCalendarElementFocused) {
     this.ForceRefocusEditor();
     result = false;
    }
   }
  }
  return result;
 },
 OnTimeEditLostFocus: function() {
  this.OnLostFocusCore();
 },
 OnTimeEditEnter: function() {
  this.ForceRefocusEditor();
  this.ApplyTimeSectionDateChanges(true);
  this.HideDropDownArea(true);
  ASPx.Selection.Set(this.GetInputElement());
 },
 OnTimeEditEsc: function() {
  this.ForceRefocusEditor();
  this.HideDropDownArea(true);
 },
 OnTimeEditTab: function(shiftKey) {
  if(shiftKey && !this.GetCalendarOwner())
   this.ForceRefocusEditor();
  this.ApplyTimeSectionDateChanges(true);
  this.HideDropDownArea(true);
 },
 OnApplyButtonClick: function() {
  this.ApplyTimeSectionDateChanges(true);
  this.HideDropDownArea(true);
 },
 OnTimeSectionCancelClick: function() {
  this.ApplyTimeSectionDateChanges(false);
  this.HideDropDownArea(true);
 },
 OnTimeSectionClearClick: function() {
  this.ChangeDate(null);
  this.GetCalendar().ResetLastSelectedDate();
  this.HideDropDownArea(true);
 },
 OnTimeEditInternalValueChanging: function(date) {
  var clock = this.GetClock();
  if(clock)
   clock.SetDate(date);
 },
 OnArrowUp: function(evt){ 
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowUp.call(this, evt);
  if(!isProcessed && this.droppedDown)
   return this.OnCalendarMethod("OnArrowUp", evt);       
  return false;
 },
 OnArrowDown: function(evt){
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowDown.call(this, evt);
  if(!isProcessed && this.droppedDown)
   return this.OnCalendarMethod("OnArrowDown", evt);
  return false;
 },
 OnArrowLeft: function(evt){
  if(this.droppedDown) {
   this.OnCalendarMethod("OnArrowLeft", evt);
   return true;
  }
  return false;
 },
 OnArrowRight: function(evt){
  if(this.droppedDown) { 
   this.OnCalendarMethod("OnArrowRight", evt);
   return true;
  }
  return false;
 },
 OnPageUp: function(evt){
  if(this.droppedDown) { 
   this.OnCalendarMethod("OnPageUp", evt);
   return true;
  }
  return false;  
 },
 OnPageDown: function(evt){
  if(this.droppedDown) {
   this.OnCalendarMethod("OnPageDown", evt);
   return true;
  }
  return false;  
 },
 OnEndKeyDown: function(evt) {
  if(this.droppedDown) {
   this.OnCalendarMethod("OnEndKeyDown", evt);
   return true;
  }
  return false;
 },
 OnHomeKeyDown: function(evt) {
  if(this.droppedDown) {
   this.OnCalendarMethod("OnHomeKeyDown", evt);
   return true;
  }
  return false; 
 },
 OnCalendarMethod: function(methodName, evt){
  var calendar = this.GetCalendar();
  if(!calendar)
   return;
  if(!calendar.IsFastNavigationActive())
   this.SetTextWasLastTemporaryChanged(false);
  return calendar[methodName](evt);
 },
 GetDateByCurrentValueString: function(valueString) {
  var inputValueParseResult = this.dateFormatter.Parse(valueString);
  return inputValueParseResult ? inputValueParseResult : null;
 },
 OnKeyDown: function(evt) {
  ASPxClientDropDownEditBase.prototype.OnKeyDown.call(this, evt);
  this.keyUpProcessing = true;
 },
 OnKeyUp: function(evt) {
  if(ASPx.FilteringUtils.EventKeyCodeChangesTheInput(evt)){
   this.SetTextWasLastTemporaryChanged(true);
   if (this.UseRestrictions() && this.outOfRangeWarningManager) {
    var valueString = this.GetInputElement().value;
    this.lastValue = valueString;
    this.UpdateOutOfRangeWarning(valueString);
   }
  }
  this.keyUpProcessing = false;
  this.EnsureClearButtonVisibility();
 },
 UpdateOutOfRangeWarning: function(valueString) {
  var currentDate = this.GetDateByCurrentValueString(valueString);
  currentDate = this.CorrectDateByPickerType(currentDate);
  if(this.maskInfo && ASPx.DateUtils.AreDatesEqualExact(currentDate, new Date(100, 0, 1)))
   currentDate = null;
  this.outOfRangeWarningManager.UpdateOutOfRangeWarningElementVisibility(currentDate);
 },
 SetTextChangingTimer: function () {
  if(this.pasteTimerID === -1)
   this.pasteTimerID = ASPx.Timer.SetControlBoundInterval(this.OnTextChangingCheck, this, ASPx.PasteCheckInterval);
 },
 ClearTextChangingTimer: function () {
  this.pasteTimerID = ASPx.Timer.ClearInterval(this.pasteTimerID);
 },
 OnTextChangingCheck: function (evt) {
  var input = this.GetInputElement();
  if (!input)
   return;
  var curValueString = input.value.toString();
  if (this.lastValue != curValueString && !this.keyUpProcessing) {
   var isChromeOnAndroid = ASPx.Browser.AndroidMobilePlatform && ASPx.Browser.Chrome;
   if (!isChromeOnAndroid)
    this.OnPaste(curValueString);
  }
 },
 OnPaste: function (valueString) {
  this.lastValue = valueString;
  if(this.UseRestrictions() && this.outOfRangeWarningManager)
   this.UpdateOutOfRangeWarning(valueString);
 },
 OnEnter: function() {
  this.enterProcessed = false; 
  if(this.droppedDown) {
   this.GetActiveController().OnEnter();
   this.enterProcessed = true;
  }
  else
   this.OnApplyChanges();
  this.SetTextWasLastTemporaryChanged(false);
  return this.enterProcessed;
 },
 OnEscape: function() {
  if(this.droppedDown)
   this.GetActiveController().OnEscape();
  else
   this.ChangeDate(this.date);  
  this.SetTextWasLastTemporaryChanged(false);
  return true;
 },
 OnTab: function(evt){
  if(!this.droppedDown) return;
  this.GetActiveController().OnTab(evt);
 },
 HideDropDownArea: function(isRaiseEvent) {
  if(this.accessibilityCompliant && this.focused)
   this.OnHideCalendarAccessible();
  var calendar = this.GetCalendar();
  if(calendar)
   calendar.EnsureHideFastNavigation();
  ASPxClientDropDownEditBase.prototype.HideDropDownArea.call(this, isRaiseEvent);
 },
 OnTextChanged: function() {
  if(!this.IsFocusEventsLocked() || !this.droppedDown) {
   ASPxClientDropDownEditBase.prototype.OnTextChanged.call(this);
   var newText = this.GetInputElement().value;
   if(this.accessibilityCompliant) {
    if(!newText)
     newText = ASPx.AccessibilitySR.BlankEditorText;
    var accessibilityElement = this.GetAccessibilityAssistantElement();
    ASPx.Attr.SetAttribute(accessibilityElement, "aria-label", newText);
   }
  }
 },
 IsMaskInfoEmpty: function() {
  return this.maskInfo && (this.maskInfo.IsEmpty() || this.GetValue() == null);
 },
 OnMouseWheel: function(evt) {
  var source = ASPx.Evt.GetEventSource(evt);
  var parentWheel = ASPx.GetParentByClassName(source, "dxsp-wheel");
  if(!parentWheel)
   ASPxClientDropDownEditBase.prototype.OnMouseWheel.call(this, evt);
 },
 ParseValue: function() { 
  this.ParseValueCore(true);
 },
 ParseValueCore: function(raiseChangedEvent) {
  var date;
  if(this.maskInfo != null) {   
   date = ASPx.MaskDateTimeHelper.GetDate(this.maskInfo, this.date);
  } else {
   var text = this.GetInputElement().value;
   var userParseResult = this.GetUserParsedDate(text);
   if(userParseResult !== false) {
    date = userParseResult;
   } else {
    if(text == null || text == "" || text == this.nullText)
     date = null;
    else
     date = !this.focused && raiseChangedEvent ? this.date : this.dateFormatter.ParseAndMergeWithDate(text, this.date);
   }   
  }
  if(this.GetShowTimeSection() && !this.HasTimeInEditFormat() && date)
   this.ApplyExistingTime(date);
  date = this.CorrectDateByPickerType(date);
  this.ApplyParsedDate(date, raiseChangedEvent);
  this.lastValue = this.GetInputElement().value;
 },
 GetUserParsedDate: function(text) {
  if(!this.ParseDate.IsEmpty()) {
   var args = new ASPxClientParseDateEventArgs(text);
   this.ParseDate.FireEvent(this, args);
   if(args.handled)
    return args.date;
  }
  return false;
 },
 ApplyParsedDate: function(date, raiseChangedEvent) {
  if(date === false || !ASPxClientCalendarDateDisabledHelper.IsDateInRange(this.sharedParameters, date) ||
   this.IsDateDisabled(date)) {
   switch(this.dateOnError) {
    case "n":
     date = null;
     break;
    case "t":
     date = new Date();
     break;
    default:
     date = this.date;
     break;
   }
  }
  if(!this.allowNull && date == null)
   date = this.date;
  if(raiseChangedEvent)
   this.ChangeDate(date);  
  else
   this.SetValue(date);
 },
 CorrectDateByPickerType: function(date) {
  return ASPx.DateUtils.CorrectDateByPickerType(date, this.pickerType);
 },
 SetSelectionOnToggleTextDecoration: function(input, sel) {
  if(this.maskInfo != null && this.GetValue() === null)
   sel.endPos = sel.startPos = 0;
  ASPxClientDropDownEditBase.prototype.SetSelectionOnToggleTextDecoration.call(this, input, sel);
 },
 IsDateDisabled: function(date) {
  var calendar = this.GetCalendar();
  var currentViewType = calendar ? calendar.currentViewType : this.pickerType;
  return ASPxClientCalendarDateDisabledHelper.IsDateDisabled(this.sharedParameters, date, function(d) { return this.OnCustomDisabledDate(d); }.aspxBind(this), currentViewType, this.pickerType);
 },
 HasTimeInEditFormat: function() {
  if(this.maskInfo) {
   for(var i = 0; i < this.maskInfo.parts.length; i++) {
    var part = this.maskInfo.parts[i];
    if(part.dateTimeRole && part.dateTimeRole.toLowerCase() == "h")
     return true;
   }
   return false;
  }
  return this.dateFormatter.mask.toLowerCase().indexOf("h") != -1;
 },
 ApplyExistingTime: function(date) {
  if(this.date == null)  return;  
  var savedDay = date.getDate();
  date.setHours(this.date.getHours());
  var diff = date.getDate() - savedDay;
  if(diff != 0) {
   var sign = (diff == 1 || date.getDate() == 1) ? -1 : 1;
   date.setTime(date.getTime() + sign * 3600000);
  }
  date.setMinutes(this.date.getMinutes());
  date.setSeconds(this.date.getSeconds());
  date.setMilliseconds(this.date.getMilliseconds());
 },
 GetValue: function() {
  return this.date;
 },
 GetLastSuccesfullValue: function() {
  return this.GetValue();
 },
 GetValueString: function() {
  return this.date != null ? ASPx.DateUtils.GetInvariantDateTimeString(this.date) : null;
 },
 SetValue: function(date, isInputUpdate) {
  date = this.CorrectDateByPickerType(date);
  if(!isInputUpdate)
   this.date = date;
  this.SetValueInternal(date, isInputUpdate);
  this.RaiseValueSet(isInputUpdate);
 },
 SetValueInternal: function(date, isInputUpdate) {
  if(this.maskInfo != null)
   this.SetMaskValue(date);
  else
   this.SetValueCore(date, isInputUpdate);
  if(this.styleDecoration)
   this.styleDecoration.Update();
 },
 SetMaskValue: function(date) {
  ASPx.MaskDateTimeHelper.SetDate(this.maskInfo, date);
  this.ApplyMaskInfo(false);
  this.SavePrevMaskValue();
 },
 SetValueCore: function(date, isInputUpdate) {
  this.GetInputElement().value = this.GetFormattedDate(date);
  if(!isInputUpdate)
   this.SyncRawValue();
  if(this.CanApplyTextDecorators())
   this.ToggleTextDecoration();
 },
 RaiseValueSet: function(isInputUpdate) {
  if(!isInputUpdate && !this.ValueSet.IsEmpty())
   this.ValueSet.FireEvent(this);
 },
 ChangeDate: function(date) { 
  var changed = !ASPx.DateUtils.AreDatesEqualExact(this.date, date);
  this.SetValue(date);
  var forceValueChanged = this.IsValueChangeForced() && !this.IsValueChanging();
  if(changed || forceValueChanged) {
   try {
    this.StartValueChanging();
    this.dateChangeProcessing = true;
    this.RaisePersonalStandardValidation();
    this.OnValueChanged();
   }
   finally {
    this.dateChangeProcessing = false;
    this.EndValueChanging();
   }
  }
 },
 IsDateChangeProcessing: function() {
  return this.dateChangeProcessing;
 },
 getProcessOnServerOnValueChanged: function() {
  var dateRangePair = ASPxDateRangeHelper.GetDateEditPair(this);
  if(!dateRangePair.isInRangeMode)
   return ASPxClientDropDownEditBase.prototype.getProcessOnServerOnValueChanged.call(this);
  var processOnServer = this.RaiseValueChangedEvent();
  return this.RaiseValidationInternal() && processOnServer;
 },
 GetText: function() {
  return this.GetFormattedDate();
 },
 SetText: function(value) {
  ASPxClientTextEdit.prototype.SetValue.call(this, value);
  if(this.maskInfo == null)
   this.ParseValueCore(false);
 },
 GetFormattedText: function() {
  if(this.maskInfo != null)
   return this.GetMaskDisplayText();
  if(this.date == null)
   return this.nullText;
  if(this.displayFormat != null)
   return this.GetDisplayFormatText(this.date);
  return this.GetFormattedDate();
 },
 ClearEditorValueByClearButtonCore: function() {
  if(this.allowNull === false) 
   this.SetValue(this.GetLastSuccesfullValue());
  else
   ASPxClientDropDownEditBase.prototype.ClearEditorValueByClearButtonCore.call(this);
 },
 ShouldCancelMaskKeyProcessing: function(htmlEvent, keyDownInfo) {
  if(htmlEvent.altKey)
   return true;
  if(ASPxClientDropDownEditBase.prototype.ShouldCancelMaskKeyProcessing.call(this, htmlEvent, keyDownInfo))
   return true;  
  if(!this.droppedDown)
   return false;
  if(this.GetShowTimeSection() && htmlEvent.keyCode == ASPx.Key.Tab)
   return false;
  return !ASPx.MaskManager.IsPrintableKeyCode(keyDownInfo) 
   && keyDownInfo.keyCode != ASPx.Key.Backspace
   && keyDownInfo.keyCode != ASPx.Key.Delete;
 },
 DecodeRawInputValue: function(value) {
  if(value == "N") return null;
  var date = new Date();
  date.setTime(Number(value));
  var result = ASPx.DateUtils.ToUtcTime(date);
  var offsetDiff = ASPx.DateUtils.GetTimeZoneOffsetDifference(result, date);
  if(offsetDiff !== 0)
   result.setTime(result.valueOf() + offsetDiff);
  return result;
 },
 SyncRawValue: function() {
  this.SetRawValue(this.date == null ? "N" : ASPx.DateUtils.ToLocalTime(this.date).valueOf());
 }, 
 HasTextDecorators: function() {
  return (this.maskInfo != null && this.date == null) || ASPxClientDropDownEditBase.prototype.HasTextDecorators.call(this);
 },
 GetDisplayFormatText: function(value) {
  if(this.pickerType == ASPx.DatePickerType.Decades && this.hasDecadeDisplayFormat && value && value.getFullYear)
   return ASPx.DateUtils.GetYearRangeFormatString(value.getFullYear(), 10);
  return ASPxClientDropDownEditBase.prototype.GetDisplayFormatText.call(this, value);
 },
 GetMaskDisplayText: function() {
  if(!this.focused) {
   if(this.date == null)
    return this.nullText;
   if(this.HasTextDecorators())
    return this.GetDecoratedText(this.date);
  }
  return this.maskInfo.GetText();
 },
 ToggleTextDecorationCore: function() {
  if(this.maskInfo != null) {
   this.ApplyMaskInfo(false);
  } else {
   var text = this.focused ? this.GetFormattedDate() : this.GetFormattedText();
   var input = this.GetInputElement();
   if(input.value != text)
    input.value = text;
  }
 },
 BeginShowMaskHint: function() {
 },
 EnsureOutOfRangeWarningManager: function () {
  this.ensureOutOfRangeWarningManager(this.GetMinDate(), this.GetMaxDate(), null, null, this.dateFormatter);
 },
 SetReadOnlyInternal: function(readOnly) {
  ASPxClientDropDownEditBase.prototype.SetReadOnlyInternal.call(this, readOnly);
  var calendar = this.GetCalendar();
  if(calendar)
   calendar.SetReadOnly(readOnly);
  var timeEdit = this.GetTimeEdit();
  if(timeEdit)
   timeEdit.SetReadOnly(readOnly);
 },
 OnHideCalendarAccessible: function() {
  var inputElement = this.GetInputElement();
  var accessibilityElement = this.GetAccessibilityAssistantElement();
  var pronounceTimeout = 300;
  ASPx.Attr.RemoveAttribute(inputElement, "aria-activedescendant");
  window.setTimeout(function() { 
   ASPx.Attr.SetAttribute(accessibilityElement, "aria-label", inputElement.value);
   ASPx.Attr.SetAttribute(inputElement, "aria-activedescendant", accessibilityElement.id);
  }, pronounceTimeout);
 },
 onDropDownApplyCommandClick: function() {
  this.OnApplyButtonClick();
 },
 onDropDownCloseCommandClick: function() {
  this.OnTimeSectionCancelClick();
 },
 ensureDropDownClosedOnLostFocus: function() {
  if(this.accessibilityCompliant && this.GetShowTimeSection())
   return;
  ASPxClientDropDownEditBase.prototype.ensureDropDownClosedOnLostFocus.call(this);
 },
 RaiseDateChanged: function(processOnServer, isInternal) {
  if(!this.DateChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   if (isInternal)
    args.isInternal = true;
   this.DateChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseCalendarCustomDisabledDate: function(e) {
  this.CalendarCustomDisabledDate.FireEvent(this, e);
 },
 SetDate: function(date) {
  this.SetValue(date);
  if(this.droppedDown)
   this.GetActiveController().SetSelectedDate(this.date);
 },
 GetDate: function() {
  return this.date ? new Date(this.date.valueOf()) : null;
 },
 GetRangeDayCount: function () {
  return ASPxDateRangeHelper.GetRangeLength(this, ASPx.DatePickerType.Days);
 },
 GetRangeLength: function() {
  return ASPxDateRangeHelper.GetRangeLength(this, this.pickerType);
 },
 GetMinDate: function() {
  return this.sharedParameters.minDate;
 },
 SetMinDate: function(date) {
  this.SetMinDateCore(date);
  this.ownMinDate = this.GetMinDate();
 },
 SetMinDateCore: function(date) {
  var newMinDate = this.CorrectDateByPickerType(date);
  this.sharedParameters.minDate = newMinDate;
  if(this.droppedDown) {
   var calendar = this.GetCalendar();
   if(calendar)
    calendar.SetMinDate(newMinDate);
  }
  if(this.showOutOfRangeWarning) {
   this.EnsureOutOfRangeWarningManager();
   this.outOfRangeWarningManager.SetMinValue(this.GetMinDate());
  }
  if(this.droppedDown)
   this.GetActiveController().UpdateMinMaxYears();
 },
 GetMaxDate: function() {
  return this.sharedParameters.maxDate;
 },
 SetMaxDate: function(date) {
  var newMaxDate = this.CorrectDateByPickerType(date);
  this.sharedParameters.maxDate = newMaxDate;
  if(this.droppedDown) {
   var calendar = this.GetCalendar();
   if(calendar)
    calendar.SetMaxDate(newMaxDate);
  }
  if(this.showOutOfRangeWarning) {
   this.EnsureOutOfRangeWarningManager();
   this.outOfRangeWarningManager.SetMaxValue(this.GetMaxDate());
  }
  if(this.droppedDown)
   this.GetActiveController().UpdateMinMaxYears();
 },
 GetDropDownHeight: function(){
  return this.GetActiveController().GetDropDownHeight();
 },
 GetDropDownWidth: function(){
  return this.GetActiveController().GetDropDownWidth();
 },
 getThemeClassName: function() {
  var controlClassName = "dxeButtonEdit_";
  var controlClassNames = ASPx.GetClassNameList(this.GetMainElement());
  var themedClassName = controlClassNames
   .filter(function(className) { return className.indexOf(controlClassName) === 0; })[0];
  return themedClassName && themedClassName.substr(controlClassName.length);
 },
});
var DateEditController = ASPx.CreateClass(null, {
 constructor: function(owner) {
  this.owner = owner;
  this.active = false;
  this.isComboBoxList = true;
 },
 Initialize: function(toActivate) {
  this.SetActive(toActivate);
 },
 SetActive: function(active) {
  this.active = active;
  var viewContainer = this.GetViewContainer();
  if(viewContainer)
   ASPx.SetElementDisplay(viewContainer, active);
  if(active)
   this.AdjustViews();
 },
 IsActive: function() {
  return this.active;
 },
 AssignDateRangeMode: function(startDateEdit) {
  if(this.owner.MinOrMaxRangeExist())
   this.owner.validationPatterns.push(new DateRangeValidationPattern(startDateEdit, this.owner));
  this.PrepareCalendarsToDateRangeMode(startDateEdit);
  this.owner.ownMinDate = this.owner.GetMinDate();
  UTILS.SetActualMinDate(this.owner);
 },
 PrepareCalendarsToDateRangeMode: function(startDateEdit) {
  startDateEdit.endDateEdit = this.owner;
  UTILS.SetCalendarDateRangeMode(startDateEdit, this.owner);
  UTILS.SetCalendarDateRangeMode(this.owner, this.owner);
 },
 GetViewContainer: function() {
  throw "Not Implemented";
 },
 AttachToDateEditClientEvents: function(startDateEdit) {
  this.owner.DateChanged.AddHandler(function(s, e) {
   if(!e.isInternal)
    UTILS.OnRangeRestrictionChanged(s);
  });
  this.owner.CalendarShowing.AddHandler(function(s, e) {
   UTILS.OnCalendarShowing(this.owner);
  }.aspxBind(this));
  if(startDateEdit)
   startDateEdit.ValueSet.AddHandler(function(s, e) {
    UTILS.SetActualMinDate(startDateEdit);
   });
 },
 InitializeViewHandlers: function() { },
 OnDropDownCore: function() { },
 GetDropDownHeight: function() { return; },
 GetDropDownWidth: function() { return; },
 AdjustViews: function() { },
 GetSelectedDate: function() { },
 SetActiveControl: function() {
  ASPxClientDateEdit.active = this.owner;
 },
 OnBeforeShowDropDown: function(date) {
  this.SetActiveControl();
  this.SetSelectedDate(date);
 },
 OnAfterShowDropDown: function() {
  this.AdjustViews();
 },
 onDropDownModalChanged: function(enabled) { },
 OnBrowserWindowResize: function(e) { },
 UpdateMinMaxYears: function() { },
 OnTab: function(evt) { },
 OnEnter: function() { },
 OnEscape: function() { },
 OnPopupControlShown: function() { },
 ResetControlAdjustment: function() { this.owner.ResetControlAdjustment(); }
});
var DateEditCalendarController = ASPx.CreateClass(DateEditController, {
 constructor: function(owner) {
  this.constructor.prototype.constructor.call(this, owner);
  this.dropDownPosition = 0;
 },
 Initialize: function(toActivate) {
  DateEditController.prototype.Initialize.call(this, toActivate);
  var calendar = this.GetCalendar();
  if(calendar)
   calendar.customDraw = calendar.customDraw || this.owner.sharedParameters.calendarCustomDraw;
 },
 GetCalendar: function() {
  return this.owner.GetCalendar();
 },
 GetTimeEdit: function() { 
  return this.owner.GetTimeEdit();
 },
 GetViewContainer: function() {
  var calendar = this.GetCalendar();
  return calendar ? calendar.GetMainElement() : null;
 },
 InitializeViewHandlers: function() {
  if(this.HasOwnedCalendar()) {
   this.InitializeCalendarHandlers();
   this.InitializeTimeEditHandlers();
  } else 
   UTILS.RegisterSharedCalendar(this.GetCalendar()); 
 },
 HasOwnedCalendar: function() {
  return this.owner.calendarOwnerName == null;
 },
 InitializeCalendarHandlers: function() {
  var calendar = this.GetCalendar();
  if(!calendar)
   return;
  calendar.SelectionChanging.AddHandler(ASPxClientDateEdit.HandleCalendarSelectionChanging);
  calendar.MainElementClick.AddHandler(ASPxClientDateEdit.HandleCalendarMainElementClick);
  this.ReAssignCalendarSharedEventHandlers(calendar);
  var calendarMainElement = calendar.GetMainElement();
  if(ASPx.Browser.NetscapeFamily && ASPx.IsExistsElement(calendarMainElement))
   calendarMainElement.style.borderCollapse = "separate";
 },
 ReAssignCalendarSharedEventHandlers: function(calendar) {
  calendar.CustomDisabledDate.ClearHandlers();
  calendar.CellClick.ClearHandlers();
  calendar.CustomDisabledDate.AddHandler(ASPxClientDateEdit.HandleCalendarCustomDisabledDate.aspxBind(this.owner));
  calendar.CellClick.AddHandler(ASPxClientDateEdit.HandleCalendarCellClick.aspxBind(this.owner));
 },   
 InitializeTimeEditHandlers: function() {
  var timeEdit = this.GetTimeEdit();
  if(timeEdit) {
   timeEdit.InternalValueChanging.AddHandler(ASPxClientDateEdit.HandleTimeEditInternalValueChanging);
   timeEdit.OwnerDateEdit = this.owner;
  }
 },
 OnDropDownCore: function() {
  DateEditController.prototype.OnDropDownCore.call(this);
  var cal = this.GetCalendar();
  if(cal && this.owner.droppedDown)
     cal.forceMouseDown = true;
  if(cal && this.owner.isDropDownModal())
   cal.forceMouseDown = false;
 },
 onDropDownModalChanged: function(enabled) {
  if(!enabled)
   this.AdjustTimeSectionLayoutOnShowDropDown();
 },
 EnsureCalendarSelectedDateIsActual: function() {
  var calendar = this.GetCalendar();
  if(calendar.sharedParameters.dateRangeMode && (calendar.lastSelectedDate || !this.owner.date))
   calendar.SetSelectedDate(calendar.lastSelectedDate);
 },
 IsCalendarShared: function() {
  var calendar = this.GetCalendar();
  var calendarName = calendar != null ? calendar.name : "";
  return ASPxClientDateEdit.SharedCalendarCollection.calendarIsShared(calendarName);
 },
 SetDateToCalendar: function(date) {
  var calendar = this.GetCalendar();
  if(!calendar) return;
  calendar.sharedParameters = this.owner.sharedParameters;
  if(this.IsCalendarShared())
   this.ReAssignCalendarSharedEventHandlers(calendar);
  calendar.forceUpdate = true;
  if(!date) {
   calendar.SetValue(null);
   this.SetDefaultVisibleDateToCalendar(calendar);
  } else {
   var dateWithoutTime = new Date(date.getFullYear(), date.getMonth(), date.getDate());
   calendar.SetValue(dateWithoutTime);
  }
 },
 SetDefaultVisibleDateToCalendar: function(calendar) {
  var minDate = this.owner.GetMinDate();
  var maxDate = this.owner.GetMaxDate();
  var requiredVisibleDate = new Date();
  if(minDate != null && minDate > requiredVisibleDate)
   requiredVisibleDate = minDate;
  else if(maxDate != null && maxDate < requiredVisibleDate)
   requiredVisibleDate = ASPxClientCalendar.AddMonths(maxDate, 1 - calendar.rows * calendar.columns);
  calendar.SetVisibleDate(new Date(
   requiredVisibleDate.getFullYear(),
   requiredVisibleDate.getMonth(),
   requiredVisibleDate.getDate())
  );
 },
 SetDateToTimeSection: function(date) {
  if(this.owner.GetShowTimeSection()) {
   var timeEdit = this.GetTimeEdit();
   if(timeEdit)
    timeEdit.SetValue(date);
  }
 },
 GetSelectedDate: function() {
  var hours = 0, minutes = 0, seconds = 0, milliseconds = 0;
  this.EnsureCalendarSelectedDateIsActual();
  var date = this.GetCalendar().GetSelectedDate();
  this.GetTimeEdit().ParseValue();
  var timeEditDate = this.GetTimeEdit().GetDate();
  if(timeEditDate) {
   hours = timeEditDate.getHours();
   minutes = timeEditDate.getMinutes();
   seconds = timeEditDate.getSeconds();
   milliseconds = timeEditDate.getMilliseconds();
  }
  if(!date && timeEditDate)
   date = new Date(100, 0, 1);
  if(date) {
   date.setHours(hours);
   date.setMinutes(minutes);
   date.setSeconds(seconds);
   date.setMilliseconds(milliseconds);
  }
  return date;
 },
 SetSelectedDate: function(date, needLockAnimation) {
  if(needLockAnimation)
   this.GetCalendar().LockUpdateAnimation();
  this.SetDateToCalendar(date);
  this.SetDateToTimeSection(date);
  if(needLockAnimation)
   this.GetCalendar().UnlockUpdateAnimation();
 },
 SetActiveControl: function() {
  var calendar = this.GetCalendar();
  ASPx.activeCalendar = calendar;
  DateEditController.prototype.SetActiveControl.call(this);  
 },
 OnBeforeShowDropDown: function(date) {
  this.GetCalendar().LockUpdateAnimation();
  DateEditController.prototype.OnBeforeShowDropDown.call(this, date);
  this.owner.CalendarShowing.FireEvent(this.owner);
 },
 OnAfterShowDropDown: function() {
  var calendar = this.GetCalendar();
  if(calendar)
   calendar.SwitchToInitialView();
  var calendarOwner = this.owner.GetCalendarOwner();
  if(calendarOwner != null)
   calendarOwner.calendarConsumerName = this.owner.name;
  this.owner.calendarConsumerName = null;
  DateEditController.prototype.OnAfterShowDropDown.call(this);
  this.GetCalendar().UnlockUpdateAnimation();
 },
 AdjustTimeSectionLayoutOnShowDropDown: function() {
  if(this.owner.IsAdaptiveTimeSectionEnabled()) {
   this.dropDownPosition = ASPx.GetAbsoluteX(this.owner.GetPopupControl().GetCurrentWindowElement());
   this.AdjustTimeSectionLayout();
  }
 },
 AdjustTimeSectionLayout: function() {
  this.EnsureCalendarMaxWidth();
  var requiredTimeSectionPos = this.GetRequiredTimeSectionPosition();
  var currentTimeSectionPos = this.GetCurrentTimeSectionPosition();
  if(requiredTimeSectionPos !== currentTimeSectionPos) {
   if(requiredTimeSectionPos === ASPx.Position.Bottom)
    this.SwitchToVerticalTimeSectionLayout();
   else
    this.SwitchToHorizontalTimeSectionLayout();
   if(this.owner.isDropDownModal() === false)
    this.owner.GetClock().RecreateRectBag();
  }
 },
 SetCalendarMinMaxWidth: function(value) {
  var calendarMainElement = this.GetCalendar().GetMainElement();
  if(value === undefined) {
   calendarMainElement.style.minWidth = "";
   calendarMainElement.style.maxWidth = "";
  }
  else {
   calendarMainElement.style.minWidth = value + "px";
   calendarMainElement.style.maxWidth = value + "px";
  }
 },
 SwitchToHorizontalTimeSectionLayout: function() {
  var calendarMainElement = this.GetCalendar().GetMainElement();
  ASPx.RemoveClassNameFromElement(calendarMainElement, verticalTimeSectionClassName);
  ASPx.RemoveClassNameFromElement(calendarMainElement, calendarWithFullWidthChildsClassName);
  this.SetCalendarMinMaxWidth(this.GetCalendarWithHorizontalTimeSectionWidth());
  ASPx.SetElementDisplay(this.owner.GetPopupControl().GetWindowElement(-1), true);
 },
 SwitchToVerticalTimeSectionLayout: function() {
  var calendarMainElement = this.GetCalendar().GetMainElement();
  ASPx.AddClassNameToElement(calendarMainElement, verticalTimeSectionClassName);
  this.SetCalendarMinMaxWidth(this.GetCalendarWithVerticalTimeSectionWidth());
  ASPx.AddClassNameToElement(calendarMainElement, calendarWithFullWidthChildsClassName);
  ASPx.SetElementDisplay(this.owner.GetPopupControl().GetWindowElement(-1), true); 
 },
 GetCalendarMainElementHorizontalBorderPaddings: function() {
  if(!this.calendarMainElementHorizontalBorderPaddings) {
   var calendarMainElement = this.GetCalendar().GetMainElement();
   this.calendarMainElementHorizontalBorderPaddings = ASPx.GetLeftRightPaddings(calendarMainElement);
   var calendarMainElementCurrentStyle = ASPx.GetCurrentStyle(calendarMainElement);
   if(calendarMainElementCurrentStyle && calendarMainElementCurrentStyle.borderCollapse == "collapse") {
    var calendarMainElementHorizontalBordersWidth = ASPx.GetHorizontalBordersWidth(calendarMainElement);
    if(!ASPx.Browser.IE && !ASPx.Browser.Edge)
     calendarMainElementHorizontalBordersWidth /= 2;
    this.calendarMainElementHorizontalBorderPaddings += calendarMainElementHorizontalBordersWidth;
   }
  }
  return this.calendarMainElementHorizontalBorderPaddings;
 },
 GetCalendarWithVerticalTimeSectionWidth: function() {
  if(this.owner.isDropDownModal())
   return undefined;
  if(!this.calendarWithVerticalTimeSectionWidth) {
   this.calendarWithVerticalTimeSectionWidth = 0;
   var calendarMainElement = this.GetCalendar().GetMainElement();
   var maxChildElementWidth = 0;
   ASPx.AddClassNameToElement(calendarMainElement, calendarWithAutoWidthChildsClassName);
   for(var i = 0; i < calendarMainElement.childNodes.length; i++) {
    var calendarChildElement = calendarMainElement.childNodes[i];
    if(calendarChildElement.tagName != "DIV")
     continue;
    var calendarChildElementWidth = calendarChildElement.getBoundingClientRect().width;
    if(calendarChildElementWidth > maxChildElementWidth)
     maxChildElementWidth = calendarChildElementWidth;
   }
   ASPx.RemoveClassNameFromElement(calendarMainElement, calendarWithAutoWidthChildsClassName);
   this.calendarWithVerticalTimeSectionWidth = maxChildElementWidth + this.GetCalendarMainElementHorizontalBorderPaddings();
   this.calendarWithVerticalTimeSectionWidth = Math.ceil(this.calendarWithVerticalTimeSectionWidth);
  }
  return this.calendarWithVerticalTimeSectionWidth;
 },
 EnsureCalendarMaxWidth: function() {
  var calendarMainElement = this.GetCalendar().GetMainElement();
  if(!calendarMainElement.style.maxWidth) {
   ASPx.RemoveClassNameFromElement(calendarMainElement, verticalTimeSectionClassName);
   ASPx.RemoveClassNameFromElement(calendarMainElement, calendarWithFullWidthChildsClassName);
   this.SetCalendarMinMaxWidth(this.GetCalendarWithHorizontalTimeSectionWidth());
  }
 },
 GetCalendarWithHorizontalTimeSectionWidth: function() {
  if(this.owner.isDropDownModal())
   return undefined;
  if(!this.calendarWithHorizontalTimeSectionWidth) {
   this.calendarWithHorizontalTimeSectionWidth = 0;
   var calendarMainElement = this.GetCalendar().GetMainElement();
   for(var i = 0; i < calendarMainElement.childNodes.length; i++) {
    var calendarChildElement = calendarMainElement.childNodes[i];
    if(calendarChildElement.tagName == "DIV" && !ASPx.ElementHasCssClass(calendarChildElement, timeSectionFooterClassName))
     this.calendarWithHorizontalTimeSectionWidth += calendarChildElement.getBoundingClientRect().width;
   }
   this.calendarWithHorizontalTimeSectionWidth += this.GetCalendarMainElementHorizontalBorderPaddings();
   this.calendarWithHorizontalTimeSectionWidth = Math.ceil(this.calendarWithHorizontalTimeSectionWidth);
  }
  return this.calendarWithHorizontalTimeSectionWidth;
 },
 GetRequiredTimeSectionPosition: function() {
  var horizontalTimeSectionRightPos = this.GetCalendarWithHorizontalTimeSectionWidth();
  if(this.owner.isDropDownModal()) {
   var modalSys = this.owner.GetPopupControl().GetModalWrapperElement(-1);
   var modalSysStyle = ASPx.GetCurrentStyle(modalSys);
   horizontalTimeSectionRightPos += ASPx.PxToInt(modalSysStyle.paddingLeft) + ASPx.PxToInt(modalSysStyle.paddingRight);
  }
  else
   horizontalTimeSectionRightPos += this.dropDownPosition;
  var verticalScrollBarWidth = ASPx.GetCurrentDocumentWidth() > ASPx.GetDocumentClientWidth() ? ASPx.GetVerticalScrollBarWidth() : 0;
  return horizontalTimeSectionRightPos <= ASPx.GetDocumentScrollLeft() + window.innerWidth - verticalScrollBarWidth ? ASPx.Position.Right : ASPx.Position.Bottom;
 },
 GetCurrentTimeSectionPosition: function() {
  var calendarMainElement = this.GetCalendar().GetMainElement();
  return ASPx.ElementHasCssClass(calendarMainElement, verticalTimeSectionClassName) ? ASPx.Position.Bottom : ASPx.Position.Right;
 },
 OnBrowserWindowResize: function(e) {
  if(this.owner.ddmBP === undefined || this.owner.isDropDownModal(true) !== undefined)
   this.AdjustTimeSectionLayout();
 },
 OnTab: function(evt) {
  var calendar = this.GetCalendar();
  if(calendar.IsFastNavigationActive())
   calendar.CancelFastNavigation();
  if(this.owner.GetShowTimeSection()) {
   this.owner.lockLostFocus = true;
   if(this.owner.GetCalendarOwner()) {
    ASPx.Evt.PreventEvent(evt);  
    this.owner.GetTimeEdit().SetFocus();
   }
   return;
  }
  if(this.owner.GetTextWasLastTemporaryChanged()){
   this.owner.ParseValue();
   this.owner.HideDropDownArea(true);
  } else 
   this.owner.OnCalendarSelectionChanging(this.GetCalendar().GetValue(), false);
  this.owner.SetTextWasLastTemporaryChanged(false);
 },
 OnEnter: function(evt) {
  var calendar = this.GetCalendar();
  if(calendar.IsFastNavigationActive())
   calendar.OnEnterDown();
  else if(this.owner.GetTextWasLastTemporaryChanged()){
   this.owner.ParseValue();
   this.owner.HideDropDownArea(true);
  } else {
   var calendarSelection = calendar.GetValue();
   if(this.owner.GetShowTimeSection()) {
    if(calendarSelection) {
     this.owner.ApplyTimeSectionDateChanges(true);
     ASPx.Selection.Set(this.owner.GetInputElement());
    } 
    this.owner.HideDropDownArea(true);
   } else
    this.owner.OnCalendarSelectionChanging(calendarSelection, true);
  }
 },
 OnEscape: function() {
  if(this.GetCalendar().IsFastNavigationActive())
   this.GetCalendar().OnEscape();
  else
   this.owner.HideDropDownArea(true);
 },
 OnPopupControlShown: function() {
  this.AdjustTimeSectionLayoutOnShowDropDown();
 }
});
var DateEditScrollPickerController = ASPx.CreateClass(DateEditController, {
 constructor: function(owner, spOptions) {
  this.constructor.prototype.constructor.call(this, owner, spOptions);
  this.mask = owner.dateFormatter.mask;
  this.width = owner.width;
  this.height = owner.height;
  this.viewContainer = null;
  this.processDate = false;
  this.tempCache = new ListBoxTemporaryCache();
  this.lastSuccessfulDayIndex = 0;
  this.daysViewFilterUpdate = false;
  this.spOptions = spOptions;
  this.views = {};
  this.groups = [];
  this.wheelsStructure = [];
 },
 Initialize: function(toActivate) {
  DateEditController.prototype.Initialize.call(this, toActivate);
  this.createWheels();
  this.InitializeEvents();
 },
 InitializeEvents: function() {
  this.AttachToYearViewFocusEvents();
  this.AttachToMonthViewFocusEvents();
  this.AttachToDayViewFocusEvents();
  this.AttachToHoursViewFocusEvents();
  this.AttachToMinutesViewFocusEvents();
  this.AttachToSecondsViewFocusEvents();
  this.AttachToMillisecondsViewFocusEvents();
  this.AttachToAmPmViewFocusEvents();
 },
 createWheels: function() {
  this.groups = this.createGroups();
  var container = this.GetViewContainer();
  if(!container)
   return;
  this.groups.forEach(function(g) {
   var groupElement = this.createWheelGroupElement(container);
   g.forEach(function(w) {
    this.views[w.key] = this.createRollerView(groupElement, w.items.call(this), [], w.id, false, w.caption);
   }.bind(this));
  }.bind(this));
 },
 createWheelGroupElement: function(container) {
  var el = document.createElement("div");
  el.className = this.GetGroupElementClassName();
  container.appendChild(el);
  return el;
 },
 createRollerView: function(container, itemsInfo, itemsValue, id, isComboBoxList, caption) {
  return new ASPx.ASPxClientRollersView(this, container, itemsInfo, itemsValue, id, isComboBoxList, caption);
 },
 createGroups: function() {
  return [
   [
    { key: "years", index: this.GetYearsViewIndex(), caption: this.spOptions.yearsCaption, id: "Y", items: this.GetYearsViewItems },
    { key: "months", index: this.GetMonthsViewIndex(), caption: this.spOptions.monthsCaption, id: "M", items: this.GetMonthViewItems },
    { key: "days", index: this.GetDaysViewIndex(), caption: this.spOptions.daysCaption, id: "D", items: this.GetDayViewItems }
   ],
   [
    { key: "hours", index: this.owner.showHourWheel ? 0 : -1, caption: this.spOptions.hoursCaption, id: "TH", items: this.GetHoursViewItems },
    { key: "minutes", index: this.owner.showMinuteWheel ? 1 : -1, caption: this.spOptions.minutesCaption, id: "TM", items: this.GetMinutesSecondsViewItems },
    { key: "seconds", index: this.owner.showSecondWheel ? 2 : -1, caption: this.spOptions.secondsCaption, id: "TS", items: this.GetMinutesSecondsViewItems },
    { key: "milliseconds", index: this.owner.showMillisecondWheel ? 3 : -1, caption: this.spOptions.millisecondsCaption, id: "TMS", items: this.GetMillisecondsViewItems },
    { key: "ampm", index: this.IsAmPmViewExists() ? 4 : -1, caption: this.spOptions.ampmCaption, id: "TAP", items: this.GetAmPmViewItems }
   ]
  ]
  .map(function(g) {
   return g
    .filter(function(w) { return w.index >= 0; })
    .sort(function(w1, w2) { return w1.index - w2.index; });
  })
  .filter(function(g) {
   return g.length;
  });
 },
 GetYearsViewIndex: function() {
  return this.GetDateComponentKeyIndex("y");
 },
 GetMonthsViewIndex: function() {
  if(this.owner.pickerType <= ASPx.DatePickerType.Months)
   return this.GetDateComponentKeyIndex("M");
  return -1;
 },
 GetDaysViewIndex: function() {
  if(this.owner.pickerType == ASPx.DatePickerType.Days)
   return this.GetDateComponentKeyIndex("d");
  return -1;
 },
 GetDateComponentKeyIndex: function(key) {
  return ASPx.Data.ArrayIndexOf(ASPx.CultureInfo.shortDate, key);
 },
 GetDayViewItems: function() {
  var result = [];
  for(var i = 1; i <= 31; i++)
   result.push({ texts: [i.toString()], value: i.toString() });
  return result;
 },
 GetMonthViewItems: function() {
  var result = [];
  var monthNames = ASPx.CultureInfo.genMonthNames.slice(0, 12);
  for(var i = 0; i < 12; i++)
   result.push({ texts: [monthNames[i]], value: i.toString() });
  return result;
 },
 GetYearsViewItems: function() {
  var result = [];
  for(var i = 100; i < 10000; i++)
   result.push({ texts: [i.toString()], value: i.toString() });
  return result;
 },
 IsAmPmExists: function() {
  return ASPx.CultureInfo.am || ASPx.CultureInfo.pm;
 },
 IsAmPmViewExists: function() {
  return this.owner.showHourWheel && this.IsAmPmExists();
 },
 GetHoursViewItems: function() {
  var result = [];
  var startHour = this.IsAmPmExists() ? 1 : 0;
  var endHour = this.IsAmPmExists() ? 12 : 23;
  for(var i = startHour; i <= endHour; i++)
   result.push({ texts: [i.toString()], value: i.toString() });
  return result;
 },
 GetMinutesSecondsViewItems: function() {
  var result = [];
  for(var i = 0; i < 60; i++) {
   var itemText = i.toString();
   if(itemText.length == 1)
    itemText = "0" + itemText;
   result.push({ texts: [itemText], value: i.toString() });
  }
  return result;
 },
 GetMillisecondsViewItems: function() {
  var result = [];
  for(var i = 0; i < 1000; i++) {
   var itemText = i.toString();
   while(itemText.length < 3)
    itemText = "0" + itemText;
   result.push({ texts: [itemText], value: i.toString() });
  }
  return result;
 },
 GetAmPmViewItems: function() {
  var result = [];
  result.push({ texts: [ASPx.CultureInfo.am], value: "am" });
  result.push({ texts: [ASPx.CultureInfo.pm], value: "pm" });
  return result;
 },
 GetViewContainer: function() {
  if(!this.viewContainer)
   this.viewContainer = this.CreateViewContainer();
  return this.viewContainer;
 },
 CreateViewContainer: function() {
  var viewContainer = this.owner.GetViewContainer();
  if(!viewContainer)
   return;
  var container = document.createElement("DIV");
  container.className = this.GetControllerClassName();
  container.id = this.GetControlName() + "_" + "controllerContainer";
  viewContainer.appendChild(container);
  return container;
 },
 GetControllerClassName: function() {
  var className = "dxScrollPicker";
  var theme = this.owner.getThemeClassName();
  if(theme)
   className += "_" + theme;
  return className + " dxScrollPickerSys";
 },
 GetGroupElementClassName: function() {
  return "dxsp-wgroup";
 },
 GetSelectedDayItem: function() {
  var daysView = this.views["days"];
  if(!daysView)
   return null;
  return daysView.GetFocusedItem();
 },
 GetSelectedDay: function() {
  var item = this.GetSelectedDayItem();
  if(item && item.value)
   return item.value;
  return 1;
 },
 GetSelectedDayIndex: function() {
  var item = this.GetSelectedDayItem();
  if(item)
   return item.index;
  return 0;
 },
 GetSelectedMonth: function() {
  var result = 0;
  var monthsView = this.views["months"];
  if(!monthsView)
   return result;
  var selectedItem = monthsView.GetFocusedItem();
  if(selectedItem && selectedItem.value)
   result = selectedItem.value;
  return result;
 },
 GetSelectedYearItem: function() {
  var yearsView = this.views["years"];
  if(!yearsView)
   return null;
  return this.views["years"].GetFocusedItem();
 },
 GetSelectedYear: function() {
  var item = this.GetSelectedYearItem();
  if(item && item.value)
   return item.value;
  return 100;
 },
 GetSelectedYearIndex: function() {
  var item = this.GetSelectedYearItem();
  if(item && item.index)
   return item.index;
  return 0;
 },
 GetSelectedHour: function() {
  var result = 0;
  var hoursView = this.views["hours"];
  if(!hoursView)
   return result;
  var selectedItem = hoursView.GetFocusedItem();
  if(selectedItem && selectedItem.value)
   result = selectedItem.value;
  result = this.ConvertAmPmValueToHours(result);
  return result;
 },
 GetSelectedMinute: function() {
  var result = 0;
  var minutesView = this.views["minutes"];
  if(!minutesView)
   return result;
  var selectedItem = minutesView.GetFocusedItem();
  if(selectedItem && selectedItem.value)
   result = selectedItem.value;
  return result;
 },
 GetSelectedSecond: function() {
  var result = 0;
  var secondsView = this.views["seconds"];
  if(!secondsView)
   return result;
  var selectedItem = secondsView.GetFocusedItem();
  if(selectedItem && selectedItem.value)
   result = selectedItem.value;
  return result;
 },
 GetSelectedMillisecond: function() {
  var result = 0;
  var millisecondsView = this.views["milliseconds"];
  if(!millisecondsView)
   return result;
  var selectedItem = millisecondsView.GetFocusedItem();
  if(selectedItem && selectedItem.value)
   result = selectedItem.value;
  return result;
 },
 GetSelectedAmPm: function() {
  var result = "am";
  var ampmView = this.views["ampm"];
  if(!ampmView)
   return result;
  var selectedItem = ampmView.GetFocusedItem();
  if(selectedItem && selectedItem.value)
   result = selectedItem.value;
  return result;
 },
 GetSelectedDate: function() {
  var result = new Date(
   this.GetSelectedYear(),
   this.GetSelectedMonth(),
   this.GetSelectedDay(),
   this.GetSelectedHour(),
   this.GetSelectedMinute(),
   this.GetSelectedSecond(),
   this.GetSelectedMillisecond()
  );
  return result;
 },
 SetSelectedDate: function(date) {
  this.processDate = true;
  date = date || new Date();
  this.currentMaxDayValue = date.getDate();
  setTimeout(function() {
   if(this.views["days"]) {
    this.views["days"].FocusItemByValue(date.getDate());
    this.UpdateLastSuccessfulDayIndex();
   }
   if(this.views["years"]) {
    this.UpdateMinMaxYears();
    this.views["years"].FocusItemByValue(date.getFullYear());
   }
   if(this.views["months"])
    this.views["months"].FocusItemByValue(date.getMonth());
   if(this.views["hours"]) {
    var value = this.ConvertHoursToAmPmValue(date.getHours());
    this.views["hours"].FocusItemByValue(value);
   }
   if(this.views["ampm"])
    this.views["ampm"].FocusItemByValue(date.getHours() >= 12 ? "pm" : "am");
   if(this.views["minutes"])
    this.views["minutes"].FocusItemByValue(date.getMinutes());
   if(this.views["seconds"])
    this.views["seconds"].FocusItemByValue(date.getSeconds());
   if(this.views["milliseconds"])
    this.views["milliseconds"].FocusItemByValue(date.getMilliseconds());
   this.processDate = false;
   this.UpdateInputDate();
   this.UpdateDaysViewFilter();
   }.bind(this), 0);
 },
 GetControlName: function() {
  return this.owner.name;
 },
 HasVirtualScrolling: function() {
  return true;
 },
 GetItemCellsIdPostfixes: function() {
  return [lbIPostfixes[2]];
 },
 FormatText: function(texts) {
  return texts[0];
 },
 IsMultiColumn: function() {
  return false;
 },
 LockSynchronization: function() {
 },
 GetSampleItemRow: function() {
  var row = document.createElement("DIV");
  row.className = "dxsp-item";
  row.id = "LBI-1T";
  return row;
 },
 GetAccessibilityHeaderRow: function() {
  return null;
 },
 GetItem: function (index) {
  return this.view.GetItem(index);
 },
 GetIsItemSelected: function(index) {
  return false;
 },
 InitializeItemAttributes: function(newItemRow, newClientId) {
  newItemRow.id = newClientId;
 },
 AddStateControllerClasses: function(newID) {
 },
 GetIsCheckColumnExists: function() {
  return false;
 },
 GetItemCellCount: function() {
  return 1;
 },
 SetItemSelectionAppearance: function() {
 },
 ChangeEnabledStateItem: function() {
 },
 TryApplyHighlighting: function() {
 },
 UnlockSynchronization: function() {
 },
 InitDXTextAttributes: function() {
 },
 isSimplifiedRowIndexCalculationApplicable: function() {
  return false;
 },
 GetTopScrollSpacerHeight: function() {
  return 0;
 },
 GetBottomScrollSpacerHeight: function() {
  return 0;
 },
 NeedToHandleCellWidth: function() {
  return false;
 },
 GetDropDownHeight: function(){
  if(this.owner.ddHeightCache != ASPx.InvalidDimension)
   return this.owner.ddHeightCache;
  this.EnsureDropDownWidth(); 
  var result = this.AdjustListBoxHeight();  
  return result;
 },
 GetDropDownWidth: function() {
  var result = this.owner.ddWidthCache;
  if(this.owner.ddWidthCache == ASPx.InvalidDimension || this.owner.GetIsControlWidthWasChanged())
   result = this.AdjustListBoxWidth();
  return result;
 },
 EnsureDropDownWidth: function() {
  this.GetDropDownWidth();
 },
 AttachToYearViewFocusEvents: function() {
  var yearsView = this.views["years"];
  if(!yearsView)
   return;
  yearsView.EndFocus.AddHandler(this.UpdateDaysViewFilter.aspxBind(this));
  yearsView.ItemFocused.AddHandler(function(s, e) {
   var value = parseInt(e.item.value);
   this.UpdateInputDate(value, yearsView.id);
  }.aspxBind(this));
 },
 AttachToMonthViewFocusEvents: function() {
  var monthView = this.views["months"];
  if(!monthView)
   return;
  monthView.EndFocus.AddHandler(this.UpdateDaysViewFilter.aspxBind(this));
  monthView.ItemFocused.AddHandler(function(s, e) {
   var value = parseInt(e.item.value);
   this.UpdateInputDate(value, monthView.id);
  }.aspxBind(this));
 },
 AttachToDayViewFocusEvents: function() {
  var daysView = this.views["days"];
  if(!daysView)
   return;
  daysView.EndFocus.AddHandler(this.UpdateLastSuccessfulDayIndex.aspxBind(this));
  daysView.ItemFocused.AddHandler(function(s, e) {
   var value = parseInt(e.item.value);
   this.UpdateInputDate(value, daysView.id);
  }.aspxBind(this));
 },
 AttachToHoursViewFocusEvents: function() {
  var hoursView = this.views["hours"];
  if(!hoursView)
   return;
  hoursView.ItemFocused.AddHandler(function(s, e) {
   var value = parseInt(e.item.value);
   var hours = this.ConvertAmPmValueToHours(value);
   this.UpdateInputDate(hours, hoursView.id);
  }.aspxBind(this));
 },
 AttachToMinutesViewFocusEvents: function() {
  var minutesView = this.views["minutes"];
  if(!minutesView)
   return;
  minutesView.ItemFocused.AddHandler(function(s, e) {
   var value = parseInt(e.item.value);
   this.UpdateInputDate(value, minutesView.id);
  }.aspxBind(this));
 },
 AttachToSecondsViewFocusEvents: function() {
  var secondsView = this.views["seconds"];
  if(!secondsView)
   return;
  secondsView.ItemFocused.AddHandler(function(s, e) {
   var value = parseInt(e.item.value);
   this.UpdateInputDate(value, secondsView.id);
  }.aspxBind(this));
 },
 AttachToMillisecondsViewFocusEvents: function() {
  var millisecondsView = this.views["milliseconds"];
  if(!millisecondsView)
   return;
  millisecondsView.ItemFocused.AddHandler(function(s, e) {
   var value = parseInt(e.item.value);
   this.UpdateInputDate(value, millisecondsView.id);
  }.aspxBind(this));
 },
 AttachToAmPmViewFocusEvents: function() {
  var ampmView = this.views["ampm"];
  if(!ampmView)
   return;
  ampmView.ItemFocused.AddHandler(function(s, e) {
   this.UpdateInputDate(e.item.value, ampmView.id);
  }.aspxBind(this));
 },
 UpdateDaysViewFilter: function() {
  if(this.processDate)
   return;
  var daysView = this.views["days"];
  if(!daysView)
   return;
  this.daysViewFilterUpdate = true;
  var year = this.GetSelectedYear();
  var month = this.GetSelectedMonth();
  var dayInMonth = this.GetDayCountInMonth(year, month);
  var visibleItemCount = daysView.GetVisibleItemCount();
  if(dayInMonth == visibleItemCount)
   return;
  var isSatisfyDelegate = function(day) { 
   return parseInt(day) <= dayInMonth;
  };
  var newDayIndices = [];
  var itemCount = daysView.GetItemCount();
  for(var i = 0; i < itemCount; i++) {
   var item = daysView.GetItem(i);
   var isSatisfy = isSatisfyDelegate(item.value);
   if(isSatisfy)
    newDayIndices.push(i);
   daysView.ApplyFilterToItem(i, isSatisfy);
  }
  daysView.RewriteFilteredItemIndices(newDayIndices);
  daysView.OnEndItemsFiltering();
  var focusedDayValue = this.GetFocusedDayValueAfterFiltering(year, month);
  daysView.FocusItemByValue(focusedDayValue);
  daysView.ProcessSmoothScroll(null, false);
  this.daysViewFilterUpdate = false;
 },
 UpdateLastSuccessfulDayIndex: function() {
  if(this.daysViewFilterUpdate)
   return;
  this.lastSuccessfulDayIndex = this.GetSelectedDayIndex();
 },
 UpdateInputDate: function(value, viewID) {
  if(this.processDate || this.IsReadOnly())
   return;
  var focusedDate = this.GetFocusedDate(value, viewID);
  this.owner.SetValue(focusedDate, true);
 },
 GetFocusedDayValueAfterFiltering: function(year, month) {
  var daysView = this.views["days"];
  var result = null;
  if(!daysView.IsItemFiltered(this.lastSuccessfulDayIndex))
   result = this.GetDayCountInMonth(year, month);
  else
   result = daysView.GetItem(this.lastSuccessfulDayIndex).value;
  return result;
 },
 GetFocusedDate: function(value, viewID) {
  var date = this.GetSelectedDate();
  switch(viewID) {
   case "Y": 
    date.setFullYear(value);
    break;
   case "M":
    date.setMonth(value);
    break;
   case "D":
    date.setDate(value);
    break;
   case "TH":
    date.setHours(value);
    break;
   case "TM":
    date.setMinutes(value);
    break;
   case "TS": 
    date.setSeconds(value);
    break;
   case "TMS": 
    date.setMilliseconds(value);
    break;
   case "TAP":
    var hours = date.getHours();
    var ampm = this.GetSelectedAmPm();
    if(ampm !== value) {
     if(value === "pm" && hours <= 12)
      hours = hours + 12;
     if(value === "am" && hours >= 12)
      hours = hours - 12;
    }
    date.setHours(hours);
    break;
   default: 
    break;
  }
  return date;
 },
 ConvertAmPmValueToHours: function(value) {
  var result = parseInt(value);
  if(!this.IsAmPmViewExists())
   return result;
  var ampm = this.GetSelectedAmPm();
  if(ampm === "pm" && result < 12)
   result = result + 12;
  if(ampm === "am" && result === 12)
   result = 0;
  return result;
 },
 ConvertHoursToAmPmValue: function(hours) {
  if(!this.IsAmPmViewExists())
   return hours;
  if(hours === 0)
   hours = hours + 12;
  if(hours > 12)
   hours = hours - 12;
  return hours;
 },
 GetDayCountInMonth: function(year, month) {
  return new Date(year, parseInt(month) + 1, 0).getDate();
 },
 UpdateMinMaxYears: function() {
  var minDate = this.owner.GetMinDate();
  var minYear = minDate ? minDate.getFullYear() : 100;
  var maxDate = this.owner.GetMaxDate();
  var maxYear = maxDate ? maxDate.getFullYear() : 9999;
  var isSatisfyDelegate = function(year) {
   return year >= minYear && year <= maxYear;
  };
  var selectedYear = parseInt(this.GetSelectedYear());
  var yearsView = this.views["years"];
  var newYearIndices = [];
  var itemCountHiddenFromTop = 0;
  var itemCount = yearsView.GetItemCount();
  for(var i = 0; i < itemCount; i++) {
   var item = yearsView.GetItem(i);
   var value = parseInt(item.value);
   var isSatisfy = isSatisfyDelegate(value);
   if(isSatisfy)
    newYearIndices.push(i);
   if(value < selectedYear) {
    if(item.filtered && !isSatisfy)
     itemCountHiddenFromTop++;
    if(!item.filtered && isSatisfy)
     itemCountHiddenFromTop--;
   }
   yearsView.ApplyFilterToItem(i, isSatisfy);
  }
  yearsView.RewriteFilteredItemIndices(newYearIndices);
  yearsView.OnEndItemsFiltering(itemCountHiddenFromTop);
 },
 AdjustListBoxHeight: function () {
  var height = 0;
  for(var key in this.views) {
   if(this.views.hasOwnProperty(key)) {
    var view = this.views[key];
    if(view) {
     height = Math.max(view.GetScrollDivElement().offsetHeight, height);
     view.Adjust();
    }
   }
  }     
  return height;
 },
 AdjustListBoxWidth: function () {
  var width = 0;
  for(var key in this.views) {
   if(this.views.hasOwnProperty(key)) {
    var view = this.views[key];
    if(view) {
     width = Math.max(view.GetScrollDivElement().offsetWidth, width);
     view.Adjust();
    }
   }
  }     
  return width;
 },
 InitMainElementCache: function(){
  this.mainElementWidthCache = this.GetMainElement().clientWidth;
 },
 AdjustViews: function() {
    for(var key in this.views) {
   if(this.views.hasOwnProperty(key)) {
    var view = this.views[key];
    if(view) {
     view.Adjust();
    }
   }
  }
 },
 IsDisplayed: function() {
  return this.owner.IsDisplayed();
 },
 OnTab: function(evt) { 
  this.owner.HideDropDownArea(true);
 },
 OnEnter: function() { 
  this.owner.ApplyTimeSectionDateChanges(true);
  this.owner.HideDropDownArea(true);
 },
 OnEscape: function() {
  this.owner.ApplyTimeSectionDateChanges(false);
  this.owner.HideDropDownArea(true);
 },
 IsReadOnly: function() {
  return this.owner.GetReadOnly();
 }
});
var UTILS = { 
 SetCalendarDateRangeMode: function(dateEdit, endDateEdit) {
  dateEdit.sharedParameters.dateRangeMode = true;
  if(!dateEdit.enabled)
   return;
  var isOperaOrIEVersionHigher8 = ASPx.Browser.IE && ASPx.Browser.Version > 8 || ASPx.Browser.Opera;
  var calendar = dateEdit.GetCalendar();
  if(calendar)
   calendar.updateDayStylesTwiceOnMouseOver = isOperaOrIEVersionHigher8 && this.DateEditHasParentWithRelativePosition(endDateEdit);
 },
 DateEditHasParentWithRelativePosition: function(endDateEdit) {
  return ASPx.GetParent(endDateEdit.GetMainElement(),
   function (element) { return ASPx.GetCurrentStyle(element).position === "relative"; }) != null;
 },
 SetActualMinDate: function(dateEdit) {
  var dateRangePair = ASPxDateRangeHelper.GetDateEditPair(dateEdit);
  if(!dateRangePair.isInRangeMode) return;
  var rangeRestricts = ASPxDateRangeHelper.GetCurrentRangeRestrictions(dateRangePair);
  var newMinDate = rangeRestricts.startDate ? rangeRestricts.startDate : dateRangePair.endDateEdit.ownMinDate;
  if(!ASPx.DateUtils.AreDatesEqualExact(dateRangePair.endDateEdit.GetMinDate(), newMinDate))
   dateRangePair.endDateEdit.SetMinDateCore(newMinDate);
 },
 OnRangeRestrictionChanged: function(dateEdit) {
  var dateRangePair = ASPxDateRangeHelper.GetDateEditPair(dateEdit);
  if(!dateRangePair.isInRangeMode) return;
  var rangeRestricts = ASPxDateRangeHelper.GetCurrentRangeRestrictions(dateRangePair);
  if(ASPxDateRangeHelper.NeedCorrectSecondDateOnDateChanging(rangeRestricts, dateRangePair.isStart, dateRangePair.endDateEdit.minRange))
   this.CorrestSecondRangeDate(dateRangePair);
  if(dateRangePair.isStart)
   dateRangePair.endDateEdit.Validate();
  else {
   UTILS.SetActualMinDate(dateRangePair.endDateEdit);
   dateRangePair.startDateEdit.Validate();
  }
 },
 CorrestSecondRangeDate: function(dateRangePair) {
  var changedDate = (dateRangePair.isStart) ? dateRangePair.startDateEdit.GetDate() : dateRangePair.endDateEdit.GetDate();
  var endDateMinRange = Math.max(dateRangePair.endDateEdit.minRange, 0);
  var dateDifference = dateRangePair.isStart ? endDateMinRange : -endDateMinRange;
  var secondDateEdit = dateRangePair.isStart ? dateRangePair.endDateEdit : dateRangePair.startDateEdit;
  var secondDate = ASPxClientCalendar.GetDateByOffset(changedDate, dateDifference, secondDateEdit.pickerType);
  secondDateEdit.SetDate(secondDate);
  secondDateEdit.RaiseValueChangedEvent(true);
 },
 UpdateCalendarVisibleDate: function(targetCalendar, dateRangePair) {
  var rangeRestricts = ASPxDateRangeHelper.GetCurrentRangeRestrictions(dateRangePair);
  targetCalendar.visibleDateColumnOffset = 0;
  if (ASPxDateRangeHelper.IsStartRestrictionExistsOnly(rangeRestricts) && !dateRangePair.isStart) {
   targetCalendar.SetVisibleDate(rangeRestricts.startDate);
  }
  if (ASPxDateRangeHelper.IsEndRestrictionExistsOnly(rangeRestricts)
   || ASPxDateRangeHelper.IsBothRangeRestrictionsExist(rangeRestricts) && !dateRangePair.isStart) {
   targetCalendar.SetVisibleDate(rangeRestricts.endDate);
   if(!ASPxDateRangeHelper.AreRestrictionsOfSamePeriod(rangeRestricts, targetCalendar.pickerType))
    targetCalendar.OnShiftMonth(-1 * (targetCalendar.columns - 1), true);
  }
 },
 GetRangeToSelectInCalendar: function(targetCalendar, dateRangePair, isCalendarShowing) {
  var rangeRestricts = ASPxDateRangeHelper.GetCurrentRangeRestrictions(dateRangePair);
  var calendarHasOwnSelectedDate = targetCalendar.lastSelectedDate != null;
  var correctRangeRestrictsForSelection = !isCalendarShowing && calendarHasOwnSelectedDate;
  if (correctRangeRestrictsForSelection) {
   var calendarLastSelectedDate = ASPxClientCalendar.CloneDate(targetCalendar.lastSelectedDate);
   if (dateRangePair.isStart)
    rangeRestricts.startDate = calendarLastSelectedDate;
   else
    rangeRestricts.endDate = calendarLastSelectedDate;
  }
  return rangeRestricts;
 },
 SelectRangeInCalendar: function(targetCalendar, isCalendarShowing) {
  var dateRangePair = ASPxDateRangeHelper.GetDateEditPair(ASPxClientDateEdit.active);
  if(!dateRangePair.isInRangeMode)
   return;
  var rangeRestrictsToSelect = this.GetRangeToSelectInCalendar(targetCalendar, dateRangePair, isCalendarShowing);
  if(ASPxDateRangeHelper.IsNegativeRange(rangeRestrictsToSelect))
   return;
  targetCalendar.clientUpdate = true;
  targetCalendar.LockUpdateAnimation();
  targetCalendar.ClearSelection();
  if(ASPxDateRangeHelper.IsBothRangeRestrictionsExist(rangeRestrictsToSelect))
   targetCalendar.SelectRange(rangeRestrictsToSelect.startDate, rangeRestrictsToSelect.endDate);
  if(ASPxDateRangeHelper.IsEndRestrictionExistsOnly(rangeRestrictsToSelect))
   targetCalendar.SelectDate(rangeRestrictsToSelect.endDate);
  if(ASPxDateRangeHelper.IsStartRestrictionExistsOnly(rangeRestrictsToSelect))
   targetCalendar.SelectDate(rangeRestrictsToSelect.startDate);
  targetCalendar.UnlockUpdateAnimation();
  targetCalendar.Update();
  targetCalendar.clientUpdate = false;
 },
 OnCalendarShowing: function(dateEdit) {
  var dateRangePair = ASPxDateRangeHelper.GetDateEditPair(ASPxClientDateEdit.active);
  if(!dateRangePair.isInRangeMode)
   return;
  var targetCalendar = ASPxClientDateEdit.active.GetCalendar();
  if(!targetCalendar)
   return;
  UTILS.UpdateCalendarVisibleDate(targetCalendar, dateRangePair);
  UTILS.SetActualMinDate(dateEdit);
  UTILS.SelectRangeInCalendar(targetCalendar, true);
 },
 RegisterSharedCalendar: function(calendar) {
  if(calendar)
   ASPxClientDateEdit.SharedCalendarCollection.registerCalendarId(calendar.name);   
 }
};
ASPxClientDateEdit.SharedCalendarCollection = (function(){
 var sharedCalendarIdCollection = [];
 return {
  registerCalendarId: function(calendarId) {
   if(ASPx.Data.ArrayIndexOf(sharedCalendarIdCollection, calendarId) == -1)
    sharedCalendarIdCollection.push(calendarId);
  },
  calendarIsShared: function(calendarId) {
   return ASPx.Data.ArrayIndexOf(sharedCalendarIdCollection, calendarId) != -1;
  }
 };
})();
ASPxClientDateEdit.Cast = ASPxClientControl.Cast;
ASPxClientDateEdit.active = null;
ASPxClientDateEdit.HandleCalendarSelectionChanging = function(s, e) {
 if(ASPxClientDateEdit.active == null) return;
 ASPxClientDateEdit.active.OnCalendarSelectionChanging(e.selection.GetFirstDate(), true);
};
ASPxClientDateEdit.HandleCalendarCustomDisabledDate = function(s, e) {
 this.OnCalendarCustomDisabledDate(e);
};
ASPxClientDateEdit.HandleCalendarCellClick = function(s, e) {
 this.RaiseCalendarCellClick(e);
};
ASPxClientDateEdit.HandleTimeEditInternalValueChanging = function(s, date) {
 if(ASPxClientDateEdit.active == null) return;
 ASPxClientDateEdit.active.OnTimeEditInternalValueChanging(date);
};
ASPxClientDateEdit.HandleCalendarMainElementClick = function(s, e) {
 var dateEdit = ASPxClientDateEdit.active;
 if(dateEdit == null) 
  return;
 var focusEditor = true;
 if(dateEdit.GetShowTimeSection())
  focusEditor = !ASPx.GetIsParent(dateEdit.GetTimeEdit().GetMainElement(), ASPx.Evt.GetEventSource(e));
 if(focusEditor) {
  if(ASPx.Browser.VirtualKeyboardSupported)
   ASPx.VirtualKeyboardUI.smartFocusEditor(dateEdit);
  else 
   dateEdit.SetFocus();
 }
};
var ASPxClientParseDateEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(value) {
  this.constructor.prototype.constructor.call(this);
  this.value = value;
  this.date = null;
  this.handled = false;
 } 
});
ASPx.DECalClearClick = function() {
 var edit = ASPxClientDateEdit.active;
 if(edit)
  edit.OnTimeSectionClearClick();
};
ASPx.DETimeEditKeyDown = function(s,e) {
 var edit = ASPxClientDateEdit.active;
 if(!edit) return;
 switch(e.htmlEvent.keyCode) {
  case ASPx.Key.Enter:
   edit.OnTimeEditEnter();
   break;
  case ASPx.Key.Esc:
   edit.OnTimeEditEsc();
   break;
  case ASPx.Key.Tab:
   edit.OnTimeEditTab(e.htmlEvent.shiftKey);
   break;
 }
};
ASPx.DETimeEditLostFocus = function() {
 var edit = ASPxClientDateEdit.active;
 if(!edit) return;
 edit.OnTimeEditLostFocus();
};
window.ASPxClientDateEdit = ASPxClientDateEdit;
window.ASPxClientParseDateEventArgs = ASPxClientParseDateEventArgs;
ASPx.DateRangeValidationPattern = DateRangeValidationPattern;
ASPx.DateEditScrollPickerController = DateEditScrollPickerController;
})();

(function() {
ASPx.PCWIdSuffix = "_PW";
var popupControlZIndex = 11998;
var defaultZIndexFromServer = "10000";
var ModalAlign = {
 WindowLeft: "WindowLeft",
 WindowCenter: "WindowCenter",
 WindowRight: "WindowRight",
 WindowTop: "WindowTop",
 WindowBottom: "WindowBottom"
};
function PCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset) {
 this.horizontalDirection = horizontalDirection;
 this.verticalDirection = verticalDirection;
 this.horizontalOffset = horizontalOffset;
 this.verticalOffset = verticalOffset;
 this.course = verticalDirection + horizontalDirection;
}
var PopupControlCssClasses = {};
PopupControlCssClasses.Prefix = "dxpc-";
PopupControlCssClasses.SizeGripLiteCssClassName = PopupControlCssClasses.Prefix + "sizeGrip";
PopupControlCssClasses.LinkCssClassName = PopupControlCssClasses.Prefix + "link";
PopupControlCssClasses.ShadowLiteCssClassName = PopupControlCssClasses.Prefix + "shadow";
PopupControlCssClasses.MainDivLiteCssClass = PopupControlCssClasses.Prefix + "mainDiv";
PopupControlCssClasses.ContentWrapperCssClassName = PopupControlCssClasses.Prefix + "contentWrapper";
PopupControlCssClasses.ContentCssClassName = PopupControlCssClasses.Prefix + "content";
PopupControlCssClasses.HeaderContentCssClassName = PopupControlCssClasses.Prefix + "headerContent";
PopupControlCssClasses.WindowWrapperCssClassName = PopupControlCssClasses.Prefix + "win-wrapper";
PopupControlCssClasses.WindowWrapperScrollCssClassName = PopupControlCssClasses.WindowWrapperCssClassName + "-scroll";
PopupControlCssClasses.HeaderCssClassName = "dxpc-header";
var LoadContentViaCallback = {
 Default: "Default",
 OnFirstShow: "OnFirstShow",
 OnPageLoad: "OnPageLoad"
};
var constants = {
 DEFAULT_WINDOW_WIDTH: 200,
 DEFAULT_WINDOW_HEIGHT: 0
};
var ASPxClientPopupControlBase = ASPx.CreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.leadingAfterInitCall = ASPxClientControl.LeadingAfterInitCallConsts.Direct; 
  this.adjustInnerControlsSizeOnShow = true;
  this.shadowVisible = true;
  this.cookieName = "";
  this.popupAnimationType = "none";
  this.closeAnimationType = "none";
  this.closeAction = "OuterMouseClick";
  this.isPopupFullCorrectionOn = true;
  this.forceAdjustPositionToClientScreen = false;
  this.usedInDropDown = false; 
  this.popupHorizontalOffset = 0;
  this.popupVerticalOffset = 0;
  this.popupHorizontalAlign = ASPx.PopupUtils.NotSetAlignIndicator;
  this.popupVerticalAlign = ASPx.PopupUtils.NotSetAlignIndicator;
  this.contentLoadingMode = LoadContentViaCallback.Default;
  this.slideAnimationDuration = 80;
  this.fadeAnimationDuration = 400;
  this.enableAnimation = true;
  this.showOnPageLoad = false;
  this.isDragged = false;
  this.closeOnEscape = false;
  this.savedCallbackWindowIndex = null;
  this.animationLockCount = 0;
  this.windowRequestCount = [];
  this.lpTimers = [];
  this.callbackAnimationProcessings = [];
  this.isCallbackFinishedStates = [];
  this.savedCallbackResults = [];
  this.loadingPanels = [];
  this.loadingDivs = [];
  this.left = 0;
  this.top = 0;
  this.height = constants.DEFAULT_WINDOW_HEIGHT;
  this.width = constants.DEFAULT_WINDOW_WIDTH;
  this.minHeight = null;
  this.minWidth = null;
  this.maxHeight = null;
  this.maxWidth = null;
  this.isResized = false;
  this.cachedSize = null;
  this.enableContentScrolling = false;
  this.contentOverflowX = "None";
  this.contentOverflowY = "None";
  this.contentUrl = "";
  this.contentUrlIFrameTitle = "";
  this.iframeLoading = false;
  this.iframeAdjustingPostponed = false;
  this.isPopupPositionCorrectionOn = true;
  this.resizeSessionCache = {};
  this.ResizeBorderSize = ASPx.Browser.TouchUI ? 10 : 6;
  this.ResizeCornerBorderSize = 20;
  this.isLiveResizingMode = true;
  this.allowResize = false;
  this.allowDragging = false;
  this.allowDraggingInAdaptiveMode = false;
  this.isWindowDragging = false;
  this.prohibitClearSelectionOnMouseDown = false;
  this.windowElements = {};
  this.windowContentElements = {};
  this.zIndex = -1;
  this.appearAfter = 300;
  this.disappearAfter = 500;
  this.popupAction = "LeftMouseClick";
  this.autoUpdatePosition = false;
  this.defaultIsPopuped = false;
  this.defaultLastUsedPopupElementInfo = {};
  this.defaultWindowPopupElementList = [];
  this.defaultWindowPopupElementIDList = [];
  this.firstFocusableElement = null;
  this.lastFocusableElement = null;
  this.focusLastElementHandler = function(e) { this.loopFocusHandler(e, false); }.aspxBind(this);
  this.focusFirstElementHandler = function(e) { this.loopFocusHandler(e, true); }.aspxBind(this);
  this.setFocusOnCallback = true;
  this.accessibleFocusElement = null;
  this.preventAccessibilityFocus = false;
  this.CloseButtonClick = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  this.Closing = new ASPxClientEvent();
  this.PopUp = new ASPxClientEvent();
  this.Shown = new ASPxClientEvent();
  this.Resize = new ASPxClientEvent();
  this.Dragged = new ASPxClientEvent(); 
  this.BeforeDrag = new ASPxClientEvent(); 
  this.BeforeResizing = new ASPxClientEvent();
  this.AfterResizing = new ASPxClientEvent();
  aspxGetPopupControlCollection().Add(this);
 },
 WindowElementIDAssignmentMap: [
  { cssClass: PopupControlCssClasses.HeaderCssClassName, prefix: "_PWH" },
  { cssClass: "dxpc-headerText", prefix: "_PWH", postfix: "T" },
  { cssClass: "dxpc-headerImg", prefix: "_PWH", postfix: "I" },
  { cssClass: "dxpc-closeBtn", prefix: "_HCB" },
  { cssClass: "dxpc-pinBtn", prefix: "_HPB" },
  { cssClass: "dxpc-refreshBtn", prefix: "_HRB" },
  { cssClass: "dxpc-collapseBtn", prefix: "_HMNB" },
  { cssClass: "dxpc-maximizeBtn", prefix: "_HMXB" },
  { cssClass: "dxpc-content", prefix: "_PWC" },
  { cssClass: "dxpc-iFrame", prefix: "_CIF" },
  { cssClass: "dxpc-footer", prefix: "_PWF" },
  { cssClass: "dxpc-footerText", prefix: "_PWF", postfix: "T" },
  { cssClass: "dxpc-footerImg", prefix: "_PWF", postfix: "I" }
 ],
 Initialize: function() {
  this.InitializeBeforeAnyShow();
  ASPxClientControl.prototype.Initialize.call(this);
  if(this.accessibilityCompliant)
   this.InitializeAccessibleNavigation();
 },
 InitializeWindow: function(index) {
  ASPx.PopupUtils.BodyScrollHelper.RestoreIfLocked(this.GetWindowElementId(index));
  this.RemoveWindowAllPopupElements(index);
  this.PopulatePopupElements(index);
  var element = this.GetWindowElement(index);
  if(element != null) {
   this.AssignWindowElementsID(index, element);
   this.AssignWindowElementsEvents(index, element);
   element.DXPopupWindowElement = true;
   if(ASPx.Browser.IE)
    this.AttachOnDragStartEventToWindowImages(index);
   this.EnsureWindowContentUrl(index);
   element.isHiding = false;
   element.isPopupPositionCorrectionOn = this.isPopupPositionCorrectionOn || !this.GetShowOnPageLoad(index);
   if(this.GetShowOnPageLoad(index) && this.GetZIndex(index) > 0) {
    this.FirstShowWindow(index, false);
    this.SetWindowElementZIndex(element, this.GetZIndex(index));
    element.isPopupPositionCorrectionOn = true;
   }
   this.InitializeWindowEscKeyHandler(element, index);
   if(this.GetCanScrollViewPort(index))
    ensureViewPortSizeInterval();
  }
 },
 InitializeBeforeAnyShow: function() {
  this.InitializeEnableContentScrolling();
 },
 InitializeEnableContentScrolling: function() {
  this.enableContentScrolling = this.contentOverflowX != "None" || this.contentOverflowY != "None";
 },
 InitializeWindowEscKeyHandler: function(element, index) {
  if(!this.GetEnableCloseByEsc(index)) return;
  this.AddKeyDownHandler("ESC", this.OnEscKeyDown.aspxBind(this));
 },
 AfterInitialize: function() {
  if(this.HasDefaultWindow())
   this.AfterInitializeWindow(-1);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.AfterInitializeWindow(i);
  ASPxClientControl.prototype.AfterInitialize.call(this);
 },
 AfterInitializeWindow: function(index) {
  if(this.GetShowOnPageLoad(index) && this.GetZIndex(index) < 0) {
   this.FirstShowWindow(index, true);
   var element = this.GetWindowElement(index);
   if(element != null)
    element.isPopupPositionCorrectionOn = true;
  }
  this.EnsureContent(index, true);
 },
 AssignWindowElementsID: function(index, windowElement) {
  for(var i = 0; i < this.WindowElementIDAssignmentMap.length; i++) {
   var elementClass = this.WindowElementIDAssignmentMap[i].cssClass;
   var elements = ASPx.GetNodesByClassName(windowElement, elementClass);
   for(var j = 0; j < elements.length; j++) {
    var element = elements[j];
    if(this.GetFirstParentWindow(element) === windowElement)
     this.AssignElementID(element, index, this.WindowElementIDAssignmentMap[i].prefix, this.WindowElementIDAssignmentMap[i].postfix);
   }
  }
 },
 AssignElementID: function(element, index, prefix, postfix) {
  element.id = this.name + prefix + index + (postfix ? postfix : "");
 },
 AssignWindowElementsEvents: function(index, element) {
  var header = this.GetWindowHeaderElement(index);
  if(header && this.allowDragging && !this.isWindowDragging)
   ASPx.Evt.AttachEventToElement(header, ASPx.TouchUIHelper.touchMouseDownEventName, this.GetWindowHeaderElementMouseDownEventHandler(index), true);
  this.AssignHeaderButtonsEvents(index);
  var mdEventName = ASPx.TouchUIHelper.touchMouseDownEventName;
  ASPx.Evt.AttachEventToElement(element, mdEventName, this.GetWindowElementMouseDownEventHandler(index));
  if(this.IsResizeAllowed(index)) {
   var mmEventName = ASPx.TouchUIHelper.touchMouseMoveEventName;
   ASPx.Evt.AttachEventToElement(element, mmEventName, this.GetWindowElementMouseMoveEventHandler(index));
  }
  var sizeGrip = this.GetWindowSizeGripElement(index);
  if(sizeGrip) {
   var instance = this;
   ASPx.Evt.AttachEventToElement(sizeGrip, mdEventName, function(evt) {
    ASPx.PWGripMDown(evt, instance.name, index);
    ASPx.Evt.PreventEvent(evt);
   });
  }
 },
 AssignHeaderButtonsEvents: function(index) {
  this.AttachClickToHeaderButton(index, this.GetWindowCloseButton(index), "ASPx.PWCBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowRefreshButton(index), "ASPx.PWRBClick");
 },
 AttachClickToHeaderButton: function(index, headerButton, eventFuncName) {
  var instance = this;
  if(headerButton) {
   ASPx.Evt.AttachEventToElement(headerButton, "click", function(evt) {
    eval(eventFuncName)(evt, instance.name, index);
   });
  }
 },
 AttachOnDragStartEventToWindowImages: function(index) {
  this.AttachChildImagesPreventDragStartEvent(this.GetWindowHeaderElement(index));
  this.AttachChildImagesPreventDragStartEvent(this.GetWindowFooterElement(index));
 },
 AttachChildImagesPreventDragStartEvent: function(parentElem) {
  var images = parentElem == null ? null : ASPx.GetNodesByTagName(parentElem, "img");
  if(images != null) {
   for(var i = 0; i < images.length; i++)
    ASPx.Evt.AttachEventToElement(images[i], "dragstart", ASPx.Evt.PreventDragStart);
  }
 },
 GetPropertyValue: function(index, propName) {
  return this[propName];
 },
 SetPropertyValue: function(index, propName, value) {
  this[propName] = value;
 },
 GetStretchVerticallyByIndex: function(index) {
  return this.GetPropertyValue(index, "stretchVertically");
 },
 GetModalMaxWidth: function(index) {
  return this.GetPropertyValue(index, "modalMaxWidth");
 },
 SetAdaptiveMaxWidthByIndex: function(index, value) {
  value = this.ConvertDimensionValueToString(value);
  this.SetPropertyValue(index, "modalMaxWidth", value);
  this.GetWindowElement(index).style["maxWidth"] = value;
  if(value.indexOf("px") > 0)
   this.EnsureMaxWidthClassName(index, ASPx.PxToInt(value));
 },
 EnsureMaxWidthClassName: function(index, maxWidth) {
  var defaultPaddingsWidth = 20;
  ASPx.ToggleClassNameToElement(this.GetModalWrapperElement(index), "dxmodalMaxWidth", maxWidth < ASPx.MaxMobileWindowWidth - defaultPaddingsWidth);
 },
 GetModalMinWidth: function(index) {
  return this.GetPropertyValue(index, "modalMinWidth");
 },
 SetAdaptiveMinWidthByIndex: function(index, value) {
  value = this.ConvertDimensionValueToString(value);
  this.SetPropertyValue(index, "modalMinWidth", value);
  this.GetWindowElement(index).style["minWidth"] = value;
 },
 GetModalMinHeight: function(index) {
  return this.GetPropertyValue(index, "modalMinHeight");
 },
 SetAdaptiveMinHeightByIndex: function(index, value) {
  this.StretchVerticallyByIndex(index, false);
  this.SetPropertyValue(index, "modalMinHeight", value);
  this.SetAdaptiveHeightDimension(index, "minHeight", value);
 },
 GetModalMaxHeight: function(index) {
  return this.GetPropertyValue(index, "modalMaxHeight");
 },
 SetAdaptiveMaxHeightByIndex: function(index, value) {
  this.SetPropertyValue(index, "modalMaxHeight", value);
  this.SetAdaptiveHeightDimension(index, "maxHeight", value);
 },
 GetFixedHeader: function(index) {
  return this.GetPropertyValue(index, "fixedHeader");
 },
 GetFixedFooter: function(index) {
  return this.GetPropertyValue(index, "fixedFooter");
 },
 GetWindowWidthInternal: function(index) {
  return this.GetPropertyValue(index, "width");
 },
 GetWindowHeightInternal: function(index) {
  return this.GetPropertyValue(index, "height");
 },
 SetWindowHeight: function(index, height) {
  this.SetPropertyValue(index, "height", height);
 },
 SetWindowWidth: function(index, width) {
  this.SetPropertyValue(index, "width", width);
 },
 GetWindowMinWidth: function(index) {
  return this.GetPropertyValue(index, "minWidth");
 },
 GetWindowMaxWidth: function(index) {
  return this.GetPropertyValue(index, "maxWidth");
 },
 GetWindowMinHeight: function(index) {
  return this.GetPropertyValue(index, "minHeight");
 },
 GetWindowMaxHeight: function(index) {
  return this.GetPropertyValue(index, "maxHeight");
 },
 SetWindowCachedSize: function(index, width, height) {
  this.SetPropertyValue(index, "cachedSize", new ASPx.PopupSize(width, height));
 },
 GetWindowCachedSize: function(index) {
  return this.GetPropertyValue(index, "cachedSize");
 },
 ResetWindowCachedSize: function(index) {
  this.SetPropertyValue(index, "cachedSize", null);
 },
 GetPosition: function(index, isLeft) {
  return this.GetPropertyValue(index, isLeft ? "left" : "top");
 },
 GetWindowTop: function(index) {
  return this.GetPropertyValue(index, "top");
 },
 SetWindowTop: function(index, top) {
  this.SetPropertyValue(index, "top", top);
 },
 GetWindowLeft: function(index) {
  return this.GetPropertyValue(index, "left");
 },
 SetWindowLeft: function(index, left) {
  this.SetPropertyValue(index, "left", left);
 },
 GetEnableCloseByEsc: function(index) {
  return this.GetPropertyValue(index, "closeOnEscape");
 },
 GetIsDragged: function(index) {
  return this.GetPropertyValue(index, "isDragged");
 },
 GetWindowContentIFrameUrl: function(index) {
  return this.GetPropertyValue(index, "contentUrl");
 },
 GetWindowContentIFrameTitle: function(index) {
  return this.GetPropertyValue(index, "contentUrlIFrameTitle");
 },
 GetWindowCloseAction: function(index) {
  return this.GetPropertyValue(index, "closeAction");
 },
 GetShowOnPageLoad: function(index) {
  return this.GetPropertyValue(index, "showOnPageLoad");
 },
 GetZIndex: function(index) {
  return this.GetPropertyValue(index, "zIndex");
 },
 GetIframeLoading: function(index) {
  return this.GetPropertyValue(index, "iframeLoading");
 },
 SetIframeLoading: function(index, value) {
  this.SetPropertyValue(index, "iframeLoading", value);
 },
 SetIsDragged: function(index, value) {
  this.SetPropertyValue(index, "isDragged", value);
 },
 GetIsResized: function(index) {
  return this.GetPropertyValue(index, "isResized");
 },
 SetIsResized: function(index, value) {
  this.SetPropertyValue(index, "isResized", value);
 },
 SetIframeAdjustingPostponed: function(index, value) {
  this.SetPropertyValue(index, "iframeAdjustingPostponed", value);
 },
 GetIframeAdjustingPostponed: function(index) {
  return this.GetPropertyValue(index, "iframeAdjustingPostponed");
 },
 GetWindowPopupAction: function(index) {
  return this.GetPropertyValue(index, "popupAction");
 },
 GetWindowElementMouseMoveEventHandler: function(index) {
  var instance = this;
  return function(evt) { ASPx.PWMMove(evt, instance.name, index); };
 },
 GetWindowElementMouseDownEventHandler: function(index) {
  var instance = this;
  return function(evt) {
   if(instance.AllowMouseDown(evt, index))
    ASPx.PWMDown(evt, instance.name, index, instance.isWindowDragging);
  };
 },
 GetWindowHeaderElementMouseDownEventHandler: function(index) {
  var instance = this;
  return function(evt) {
   if(instance.AllowMouseDown(evt, index))
    ASPx.PWDGMDown(evt, instance.name, index);
  };
 },
 AllowMouseDown: function(evt, index) {
  return !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowCloseButton(index)) &&
   !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowRefreshButton(index));
 },
 PreventHeaderButtonMouseDownBubbling: function(evt, hdrButton) {
  if(hdrButton) {
   var source = ASPx.Evt.GetEventSource(evt);
   if(ASPx.GetIsParent(hdrButton, source)) {
    ASPx.PWHMDown(evt);
    return true;
   }
  }
  return false;
 },
 PrepareToAdjustContentOnShow: function(index) {
  if(this.adjustInnerControlsSizeOnShow) {
   var windowContent = this.GetContentContainer(index),
    collection = ASPx.GetControlCollection();
   collection.CollapseControls(windowContent);
  }
 },
 AdjustContentOnShow: function(index) {
  if(this.adjustInnerControlsSizeOnShow) {
   var windowElement = this.GetWindowElement(index);
   ASPx.GetControlCollection().AdjustControls(windowElement, false);
  }
 },
 AdjustSize: function() {
  if(this.enableContentScrolling)
   return;
  this.SetSize(0, 0);
 },
 GetFirstParentWindow: function(el) {
  while(el && el.tagName != "BODY") {
   if(el.nodeType == 1 && el.className.indexOf("dxpclW") > -1 && !isNaN(this.GetWindowIndex(el)))
    return el;
   el = el.parentNode;
  }
 },
 getParentPopupControl: function(index) {
  var parentPopupWindowElement = this.GetFirstParentWindow(this.GetWindowElement(index).parentNode);
  if(parentPopupWindowElement)
   return aspxGetPopupControlCollection().GetPopupWindowFromID(parentPopupWindowElement.id);
 },
 registerAndActivateWindow: function(windowElement, index, allowChangeZIndex) {
  aspxGetPopupControlCollection().RegisterVisibleWindow(windowElement, this, index);
  if(allowChangeZIndex)
   aspxGetPopupControlCollection().ActivateWindowElement(windowElement, undefined, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
 },
 HasCloseAnimation: function() {
  return this.closeAnimationType != ASPxClientPopupControlBase.AnimationType.None;
 },
 AddKeyDownHandler: function(shortcutString, handler) {
  if(typeof(this.keyDownHandlers) === "undefined")
   this.keyDownHandlers = [];
  this.keyDownHandlers[ASPx.ParseShortcutString(shortcutString)] = handler;
 },
 InternalIsWindowDisplayed: function(index) {
  var element = this.GetWindowElement(index);
  return (element != null) ? ASPx.GetElementDisplay(element) : false;
 },
 InternalIsWindowVisible: function(index) {
  var element = this.GetWindowElement(index);
  if(!element)
   return false;
  if(this.HasCloseAnimation() && !element.closeAnimationCompleted)
   return false;
  return ASPx.GetElementVisibility(element) && ASPx.GetElementDisplay(element);
 },
 IsWindowVisible: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.InternalIsWindowVisible(index);
 },
 IsVisible: function() {
  return this.InternalIsWindowVisible(-1);
 },
 UpdateWindowsStateCookie: function() {
  if(this.cookieName == "") return;
  ASPx.Cookie.DelCookie(this.cookieName);
  ASPx.Cookie.SetCookie(this.cookieName, this.GetWindowsState());
 },
 SetWindowElementZIndex: function(element, zIndex) {
  element.style.zIndex = zIndex;
  var iFrame = element.overflowElement;
  if(iFrame)
   iFrame.style.zIndex = zIndex - 1;
  var modalElement = element.modalElement;
  if(modalElement)
   modalElement.style.zIndex = zIndex - 1;
  this.UpdateWindowsStateCookie();
 },
 SetWindowContentHtmlCore: function(index, html, useAnimation) {
  var element = this.GetContentContainer(index);
  if(element != null) {
   ASPx.SetInnerHtml(element, html);
   this.AfterSetWindowContentHtml(index, element, useAnimation);
  }
 },
 SetContentHtml: function(html, useAnimation) {
  this.SetWindowContentHtml(null, html, useAnimation);
  if(html && this.accessibilityCompliant)
   ASPx.GetControlCollection().ControlsInitialized.AddHandler(this.OnControlsInitialized, this);
 },
 SetWindowContentHtml: function(window, html, useAnimation) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowContentHtmlCore(index, html, useAnimation);
 },
 GetContentHtml: function() {
  return this.GetWindowContentHtml(null);
 },
 AfterSetWindowContentHtml: function(index, contentContainer, useAnimation) {
  if(useAnimation && typeof (ASPx.AnimationHelper) != "undefined")
   ASPx.AnimationHelper.fadeIn(contentContainer, function() { this.ResizeWindowIFrame(index); }.aspxBind(this));
  else
   this.ResizeWindowIFrame(index);
 },
 ResizeWindowIFrame: function(index) {
  if(!this.renderIFrameForPopupElements || !this.InternalIsWindowVisible(index)) return;
  var iFrame = this.GetWindowIFrame(index);
  if(iFrame) {
   var cell = this.GetWindowMainCell(this.GetWindowElement(index));
   ASPx.SetStyles(iFrame, { width: cell.offsetWidth, height: cell.offsetHeight });
  }
 },
 DoHideWindow: function(index, dontRaiseClosing, closeReason) {
  if(!this.InternalIsWindowVisible(index)) return;
  var cancel = !dontRaiseClosing && this.RaiseClosing(index, closeReason);
  if(!cancel) {
   if(this.HasCloseAnimation())
    this.DoHideWindowCoreWithAnimation(index, closeReason);
   else {
    this.DoHideWindowCore(index, closeReason);
    this.RaiseCloseUp(index, closeReason);
   }
  }
  return cancel;
 },
 HasAnyScrollBars: function(index) {
  var contentElement = this.GetWindowContentElement(index);
  var hasBothScrollBars = contentElement.style.overflow == "scroll" || contentElement.style.overflow == "auto";
  return hasBothScrollBars || contentElement.style.overflowX == "scroll" ||
   contentElement.style.overflowY == "scroll" || contentElement.style.overflowX == "auto" ||
   contentElement.style.overflowY == "auto";
 },
 DoHideWindowModalElement: function(element, closeReason) {
  var modalElement = element.modalElement;
  if(modalElement && ASPx.GetElementVisibility(modalElement, true)) {
   var closeModalElement = function () {
    ASPx.SetStyles(modalElement, { width: 1, height: 1, zIndex: defaultZIndexFromServer - 1 });
    ASPx.SetElementVisibility(modalElement, false);
    ASPx.SetElementDisplay(modalElement, false);
   };
   aspxGetPopupControlCollection().UnregisterVisibleModalElement(modalElement);
   if(this.GetHideBodyScrollWhenModal(this.GetWindowIndex(element))) {
    if(ASPx.Browser.WebKitFamily)
     aspxGetPopupControlCollection().LockScrollEvent();
    if(!ASPx.Browser.WebKitTouchUI)
     ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
    if(ASPx.Browser.WebKitFamily)
     aspxGetPopupControlCollection().UnlockScrollEvent();
   }
   if(closeReason == ASPxClientPopupControlCloseReason.OuterMouseClick) {     
    ASPx.SetStyles(modalElement, { opacity: 0 });
    if(!modalElement.mouseHandler) {
     modalElement.mouseHandler = function() {
      ASPx.SetStyles(modalElement, { opacity: "" });
      closeModalElement();
      ASPx.Evt.DetachEventFromElement(modalElement, "mouseup", modalElement.mouseHandler);
      ASPx.Evt.DetachEventFromElement(modalElement, "mouseout", modalElement.mouseHandler);
     };
    }
    ASPx.Evt.AttachEventToElement(modalElement, "mouseup", modalElement.mouseHandler);
    ASPx.Evt.AttachEventToElement(modalElement, "mouseout", modalElement.mouseHandler);
   } else
    closeModalElement();
  }
 },
 IncreaseWindowRequestCount: function (index) {
  if(!this.windowRequestCount[index])
   this.windowRequestCount[index] = 1;
  else
   this.windowRequestCount[index]++;
 },
 DecreaseWindowRequestCount: function(index) {
  this.windowRequestCount[index]--;
 },
 IsLoadingContainerVisible: function() {
  return true;
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 },
 GetModalElementEndAnimationOpacity: function(index) {
  if(typeof (this.modalElementOpacity) == "undefined")
   this.modalElementOpacity = [];
  if(typeof (this.modalElementOpacity[index]) == "undefined")
   this.modalElementOpacity[index] = ASPx.GetElementOpacity(this.GetWindowModalElement(index));
  return this.modalElementOpacity[index];
 },
 SetModalElementVisibilityWithAnimation: function(modalElement, index) {
  if(this.AllowModalElementAnimation(index)) {
   var endOpacity = this.GetModalElementEndAnimationOpacity(index);
   ASPx.AnimationHelper.setOpacity(modalElement, 0);
   ASPx.SetElementVisibility(modalElement, true);
   ASPx.AnimationHelper.fadeTo(modalElement, { to: endOpacity });
  } else
   ASPx.SetElementVisibility(modalElement, true);
 },
 AllowModalElementAnimation: function(index) {
  return this.popupAnimationType === ASPxClientPopupControlBase.AnimationType.Fade;
 },
 SetVisibleWithAnimation: function(element, isMoving, index, horizontalPopupPosition, verticalPopupPosition) {
  var isAnimationNeed = this.IsAnimationAllowed() && !isMoving;
  if(isAnimationNeed && this.popupAnimationType !== "none") {
   switch(this.popupAnimationType) {
    case ASPxClientPopupControlBase.AnimationType.Slide:
     this.StartSlideAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
     break;
    case ASPxClientPopupControlBase.AnimationType.Fade:
     this.StartFadeAnimation(element, index);
     break;
    case ASPxClientPopupControlBase.AnimationType.Auto:
     this.StartAutoAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
     break;
   }
  }
  else
   ASPx.SetElementVisibility(element, true);
 },
 StartAutoAnimation: function(element, index, horizontalPopupPosition, verticalPopupPosition) {
  ASPx.SetElementVisibility(element, true);
 },
 StartFadeAnimation: function(element, index) {
  ASPx.AnimationHelper.setOpacity(element, 0);
  ASPx.SetElementVisibility(element, true);
  var callback = function() {
   this.OnAnimationStop(index);
  }.aspxBind(this);
  ASPx.AnimationHelper.fadeIn(element, callback, this.fadeAnimationDuration);
 },
 StartSlideAnimation: function (animationDivElement, index, horizontalPopupPosition, verticalPopupPosition) {
  var element = this.GetWindowMainCell(animationDivElement);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  var args = "(\"" + this.name + "\", " + index + ")";
  var onAnimStopCallString = "ASPx.PCAStop" + args;
  this.InitDivPosForShowSlideAnimation(index, animationDivElement, clientX, clientY, onAnimStopCallString);
  var horizontalDirection = this.GetAnimationHorizontalDirection(index, horizontalPopupPosition);
  var verticalDirection = this.GetAnimationVerticalDirection(index, verticalPopupPosition);
  var offsetCoefficient = this.GetSlideOffsetCoefficient(index);
  var xPos = horizontalDirection * animationDivElement.offsetWidth * offsetCoefficient;
  var yPos = verticalDirection * animationDivElement.offsetHeight * offsetCoefficient;
  neddToForceAnimation = xPos === 0 && yPos === 0;
  if(neddToForceAnimation) 
   yPos = 1;
  ASPx.SetStyles(element, { left: xPos, top: yPos });
  ASPx.SetElementVisibility(animationDivElement, true);
  this.DoShowWindowIFrame(index, clientX, clientY, 0, 0);
  ASPx.PopupUtils.StartSlideAnimation(animationDivElement, element, this.GetWindowIFrame(index), this.GetSlideAnimationDuration(index));
 },
 GetSlideAnimationDuration: function(index) {
  return this.slideAnimationDuration;
 },
 GetSlideOffsetCoefficient: function(index) {
  return 1;
 },
 InitDivPosForShowSlideAnimation: function(index, animationDivElement, clientX, clientY, onAnimStopCallString) {
  ASPx.PopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY, onAnimStopCallString, true);
 },
 InitDivPosForHideSlideAnimation: function(animationDivElement) {
 },
 StopShowAnimation: function(index) {
  if(this.popupAnimationType != "none") {
   var windowElement = this.GetWindowElement(index);
   if(this.popupAnimationType === 'slide')
    ASPx.PopupUtils.StopAnimation(windowElement, this.GetWindowMainCell(windowElement));
   else
    ASPx.AnimationHelper.cancelAnimation(windowElement);
  }
 },
 StopCloseAnimation: function(index) {
  var element = this.GetWindowElement(index);
  if(this.HasCloseAnimation() && !element.closeAnimationCompleted) {
   ASPx.AnimationHelper.cancelAnimation(element);
   this.DoHideWindowCore(index);
  }
 },
 IsFadeCloseAnimation: function(index) {
  return this.closeAnimationType === ASPxClientPopupControlBase.AnimationType.Fade;
 },
 PrepareElementAfterCloseAnimation: function(index, element) {
  element.closeAnimationCompleted = true;
  if(this.IsFadeCloseAnimation(index))
   ASPx.SetStyles(element, { opacity: 1 });
  else
   ASPx.SetStyles(this.GetWindowMainCell(element), {
    left: 0,
    top: 0
   });
 },
 DoHideWindowCoreWithAnimation: function(index, closeReason) {
  this.StopShowAnimation(index);
  var element = this.GetWindowElement(index);
  element.closeAnimationCompleted = false;
  if(this.AllowModalElementAnimation(index) && this.CanManipulateWithModalElement(index))
   ASPx.AnimationHelper.fadeOut(element.modalElement, null, this.fadeAnimationDuration);
  switch(this.closeAnimationType) {
   case ASPxClientPopupControlBase.AnimationType.Slide:
    this.DoHideWindowWithSlideAnimation(index, closeReason);
    break;
   case ASPxClientPopupControlBase.AnimationType.Fade:
    this.DoHideWindowWithFadeAnimation(index, element, closeReason);
    break;
   case ASPxClientPopupControlBase.AnimationType.Auto:
    this.DoHideWindowWithAutoAnimation(index, element, closeReason);
    break;
  }
 },
 DoHideWindowWithAutoAnimation: function(index, element, closeReason) {
 },
 DoHideWindowWithFadeAnimation: function(index, element, closeReason) {
  ASPx.AnimationHelper.fadeOut(element, function() {
   this.DoHideWindowCore(index);
   this.RaiseCloseUp(index, closeReason);
  }.aspxBind(this), this.fadeAnimationDuration);
 },
 DoHideWindowWithSlideAnimation: function(index, closeReason) {
  var element = this.GetWindowElement(index);
  var horizontalPopupPosition = this.GetSlideAnimationPosition(element, true);
  var verticalPopupPosition = this.GetSlideAnimationPosition(element, false);
  var horizontalDirection = this.GetAnimationHorizontalDirection(index, horizontalPopupPosition);
  var verticalDirection = this.GetAnimationVerticalDirection(index, verticalPopupPosition);
  this.InitDivPosForHideSlideAnimation(element);
  var offsetCoefficient = this.GetSlideOffsetCoefficient(index);
  ASPx.AnimationHelper.createMultipleAnimationTransition(this.GetWindowMainCell(element), {
   duration: this.GetSlideAnimationDuration(index),
   onComplete: function(element) {
    this.DoHideWindowCore(index);
    this.RaiseCloseUp(index, closeReason);
   }.aspxBind(this)
  }).Start({
   left: { to: horizontalDirection * element.offsetWidth * offsetCoefficient, unit: "px" },
   top: { to: verticalDirection * element.offsetHeight * offsetCoefficient, unit: "px" }
  });
 },
 GetSlideAnimationPosition: function(element, isX) {
  return this.GetClientPopupPos(element, null, ASPx.InvalidPosition, isX, true);
 },
 GetAnimationHorizontalDirection: function(index, horizontalPopupPosition) {
  return ASPx.PopupUtils.GetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
 },
 GetAnimationVerticalDirection: function(index, verticalPopupPosition) {
  return ASPx.PopupUtils.GetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
 },
 OnAnimationStop: function(index) {
  this.OnWindowShown(index);
 },
 PerformCallback: function(parameter, onSuccess) {
  this.PerformWindowCallback(null, parameter, onSuccess);
 },
 PerformWindowCallback: function(window, parameter, onSuccess) {
  parameter = ASPx.IsExists(parameter) ? parameter.toString() : "";
  var index = (window != null) ? window.index : -1;
  if(!this.InWindowCallback(index)) {
   var windowCallbackArguments = index + ";" + parameter;
   this.CreateWindowCallback(index, windowCallbackArguments, onSuccess);
  }
 },
 InWindowCallback: function(windowIndex) {
  return this.windowRequestCount[windowIndex] > 0;
 },
 CreateWindowCallback: function(windowIndex, argument, handler) {
  this.IncreaseWindowRequestCount(windowIndex);
  var element = this.GetWindowElement(windowIndex);
  if(this.contentLoadingMode != LoadContentViaCallback.OnPageLoad || !element.loading || this.GetShowOnPageLoad(windowIndex))
   this.ShowWindowLoadingElements(windowIndex);
  this.CreateCallback(argument, null, handler);
 },
 OnCallback: function(result) {
  this.OnCallbackInternal(result.html, result.index, false);
 },
 OnCallbackError: function(result, data) {
  this.OnCallbackInternal(result, ASPx.IsExists(data) ? data : -1, true);
 },
 OnCallbackErrorAfterUserHandle: function(result, data) {
  this.DecreaseWindowRequestCount(data);
 },
 OnCallbackInternal: function(html, windowIndex, isError) {
  var element = this.GetWindowElement(windowIndex);
  element.loaded = !isError;
  element.loading = false;
  this.DecreaseWindowRequestCount(windowIndex);
  this.HideWindowLoadingPanel(windowIndex);
  this.SetWindowContentHtmlCore(windowIndex, html);
  this.UpdatePositionAfterCallback(windowIndex);
  this.savedCallbackWindowIndex = windowIndex;
  this.UpdateWindowsStateCookie();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientControl.prototype.RaiseCallbackError.call(this, message);
  if(result.isHandled)
   this.HideAllLoadingPanels();
  return result;
 },
 StartWindowBeginCallbackAnimation: function(windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = true;
  this.isCallbackFinishedStates[windowIndex] = false;
  ASPx.AnimationHelper.fadeOut(this.GetWindowContentElement(windowIndex), function() { this.FinishWindowBeginCallbackAnimation(windowIndex); }.aspxBind(this));
 },
 FinishWindowBeginCallbackAnimation: function(windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = false;
  if(!this.isCallbackFinishedStates[windowIndex])
   this.ShowWindowLoadingElementsInternal(windowIndex);
  else
   this.DoCallback(this.savedCallbackResults[windowIndex]);
 },
 CheckBeginCallbackAnimationInProgress: function(callbackResult) {
  var result;
  try {
   result = this.EvalCallbackResult(callbackResult).result;
  } catch(e) {
   return false;
  }
  var windowIndex = result.index;
  if(this.enableCallbackAnimation && this.callbackAnimationProcessings[windowIndex]) {
   this.savedCallbackResults[windowIndex] = callbackResult;
   this.isCallbackFinishedStates[windowIndex] = true;
   return true;
  }
  return false;
 },
 StartWindowEndCallbackAnimation: function(windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = true;
  ASPx.AnimationHelper.fadeIn(this.GetWindowContentElement(windowIndex), function() { this.FinishWindowEndCallbackAnimation(windowIndex); }.aspxBind(this));
 },
 FinishWindowEndCallbackAnimation: function(windowIndex) {
  this.DoEndCallback();
  this.callbackAnimationProcessings[windowIndex] = false;
 },
 CheckEndCallbackAnimationNeeded: function() {
  var windowIndex = this.savedCallbackWindowIndex;
  this.savedCallbackWindowIndex = null;
  if(windowIndex !== null && !this.callbackAnimationProcessings[windowIndex]) {
   this.StartWindowEndCallbackAnimation(windowIndex);
   return true;
  }
  return false;
 },
 EnsureContent: function(windowIndex, isInit) {
  var element = this.GetWindowElement(windowIndex);
  if(element && !element.loaded && !element.loading) {
   var shouldLoad = this.contentLoadingMode == LoadContentViaCallback.OnPageLoad || this.contentLoadingMode == LoadContentViaCallback.OnFirstShow && !isInit;
   if(shouldLoad) {
    element.loading = true;
    this.CreateWindowCallback(windowIndex, windowIndex);
   } else if(this.contentLoadingMode == LoadContentViaCallback.Default)
    element.loaded = true;
  }
 },
 HideAllLoadingPanels: function() {
  if(this.HasDefaultWindow())
   this.HideWindowLoadingPanel(-1);
  for(var i = 0; i < this.GetWindowCount() ; i++)
   this.HideWindowLoadingPanel(i);
 },
 HideWindowLoadingPanel: function(windowIndex) {
  this.ClearWindowLoadingPanelTimer(windowIndex);
  if(this.loadingDivs[windowIndex]) {
   ASPx.RemoveElement(this.loadingDivs[windowIndex]);
   this.loadingDivs[windowIndex] = null;
  }
  if(this.loadingPanels[windowIndex]) {
   ASPx.RemoveElement(this.loadingPanels[windowIndex]);
   this.loadingPanels[windowIndex] = null;
  }
 },
 ShowWindowLoadingElements: function(windowIndex) {
  if(this.lpTimers[windowIndex] && this.lpTimers[windowIndex] > -1) return;
  if(this.enableCallbackAnimation)
   this.StartWindowBeginCallbackAnimation(windowIndex);
  else
   this.ShowWindowLoadingElementsInternal(windowIndex);
 },
 ShowWindowLoadingPanelOnTimer: function(windowIndex) {
  this.ClearWindowLoadingPanelTimer(windowIndex);
  this.ShowWindowLoadingPanel(windowIndex);
 },
 ClearWindowLoadingPanelTimer: function(windowIndex) {
  this.lpTimers[windowIndex] = ASPx.Timer.ClearTimer(this.lpTimers[windowIndex]);
 },
 ShowWindowLoadingElementsInternal: function(windowIndex) {
  if(this.lpDelay > 1 && !this.enableCallbackAnimation) {
   var _this = this;
   this.lpTimers[windowIndex] = window.setTimeout(function() { _this.ShowWindowLoadingPanelOnTimer(windowIndex); }, this.lpDelay);
  }
  else
   this.ShowWindowLoadingPanel(windowIndex);
 },
 ShowWindowLoadingPanel: function(windowIndex) {
  if(!this.IsExistLoadingPanel())
   return;
  if(!this.loadingPanels[windowIndex] && this.InternalIsWindowVisible(windowIndex)) {
   var parentElement = this.GetWindowElement(windowIndex).parentNode;
   var offsetElement = this.GetLoadingPanelOffsetElement(windowIndex);
   this.loadingDivs[windowIndex] = this.CreateLoadingDiv(parentElement, offsetElement, windowIndex);
   this.loadingPanels[windowIndex] = this.CreateLoadingPanelWithAbsolutePosition(parentElement, offsetElement, windowIndex);
  }
 },
 GetLoadingPanelOffsetElement: function(windowIndex) {
  return this.GetWindowContentWrapperElement(windowIndex);
 },
 IsExistLoadingPanel: function() {
  return !!this.GetLoadingDiv();
 },
 LockAnimation: function() {
  this.animationLockCount++;
 },
 UnlockAnimation: function() {
  this.animationLockCount--;
 },
 IsAnimationLocked: function() {
  return this.animationLockCount > 0;
 },
 IsAnimationAllowed: function() {
  return this.enableAnimation && !this.IsAnimationLocked();
 },
 SetWindowSizeByIndexCore: function(index, width, height, isWindowCollapsed) {
  this.SetClientWindowSizeLite(index, width, height, isWindowCollapsed);
  var iFrame = this.GetWindowIFrame(index);
  if(iFrame && !isWindowCollapsed) {
   var winElememnt = this.GetWindowElement(index);
   var realWidth = winElememnt.offsetWidth;
   var realHeight = winElememnt.offsetHeight;
   ASPx.SetStyles(iFrame, { width: realWidth, height: realHeight });
  }
  this.UpdateWindowsStateCookie();
 },
 SetWindowSizeByIndex: function(index, width, height) {
  var minWidth = this.GetWindowMinWidth(index);
  var minHeight = this.GetWindowMinHeight(index);
  var maxWidth = this.GetWindowMaxWidth(index);
  var maxHeight = this.GetWindowMaxHeight(index);
  if(minWidth)
   width = Math.max(width, minWidth);
  if(minHeight)
   height = Math.max(height, minHeight);
  if(maxWidth)
   width = Math.min(width, maxWidth);
  if(maxHeight)
   height = Math.min(height, maxHeight);
  var isWindowMaximized = this.GetIsMaximized(index);
  var isWindowCollapsed = this.GetIsCollapsed(index);
  var isWindowMaximizedAndCollapsed = (isWindowMaximized && isWindowCollapsed);
  if(this.SizeCanBeSet(index, isWindowMaximizedAndCollapsed)) {
   if(!this.CollapseExecuting() && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()) {
    this.SetWindowCachedSize(index, width, height);
    this.SetIsResized(index, true);
   }
   if(isWindowCollapsed && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()) {
    this.SetWindowCachedSize(index, width, height);
    this.UpdateRestoredWindowSize(index, width, height);
    height = 0;
   }
   if(isWindowMaximized && !this.CollapseExecuting() && !this.ResizingForMaxWindowLocked()) {
    this.SetWindowCachedSize(index, width, height);
    this.UpdateRestoredWindowSize(index, width, height);
   } else {
    this.SetWindowSizeByIndexCore(index, width, height, isWindowCollapsed);
   }
  } else
   this.SetWindowCachedSize(index, width, height);
 },
 SizeCanBeSet: function(index, isWindowMaximizedAndCollapsed) {
  return this.InternalIsWindowDisplayed(index) && this.IsWindowElementsIDAssigned(index) && (!isWindowMaximizedAndCollapsed || this.ResizingForMaxWindowLocked());
 },
 RestoreWindowSizeFromCache: function(index) {
  var cachedSize = this.GetWindowCachedSize(index);
  if(cachedSize != null) {
   this.SetWindowSizeByIndex(index, cachedSize.width, cachedSize.height);
   this.ResetWindowCachedSize(index);
  }
 },
 CollapseExecuting: function() {
  return false;
 },
 MaximizationExecuting: function() {
  return false;
 },
 ResizingForMaxWindowLocked: function() {
  return false;
 },
 IsResizeAllowed: function(index) {
  return this.allowResize;
 },
 GetWindowDimensionByIndex: function(index, isWidth, forceFromCache) {
  var cachedSize = this.GetWindowCachedSize(index);
  var dimensionValue = null;
  if(forceFromCache == undefined && !this.GetWindowElement(index))
   forceFromCache = true;
  if(cachedSize && forceFromCache)
   dimensionValue = isWidth ? cachedSize.width : cachedSize.height;
  if(dimensionValue)
   return dimensionValue;
  else {
   var element = this.GetWindowElement(index);
   var sizeFromDOM = 0;
   if(this.GetIsCollapsed(index)) {
    var headerCell = this.GetWindowHeaderElement(index);
    sizeFromDOM = isWidth ? headerCell.offsetWidth : headerCell.offsetHeight;
   }
   else {
    var mainCell = this.GetWindowMainCell(element);
    sizeFromDOM = isWidth ? mainCell.offsetWidth : mainCell.offsetHeight;
   }
   if(sizeFromDOM === 0 && cachedSize)
    sizeFromDOM = isWidth ? cachedSize.width : cachedSize.height;
   return sizeFromDOM;
  }
 },
 SetWindowSize: function(window, width, height) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowSizeByIndex(index, width, height);
 },
 SetSize: function(width, height) {
  this.SetWindowSize(null, width, height);
 },
 SetWidth: function(width) {
  var height = this.GetHeight();
  this.SetSize(width, height);
 },
 SetHeight: function(height) {
  var width = this.GetWidth();
  this.SetSize(width, height);
 },
 GetHeight: function() {
  return this.GetWindowDimensionByIndex(-1, false, false);
 },
 GetWidth: function() {
  return this.GetWindowDimensionByIndex(-1, true, false);
 },
 CanBeClosedByClickOnElement: function(index, srcElement, posX, id) {
  return srcElement === null || ASPx.GetParentById(srcElement, id) === null;
 },
 OnMouseDown: function(evt, index, isDraggingAllowed, pointOnScrollBar) {
  if(ASPx.Evt.IsLeftButtonPressed(evt)) {
   if((this.IsResizeAllowed(index) || isDraggingAllowed) && !this.prohibitClearSelectionOnMouseDown) 
    ASPx.Selection.Clear();
   var isResizing = this.ProcessResizeOnMouseDown(evt, index);
   var clickedOnScroll = pointOnScrollBar && this.GetEnableContentScrolling(index);
   if(isDraggingAllowed && !isResizing && !clickedOnScroll && !this.GetIsPinned(index) && !this.GetIsMaximized(index) && !ASPx.Ident.IsFocusableElementRegardlessTabIndex(evt.target))
    this.OnDragStart(evt, index);
  }
 },
 OnMouseMove: function(evt, index) {
  if(this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index))
   this.CreateResizeCursorInfo(evt, index);
 },
 CreateResizeCursorInfo: function(evt, index) {
  var element = this.GetWindowElement(index);
  var mainCell = this.GetWindowMainCell(element);
  var clientWindow = this.GetWindowClientTable(index);
  var headerElement = this.GetWindowHeaderElement(index);
  var left = ASPx.GetAbsoluteX(mainCell);
  var top = ASPx.GetAbsoluteY(mainCell);
  var x = ASPx.Evt.GetEventX(evt);
  var y = ASPx.Evt.GetEventY(evt);
  var mainCellWidth = mainCell.offsetWidth;
  var mainCellHeight = mainCell.offsetHeight;
  var leftOffset = Math.abs(x - left);
  var rightOffset = Math.abs(x - left - mainCellWidth);
  var topOffset = Math.abs(y - top);
  var bottomOffset = Math.abs(y - top - mainCellHeight);
  var cursorInfo = this.CreateResizeBorderCursorInfo(index, leftOffset, rightOffset, topOffset, bottomOffset);
  var grip = this.GetWindowSizeGripElement(index);
  if(grip) {
   var gripCursorInfo = this.CreateGripCursorInfo(index, mainCell, grip, leftOffset, rightOffset, bottomOffset);
   if(gripCursorInfo)
    cursorInfo = gripCursorInfo;
  }
  this.UpdateResizeCursor(index, clientWindow, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  this.UpdateResizeCursor(index, mainCell, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  if(headerElement)
   this.UpdateResizeCursor(index, headerElement, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  return cursorInfo;
 },
 UpdateResizeCursor: function(index, element, verticalDirection, horizontalDirection) {
  var cursor = verticalDirection + horizontalDirection;
  if(cursor == "")
   this.HideTemporaryCursor(element);
  else {
   cursor += "-resize";
   this.ShowTemporaryCursor(element, cursor);
  }
 },
 CreateGripCursorInfo: function(index, mainCell, grip, leftOffset, rightOffset, bottomOffset) {
  var gripWidth = this.rtl
   ? ASPx.GetAbsoluteX(grip) - ASPx.GetAbsoluteX(mainCell) + grip.offsetWidth
   : mainCell.offsetWidth - (ASPx.GetAbsoluteX(grip) - ASPx.GetAbsoluteX(mainCell));
  var gripHeight = mainCell.offsetHeight - (ASPx.GetAbsoluteY(grip) - ASPx.GetAbsoluteY(mainCell));
  if(gripHeight > bottomOffset) {
   if(this.rtl && gripWidth > leftOffset)
    return new PCResizeCursorInfo("w", "s", leftOffset, bottomOffset);
   if(gripWidth > rightOffset)
    return new PCResizeCursorInfo("e", "s", rightOffset, bottomOffset);
  }
  return null;
 },
 CreateResizeBorderCursorInfo: function(index, leftOffset, rightOffset, topOffset, bottomOffset) {
  var ResizeBorderSize = this.ResizeBorderSize;
  var verticalDirection = this.GetResizeVerticalCourse(ResizeBorderSize, topOffset, bottomOffset);
  ResizeBorderSize = verticalDirection != "" ? this.ResizeCornerBorderSize : this.ResizeBorderSize;
  var horizontalDirection = this.GetResizeHorizontalCourse(ResizeBorderSize, leftOffset, rightOffset);
  if(verticalDirection == "" && horizontalDirection != "")
   verticalDirection = this.GetResizeVerticalCourse(this.ResizeCornerBorderSize, topOffset, bottomOffset);
  var horizontalOffset = leftOffset < rightOffset ? leftOffset : rightOffset;
  var verticalOffset = topOffset < bottomOffset ? topOffset : bottomOffset;
  return new PCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset);
 },
 GetResizeVerticalCourse: function(ResizeBorderSize, topOffset, bottomOffset) {
  if(ResizeBorderSize > topOffset) return "n";
  if(ResizeBorderSize > bottomOffset) return "s";
  return "";
 },
 GetResizeHorizontalCourse: function(ResizeBorderSize, leftOffset, rightOffset) {
  if(ResizeBorderSize > leftOffset) return "w";
  if(ResizeBorderSize > rightOffset) return "e";
  return "";
 },
 ProcessResizeOnMouseDown: function(evt, index) {
  var isResizing = false;
  if(this.IsResizeAllowed(index) && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index)) {
   var eventSourceControl = ASPx.Evt.GetEventSource(evt);
   var eventFromPopupContainer = ASPx.ElementHasCssClass(eventSourceControl, PopupControlCssClasses.ContentCssClassName) ||
    !ASPx.GetParentByClassName(eventSourceControl, PopupControlCssClasses.ContentCssClassName) ||
    this.eventFromOwnPopupContent(eventSourceControl);
   if(eventFromPopupContainer && getComputedStyle(evt.target).cursor !== "pointer")
    isResizing = this.OnResizeStart(evt, index);
  }
  if(isResizing && ASPx.Browser.WebKitTouchUI)
   aspxGetPopupControlCollection().OverStop();
  return isResizing;
 },
 eventFromOwnPopupContent: function(element) {
  while(element != null) {
   if(element.tagName == "BODY")
    return false;
   if(element.style.position == "absolute") {
    var windowIndex = this.GetWindowIndex(element);
    var isPopupWindow = !isNaN(windowIndex);
    if(isPopupWindow) {
     if(this.GetWindowElementId(windowIndex) == element.id)
      return true;
     return false;
    } else {
     var elementIsOtherPopup = element.style.zIndex >= this.GetPopupControlZIndex(); 
     if(elementIsOtherPopup)
      return false;
    }
   }
   element = element.parentNode;
  }
  return false;
 },
 OnResizeStart: function(evt, index) {
  if(!aspxGetPopupControlCollection().IsResizeInint()) {
   var cursor = this.CreateResizeCursorInfo(evt, index);
   if(cursor.course != "") {
    aspxGetPopupControlCollection().setIframesMouseMoveEnabled(false);
    this.EnsureWindowCoverDiv(index);
    this.SetIsResized(index, true);
    var resizePanel = this.CreateResizePanel(index);
    this.UpdateResizeCursor(index, resizePanel, cursor.verticalDirection, cursor.horizontalDirection);
    aspxGetPopupControlCollection().InitResizeObject(this, index, cursor, resizePanel);
    this.OnResize(evt, index, cursor, resizePanel);
   }
  }
  return aspxGetPopupControlCollection().IsResizeInint();
 },
 OnResizeStop: function(evt, index, cursor, resizePanel) {
  if(this.IsResizeAllowed(index)) {
   aspxGetPopupControlCollection().setIframesMouseMoveEnabled(true);
   this.RemoveWindowCoverDiv();
   var windowElement;
   if(!this.isLiveResizingMode) {
    windowElement = this.GetWindowElement(index);
    ASPx.GetControlCollection().CollapseControls(windowElement);
    this.OnResizeWindow(index, cursor, resizePanel);
   }
   this.CreateResizeCursorInfo(evt, index);
   this.UpdateWindowsStateCookie();
   this.RaiseResize(index);
   if(!this.isLiveResizingMode)
    ASPx.GetControlCollection().AdjustControls(windowElement, true);
  }
  this.ResetResizeSessionCache();
 },
 OnResizeWindow: function(index, cursor, resizePanel) {
  var windowElement = this.GetWindowElement(index);
  var resizePanelDimensions = this.GetResizePanelDimensions();
  var left = resizePanelDimensions.left;
  var top = resizePanelDimensions.top;
  this.SetClientWindowSizeLite(index, resizePanelDimensions.offsetWidth, resizePanelDimensions.offsetHeight);
  if(this.fixedBottom)
   top = this.fixedBottom - windowElement.offsetHeight;
  if(this.fixedRight)
   left = this.fixedRight - windowElement.offsetWidth;
  this.fixedBottom = null;
  this.fixedRight = null;
  if(cursor.verticalDirection === "n")
   this.ChangePosOnResizeWindow(top, windowElement, false);
  if(cursor.horizontalDirection === "w")
   this.ChangePosOnResizeWindow(left, windowElement, true);
  if(this.InternalIsWindowVisible(index)) 
   this.DoShowWindowIFrame(index, left, top, ASPx.InvalidDimension, ASPx.InvalidDimension);
 },
 ChangePosOnResizeWindow: function(pos, windowElement, isX) {
  if(ASPx.Browser.IE && ASPx.Browser.Version >= 10)
   pos = Math.round(pos);
  windowElement.style[isX ? "left" : "top"] = pos + "px";
 },
 SetClientWindowSizeLite: function(index, width, height, isWindowCollapsed) {
  this.RaiseBeforeResizing(index);
  this.SetClientWindowSizeCoreLite(index, width, height, isWindowCollapsed);
  if(!this.IsRaiseAfterResizingLocked())
   this.RaiseAfterResizing(index);
 },
 SetClientWindowSizeCoreLite: function(index, width, height, isWindowCollapsed) {
  var contentUrl = this.GetWindowContentIFrameUrl(index);
  var needToHideContent = !contentUrl;
  var element = this.GetWindowElement(index);
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  var contentElement = this.GetWindowContentElement(index);
  var scrollTop = null,
   scrollLeft = null;
  if(ASPx.Browser.IE && this.GetEnableContentScrolling(index)) {
   scrollTop = contentElement.scrollTop;
   scrollLeft = contentElement.scrollLeft;
  }
  var contentIframeElement = this.GetWindowContentIFrameElement(index);
  var iframeHeightCorrectionOnFirstShow = height > 0;
  if(contentIframeElement && (this.GetWindowIsShown(index) || iframeHeightCorrectionOnFirstShow))
   contentIframeElement.style.height = "0px";
  contentWrapper.style.height = "";
  contentWrapper.style.width = "";
  contentElement.style.height = "";
  contentElement.style.width = "";
  var hasAnyScrollBars = this.HasAnyScrollBars(index);
  var expectedHeight = (!ASPx.IsExists(height) && hasAnyScrollBars) ? this.GetExpectedHeight(index) : null;
  var contentElementChildrenScroll = null,
   contentElementChildren = null;
  if(needToHideContent) {
   if(ASPx.Browser.IE) {
    var contentElementChildren = this.GetContentElementChildren(index, contentElement),
     contentElementChildrenScroll = this.GetContentElementChildrenScroll(index, contentElementChildren);
   }
   contentElement.style.display = "none";
  }
  var elementsDisplayValue = this.GetWindowElementDisplayValue(hasAnyScrollBars, height);
  element.style.display = elementsDisplayValue;
  if(!this.GetIsCollapsed(index))
   contentWrapper.style.display = elementsDisplayValue;
  if(ASPx.IsExists(width)) {
   var actualWidth = width - this.GetElementBordersAndPaddings(index, element, true);
   if(actualWidth <= 0)
    actualWidth = ASPx.Browser.WebKitFamily ? 1 : 0; 
   element.style.width = actualWidth + "px";
  }
  var actualHeight;
  if(ASPx.IsExists(height)) {
   actualHeight = height - this.GetElementBordersAndPaddings(index, element, false);
   if(actualHeight < 0)
    actualHeight = 0;
   element.style.height = actualHeight + "px";
  } else {
   if(ASPx.IsExists(expectedHeight)) {
    actualHeight = expectedHeight;
    element.style.height = actualHeight + "px";
   }
  }
  this.CorrectWindowSizeGripPositionLite(index);
  this.CorrectWindowHeaderText(index);
  this.SetContentWrapperHeightLite(index, actualHeight, element, contentWrapper);
  var correctContentElementSize = hasAnyScrollBars || contentElement.style.overflow == "hidden" || contentElement.style.overflowX == "hidden" || contentElement.style.overflowY == "hidden";
  if((correctContentElementSize || contentUrl) && (height || expectedHeight)) {
   if(contentElement !== contentWrapper) {
    var contentHeight = ASPx.GetClearClientHeight(contentWrapper);
    if(contentHeight < 0)
     contentHeight = 0;
    contentElement.style.height = contentHeight + "px";
   }
  }
  if(correctContentElementSize && width && contentElement !== contentWrapper)
   contentElement.style.width = ASPx.GetClearClientWidth(contentWrapper) + "px";
  contentElement.style.display = this.getContentElementDisplay(correctContentElementSize, contentUrl);
  if(ASPx.IsExists(contentElementChildrenScroll) && contentElementChildrenScroll.length > 0) {
   for(var i = 0; i < contentElementChildrenScroll.length; i++) {
    var childScroll = contentElementChildrenScroll[i],
     childIndex = childScroll[0],
     childScrollLeft = childScroll[1],
     childScrollTop = childScroll[2];
    if(!!childScrollLeft)
     contentElementChildren[childIndex].scrollLeft = childScrollLeft;
    if(!!childScrollTop)
     contentElementChildren[childIndex].scrollTop = childScrollTop;
   }
  }
  if(ASPx.Browser.IE && this.GetEnableContentScrolling(index)) {
   contentElement.scrollTop = scrollTop;
   contentElement.scrollLeft = scrollLeft;
  }
  if(contentIframeElement)
   contentIframeElement.style.height = "100%";
  this.SetWindowWidth(index, width);
  this.SetWindowHeight(index, height);
  if(isWindowCollapsed)
   this.ResetWindowHeight(index);
 },
 GetExpectedHeight: function(index) {
  var height = this.GetWindowHeightInternal(index) || 0;
  height = Math.max(height, this.GetWindowMinHeight(index));
  if(this.HasAnyScrollBars(index)) {
   var windowHeight = this.GetWindowContentElement(index).offsetHeight + this.GetWindowHeightWithoutContent(index);
   height = Math.max(height, windowHeight);
  }
  var maxHeight = this.GetWindowMaxHeight(index);
  if(maxHeight)
   height = Math.min(height, maxHeight);
  return height;
 },
 IsRaiseAfterResizingLocked: function() {
  return false;
 },
 CreateResizePanel: function(index) {
  var element = this.GetWindowElement(index);
  var resizePanel = document.createElement("DIV");
  element.parentNode.appendChild(resizePanel);
  resizePanel.style.overflow = "hidden";
  resizePanel.style.position = "absolute";
  resizePanel.style.zIndex = this.GetPopupControlZIndex() + aspxGetPopupControlCollection().visiblePopupWindowIds.length * 2 + 2;
  if(!this.isLiveResizingMode)
   resizePanel.style.border = "black 1px dotted";
  return resizePanel;
 },
 OnResize: function(evt, index, cursor, resizePanel) {
  this.OnResizePanelLite(evt, index, cursor, resizePanel);
  if(this.isLiveResizingMode)
   this.OnResizeWindow(index, cursor, resizePanel);
  ASPx.Selection.Clear();
  if(ASPx.Browser.WebKitTouchUI)
   ASPx.Evt.PreventEvent(evt);
  if(this.GetIsPinned(index))
   this.HoldPosition(index, true, resizePanel);
 },
 OnResizePanelLite: function(evt, index, cursor, resizePanel) {
  var x = ASPx.Evt.GetEventX(evt);
  var y = ASPx.Evt.GetEventY(evt);
  var element = this.GetWindowElement(index);
  if(ASPx.Browser.IE && ASPx.Browser.Version >= 10) {
   x = Math.round(x);
   y = Math.round(y);
  }
  var elementTop = ASPx.GetAbsoluteY(element);
  var elementLeft = ASPx.GetAbsoluteX(element);
  var newLeft = ASPx.PxToInt(element.style.left);
  var newTop = ASPx.PxToInt(element.style.top);
  var newWidth = element.offsetWidth;
  var newHeight = element.offsetHeight;
  if(cursor.verticalDirection == "n") {
   if(!this.fixedBottom)
    this.fixedBottom = newTop + newHeight;
   newHeight += elementTop - y + cursor.verticalOffset;
   newTop = ASPx.PrepareClientPosForElement(y - cursor.verticalOffset, element, false);
  }
  if(cursor.verticalDirection == "s") {
   newHeight = y - elementTop + cursor.verticalOffset;
   this.fixedBottom = null;
  }
  if(cursor.horizontalDirection == "w") {
   if(!this.fixedRight)
    this.fixedRight = newLeft + newWidth;
   newWidth += elementLeft - x + cursor.horizontalOffset;
   newLeft = ASPx.PrepareClientPosForElement(x - cursor.horizontalOffset, element, true);
  }
  if(cursor.horizontalDirection == "e") {
   newWidth = x - elementLeft + cursor.horizontalOffset;
   this.fixedRight = null;
  }
  if(newWidth > 0 && newHeight > 0) {
   var minWidth = this.GetWindowMinWidth(index);
   var maxWidth = this.GetWindowMaxWidth(index);
   if(minWidth && newWidth < minWidth)
    newWidth = minWidth;
   if(maxWidth && newWidth > maxWidth)
    newWidth = maxWidth;
   var minHeight = this.GetWindowMinHeight(index);
   var maxHeight = this.GetWindowMaxHeight(index);
   if(minHeight && newHeight < minHeight)
    newHeight = minHeight;
   if(maxHeight && newHeight > maxHeight)
    newHeight = maxHeight;
   if(ASPx.Browser.IE && ASPx.Browser.Version >= 10) {
    newLeft = Math.round(newLeft);
    newTop = Math.round(newTop);
    newHeight = Math.round(newHeight);
    newWidth = Math.round(newWidth);
   }
   this.SetResizePanelDimensions(newLeft, newTop, newWidth, newHeight);
   var widthWithoutBorders = newWidth - this.getLeftRightBordersAndPaddingsSummaryValue(resizePanel);
   var heightWithoutBorders = newHeight - this.getTopBottomBordersAndPaddingsSummaryValue(resizePanel);
   ASPx.SetStyles(resizePanel, {
    left: newLeft, top: newTop,
    width: widthWithoutBorders, height: heightWithoutBorders
   });
   this.SetWindowLeft(index, elementLeft);
   this.SetWindowTop(index, elementTop);
  }
 },
 SetResizePanelDimensions: function(left, top, offsetWidth, offsetHeight) {
  var cache = this.GetResizeSessionCache();
  cache.resizePanelDimensions = {
   left: left,
   top: top,
   offsetWidth: offsetWidth,
   offsetHeight: offsetHeight
  };
 },
 GetResizePanelDimensions: function() {
  var cache = this.GetResizeSessionCache();
  return cache.resizePanelDimensions;
 },
 ResetResizeSessionCache: function() {
  this.resizeSessionCache = {};
 },
 GetResizeSessionCache: function() {
  return aspxGetPopupControlCollection().IsResizeInint() ? this.resizeSessionCache : {};
 },
 EnsureWindowCoverDiv: function(index) {
  this.windowCoverDiv = this.CreateCoverDiv(index);
  var windowElement = this.GetWindowElement(index);
  windowElement.parentNode.appendChild(this.windowCoverDiv);
 },
 CreateCoverDiv: function(index) {
  var coverDiv = document.createElement("DIV");
  ASPx.SetStyles(coverDiv, {
   position: "fixed",
   left: 0,
   top: 0,
   width: "100%",
   height: "100%"
  });
  return coverDiv;
 },
 RemoveWindowCoverDiv: function() {
  if(!!this.windowCoverDiv) {
   this.windowCoverDiv.parentNode.removeChild(this.windowCoverDiv);
   this.windowCoverDiv = null;
  }
 },
 OnDrag: function(index, x, y, xClientCorrection, yClientCorrection) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   ASPx.SetStyles(element, { left: x, top: y });
   xClientCorrection = typeof (xClientCorrection) != "undefined" ? xClientCorrection : 0;
   yClientCorrection = typeof (yClientCorrection) != "undefined" ? yClientCorrection : 0;
   this.SetWindowLeft(index, x + xClientCorrection);
   this.SetWindowTop(index, y + yClientCorrection);
   var iFrame = element.overflowElement;
   if(iFrame)
    ASPx.SetStyles(iFrame, { left: x, top: y });
   if(ASPx.Browser.Opera)
    ASPx.Selection.Clear();
  }
 },
 OnDragStop: function(index) {
  this.HideDragCursor(index);
  this.UpdateWindowsStateCookie();
  if(this.GetWindowContentIFrameElement(index))
   this.SetIframeVisibleForDragging(index, true);
  this.RaiseDragged(index);
 },
 OnDragStart: function(evt, index) {
  this.RaiseBeforeDrag(index);
  this.SetIsDragged(index, true);
  this.ShowDragCursor(index);
  if(this.GetWindowContentIFrameElement(index))
   this.SetIframeVisibleForDragging(index, false);
  this.InitDragInfo(index, evt);
 },
 HideIframeElementBeforeDragging: function() {
 },
 InitDragInfo: function(index, evt) {
  var element = this.GetWindowElement(index);
  var gragXOffset = ASPx.GetAbsoluteX(element) - ASPx.Evt.GetEventX(evt);
  var gragYOffset = ASPx.GetAbsoluteY(element) - ASPx.Evt.GetEventY(evt);
  var xClientCorrection = this.GetDragCorrection(index, element, true);
  var yClientCorrection = this.GetDragCorrection(index, element, false);
  gragXOffset -= xClientCorrection;
  gragYOffset -= yClientCorrection;
  aspxGetPopupControlCollection().InitDragObject(this, index, gragXOffset, gragYOffset, xClientCorrection, yClientCorrection);
 },
 GetDragCorrection: function(index, element, isX) {
  return ASPx.GetPositionElementOffset(element, isX);
 },
 ShowDragCursor: function(index) {
  var dragElement = this.GetDragElement(index);
  if(dragElement)
   this.ShowTemporaryCursor(dragElement, "move");
 },
 ShowTemporaryCursor: function(element, cursor) {
  ASPx.Attr.ChangeStyleAttribute(element, "cursor", cursor);
 },
 HideDragCursor: function(index) {
  var dragElement = this.GetDragElement(index);
  if(dragElement != null)
   this.HideTemporaryCursor(dragElement);
 },
 GetDragElement: function(index) {
  var headerElement = this.GetWindowHeaderElement(index);
  var element = this.GetWindowElement(index);
  if(element != null)
   return (headerElement != null ? headerElement : this.GetWindowMainCell(element));
  return null;
 },
 HideTemporaryCursor: function(element) {
  ASPx.Attr.RestoreStyleAttribute(element, "cursor");
 },
 OnDocumentKeyDown: function(evt, popupWindow) {
  var handler = this.keyDownHandlers && this.keyDownHandlers[ASPx.GetShortcutCode(evt.keyCode, evt.ctrlKey, evt.shiftKey, evt.altKey)];
  if(handler)
   handler(this.GetWindowIndex(popupWindow));
 },
 OnEscKeyDown: function(index) {
  if(this.GetEnableCloseByEsc(index))
   this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.Escape);
 },
 OnRefreshButtonClick: function(index) {
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  if(contentIFrame)
   this.RefreshWindowContentUrl(this.GetWindow(index));
  else
   this.PerformWindowCallback(this.GetWindow(index));
 },
 OnCloseButtonClick: function(index) {
  this.RaiseCloseButtonClick(index);
  if(this.GetWindowCloseAction(index) != "None")
   this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.CloseButton);
 },
 Show: function(popupElementIndex) {
  this.ShowWindowByIndex(-1, popupElementIndex);
 },
 Hide: function() {
  this.HideWindow(null);
 },
 HideWindow: function(window) {
  var index = (window != null) ? window.index : -1;
  this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.API);
 },
 RaiseEventByIndex: function(index, event, argsName) {
  if(!event.IsEmpty()) {
   var window = index < 0 ? null : this.GetWindow(index),
    args = new argsName(window);
   event.FireEvent(this, args);
  }
 },
 RaiseCloseButtonClick: function(index) {
  this.RaiseEventByIndex(index, this.CloseButtonClick, ASPxClientPopupWindowEventArgs);
 },
 RaiseShown: function(index) {
  this.RaiseEventByIndex(index, this.Shown, ASPxClientPopupWindowEventArgs);
 },
 RaisePopUp: function(index) {
  this.RaiseEventByIndex(index, this.PopUp, ASPxClientPopupWindowEventArgs);
 },
 RaiseBeforeResizing: function(index) {
  this.RaiseEventByIndex(index, this.BeforeResizing, ASPxClientPopupWindowEventArgs);
 },
 RaiseAfterResizing: function(index) {
  this.RaiseEventByIndex(index, this.AfterResizing, ASPxClientPopupWindowEventArgs);
 },
 RaiseDragged: function(index) {
  this.RaiseEventByIndex(index, this.Dragged, ASPxClientPopupWindowEventArgs);
 },
 RaiseBeforeDrag: function(index) {
  this.RaiseEventByIndex(index, this.BeforeDrag, ASPxClientPopupWindowEventArgs);
 },
 RaiseClosing: function(index, closeReason) {
  var window = index < 0 ? null : this.GetWindow(index);
  var cancel = false;
  if(!this.Closing.IsEmpty()) {
   var args = new ASPxClientPopupWindowCancelEventArgs(window, closeReason);
   this.Closing.FireEvent(this, args);
   cancel = args.cancel;
  }
  return cancel;
 },
 RaiseCloseUp: function(index, closeReason) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.CloseUp.IsEmpty()) {
   var args = new ASPxClientPopupWindowCloseUpEventArgs(window, closeReason);
   this.CloseUp.FireEvent(this, args);
  }
 },
 RaiseResize: function(index, resizeState) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.Resize.IsEmpty()) {
   if(!resizeState)
    resizeState = ASPxClientPopupControlResizeState.Resized;
   var args = new ASPxClientPopupWindowResizeEventArgs(window, resizeState);
   this.Resize.FireEvent(this, args);
  }
 },
 RaisePopupOnShow: function(isMoving, index) {
  if(!isMoving) {
   this.RaisePopUp(index);
   if(!this.IsAnimationAllowed())
    this.OnWindowShown(index);
  }
 },
 OnActivate: function(index, evt) {
  var element = this.GetWindowElement(index);
  if(element != null)
   aspxGetPopupControlCollection().ActivateWindowElement(element, evt, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
 },
 OnPWHBClickCore: function(evt, index, method) {
  this.OnActivate(index, evt);
  if(ASPx.TouchUIHelper.handleFastTapIfRequired(evt,
   function() { this[method](index); }.aspxBind(this), true)) {
   return;
  }
  if(ASPx.Browser.Opera)
   ASPx.Evt.EmulateDocumentOnMouseDown(evt);
  this[method](index);
 },
 OnScroll: function(evt, index) {
  if(this.HasIframeOnIos(index))
   this.ResetWebkitScrolling(this.getTouchScrollerElement(index), 0);
  if(!this.GetIsPinned(index) || (this.lockScroll > 0)) return;
  this.AdjustPinPositionWhileScroll(index);
 },
 ResetWebkitScrolling: function(scrollElement, timeout) {
  if(scrollElement.scrollTop === 0) {
   var styleName = "-webkit-overflow-scrolling";
   scrollElement.style[styleName] = "auto";
   window.setTimeout(function() {
    scrollElement.style[styleName] = "touch";
   }.aspxBind(this), timeout);
  }
 },
 HaveSpecialDivForAnimation: function() {
  return this.enableAnimation;
 },
 HasIframeOnIos: function(index) {
  return ASPx.Browser.MacOSMobilePlatform && !!this.GetWindowContentIFrameElement(index);
 },
 WindowIsModal: function(index) {
  return this.GetPropertyValue(index, "modal");
 },
 GetIsPopuped: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsIsPopupedList[index];
  return this.defaultIsPopuped;
 },
 SetIsPopuped: function(index, isPopuped) {
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsIsPopupedList[index] = isPopuped;
  this.defaultIsPopuped = isPopuped;
 },
 GetIsMaximized: function(index) {
  return false;
 },
 GetIsMaximizedInit: function(index) {
  return false;
 },
 GetCurrentLeft: function(index) {
  return this.GetPosition(index, true);
 },
 GetCurrentTop: function(index) {
  return this.GetPosition(index, false);
 },
 GetIsPinned: function(index) {
  return false;
 },
 GetIsCollapsed: function(index) {
  return false;
 }, 
 needToHidePinnedOutFromViewPort: function(index) {
  return false;
 },
 GetHideBodyScrollWhenModal: function(index) {
  return false;
 },
 GetCanScrollViewPort: function(index) {
  return false;
 },
 GetEnableContentScrolling: function(index) {
  return false;
 },
 AutoUpdateElementsPosition: function() {
 },
 GetWindowChild: function(index, idPostfix) {
  var elem = this.GetWindowElement(index);
  if(elem)
   return ASPx.GetChildById(elem, this.name + idPostfix);
  return null;
 },
 GetWindowIndex: function(element) {
  var id = element.id;
  var pos = id.lastIndexOf(ASPx.PCWIdSuffix);
  return parseInt(id.substr(pos + ASPx.PCWIdSuffix.length));
 },
 GetWindow: function(index) {
  return (0 <= index && index < this.windows.length) ? this.windows[index] : null;
 },
 DoShowWindowIFrame: function(index, x, y, width, height) {
  if(!this.renderIFrameForPopupElements) return;
  var element = this.GetWindowElement(index);
  var iFrame = this.GetWindowIFrame(index);
  if(element && iFrame) {
   var cell = this.GetWindowMainCell(element);
   if(width < 0)
    width = cell.offsetWidth;
   if(height < 0)
    height = cell.offsetHeight;
   ASPx.SetStyles(iFrame, { width: width, height: height });
   if(this.IsValidPosition(x) && this.IsValidPosition(y))
    ASPx.SetStyles(iFrame, { left: x, top: y });
   if(ASPx.Browser.IE || ASPx.Browser.Firefox)
    this.ClearWindowIframeBodyInnerHtml(iFrame);
   ASPx.SetElementDisplay(iFrame, true);
  }
 },
 IsValidPosition: function(pos) {
  return pos !== ASPx.InvalidPosition;
 },
 DoHideWindowIFrame: function(element) {
  if(!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(iFrame)
   ASPx.SetElementDisplay(iFrame, false);
 },
 GetIframeBody: function(iFrame) {
  var document = iFrame.contentDocument || iFrame.contentWindow.document;
  if(document)
   return document.getElementsByTagName('body')[0];
 },
 ClearWindowIframeBodyInnerHtml: function(iFrame) {
  var iFrameBody = this.GetIframeBody(iFrame);
  if(iFrameBody)
   iFrameBody.innerHTML = "";
 },
 FindWindowIFrame: function(index) {
  return ASPx.GetElementById(this.name + "_DXPWIF" + index);
 },
 GetWindowIFrame: function(index) {
  var element = this.GetWindowElement(index);
  var iFrame = element.overflowElement;
  if(!iFrame) {
   iFrame = this.FindWindowIFrame(index);
   element.overflowElement = iFrame;
  }
  return iFrame;
 },
 CreateFakeDivForIframe: function(iframe) {
  var fakeDiv = document.createElement("div");
  ASPx.SetStyles(fakeDiv, { width: iframe.offsetWidth, height: iframe.offsetHeight });
  return fakeDiv;
 },
 CreateIframeCoverDiv: function(iframe, index) {
  if(!this.iframeCoverDiv)
   this.iframeCoverDiv = [];
  if(!this.iframeCoverDiv[index])
   this.iframeCoverDiv[index] = this.CreateFakeDivForIframe(iframe);
  this.iframeCoverDiv[index].style.position = "absolute";
  iframe.parentElement.appendChild(this.iframeCoverDiv[index]);
  ASPx.SetAbsoluteX(this.iframeCoverDiv[index], ASPx.GetAbsoluteX(iframe));
  ASPx.SetAbsoluteY(this.iframeCoverDiv[index], ASPx.GetAbsoluteY(iframe));
 },
 RemoveIframeCoverDiv: function(iframe, index) {
  iframe.parentElement.removeChild(this.iframeCoverDiv[index]);
  this.iframeCoverDiv[index] = null;
 },
 GetWindowBorderOwnerElement: function(windowElement) {
  if(ASPx.ElementHasCssClass(windowElement, PopupControlCssClasses.MainDivLiteCssClass))
   return windowElement;
  else
   return ASPx.GetNodeByClassName(windowElement, PopupControlCssClasses.MainDivLiteCssClass);
 },
 GetWindowContentIFrameElement: function(index) {
  return this.GetWindowChild(index, "_CIF" + index);
 },
 GetWindowContentElement: function(index) {
  return this.GetWindowChild(index, "_PWC" + index);
 },
 GetWindowContentIFrameElementId: function(index) {
  return this.name + "_CIF" + index;
 },
 GetContentContainer: function(index) {
  return this.GetWindowContentElement(index);
 },
 getTouchScrollerElement: function(index) {
  return this.GetContentContainer(index);
 },
 GetWindowHeaderElement: function(index) {
  return this.GetWindowChild(index, "_PWH" + index);
 },
 GetWindowFooterElement: function(index) {
  return this.GetWindowChild(index, "_PWF" + index);
 },
 GetWindowSizeGripElement: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(!footer)
   return null;
  var descendants = ASPx.GetNodesByClassName(footer, PopupControlCssClasses.SizeGripLiteCssClassName);
  return descendants.length > 0 ? descendants[0] : null;
 },
 GetWindowContentWrapperElement: function(index) {
  if(!ASPx.IsExistsElement(this.windowContentElements[index])) {
   var windowElem = this.GetWindowElement(index);
   var contentWrapperParent = this.GetWindowMainCell(windowElem);
   this.windowContentElements[index] = ASPx.GetChildByClassName(contentWrapperParent, PopupControlCssClasses.ContentWrapperCssClassName);
  }
  return this.windowContentElements[index];
 },
 GetWindowMainCell: function(element) {
  return this.HaveSpecialDivForAnimation() ? ASPx.GetNodeByTagName(element, "DIV", 0) : element;
 },
 GetWindowModalElement: function(index) {
  var element = this.GetWindowElement(index);
  if(!element) return;
  var modalElement = element.modalElement;
  if(!modalElement) {
   modalElement = this.FindWindowModalElement(index);
   element.modalElement = modalElement;
   if(modalElement) {
    modalElement.DXModalPopupControl = this;
    modalElement.DXModalPopupWindowIndex = index;
   }
  }
  return modalElement;
 },
 CanManipulateWithModalElement: function(index) {
  return this.WindowIsModal(index);
 },
 GetCurrentZIndex: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   if(element.style.zIndex != "" && element.style.zIndex != this.GetDefaultZIndexFromServer())
    return element.style.zIndex;
   return this.GetZIndex(index);
  }
 },
 GetWindowsState: function() {
  var state = "";
  if(this.HasDefaultWindow()) {
   state += this.GetWindowState(-1);
  }
  return state;
 },
 GetWindowState: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   var visibleFlag = (!this.InternalIsWindowVisible(index) || element.isHiding) ? "0" : "1";
   var isDraggedFlag = this.GetIsDragged(index) ? "1" : "0";
   var zIndex = this.GetCurrentZIndex(index);
   var isResized = this.GetIsResized(index);
   var isResizedFlag = isResized ? "1" : "0";
   var width = null, height=null;
   if(isResized) {
    width = this.GetWindowWidthInternal(index);
    height = this.GetIsCollapsed(index) ? this.GetWindowDimensionByIndex(index, false, true) : this.GetWindowHeightInternal(index);
   } else {
    width = ASPx.InvalidDimension;
    height = ASPx.InvalidDimension;
   }
   var contentWasLoaded = element.loaded ? "1" : "0";
   var left, top;
   var isMaximized = this.GetIsMaximized(index);
   if(isMaximized && !this.MaximizationExecuting()) {
    var restoredWindowData = this.GetRestoredWindowData(index);
    left = restoredWindowData.left;
    top = restoredWindowData.top;
   } else {
    left = this.GetCurrentLeft(index);
    top = this.GetCurrentTop(index);
   }
   var isPinned = this.GetIsPinned(index);
   if(isPinned) {
    left -= ASPx.GetDocumentScrollLeft();
    top -= ASPx.GetDocumentScrollTop();
   }
   left = Math.ceil(left);
   top = Math.ceil(top);
   var pinFlag = isPinned ? "1" : "0";
   var minFlag = this.GetIsCollapsed(index) ? "1" : "0";
   var maxFlag = isMaximized || this.GetIsMaximizedInit(index) ? "1" : "0";
   return [visibleFlag, isDraggedFlag, zIndex, left, top, isResizedFlag, width, height, contentWasLoaded, pinFlag, minFlag, maxFlag].join(":");
  }
  return "";
 },
 UpdateStateObject: function(){
  this.UpdateStateObjectWithObject({ windowsState: this.GetWindowsState() });
 },
 GetStateHiddenFieldOrigin: function() {
  return this.GetWindowElement(this.GetWindowCountCore() - 1);
 },
 GetPopupType: function() {
  return "aspxpopup";
 },
 GetDefaultZIndexFromServer: function() {
  return defaultZIndexFromServer;
 },
 GetPopupControlZIndex: function() {
  return popupControlZIndex;
 },
 FindWindowModalElement: function(index) {
  return ASPx.GetElementById(this.name + "_DXPWMB" + index);
 },
 GetWindowCloseButton: function(index) {
  return ASPx.GetElementById(this.name + "_HCB" + index);
 },
 GetWindowRefreshButton: function(index) {
  return ASPx.GetElementById(this.name + "_HRB" + index);
 },
 FirstShowWindow: function(index, allowChangeZIndex) {
  var popupHorizontalOffsetBackup = -1;
  var popupVerticalOffsetBackup = -1;
  var isFreeWindow = this.GetIsDragged(index);
  var x = ASPx.InvalidPosition;
  var y = ASPx.InvalidPosition;
  if(isFreeWindow) {
   x = this.GetWindowLeft(index);
   y = this.GetWindowTop(index);
   popupHorizontalOffsetBackup = this.popupHorizontalOffset;
   popupVerticalOffsetBackup = this.popupVerticalOffset;
   this.popupHorizontalOffset = 0;
   this.popupVerticalOffset = 0;
  }
  this.LockAnimation();
  this.DoShowWindowCore(index, x, y, isFreeWindow ? -1 : 0, false, allowChangeZIndex);
  this.UnlockAnimation();
  if(isFreeWindow) {
   this.popupHorizontalOffset = popupHorizontalOffsetBackup;
   this.popupVerticalOffset = popupVerticalOffsetBackup;
  }
  this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
 },
 HasDefaultWindow: function() {
  return true;
 },
 GetWindowCount: function() {
  return 0;
 },
 GetWindowContentHtml: function(window) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetContentContainer(index);
  return (element != null) ? element.innerHTML : "";
 },
 GetWindowElementId: function(index) {
  return this.name + ASPx.PCWIdSuffix + index;
 },
 GetWindowElement: function(index) {
  if(!ASPx.IsExistsElement(this.windowElements[index]))
   this.windowElements[index] = ASPx.GetElementById(this.GetWindowElementId(index));
  return this.windowElements[index];
 },
 GetWindowClientTable: function(index) {
  return this.GetWindowElement(index);
 },
 GetCurrentWindowElement: function() {
  return this.GetWindowElement(-1);
 },
 ShowWindowContentUrl: function(index) {
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  this.LoadWindowContentUrl(index);
  if(contentIFrame && contentIFrame.DXReloadAfterShowRequired) {
   this.RefreshWindowContentUrl(this.GetWindow(index));
   contentIFrame.DXReloadAfterShowRequired = false;
  }
 },
 RefreshWindowContentUrl: function(window) {
  var index = (window != null) ? window.index : -1;
  if(ASPx.Browser.IE)
   this.RefreshWindowContentUrlIE(index, window);
  else
   this.RefreshWindowContentUrlCommon(window);
 },
 RefreshContentUrl: function() {
  this.RefreshWindowContentUrl(null);
 },
 RefreshWindowContentUrlIE: function(index, window) {
  var windowVisible = this.InternalIsWindowVisible(index);
  if(windowVisible)
   this.RefreshWindowContentUrlIECore(index, window);
  else {
   var iframe = this.GetWindowContentIFrameElement(index);
   if(iframe)
    iframe.DXReloadAfterShowRequired = true;
  }
 },
 RefreshWindowContentUrlIECore: function(index, window) {
  try {
   if(!this.GetIframeLoading(index)) {
    var iframe = this.GetWindowContentIFrameElement(index);
    if(iframe)
     iframe.contentWindow.location.reload();
   }
  } catch (e) {
   this.RefreshWindowContentUrlCommon(window);
  }
 },
 RefreshWindowContentUrlCommon: function(window) {
  this.SetWindowContentUrl(window, this.GetWindowContentUrl(window));
 },
 GetContentUrl: function() {
  return this.GetWindowContentUrl(null);
 },
 GetWindowContentUrl: function(window) {
  var index = (window != null) ? window.index : -1;
  if(!this.IsWindowVisible(window))
   return this.GetWindowContentIFrameUrl(index);
  var element = this.GetWindowContentIFrameElement(index);
  return (element != null) ? element.src : "";
 },
 GetContentIFrame: function(window) {
  return this.GetWindowContentIFrame(null);
 },
 GetWindowContentIFrame: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowContentIFrameElement(index);
 },
 GetContentIFrameWindow: function() {
  var iframeElement = this.GetContentIFrame();
  return iframeElement.contentWindow;
 },
 SetContentUrl: function(url) {
  this.SetWindowContentUrl(null, url);
 },
 SetWindowContentUrl: function(window, url) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowContentUrlInternal(index, url);
 },
 LoadWindowContentUrl: function(index) {
  var url = this.GetWindowContentIFrameUrl(index);
  this.LoadWindowContentFromUrl(index, url);
 },
 LoadWindowContentFromUrl: function(index, url) {
  var element = this.GetWindowContentIFrameElement(index);
  if(element && element.src != url && element.DXSrcRaw != url) {
   this.SetSrcToIframeElement(index, element, url);
   this.SetWindowContentIFrameUrl(index, element.src); 
  }
 },
 SetWindowContentIFrameUrl: function(index, url) {
  this.SetPropertyValue(index, "contentUrl", url);
 },
 SetWindowContentUrlInternal: function(index, url) {
  var element = this.GetWindowContentIFrameElement(index);
  var windowVisible = this.InternalIsWindowVisible(index);
  if(windowVisible && element != null)
   this.SetIframeVisibleForDragging(index, true);
  this.SetWindowContentIFrameUrl(index, url);
  var src = windowVisible ? url : ASPx.Browser.WebKitFamily && ASPx.Browser.Version >= 75 ? "about:blank" : ASPx.SSLSecureBlankUrl;
  if(element == null) {
   this.CreateWindowContentIFrameElement(index, src);
   this.RefreshDimensionsAfterCreateIframe(index);
  }
  else
   this.SetSrcToIframeElement(index, element, src);
  this.ReinitScrollForIframe(index);
 },
 ReinitScrollForIframe: function(index) {
  if(this.HasIframeOnIos(index)) {
   var scrollElement = this.getTouchScrollerElement(index);
   if(scrollElement) {
    var options = this.GetWindowTouchScrollOptions(index);
    ASPx.TouchUIHelper.InitNativeScrolling(scrollElement, options);
    if(!!this.touchUIScrollers[index]) {
     this.touchUIScrollers[index].Destroy();
     this.touchUIScrollers[index] = null;
    }
   }
  }
 },
 EnsureWindowContentUrl: function(index) {
  var contentUrl = this.GetWindowContentIFrameUrl(index);
  if(contentUrl != "")
   this.SetWindowContentUrlInternal(index, contentUrl);
 },
 CreateWindowContentIFrameElement: function(index, src) {
  var content = this.GetContentContainer(index);
  var iframeParent = content;
  content.innerHTML = "";
  content.style.display = "block";
  var iframe = this.CreateContentIFrameElement(index, src);
  this.RequireIFrameHeightAdjusting(index, iframe);
  iframeParent.appendChild(iframe);
  this.InitIFrame(index);
  return iframe;
 },
 InitIFrame: function(index) {
  var contentIFrameElement = this.GetWindowContentIFrameElement(index);
  if(contentIFrameElement) {
   contentIFrameElement.popupControlName = this.name;
   contentIFrameElement.pcWndIndex = index;
   ASPx.Evt.AttachEventToElement(contentIFrameElement, "load", ASPx.PCIframeLoad);
  }
 },
 OnIFrameLoad: function(index) {
  this.SetIframeLoading(index, false);
 },
 RequireIFrameHeightAdjusting: function(index, iframe) {
  if(this.InternalIsWindowVisible(index))
   this.AdjustIFrameHeight(index, iframe);
  else
   this.PostponeIframeAdjusting(index);
 },
 PostponeIframeAdjusting: function(index) {
  this.SetIframeAdjustingPostponed(index, true);
 },
 EnsureIFrameHeightAdjusted: function(index) {
  if(this.GetIframeAdjustingPostponed(index)) {
   var iframe = this.GetWindowContentIFrameElement(index);
   this.AdjustIFrameHeight(index, iframe);
  }
 },
 AdjustIFrameHeight: function(index, iframe) {
 },
 CreateContentIFrameElement: function(index, src) {
  var iframe = document.createElement("IFRAME");
  iframe.id = this.GetWindowContentIFrameElementId(index);
  iframe.scrolling = "auto";
  iframe.frameBorder = 0;
  iframe.style.width = "100%";
  iframe.style.height = "100%";
  iframe.style.overflow = "auto";
  if(ASPx.Browser.Chrome) iframe.style.webkitBackfaceVisibility = "hidden";
  if(ASPx.Browser.IE || ASPx.Browser.Edge)
   iframe.style["-ms-user-select"] = "text";
  var titleText = this.GetWindowContentIFrameTitle(index);
  if(!!titleText)
   iframe.title = titleText;
  this.SetSrcToIframeElement(index, iframe, src);
  return iframe;
 },
 SetSrcToIframeElement: function(index, iframeElement, src) {
  this.SetIframeLoading(index, true);
  iframeElement.src = src;
  if(ASPx.Browser.Chrome && src.indexOf("#"))
   this.PreventScrollingAfterIframeLoaded(iframeElement);
  iframeElement.DXSrcRaw = src;
 },
 PreventScrollingAfterIframeLoaded: function(iframeElement) {
  var docScrollTop = ASPx.GetDocumentScrollTop();
  var onIframeLoadedHandler = function() {
   window.setTimeout(function() {
    ASPx.SetDocumentScrollTop(docScrollTop);
    ASPx.Evt.DetachEventFromElement(iframeElement, "load", onIframeLoadedHandler);
   }, 0);
  };
  ASPx.Evt.AttachEventToElement(iframeElement, "load", onIframeLoadedHandler);
 },
 GetWindowHeaderTextCell: function(index) {
  return this.GetWindowChild(index, "_PWH" + index + "T");
 },
 GetWindowHeaderTextElement: function(index) {
  var element = this.GetWindowHeaderTextCell(index);
  if(element != null) {
   var link = ASPx.GetNodeByTagName(element, "A", 0);
   return link || element;
  }
  return null;
 },
 GetWindowHeaderLinkElement: function(index) {
  var element = this.GetWindowHeaderElement(index);
  return element ? ASPx.GetNodeByClassName(element, PopupControlCssClasses.LinkCssClassName) : null;
 },
 GetWindowHeaderImageCell: function(index) {
  return this.GetWindowChild(index, "_PWH" + index + "I");
 },
 GetWindowFooterTextCell: function(index) {
  return this.GetWindowChild(index, "_PWF" + index + "T");
 },
 GetWindowFooterTextElement: function(index) {
  var element = this.GetWindowFooterTextCell(index);
  if(element != null) {
   var link = ASPx.GetNodeByTagName(element, "A", 0);
   return link || element;
  }
  return null;
 },
 GetWindowFooterLinkElement: function(index) {
  var element = this.GetWindowFooterElement(index);
  return element ? ASPx.GetNodeByClassName(element, PopupControlCssClasses.LinkCssClassName) : null;
 },
 GetWindowFooterImageCell: function(index) {
  return this.GetWindowChild(index, "_PWF" + index + "I");
 },
 GetWindowHeaderImageUrl: function(index) {
  var element = this.GetWindowHeaderImageCell(index);
  return element ? element.src : "";
 },
 SetWindowHeaderImageUrl: function(index, url) {
  var element = this.GetWindowHeaderImageCell(index);
  if(element != null) {
   element.onload = function() { this.CorrectHeaderContentElementHeight(index); }.aspxBind(this);
   element.src = url;
  }
 },
 GetWindowFooterImageUrl: function(index) {
  var element = this.GetWindowFooterImageCell(index);
  return element ? element.src : "";
 },
 SetWindowFooterImageUrl: function(index, url) {
  var element = this.GetWindowFooterImageCell(index);
  if(element != null) {
   element.src = url;
   this.CorrectWindowSizeGripPositionLite(index);
  }
 },
 GetWindowHeaderNavigateUrl: function(index) {
  var link = this.GetWindowHeaderLinkElement(index);
  if(link)
   return link.href || ASPx.Attr.GetAttribute(linkEl, "savedhref");
  return "";
 },
 SetWindowHeaderNavigateUrl: function(index, url) {
  var link = this.GetWindowHeaderLinkElement(index);
  if(link) {
   if(ASPx.Attr.IsExistsAttribute(link, "savedhref"))
    ASPx.Attr.SetAttribute(link, "savedhref", url);
   else if(ASPx.Attr.IsExistsAttribute(link, "href"))
    link.href = url;
  }
 },
 GetWindowFooterNavigateUrl: function(index) {
  var link = this.GetWindowFooterLinkElement(index);
  if(link)
   return link.href || ASPx.Attr.GetAttribute(linkEl, "savedhref");
  return "";
 },
 SetWindowFooterNavigateUrl: function(index, url) {
  var link = this.GetWindowFooterLinkElement(index);
  if(link) {
   if(ASPx.Attr.IsExistsAttribute(link, "savedhref"))
    ASPx.Attr.SetAttribute(link, "savedhref", url);
   else if (ASPx.Attr.IsExistsAttribute(link, "href"))
    link.href = url;
  }
 },
 GetWindowHeaderText: function(index) {
  var element = this.GetWindowHeaderTextElement(index);
  if(element != null) 
    return element.innerHTML;
  return "";
 },
 SetWindowHeaderText: function(index, text) {
  var element = this.GetWindowHeaderTextElement(index);
  if(element != null) {
   element.innerHTML = text;
   this.CorrectHeaderContentElementHeight(index);
   this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index), true);
  }
 },
 GetWindowFooterText: function(index) {
  var element = this.GetWindowFooterTextElement(index);
  if(element != null) 
   return element.innerHTML;
  return "";
 },
 SetWindowFooterText: function(index, text) {
  var element = this.GetWindowFooterTextElement(index);
  if(element != null) {
   element.innerHTML = text;
   this.CorrectWindowSizeGripPositionLite(index);
  }
 },
 CorrectWindowSizeGripPositionLite: function(index) {
  var sizeGrip = this.GetWindowSizeGripElement(index);
  if(!sizeGrip || sizeGrip.corrected) return;
  sizeGrip.style[this.rtl ? "marginRight" : "marginLeft"] = "-" + sizeGrip.offsetWidth + "px";
  sizeGrip.style.marginTop = "-" + sizeGrip.offsetHeight + "px";
  sizeGrip.corrected = true;
 },
 GetHeaderFooterHeightCore: function(index) {
  var extenders = [
   this.GetWindowHeaderElement(index),
   this.GetWindowFooterElement(index)
  ], height = 0;
  for(var i = 0; i < extenders.length; i++) {
   if(extenders[i])
    height += extenders[i].offsetHeight;
  }
  return height;
 },
 GetHeaderImageUrl: function() {
  return this.GetWindowHeaderImageUrl(-1);
 },
 SetHeaderImageUrl: function(value) {
  this.SetWindowHeaderImageUrl(-1, value);
 },
 GetFooterImageUrl: function() {
  return this.GetWindowFooterImageUrl(-1);
 },
 SetFooterImageUrl: function(value) {
  this.SetWindowFooterImageUrl(-1, value);
 },
 GetHeaderNavigateUrl: function() {
  return this.GetWindowHeaderNavigateUrl(-1);
 },
 SetHeaderNavigateUrl: function(value) {
  this.SetWindowHeaderNavigateUrl(-1, value);
 },
 GetFooterNavigateUrl: function() {
  return this.GetWindowFooterNavigateUrl(-1);
 },
 SetFooterNavigateUrl: function(value) {
  this.SetWindowFooterNavigateUrl(-1, value);
 },
 GetHeaderText: function() {
  return this.GetWindowHeaderText(-1);
 },
 SetHeaderText: function(value) {
  this.SetWindowHeaderText(-1, value);
 },
 GetFooterText: function() {
  return this.GetWindowFooterText(-1);
 },
 SetFooterText: function(value) {
  this.SetWindowFooterText(-1, value);
 },
 GetVisible: function() {
  return this.IsVisible();
 },
 SetVisible: function(visible) {
  if(visible && !this.IsVisible())
   this.Show();
  else if(!visible && this.IsVisible())
   this.Hide();
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID + "State";
 },
 GetWindowCountCore: function() {
  return 0; 
 },
 IsWindowElementsIDAssigned: function(index) {
  var contentElement = this.GetWindowContentElement(index);
  return ASPx.IsExistsElement(contentElement);
 },
 InitializeDOM: function () {
  var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
  if(windowElement)
   windowElement.dxinit = true;
 },
 IsDOMInitialized: function() {
  var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
  return windowElement && windowElement.dxinit;
 },
 IsDOMDisposed: function() { 
  var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
  return !ASPx.IsExistsElement(windowElement);
 },
 OnDispose: function() {
  ASPxClientControl.prototype.OnDispose.call(this);
  this.ClearPopupElementConnection();
 },
 RegisterInControlTree: function(tree) {
  var mainNode = tree.createNode(null, this);
  if(this.HasDefaultWindow())
   this.RegisterRelatedNodeForWindowElement(tree, -1, mainNode);
  for(var i = 0; i < this.GetWindowCount() ; i++)
   this.RegisterRelatedNodeForWindowElement(tree, i, mainNode);
 },
 RegisterRelatedNodeForWindowElement: function(tree, windowElementIndex, mainNode) {
  var windowElement = this.GetWindowElement(windowElementIndex);
  if(windowElement) {
   var childNode = tree.createNode(windowElement.id, null);
   tree.addRelatedNode(mainNode, childNode);
  }
 },
 CorrectWindowHeaderText: function(index) {
  var headerElement = this.GetWindowHeaderElement(index);
  if(!headerElement || headerElement.corrected) return;
  var leftChildrenWidth = 0, rightChildrenWidth = 0, headerContentElement;
  for(var i = 0; i < headerElement.childNodes.length; i++) {
   var child = headerElement.childNodes[i];
   if(!child.offsetWidth) continue;
   if(ASPx.GetElementFloat(child) === "right")
    rightChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
   else if(ASPx.GetElementFloat(child) === "left")
    leftChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
   else if(!headerContentElement)
    headerContentElement = child;
  }
  if(headerContentElement && (leftChildrenWidth > 0 || rightChildrenWidth > 0)) {
   var headerContentElementStyle = ASPx.GetCurrentStyle(headerContentElement);
   var originalMarginLeft = parseInt(headerContentElementStyle.marginLeft);
   var originalMarginRight = parseInt(headerContentElementStyle.marginRight);
   ASPx.SetStyles(headerContentElement, {
    marginLeft: leftChildrenWidth + originalMarginLeft,
    marginRight: rightChildrenWidth + originalMarginRight
   });
   this.CorrectHeaderContentElementHeight(index);
  }
  headerElement.corrected = true;
 },
 CorrectHeaderContentElementHeight: function(index) {
  var headerElement = this.GetWindowHeaderElement(index),
   headerContentElement = ASPx.GetChildByClassName(headerElement, PopupControlCssClasses.HeaderContentCssClassName);
  if(!headerElement || !headerContentElement) return;
  if(headerContentElement.style.height)
   headerContentElement.style.height = "";
  var contentElementHeight = ASPx.GetClearClientHeight(headerElement) - this.getTopBottomBordersAndPaddingsSummaryValue(headerContentElement),
   lineHeightForTextVerticalAlign = contentElementHeight,
   windowHeaderTextCell = this.GetWindowHeaderTextCell(index);
  if(windowHeaderTextCell)
   lineHeightForTextVerticalAlign -= this.getTopBottomBordersAndPaddingsSummaryValue(windowHeaderTextCell);
  ASPx.SetStyles(headerContentElement, { lineHeight: lineHeightForTextVerticalAlign, height: contentElementHeight }, false);
 },
 OnBeforeDropdownShow: function() {
  var element = this.GetWindowElement(-1);
  if(!ASPx.GetElementDisplay(element)) {
   element.style.visibility = "hidden";
  }
  this.SetWindowDisplay(-1, true);
  if(this.adaptivityEnabled) {
   ASPx.SetElementDisplay(this.GetModalWrapperElement(-1), true);
   this.SetAdaptiveModalMode(-1, this.NeedAdaptiveModalMode());
  }
 },
 SetWindowDisplay: function(index, value) {
  var pcwElement = this.GetWindowElement(index);
  ASPx.SetElementDisplay(pcwElement, value);
 },
 getWindowHorizontalAlign: function(element) {
  return this.popupHorizontalAlign;
 },
 getWindowVerticalAlign: function(element) {
  return this.popupVerticalAlign;
 },
 getWindowHorizontalOffset: function(element) {
  return this.popupHorizontalOffset;
 },
 getWindowVerticalOffset: function(element) {
  return this.popupVerticalOffset;
 },
 GetHorizontalAlign: function() {
  return this.popupHorizontalAlign;
 },
 GetVerticalAlign: function() {
  return this.popupVerticalAlign;
 },
 GetPopupHorizontalOffset: function() {
  return this.popupHorizontalOffset;
 },
 SetPopupHorizontalOffset: function(offset) {
  this.popupHorizontalOffset = offset;
 },
 SetPopupVerticalOffset: function(offset) {
  this.popupVerticalOffset = offset;
 },
 GetPopupVerticalOffset: function() {
  return this.popupVerticalOffset;
 },
 ShowAtElement: function(htmlElement, savePopupElement) {
  this.ShowWindowAtElementByIndex(-1, htmlElement, savePopupElement);
 },
 ShowAtElementByID: function(id) {
  var htmlElement = document.getElementById(id);
  this.ShowAtElement(htmlElement);
 },
 ShowWindowAtElementByIndex: function(index, htmlElement, savePopupElement) {
  var lastIndexBackup = this.GetLastShownPopupElementIndex(index);
  this.ShowWindowByIndex(index, this.AddPopupElementInternal(index, htmlElement));
  if(!savePopupElement)
   this.RemovePopupElementInternal(index, htmlElement);
  this.SetLastShownPopupElementIndex(index, lastIndexBackup);
 },
 ShowWindowByIndex: function(index, popupElementIndex) {
  if(!this.isInitialized)
   return;
  if(popupElementIndex === undefined)
   popupElementIndex = this.GetLastShownPopupElementIndex(index);
  this.DoShowWindowCore(index, ASPx.InvalidPosition, ASPx.InvalidPosition, popupElementIndex, false, true);
 },
 DoShowWindowCore: function(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason) {
 },
 DoShowWindow: function(index, popupElementIndex, evt) {
  if(!this.InternalIsWindowVisible(index)) {
   var x = ASPx.Evt.GetEventX(evt);
   var y = ASPx.Evt.GetEventY(evt);
   this.DoShowWindowCore(index, x, y, popupElementIndex, true, true, evt, ASPxClientPopupControlCloseReason.OuterMouseClick);
  }
 },
 SetWindowPos: function(index, element, x, y) {
  ASPx.SetStyles(element, { left: x, top: y });
  this.DoShowWindowIFrame(index, x, y, ASPx.InvalidDimension, ASPx.InvalidDimension);
  this.SetIsDragged(index, true);
  this.SetWindowLeft(index, ASPx.GetAbsoluteX(element));
  this.SetWindowTop(index, ASPx.GetAbsoluteY(element));
  this.UpdateWindowsStateCookie();
 },
 CorrectPopupPositionForClientWindow: function(element, popupPosition, isX) {
  if(element.isPopupPositionCorrectionOn && this.isPopupFullCorrectionOn || this.forceAdjustPositionToClientScreen) {
   popupPosition.position = ASPx.PopupUtils.AdjustPositionToClientScreen(element, popupPosition.position, this.rtl, isX);
  }
  return popupPosition;
 },
 GetClientPopupPos: function(element, popupElement, pos, isX, isDragged) {
  var index = this.GetWindowIndex(element);
  var popupPosition = null;
  if(this.GetIsMaximizedOnWebKitTouch(index))
   return new ASPx.PopupPosition(ASPx.PrepareClientPosForElement(0, element, isX), false);
  if(isDragged)
   popupPosition = new ASPx.PopupPosition(!this.IsValidPosition(pos) ? this.GetPosition(index, isX) : pos, false);
  else
   popupPosition = isX ? this.GetClientPopupPosX(element, popupElement, pos) : this.GetClientPopupPosY(element, popupElement, pos);
  popupPosition.position = ASPx.PrepareClientPosForElement(popupPosition.position, element, isX);
  if(ASPx.Browser.Firefox && ASPx.Browser.Version < 3 && this.GetWindowModalElement(index))
   popupPosition.position -= isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop();
  return popupPosition;
 },
 GetClientPopupPosX: function(element, popupElement, x) {
  var mainElement = this.GetWindowMainCell(element);
  var popupPosition = ASPx.PopupUtils.GetPopupAbsoluteX(mainElement, popupElement, this.getWindowHorizontalAlign(element), this.getWindowHorizontalOffset(element),
   x, this.GetWindowLeft(this.GetWindowIndex(element)), this.rtl, this.isPopupFullCorrectionOn);
  return this.CorrectPopupPositionForClientWindow(element, popupPosition, true);
 },
 GetClientPopupPosY: function(element, popupElement, y) {
  var mainElement = this.GetWindowMainCell(element);
  var popupPosition = ASPx.PopupUtils.GetPopupAbsoluteY(mainElement, popupElement, this.getWindowVerticalAlign(element), this.getWindowVerticalOffset(element),
   y, this.GetWindowTop(this.GetWindowIndex(element)), this.isPopupFullCorrectionOn, this.usedInDropDown, this.usedInDropDown);
  return this.usedInDropDown ? popupPosition : this.CorrectPopupPositionForClientWindow(element, popupPosition, false);
 },
 UpdateWindowPositionInternal: function(index, popupElement) {
  var positionUpdated = false,
   element = this.GetWindowElement(index);
  if(this.InternalIsWindowVisible(index) && element != null) {
   var horizontalPopupPosition;
   if(this.popupHorizontalAlign === ASPx.PopupUtils.WindowCenterAlignIndicator && window.innerWidth <= element.offsetWidth) {
    var scrollDiff = aspxGetPopupControlCollection().GetDocScrollDifference(),
     scrollInProgress = scrollDiff.horizontal !== 0 || scrollDiff.vertical !== 0;
    horizontalPopupPosition = scrollInProgress ? ASPx.PxToInt(element.style.left) : this.GetClientPopupPos(element, popupElement, ASPx.InvalidPosition, true, false);
   } else
    horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, ASPx.InvalidPosition, true, false);
   var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, ASPx.InvalidPosition, false, false);
   this.SetWindowPos(index, element, horizontalPopupPosition.position, verticalPopupPosition.position);
   positionUpdated = true;
  }
  return positionUpdated;
 },
 UpdatePositionAtElement: function(popupElement) {
  this.UpdateWindowPositionAtElement(null, popupElement);
 },
 UpdateWindowPositionAtElement: function(window, popupElement) {
  var index = (window != null) ? window.index : -1;
  this.UpdateWindowPositionInternal(index, popupElement);
 },
 TryAutoUpdatePosition: function(index) {
  if(this.GetAutoUpdatePosition(index))
   this.UpdateWindowPositionInternal(index, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
 },
 GetLastShownPopupElementIndex: function(windowIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  return ASPx.GetDefinedValue(info.shownPEIndex, 0);
 },
 SetLastShownPopupElementIndex: function(windowIndex, popupElementIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  info.shownPEIndex = popupElementIndex;
 },
 GetLastUsedPopupElementInfo: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsLastUsedPopupElementInfoList[index];
  return this.defaultLastUsedPopupElementInfo;
 },
 GetPopupElement: function(index, popupElementIndex) {
  var popupElement = this.GetPopupElementList(index)[popupElementIndex];
  return popupElement ? popupElement : null;
 },
 GetPopupElementList: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupElementList[index];
  return this.defaultWindowPopupElementList;
 },
 PopulatePopupElementsByIds: function(index) {
  var ids = this.GetPopupElementIDList(index);
  for(var i = 0; i < ids.length; i++) {
   var popupElement = ASPx.PopupUtils.FindPopupElementById(ids[i]);
   if(popupElement)
    this.AddWindowPopupElement(index, popupElement);
  }
 },
 PopulatePopupElements: function(index) {
  this.PopulatePopupElementsByIds(index);
 },
 SetPopupElementIDByIndex: function(index, popupElementId) {
  this.RemoveWindowAllPopupElements(index);
  this.SetPopupElementIDs(index, popupElementId.split(';'));
  if(aspxGetPopupControlCollection().IsDisappearTimerActive()) {
   aspxGetPopupControlCollection().ClearDisappearTimer();
   this.Hide(index);
  }
  this.PopulatePopupElements(index);
 },
 RefreshPopupElementConnection: function() {
  this.ClearPopupElementConnection();
  var index = this.HasDefaultWindow() ? -1 : 0;
  for(; index < this.GetWindowCount(); index++)
   this.PopulatePopupElements(index);
 },
 ClearPopupElementConnection: function() {
  var index = this.HasDefaultWindow() ? -1 : 0;
  for(; index < this.GetWindowCount(); index++)
   this.RemoveWindowAllPopupElements(index);
 },
 GetPopupElementIDList: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupElementIDList[index];
  return this.defaultWindowPopupElementIDList;
 },
 SetPopupElementIDs: function(index, ids) {
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsPopupElementIDList[index] = ids;
  this.defaultWindowPopupElementIDList = ids;
 },
 AddPopupElementInternal: function(index, element) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++) {
   if(!popupElements[i]) {
    popupElements[i] = element;
    return i;
   }
  }
  popupElements.push(element);
  return popupElements.length - 1;
 },
 RemovePopupElementInternal: function(index, element) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++) {
   if(popupElements[i] == element) {
    popupElements[i] = null;
    return;
   }
  }
 },
 AddPopupElement: function(popupElement) {
  this.AddWindowPopupElement(-1, popupElement);
 },
 AddWindowPopupElement: function(index, popupElement) {
  var popupElementIndex = this.AddPopupElementInternal(index, popupElement);
  this.SetPopupElementReference(index, popupElement, popupElementIndex, true);
 },
 RemovePopupElement: function(popupElement) {
  this.RemoveWindowPopupElement(-1, popupElement);
 },
 RemoveWindowPopupElement: function(index, popupElement) {
  this.RemovePopupElementInternal(index, popupElement);
  this.SetPopupElementReference(index, popupElement, null, false);
 },
 SetPopupElementReference: function(index, popupElement, popupElementIndex, attach) {
  if(!ASPx.IsExistsElement(popupElement)) return;
  var setReferenceFunction = this.getAttachReferenceFunction(attach);
  var setContextMenuReferenceFunction = attach ? ASPx.Evt.AttachContextMenuToElement : ASPx.Evt.DetachContextMenuFromElement;
  var windowPopupAction = this.GetWindowPopupAction(index);
  if(windowPopupAction == "LeftMouseClick")
   setReferenceFunction(popupElement, "mouseup", aspxPEMEvent);
  else if(windowPopupAction == "RightMouseClick")
   setContextMenuReferenceFunction(popupElement, aspxPEMEvent);
  else if(windowPopupAction == "MouseOver") {
   var windowElement = this.GetWindowElement(index);
   setReferenceFunction(popupElement, "mouseover", ASPx.PopupUtils.OverControl.OnMouseOver);
   setReferenceFunction(windowElement, "mouseover", aspxPWEMOver);
   if(attach)
    this.SetMSTouchMouseOverReference(popupElement, windowElement, this.name, index, this.appearAfter);
  }
  if(windowPopupAction == "LeftMouseClick" || windowPopupAction == "RightMouseClick") {
   setReferenceFunction(popupElement, "mousedown", aspxPEMEvent);
  }
  if(attach) {
   popupElement.DXPopupElementControl = this;
   popupElement.DXPopupWindowIndex = index;
   popupElement.DXPopupElementIndex = popupElementIndex;
  } else
   popupElement.DXPopupElementControl = popupElement.DXPopupWindowIndex = popupElement.DXPopupElementIndex = undefined;
 },
 getAttachReferenceFunction: function(attach) {
  return attach ? ASPx.Evt.AttachEventToElement : ASPx.Evt.DetachEventFromElement;
 },
 SetMSTouchMouseOverReference: function(popupElement, windowElement, popupName, index, appearAfter) {
  if(!ASPx.TouchUIHelper.pointerEnabled) return;
  popupElement.dxMsTouchGesture = popupElement.dxMsTouchGesture ||
   ASPx.TouchUIHelper.msTouchCreateGesturesWrapper(popupElement, function(evt) {
    window.setTimeout(function() {
     aspxGetPopupControlCollection().SetAppearTimer(popupName, index, popupElement.DXPopupElementIndex, appearAfter, evt);
    }, 0);
   });
  windowElement.dxMsTouchGesture = windowElement.dxMsTouchGesture || ASPx.TouchUIHelper.msTouchCreateGesturesWrapper(windowElement, function(evt) {
   window.setTimeout(function() {
    aspxGetPopupControlCollection().ClearDisappearTimer();
   }, 0);
  });
 },
 GetLastOverPopupElementIndex: function(windowIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  return ASPx.GetDefinedValue(info.overPEIndex, -1);
 },
 SetLastOverPopupElementIndex: function(windowIndex, popupElementIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  info.overPEIndex = popupElementIndex;
 },
 OnPopupElementMouseOver: function(evt, popupElement) {
  if(popupElement != null) {
   var index = popupElement.DXPopupWindowIndex;
   var isVisible = this.InternalIsWindowVisible(index);
   var popupElementIndex = popupElement.DXPopupElementIndex;
   if(this.GetLastOverPopupElementIndex(index) != popupElementIndex) {
    if(aspxGetPopupControlCollection().IsAppearTimerActive())
     aspxGetPopupControlCollection().ClearAppearTimer();
    if(aspxGetPopupControlCollection().IsDisappearTimerActive())
     aspxGetPopupControlCollection().ClearDisappearTimer();
    if(isVisible) {
     this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.MouseOut);
     isVisible = false;
    }
   }
   if(!isVisible) {
    aspxGetPopupControlCollection().SetAppearTimer(this.name, index, popupElement.DXPopupElementIndex, this.appearAfter, evt);
    aspxGetPopupControlCollection().InitOverObject(this, index, evt);
   }
   this.SetLastOverPopupElementIndex(index, popupElementIndex);
  }
 },
 OnPopupElementMouseOut: function(evt, popupElement) {
 },
 RemoveAllPopupElements: function() {
  this.RemoveWindowAllPopupElements(-1);
 },
 RemoveWindowAllPopupElements: function(index) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++)
   this.RemoveWindowPopupElement(index, popupElements[i]);
 },
 GetWindowCurrentPopupElementByIndex: function(index) {
  var popupElement = this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index));
  if(popupElement && popupElement.DXPopupElementControl)
   return popupElement;
  return null;
 },
 GetWindowCurrentPopupElementIndexByWindowIndex: function(windowIndex) {
  var popupElement = this.GetWindowCurrentPopupElementByIndex(windowIndex);
  return popupElement ? popupElement.DXPopupElementIndex : -1;
 },
 GetIsMaximizedOnWebKitTouch: function(index) {
  return false;
 },
 ProcessAccessibleElementOnHide: function() {
  if(this.accessibilityCompliant) {
   var focusElement = this.accessibleFocusElement ? this.accessibleFocusElement : this.GetCurrentPopupElement();
   ASPx.AccessibilityUtils.SetFocusAccessibleCore(focusElement);
   this.accessibleFocusElement = null;
  }
 },
 OnControlsInitialized: function() {
  this.InitializeAccessibleNavigationCore();
  setTimeout(function() {
   ASPx.GetControlCollection().ControlsInitialized.RemoveHandler(this.OnControlsInitialized, this);
  }.aspxBind(this), 0);
 },
 InitializeAccessibleNavigation: function() {
  this.Shown.AddHandler(this.InitializeAccessibleNavigationCore.aspxBind(this));
 },
 InitializeAccessibleNavigationCore: function() {
  this.resetFocusableElements();
  var focusableElement = this.getFirstFocusableElement();
  if(focusableElement) {
   var currentWindowContentCell = this.GetWindowContentElement(-1);
   var contentFirstActionElement = ASPx.FindFirstChildActionElement(currentWindowContentCell);
   if(contentFirstActionElement && contentFirstActionElement !== focusableElement)
    focusableElement = contentFirstActionElement;
   if(!this.preventAccessibilityFocus)
    ASPx.AccessibilityUtils.SetFocusAccessible(focusableElement);
   this.SetLoopingFocusHandlers();
  }
 },
 resetFocusableElements: function() {
  if(this.firstFocusableElement)
   ASPx.Evt.DetachEventFromElement(this.firstFocusableElement, "keydown", this.focusLastElementHandler);
  if(this.lastFocusableElement)
   ASPx.Evt.DetachEventFromElement(this.lastFocusableElement, "keydown", this.focusFirstElementHandler);
  this.firstFocusableElement = null;
  this.lastFocusableElement = null;
 },
 getFirstFocusableElement: function() {
  if(!this.firstFocusableElement)
   this.firstFocusableElement = ASPx.FindFirstChildActionElement(this.GetCurrentWindowElement());
  return this.firstFocusableElement;
 },
 getLastFocusableElement: function() {
  if(!this.lastFocusableElement)
   this.lastFocusableElement = ASPx.FindLastChildActionElement(this.GetCurrentWindowElement());
  return this.lastFocusableElement;
 },
 SetLoopingFocusHandlers: function() {
  ASPx.Evt.AttachEventToElement(this.getFirstFocusableElement(), "keydown", this.focusLastElementHandler);
  ASPx.Evt.AttachEventToElement(this.getLastFocusableElement(), "keydown", this.focusFirstElementHandler);
 },
 loopFocusHandler: function(evt, isLastFocusableElement) {
  var keyCode = ASPx.Evt.GetKeyCode(evt);
  if(keyCode !== ASPx.Key.Tab)
   return;
  var targetElement = isLastFocusableElement ? this.getLastFocusableElement() : this.getFirstFocusableElement();
  if(ASPx.Evt.GetEventSource(evt) !== targetElement)
   return;
  var elementToFocus = null;
  if(!isLastFocusableElement && evt.shiftKey)
   elementToFocus = this.getLastFocusableElement();
  else if(isLastFocusableElement && !evt.shiftKey)
   elementToFocus = this.getFirstFocusableElement();
  if(elementToFocus) {
   ASPx.AccessibilityUtils.SetFocusAccessible(elementToFocus);
   ASPx.Evt.PreventEventAndBubble(evt);
  }
 },
 getLeftRightBordersAndPaddingsSummaryValue: function(element, currentStyle) {
  return ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle);
 },
 getTopBottomBordersAndPaddingsSummaryValue: function(element, currentStyle) {
  return ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle);
 },
 AdjustModalElementBounds: function(element) {
 },
 RefreshDimensionsAfterCreateIframe: function(index) {
 },
 UpdatePositionAfterCallback: function(windowIndex) {
 }
});
ASPxClientPopupControlBase.AnimationType = {
 Fade: "fade",
 Slide: "slide",
 Auto: "auto",
 None: "none"
};
var ASPxClientPopupControl = ASPx.CreateClass(ASPxClientPopupControlBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.popupActionArray = [];
  this.windowsPopupElementIDList = [];
  this.windowsPopupElementList = [];
  this.windowsLastUsedPopupElementInfoList = [];
  this.windowsIsPopupedList = [];
  this.windowsPopupReasonMouseEventList = [];
  this.defaultPopupReasonMouseEvent = null;
  this.modal = false;
  this.modalArray = [];
  this.isDraggedArray = [];
  this.closeActionArray = [];
  this.showOnPageLoadArray = [];
  this.windows = [];
  this.windowCount = 0;
  this.closeOnEscapeArray = [];
  this.leftArray = [];
  this.contentUrlArray = [];
  this.contentUrlIFrameTitleArray = [];
  this.iframeLoadingArray = [];
  this.iframeAdjustingPostponedArray = [];
  this.isResizedArray = [];
  this.zIndexArray = [];
  this.topArray = [];
  this.shownArray = [];
  this.heightArray = [];
  this.widthArray = [];
  this.widthFromServer = false;
  this.widthFromServerArray = [];
  this.minHeightArray = [];
  this.minWidthArray = [];
  this.maxHeightArray = [];
  this.maxWidthArray = [];
  this.hideBodyScrollWhenModal = true;
  this.hideBodyScrollWhenModalArray = [];
  this.hideBodyScrollWhenMaximized = true;
  this.canScrollViewPort = false;
  this.canScrollViewPortArray = [];
  this.autoUpdatePositionArray = [];
  this.cachedSizeArray = [];
  this.enableContentScrollingArray = [];
  this.contentOverflowXArray = [];
  this.contentOverflowYArray = [];
  this.isPinned = false;
  this.isPinnedArray = [];
  this.pinX = 0;
  this.pinXArray = [];
  this.pinY = 0;
  this.pinYArray = [];
  this.lockScroll = 0;
  this.isCollapsed = false;
  this.isCollapsedArray = [];
  this.isCollapsedInit = false;
  this.isCollapsedInitArray = [];
  this.collapseExecutingLockCount = 0;
  this.isMaximized = false;
  this.isMaximizedArray = [];
  this.isMaximizedInit = false;
  this.isMaximizedInitArray = [];
  this.maximizationExecutingLockCount = 0;
  this.restoredWindowValues = {};
  this.restoredWindowValuesArray = [];
  this.browserResizingForMaxWindowLockCount = 0;
  this.updateRestoredWindowSizeLockCount = 0;
  this.touchUIScrollers = {};
  this.adaptivityEnabled = false;
  this.DefaultModalMaxWidth = 500;
  this.DefaultModalMinWidth = 0;
  this.stretchVertically = false;
  this.stretchVerticallyArray = [];
  this.fixedHeader = true;
  this.fixedHeaderArray = [];
  this.fixedFooter = true;
  this.fixedFooterArray = [];
  this.modalMinHeight = null;
  this.modalMinHeightArray = [];
  this.modalMinWidth = null;
  this.modalMinWidthArray = [];
  this.modalMaxHeight = null;
  this.modalMaxHeightArray = [];
  this.modalMaxWidth = null;
  this.modalMaxWidthArray = [];
  this.modalVerticalAlign = ModalAlign.WindowTop;
  this.modalHorizontalAlign = ModalAlign.WindowCenter;
  this.adaptiveModalMode = false;
  this.adaptiveModalModeArray = [];
  this.switchAtWindowInnerWidth = ASPx.MaxMobileWindowWidth;
  this.PinnedChanged = new ASPxClientEvent();
  this.AdaptiveModeChanged = new ASPxClientEvent();
 },
 SetData: function(data){
  if(data.windows)
   this.CreateWindows(data.windows);
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeArrayCores();
 },
 Initialize: function() {
  ASPxClientPopupControlBase.prototype.Initialize.call(this);
  aspxGetPopupControlCollection().EnsureSaveScrollState();
  if(this.HasDefaultWindow())
   this.InitializeWindow(-1);
  for(var i = 0; i < this.GetWindowCount() ; i++)
   this.InitializeWindow(i);
  this.InitializeScrollbars();
 },
 InitializeEnableContentScrolling: function() {
  for(var windowIndex = 0; windowIndex < this.GetWindowCount() ; windowIndex++) {
   var contentOverflowX = this.GetWindowOverflowX(windowIndex);
   var contentOverflowY = this.GetWindowOverflowY(windowIndex);
   this.enableContentScrollingArray.push(contentOverflowX != "None" || contentOverflowY != "None");
  }
  ASPxClientPopupControlBase.prototype.InitializeEnableContentScrolling.call(this);
 },
 InitializeScrollbars: function() {
  if(!ASPx.Browser.WebKitTouchUI && !ASPx.Browser.MSTouchUI && (!ASPx.Browser.WindowsPhonePlatform || !ASPx.Browser.IE))
   return;
  this.ForEachWindow(function(windowIndex) {
   if(this.GetEnableContentScrolling(windowIndex)) {
    var scrollElement = this.getTouchScrollerElement(windowIndex);
    if(scrollElement) {
     if(ASPx.Browser.MSTouchUI)
      scrollElement.style.touchAction = "auto";
     else {
      var options = this.GetWindowTouchScrollOptions(windowIndex);
      if(!this.HasIframeOnIos(windowIndex))
       this.touchUIScrollers[windowIndex] = ASPx.TouchUIHelper.MakeScrollable(scrollElement, options);
     }
    }
   }
  }.aspxBind(this));
 },
 GetWindowTouchScrollOptions: function (index) {
  var contentOverflowX = this.GetWindowOverflowX(index),
   contentOverflowY = this.GetWindowOverflowY(index);
  return {
   showHorizontalScrollbar: contentOverflowX === "Auto" || contentOverflowX === "Scroll",
   showVerticalScrollbar: contentOverflowY === "Auto" || contentOverflowY === "Scroll"
  };
 },
 ForEachWindow: function(callback) {
  var indices = [];
  if(this.HasDefaultWindow())
   indices.push(-1);
  else {
   for(var i = 0; i < this.GetWindowCount(); i++)
    indices.push(i);
  }
  ASPx.Data.ForEach(indices, callback);
 },
 GetMainElementId: function() {
  return null;
 },
 preventParentOverlowOnIos: function(index) {
  if(!ASPx.Browser.MacOSMobilePlatform) return;
  var parent = this.getParentPopupControl(index);
  if(parent) 
   parent.popupControl.changeContentOverflow(parent.windowIndex);
 },
 restoreParentOverflowOnIos: function(index) {
  if(!ASPx.Browser.MacOSMobilePlatform) return;
  var parent = this.getParentPopupControl(index);
  if(parent) 
   parent.popupControl.restoreContentOverflow(parent.windowIndex);
 },
 changeContentOverflow: function(index) {
  var scrollerElement = this.getTouchScrollerElement(index);
  if(!scrollerElement) return;
  ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflow", "visible");
  ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflowX", "visible");
  ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflowY", "visible");
 },
 restoreContentOverflow: function(index) {
  var scrollerElement = this.getTouchScrollerElement(index);
  if(!scrollerElement) return;
  ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflow");
  ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflowX");
  ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflowY");
 },
 UpdateScrollbar: function(index) {
  var touchUIScroller = this.touchUIScrollers[index];
  if(!touchUIScroller)
   return;
  var scrollElement = this.GetContentContainer(index);
  if(scrollElement)
   touchUIScroller.ChangeElement(scrollElement);
 },
 InitializeArrayCores: function() {
  if(this.GetWindowCountCore() > 0) {
   this.InitializeWindowPopupElementList();
   this.InitializeWindowPopupElementIDList();
   this.InitializeWindowLastUsedPopupElementInfoList();
   this.InitializeArray(this.shownArray);
   this.InitializeArray(this.windowsPopupReasonMouseEventList, null);
   this.InitializeArray(this.windowsIsPopupedList, false);
   this.InitializeArray(this.contentUrlArray, "");
   this.InitializeArray(this.contentUrlIFrameTitleArray, "");
   this.InitializeArray(this.popupActionArray, this.popupAction);
   this.InitializeArray(this.closeActionArray, this.closeAction);
   this.InitializeArray(this.showOnPageLoadArray, false);
   this.InitializeArray(this.isDraggedArray, false);
   this.InitializeArray(this.isPinnedArray, false);
   this.InitializeArray(this.isCollapsedArray, false);
   this.InitializeArray(this.isCollapsedInitArray, false);
   this.InitializeArray(this.isMaximizedArray, false);
   this.InitializeArray(this.isMaximizedInitArray, false);
   this.InitializeArray(this.restoredWindowValuesArray, {});
   this.InitializeArray(this.iframeAdjustingPostponedArray, {});
   this.InitializeArray(this.isResizedArray, false);
   this.InitializeArray(this.zIndexArray, -1);
   this.InitializeArray(this.leftArray, 0);
   this.InitializeArray(this.topArray, 0);
   this.InitializeArray(this.widthArray, constants.DEFAULT_WINDOW_WIDTH);
   this.InitializeArray(this.heightArray, constants.DEFAULT_WINDOW_HEIGHT);
   this.InitializeArray(this.widthFromServerArray, false);
   this.InitializeArray(this.pinXArray, 0);
   this.InitializeArray(this.pinYArray, 0);
   this.InitializeArray(this.minWidthArray, null);
   this.InitializeArray(this.minHeightArray, null);
   this.InitializeArray(this.maxWidthArray, null);
   this.InitializeArray(this.maxHeightArray, null);
   this.InitializeArray(this.cachedSizeArray, null);
   this.InitializeArray(this.iframeLoadingArray, false);
   this.InitializeArray(this.autoUpdatePositionArray, false);
   this.InitializeArray(this.hideBodyScrollWhenModalArray, true);
   this.InitializeArray(this.canScrollViewPortArray, false);
   this.InitializeArray(this.closeOnEscapeArray, this.closeOnEscape);
   this.InitializeArray(this.modalArray, false);
   this.InitializeArray(this.adaptiveModalModeArray, false);
   this.InitializeArray(this.fixedHeaderArray, true);
   this.InitializeArray(this.fixedFooterArray, true);
   this.InitializeArray(this.modalMinWidthArray, null);
   this.InitializeArray(this.modalMinHeightArray, null);
   this.InitializeArray(this.modalMaxWidthArray, null);
   this.InitializeArray(this.modalMaxHeightArray, null);
   this.InitializeArray(this.stretchVerticallyArray, false);
  }
 },
 InitializeArray: function(array, defaultValue) {
  if(array.length == 0) {
   for(var i = 0; i < this.GetWindowCountCore() ; i++)
    array[i] = defaultValue;
  }
 },
 InitializeWindowPopupElementIDList: function() {
  for(var i = 0; i < this.GetWindowCountCore() ; i++) {
   if(!this.windowsPopupElementIDList[i])
    this.windowsPopupElementIDList[i] = [];
  }
 },
 InitializeWindowPopupElementList: function() {
  for(var i = 0; i < this.GetWindowCountCore() ; i++) {
   if(!this.windowsPopupElementList[i])
    this.windowsPopupElementList[i] = [];
  }
 },
 InitializeWindowLastUsedPopupElementInfoList: function() {
  for(var i = 0; i < this.GetWindowCountCore() ; i++) {
   if(!this.windowsLastUsedPopupElementInfoList[i])
    this.windowsLastUsedPopupElementInfoList[i] = {};
  }
 },
 AllowMouseDown: function(evt, index) {
  return ASPxClientPopupControlBase.prototype.AllowMouseDown.call(this, evt, index) &&
   !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowPinButton(index)) &&
   !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowCollapseButton(index)) &&
   !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowMaximizeButton(index));
 },
 AssignHeaderButtonsEvents: function(index) {
  ASPxClientPopupControlBase.prototype.AssignHeaderButtonsEvents.call(this, index);
  this.AttachClickToHeaderButton(index, this.GetWindowPinButton(index), "ASPx.PWPBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowCollapseButton(index), "ASPx.PWMNBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowMaximizeButton(index), "ASPx.PWMXBClick");
 },
 InitializeWindow: function(index) {
  ASPxClientPopupControlBase.prototype.InitializeWindow.call(this, index);
  if(this.adaptivityEnabled) {
   ASPx.Evt.AttachEventToElement(this.GetModalWrapperElement(index), "scroll", function(e) { this.OnModalWrapperScroll(e, index); }.aspxBind(this));
   if(ASPx.Browser.WebKitTouchUI) {
    ASPx.Evt.AttachEventToElement(this.GetModalWrapperElement(index), "touchstart", function(e) { this.OnModalWrapperTouchStart(e); }.aspxBind(this));
    ASPx.Evt.AttachEventToElement(this.GetModalWrapperElement(index), "touchmove", function(e) { this.OnModalWrapperTouchMove(e, index); }.aspxBind(this));
   }
  } else {
   var modalElement = this.GetWindowModalElement(index);
   if(modalElement)
    ASPx.Evt.AttachEventToElement(modalElement, "mousedown", aspxPWMEMDown);
  }
 },
 BrowserWindowResizeSubscriber: function() {
  return true;
 },
 OnBrowserWindowResize: function(e) {
  window.setTimeout(this.SetPopupMaximizedPositionOnBrowserResize.aspxBind(this), 0);
  this.ForEachWindow(this.updateContentScrollIfNeeded.aspxBind(this));
 },
 SetPopupMaximizedPositionOnBrowserResize: function() {
  this.ForEachWindow(this.SetMaximizedPositionOnBrowserResize.aspxBind(this));
 },
 UpdateResizeCursor: function(index, element, verticalDirection, horizontalDirection) {
  if(this.GetAdaptiveModalMode(index))
   this.HideTemporaryCursor(element);
  else
   ASPxClientPopupControlBase.prototype.UpdateResizeCursor.call(this, index, element, verticalDirection, horizontalDirection);
 },
 SetMaximizedPositionOnBrowserResize: function(index) {
  var element = this.GetWindowElement(index);
  if(element && this.GetIsMaximized(index) && this.InternalIsWindowVisible(index)) {
   var left = this.GetMaximizedPosition(element, true);
   var top = this.GetMaximizedPosition(element, false);
   this.SetWindowPos(index, element, left, top);
  }
 },
 InitCollapsedWindows: function(index) {
  if((this.isCollapsedInit && index == -1) || (index >= 0 && index < this.isCollapsedInitArray.length && this.isCollapsedInitArray[index])) {
   if(this.InternalIsWindowVisible(index)) {
    this.DoCollapse(index, true);
    if(index == -1)
     this.isCollapsedInit = false;
    else
     this.isCollapsedInitArray[index] = false;
   }
  }
 },
 InitMaximizedWindows: function(index) {
  if(this.GetIsMaximizedInit(index) && this.InternalIsWindowVisible(index)) {
   this.DoMaximize(index, true);
   this.SetIsMaximizedInit(index, false);
  }
 },
 InitPinnedWindows: function(index) {
  if((this.isPinned && index == -1) || (index >= 0 && index < this.isPinnedArray.length && this.isPinnedArray[index]))
   this.HoldPosition(index, true);
 },
 AfterInitializeWindow: function(index) {
  if(this.contentOverflowX !== "None" && !this.GetWindowWidthFromServer(index))
   this.SetWindowWidth(index, 0);
  ASPxClientPopupControlBase.prototype.AfterInitializeWindow.call(this, index);
  this.InitPinnedWindows(index);
  this.InitMaximizedWindows(index);
  this.InitCollapsedWindows(index);
 },
 OnDragStop: function(index) {
  ASPxClientPopupControlBase.prototype.OnDragStop.call(this, index);
  if(this.adaptivityEnabled)
   ASPxClientPopupControl.WindowResizeHelper.Initialize(this.GetWindowElement(index));
  else
   this.updateContentScrollIfNeeded(index);
 },
 GetPropertyValue: function(index, propName) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this[propName + "Array"][index];
  return ASPxClientPopupControlBase.prototype.GetPropertyValue.call(this, index, propName);
 },
 SetPropertyValue: function(index, propName, value) {
  if(0 <= index && index < this.GetWindowCountCore())
   this[propName + "Array"][index] = value;
  else
   ASPxClientPopupControlBase.prototype.SetPropertyValue.call(this, index, propName, value);
 },
 GetAdaptiveModalMode: function(index) {
  return this.GetPropertyValue(index, "adaptiveModalMode");
 },
 GetAutoUpdatePosition: function(index) {
  return this.GetPropertyValue(index, "autoUpdatePosition") && !this.GetAdaptiveModalMode(index);
 },
 SetAdaptiveModalMode: function(index, enabled) {
  ASPx.ToggleClassNameToElement(this.GetModalWrapperElement(index), this.GetModalSystemCssClass(), enabled);
  this.SetPropertyValue(index, "adaptiveModalMode", enabled);
 },
 GetIsPinned: function(index) {
  return this.GetPropertyValue(index, "isPinned");
 },
 SetIsPinned: function(index, value) {
  this.SetPropertyValue(index, "isPinned", value);
 },
 GetPinPosX: function(index) {
  return this.GetPropertyValue(index, "pinX");
 },
 SetPinPosX: function(index, pinX) {
  this.SetPropertyValue(index, "pinX", pinX);
 },
 GetPinPosY: function(index) {
  return this.GetPropertyValue(index, "pinY");
 },
 SetPinPosY: function(index, pinY) {
  this.SetPropertyValue(index, "pinY", pinY);
 },
 GetIsCollapsed: function(index) {
  return this.GetPropertyValue(index, "isCollapsed");
 },
 SetIsCollapsed: function(index, value) {
  this.SetPropertyValue(index, "isCollapsed", value);
 },
 GetIsMaximized: function(index) {
  return this.GetPropertyValue(index, "isMaximized");
 },
 GetIsMaximizedOnWebKitTouch: function(index) {
  return this.GetIsMaximized(index) && ASPx.Browser.WebKitTouchUI;
 },
 SetIsMaximized: function(index, value) {
  this.SetPropertyValue(index, "isMaximized", value);
 },
 GetIsMaximizedInit: function(index) {
  return this.GetPropertyValue(index, "isMaximizedInit");
 },
 SetIsMaximizedInit: function(index, value) {
  this.SetPropertyValue(index, "isMaximizedInit", value);
 },
 GetRestoredWindowData: function(index) {
  return ASPx.CloneObject(this.GetPropertyValue(index, "restoredWindowValues"));
 },
 GetEnableContentScrolling: function(index) {
  return this.GetPropertyValue(index, "enableContentScrolling");
 },
 GetWindowOverflowX: function(index) {
  return this.GetPropertyValue(index, "contentOverflowX");
 },
 GetWindowOverflowY: function(index) {
  return this.GetPropertyValue(index, "contentOverflowY");
 },
 SetRestoredWindowData: function(index, value) {
  this.SetPropertyValue(index, "restoredWindowValues", value);
 },
 GetWindowIsShown: function(index) {
  return this.GetPropertyValue(index, "shown");
 },
 SetWindowIsShown: function(index, shown) {
  this.SetPropertyValue(index, "shown", shown);
 },
 GetWindowWidthFromServer: function(index) {
  return this.GetPropertyValue(index, "widthFromServer");
 },
 GetHideBodyScrollWhenModal: function(index) {
  return this.GetPropertyValue(index, "hideBodyScrollWhenModal");
 },
 SetHideBodyScrollWhenModal: function(index, value) {
  this.SetPropertyValue(index, "hideBodyScrollWhenModal", value);
 },
 GetCanScrollViewPort: function(index) {
  return this.GetPropertyValue(index, "canScrollViewPort");
 },
 HasDefaultWindow: function() {
  return this.GetWindowCountCore() === 0;
 },
 GetWindowFooterHeightLite: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(footer)
   return footer.offsetHeight;
  return null;
 },
 SetWindowPopUpReasonMouseEvent: function(index, evt) {
  evt = ASPx.CloneObject(evt);
  if(evt === undefined)
   evt = null;
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsPopupReasonMouseEventList[index] = evt;
  this.defaultPopupReasonMouseEvent = evt;
 },
 GetPopUpReasonMouseEvent: function() {
  return this.GetWindowPopUpReasonMouseEvent(null);
 },
 GetWindowPopUpReasonMouseEvent: function(window) {
  var index = (window != null) ? window.index : -1;
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupReasonMouseEventList[index];
  return this.defaultPopupReasonMouseEvent;
 },
 GetWindowCountCore: function() {
  return (this.windows.length > 0) ? this.windows.length : this.windowCount;
 },
 SetClientModality: function(isModal) {
  this.SetWindowClientModality(-1, isModal);
 },
 SetWindowClientModality: function(index, isModal) {
  var modalElement = this.GetWindowModalElement(index);
  if(isModal && !ASPx.IsElementVisible(modalElement))
   this.DoShowWindowModalElement(index);
  if(!isModal && ASPx.IsElementVisible(modalElement)) {
   var element = this.GetWindowElement(index);
   this.DoHideWindowModalElement(element);
  }
 },
 GetWindowPinButton: function(index) {
  return ASPx.GetElementById(this.name + "_HPB" + index);
 },
 GetWindowCollapseButton: function(index) {
  return ASPx.GetElementById(this.name + "_HMNB" + index);
 },
 GetWindowMaximizeButton: function(index) {
  return ASPx.GetElementById(this.name + "_HMXB" + index);
 },
 GetWindowScrollDiv: function(index) {
  return this.GetWindowChild(index, "_CSD" + index);
 },
 GetWindowElementDisplayValue: function(windowHasAnyScrollbars, windowHeight) {
  return windowHasAnyScrollbars && windowHeight ? "block" : "table";
 },
 GetMainWindowWidth: function(index, noCache) {
  return this.GetClientWindowWidth(index, true, noCache);
 },
 GetClientWindowWidth: function(index, outerSize, noCache) {
  if(!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))) {
   var cachedSize = this.GetWindowCachedSize(index);
   if(cachedSize != null)
    return cachedSize.width;
  }
  var element = this.GetWindowElement(index);
  if(element != null)
   return element.offsetWidth;
 },
 GetMainWindowHeight: function(index, noCache) {
  return this.GetClientWindowHeight(index, true, noCache);
 },
 GetClientWindowHeight: function(index, outerSize, noCache) {
  if(!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))) {
   var cachedSize = this.GetWindowCachedSize(index);
   if(cachedSize != null)
    return cachedSize.height;
  }
  var element = this.GetWindowElement(index);
  if(element != null)
   return element.offsetHeight;
 },
 ShowModal: function() {
  this.ShowModalByIndex(-1);
 },
 ShowModalByIndex: function(index) {
  if(this.adaptivityEnabled) {
   this.SetAdaptiveModalMode(index, true);
   this.ResetModalStyles(index);
   this.ResetPopupStyles(index);
   this.DoShowModal(index, ASPx.InvalidPosition, ASPx.InvalidPosition, this.GetLastShownPopupElementIndex(index));
  }
 },
 DoShowWindowCore: function(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason) {
  if(this.IsDOMDisposed()) return;
  this.SetWindowPopUpReasonMouseEvent(index, evt);
  if(this.adaptivityEnabled) {
   this.SetAdaptiveModalMode(index, this.NeedAdaptiveModalMode(index));
   this.ResetModalStyles(index);
   if(this.GetAdaptiveModalMode(index)) {
    this.ResetPopupStyles(index);
    this.DoShowModal(index, x, y, popupElementIndex);
    return;
   }
  }
  this.DoShowWindowAtPos(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason);
 },
 NeedAdaptiveModalMode: function(index) {
  return window.innerWidth < this.GetSwitchAtWindowInnerWidth();
 },
 GetSwitchAtWindowInnerWidth: function() {
  return this.switchAtWindowInnerWidth;
 },
 GetModalSystemCssClass: function() {
  return "dxmodalSys";
 },
 DoShowWindowAtPos: function(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason) {
  if(!this.isInitialized)
   this.PopulatePopupElements(index);
  var element = this.GetWindowElement(index);
  if(element != null && this.IsWindowElementsIDAssigned(index)) {
   this.StopCloseAnimation(index);
   this.PrepareToAdjustContentOnShow(index);
   if(closeOtherWindows)
    aspxGetPopupControlCollection().DoHideAllWindows(element, this.GetWindowElementId(index), false, closeOtherReason, 0);
   var isMoving = this.InternalIsWindowVisible(index);
   ASPx.SetElementDisplay(element, true);
   element.style.display = this.GetWindowElementDisplayValue(this.HasAnyScrollBars(index), this.GetPopupWindowDimensionFromCache(index, false));
   element.style.position = "absolute";
   var scrollDiv = this.GetWindowScrollDiv(index),
    shouldResetScrollSize = scrollDiv && this.GetEnableContentScrolling(index) && ASPx.GetDocumentMaxClientHeight() <= element.offsetHeight,
    savedScrollDivHeight = shouldResetScrollSize && scrollDiv.style.height;
   if(shouldResetScrollSize)
    scrollDiv.style.height = 0;
   this.RestoreWindowSizeFromCache(index);
   if(!this.GetWindowIsShown(index)) {
    var width = this.GetPopupWindowDimensionFromCache(index, true),
     height = this.GetPopupWindowDimensionFromCache(index, false);
    this.SetClientWindowSizeCoreLite(index, width, height);
    this.SetWindowIsShown(index, true);
   }
   var popupElement = this.GetPopupElement(index, popupElementIndex);
   if(popupElement)
    this.SetLastShownPopupElementIndex(index, popupElementIndex);
   if(this.GetIsMaximized(index)) {
    if(this.hideBodyScrollWhenMaximized)
     ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
    this.NormalizeMaximizedWindowSize(index);
   }
   var isDragged = this.GetIsDragged(index);
   var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, x, true, isDragged);
   var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, y, false, isDragged);
   var clientX = horizontalPopupPosition.position;
   var clientY = verticalPopupPosition.position;
   this.SetWindowPos(index, element, clientX, clientY);
   if(shouldResetScrollSize)
    scrollDiv.style.height = savedScrollDivHeight;
   this.DoShowWindowModalElement(index);
   this.SetVisibleWithAnimation(element, isMoving, index, horizontalPopupPosition, verticalPopupPosition);
   this.ShowWindowContentUrl(index);
   this.AdjustContentOnShow(index);
   scrollDiv = this.GetWindowScrollDiv(index);
   if(scrollDiv && this.GetEnableContentScrolling(index)) {
    var dimension = null;
    var windowMainCell = this.GetWindowMainCell(element);
    if(windowMainCell.style.width && windowMainCell.style.height)
     dimension = 'both';
    else if(windowMainCell.style.width)
     dimension = 'width';
    else if(windowMainCell.style.height)
     dimension = 'height';
    if(!dimension)
     return;
    ASPx.SetElementDisplay(scrollDiv, false);
    this.SetWindowScrollDivSize(scrollDiv, index, dimension);
    ASPx.SetElementDisplay(scrollDiv, true);
   }
   this.registerAndActivateWindow(element, index, allowChangeZIndex);
   this.RaisePopupOnShow(isMoving, index);
   this.CorrectWindowSizeGripPositionLite(index);
   this.CorrectWindowHeaderText(index);
   this.InitMaximizedWindows(index);
   this.InitCollapsedWindows(index);
   if(this.GetIsPinned(index)) window.setTimeout(function() { this.HoldPosition(index, true); }.aspxBind(this), 0);
   if(!this.GetShowOnPageLoad(index))
    this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
   if(element.style.width.indexOf("px") > -1) {
    element.style.width = ASPx.GetCurrentStyle(element).width;
   }
   this.updateContentScrollIfNeeded(index);
  }
 },
 DoShowModal: function(index, x, y, popupElementIndex) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   this.StopCloseAnimation(index);
   this.EnsureIframeOnIosContentOverflow(index);
   this.PrepareToAdjustContentOnShow(index);
   if(!ASPx.Browser.WebKitTouchUI)
    ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
   this.DoShowWindowModalElement(index);
   var isMoving = this.InternalIsWindowVisible(index);
   ASPx.SetElementDisplay(this.GetModalWrapperElement(index), true);
   this.ResetScroll(index);
   ASPx.SetElementDisplay(element, true);
   this.SetSizeBeforeShow(index);
   this.UpdateAlignment(index);
   var popupElement = this.GetPopupElement(index, popupElementIndex);
   if(popupElement)
    this.SetLastShownPopupElementIndex(index, popupElementIndex);
   var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, x, true, false),
    verticalPopupPosition = this.GetClientPopupPos(element, popupElement, y, false, false);
   this.SetVisibleWithAnimation(element, isMoving, index, horizontalPopupPosition, verticalPopupPosition);
   this.ShowWindowContentUrl(index);
   this.AdjustContentOnShow(index);
   this.registerAndActivateWindow(element, index, true);
   this.RaisePopupOnShow(isMoving, index);
   this.CorrectWindowHeaderText(index);
   if(!this.GetShowOnPageLoad(index))
    this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
  }
 },
 EnsureIframeOnIosContentOverflow: function(index) {
  if(this.HasIframeOnIos(index)) {
   var contentElement = this.GetWindowContentElement(index);
   if(contentElement.style.overflow === "")
    contentElement.style.overflow = "auto";
  }
 },
 SetWindowElementZIndex: function(element, zIndex) {
  ASPxClientPopupControlBase.prototype.SetWindowElementZIndex.call(this, element, zIndex);
  if(this.adaptivityEnabled)
   this.SetModalWrapperZIndex(this.GetWindowIndex(element), zIndex);
  else
   this.updateContentScrollIfNeeded(this.GetWindowIndex(element));
 },
 SetModalWrapperZIndex: function(index, zIndex) {
  if(!this.GetAdaptiveModalMode(index)) return;
  ASPx.SetStyles(this.GetModalWrapperElement(index), {
   zIndex: zIndex
  });
 },
 updateContentScrollIfNeeded: function(index) {
  var windowElement = this.GetWindowElement(index);
  var wrapper = this.getWindowWrapper(windowElement);
  var wrapperScroll = this.getWindowWrapperScroll(windowElement);
  if(!wrapper || !this.WindowIsModal(index) || !this.GetHideBodyScrollWhenModal(index))
   return;
  ASPx.PopupUtils.adjustViewportScrollWrapper(wrapper, wrapperScroll, windowElement);
 },
 getWindowWrapper: function(windowElement) {
  return ASPx.GetParentByClassName(windowElement, PopupControlCssClasses.WindowWrapperCssClassName);
 },
 getWindowWrapperScroll: function(windowElement) {
  return ASPx.GetParentByClassName(windowElement, PopupControlCssClasses.WindowWrapperScrollCssClassName);
 },
 SizeCanBeSet: function(index, isWindowMaximizedAndCollapsed) {
  return ASPxClientPopupControlBase.prototype.SizeCanBeSet.call(this, index, isWindowMaximizedAndCollapsed) && !this.GetAdaptiveModalMode(index);
 },
 GetPopupWindowDimensionFromCache: function(index, isWidth) {
  var dimension;
  if(isWidth) {
   dimension = this.GetWindowWidthInternal(index);
   if(ASPx.IsExists(dimension)) {
    dimension = Math.max(dimension, this.GetWindowMinWidth(index));
    var maxWidth = this.GetWindowMaxWidth(index);
    if(maxWidth)
     dimension = Math.min(dimension, maxWidth);
   }
  }
  else {
   dimension = this.GetWindowHeightInternal(index);
   if(ASPx.IsExists(dimension)) {
    if(this.HasAnyScrollBars(index) && dimension === constants.DEFAULT_WINDOW_HEIGHT)
     return undefined;
    dimension = Math.max(dimension, this.GetWindowMinHeight(index));
    var maxHeight = this.GetWindowMaxHeight(index);
    if(maxHeight)
     dimension = Math.min(dimension, maxHeight);
   }
  }
  return dimension;
 },
 NormalizeMaximizedWindowSize: function(index) {
  var width = this.GetPopupWindowDimensionFromCache(index, true),
   height = this.GetPopupWindowDimensionFromCache(index, false),
   dimensions = this.getDocumentDimensions(index),
   sizeNormalizationIsNeeded = width < dimensions.width || height < dimensions.height;
  if(sizeNormalizationIsNeeded)
   this.NormalizeWindowSize(index, true);
 },
 NormalizeWindowSize: function(index, isMaximized) {
  var width = this.GetClientWindowWidth(index),
   height = this.GetClientWindowHeight(index),
   normWidth = width,
   normHeight = height,
   maxWidth = this.GetWindowMaxWidth(index),
   minWidth = this.GetWindowMinWidth(index),
   maxHeight = this.GetWindowMaxHeight(index),
   minHeight = this.GetWindowMinHeight(index);
  if(maxWidth)
   normWidth = Math.min(normWidth, maxWidth);
  if(minWidth)
   normWidth = Math.max(normWidth, minWidth);
  if(maxHeight)
   normHeight = Math.min(normHeight, maxHeight);
  if(minHeight)
   normHeight = Math.max(normHeight, minHeight);
  if(normWidth !== width || normHeight !== height)
   this.SetWindowSize(this.GetWindow(index), normWidth, normHeight);
  if(isMaximized) {
   var dimensions = this.getDocumentDimensions(index);
   if(this.GetIsCollapsed(index)) {
    if(normWidth != dimensions.width) {
     this.SetWindowSizeByIndexCore(index, dimensions.width, normHeight, true);
    }
   } else {
    if(normWidth != dimensions.width || normHeight != dimensions.height) {
     this.SetWindowSizeByIndexCore(index, dimensions.width, dimensions.height, false);
    }
   }
  }
 },
 DoShowWindowModalElement: function(index) {
  if(this.CanManipulateWithModalElement(index)) {
   if(this.adaptivityEnabled) {
    this.DoShowWindowModalElementWithAdaptivity(index);
    return;
   }
   var modalElement = this.GetWindowModalElement(index);
   var bodyScrollHasJustBeingHidden = false;
   if(this.GetHideBodyScrollWhenModal(index) && (!this.IsWindowVisible(this.GetWindow(index)) || !ASPx.IsElementVisible(modalElement))) {
    bodyScrollHasJustBeingHidden = true;
    aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
    if(!ASPx.Browser.WebKitTouchUI)
     ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(this.GetWindowElementId(index));
   }
   if(ASPx.Browser.IE && this.GetHideBodyScrollWhenModal(index))
    ASPx.Evt.AttachEventToElement(modalElement, ASPx.Evt.GetMouseWheelEventName(), function(evt) { return ASPx.Evt.PreventEventAndBubble(evt); });
   ASPx.SetElementDisplay(modalElement, true);
   this.AdjustModalElementBounds(modalElement);
   this.SetModalElementVisibilityWithAnimation(modalElement, index);
   aspxGetPopupControlCollection().RegisterVisibleModalElement(modalElement);
   if(bodyScrollHasJustBeingHidden)
    aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
  }
 },
 DoShowWindowModalElementWithAdaptivity: function(index) {
  var overlayElement = this.GetOverlayElement(index);
  if(!overlayElement) return;
  ASPx.SetStyles(overlayElement, {
   right: 0,
   bottom: 0,
   width: "",
   height: ""
  });
  ASPx.SetElementDisplay(overlayElement, true);
  this.SetModalElementVisibilityWithAnimation(overlayElement, index);
  ASPx.GetPopupControlCollection().RegisterVisibleModalElement(overlayElement);
 },
 SetSizeBeforeShow: function(index) {
  if(this.GetModalMaxWidth(index) && this.GetModalMaxWidth(index) !== this.DefaultModalMaxWidth)
   this.SetAdaptiveMaxWidthByIndex(index, this.GetModalMaxWidth(index));
  if(this.GetModalMinWidth(index) !== this.DefaultModalMinWidth)
   this.SetAdaptiveMinWidthByIndex(index, this.GetModalMinWidth(index));
  this.UpdateHeightDimensions(index);
 },
 UpdateHeightDimensions: function(index) {
  this.UpdateAdaptiveMinHeight(index);
  this.UpdateAdaptiveMaxHeight(index);
 },
 UpdateAdaptiveMinHeight: function(index) {
  if(this.GetModalMinHeight(index) !== null)
   this.SetAdaptiveHeightDimension(index, "minHeight", this.GetModalMinHeight(index));
 },
 UpdateAdaptiveMaxHeight: function(index) {
  if(this.GetModalMaxHeight(index) !== null)
   this.SetAdaptiveHeightDimension(index, "maxHeight", this.GetModalMaxHeight(index));
 },
 GetClientPopupPos: function(element, popupElement, pos, isX, isDragged) {
  if(!this.GetAdaptiveModalMode(this.GetWindowIndex(element)))
   return ASPxClientPopupControlBase.prototype.GetClientPopupPos.call(this, element, popupElement, pos, isX, isDragged);
  var getPosFunc = isX ? ASPx.GetAbsolutePositionX : ASPx.GetAbsolutePositionY;
  return { position: getPosFunc(element) };
 },
 GetAnimationVerticalDirection: function(index, verticalPopupPosition) {
  if(!this.GetAdaptiveModalMode(index))
   return ASPxClientPopupControlBase.prototype.GetAnimationVerticalDirection.call(this, index, verticalPopupPosition);
  return ASPxClientPopupControl.Animation.GetVerticalDirection(this.modalVerticalAlign, this.modalHorizontalAlign);
 },
 GetAnimationHorizontalDirection: function(index, horizontalPopupPosition) {
  if(!this.GetAdaptiveModalMode(index))
   return ASPxClientPopupControlBase.prototype.GetAnimationHorizontalDirection.call(this, index, horizontalPopupPosition);
  return ASPxClientPopupControl.Animation.GetHorizontalDirection(this.modalHorizontalAlign);
 },
 GetDefaultVerticalOffset: function() {
  return this.IsSmallDisplay() ? 10 : 30;
 },
 IsSmallDisplay: function() {
  return window.innerWidth < this.GetScreenLimitForCss();
 },
 GetScreenLimitForCss: function() {
  return ASPx.MaxMobileWindowWidth;
 },
 StartAutoAnimation: function(element, index, horizontalPopupPosition, verticalPopupPosition) {
  if(this.adaptivityEnabled) {
   if(this.NeedFadeAnimation(index, this.popupAnimationType))
    this.StartFadeAnimation(element, index);
   else
    this.StartSlideAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
  } else 
   ASPxClientPopupControlBase.prototype.StartAutoAnimation.call(this, element, index, horizontalPopupPosition, verticalPopupPosition);
 },
 DoHideWindowWithAutoAnimation: function(index, element, closeReason) {
  if(this.NeedFadeAnimation(index, this.closeAnimationType))
   this.DoHideWindowWithFadeAnimation(index, element, closeReason);
  else
   this.DoHideWindowWithSlideAnimation(index, closeReason);
 },
 IsDraggingAllowed: function(index) {
  return this.allowDragging && (!this.GetAdaptiveModalMode(index) || this.allowDraggingInAdaptiveMode);
 },
 IsResizeAllowed: function(index) {
  return ASPxClientPopupControlBase.prototype.IsResizeAllowed.call(this, index) && !this.GetAdaptiveModalMode(index);
 },
 IsFadeCloseAnimation: function(index) {
  return ASPxClientPopupControlBase.prototype.IsFadeCloseAnimation.call(this, index) || this.NeedFadeAnimation(index, this.closeAnimationType);
 },
 NeedFadeAnimation: function(index, animationType) {
  return ASPxClientPopupControl.Animation.NeedFadeAnimation(this.modalHorizontalAlign, this.modalVerticalAlign,
   animationType, this.popupHorizontalAlign, this.popupVerticalAlign, this.GetAdaptiveModalMode(index));
 },
 AllowModalElementAnimation: function(index) {
  if(this.GetAdaptiveModalMode(index))
   return this.popupAnimationType !== ASPxClientPopupControlBase.AnimationType.None;
  return ASPxClientPopupControlBase.prototype.AllowModalElementAnimation.call(this, index);
 },
 DoHideWindowCore: function(index, closeReason) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   if(this.HasCloseAnimation())
    this.PrepareElementAfterCloseAnimation(index, element);
   element.isHiding = true;
   element.style.zIndex = this.GetDefaultZIndexFromServer();
   this.SetIsDragged(index, false);
   this.UpdateWindowsStateCookie();
   element.isHiding = false;
   this.StopShowAnimation(index);
   if(ASPx.Browser.WebKitTouchUI || ASPx.Browser.Safari) {
    var dummy = element.offsetWidth; 
   }
   ASPx.SetElementDisplay(element, false);
   ASPx.SetElementVisibility(element, false);
   if(this.adaptivityEnabled) {
    ASPx.SetElementDisplay(this.GetModalWrapperElement(index), "");
    if(!ASPx.Browser.WebKitTouchUI)
     ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
    this.SetWrapperScrollVisible(index, true);
    this.SetIsDragged(index, false);
   }
   if(this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
    ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
   this.DoHideWindowModalElement(element, closeReason);
   this.DoHideWindowIFrame(element);
   aspxGetPopupControlCollection().UnregisterVisibleWindow(element);
   this.ProcessAccessibleElementOnHide();
   this.HideWindowLoadingPanel(index);
  }
 },
 OnAnimationStop: function(index) {
  if(this.adaptivityEnabled) {
   this.SetWrapperScrollVisible(index, true);
   this.UnlockWrapperScrollEventEvent();
  }
  ASPxClientPopupControlBase.prototype.OnAnimationStop.call(this, index);
  if(!this.adaptivityEnabled && ASPx.Browser.Firefox)
   this.GetWindowElement(index).style.display = "table";
 },
 ResetModalStyles: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   ASPx.SetStyles(element, {
    minWidth: "",
    maxWidth: "",
    marginTop: "",
    marginLeft: "",
    marginRight: "",
    position: ""
   });
   ASPx.SetStyles(this.GetWindowContentElement(index), {
    minHeight: "",
    maxHeight: "",
   });
   this.FixateFooter(index, false, 0);
   this.FixateHeader(index, false, 0);
   this.SetIsDragged(false);
   this.DoHideWindowModalElement(element);
  }
 },
 ResetPopupStyles: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   ASPx.SetStyles(element, {
    left: "",
    top: "",
    width: "",
    height: "",
   });
   ASPx.SetStyles(this.GetWindowContentWrapperElement(index), {
    height: "",
    width: "",
    display: ""
   });
   ASPx.SetStyles(this.GetWindowContentElement(index), {
    display: "",
    width: "",
    height: ""
   });
   this.SetWindowIsShown(index, false);
  }
 },
 InitDivPosForHideSlideAnimation: function(animationDivElement) {
  ASPx.PopupUtils.InitAnimationDivCore(animationDivElement);
 },
 DoHideWindow: function(index, dontRaiseClosing, closeReason) {
  var cancel = ASPxClientPopupControlBase.prototype.DoHideWindow.call(this, index, dontRaiseClosing, closeReason);
  this.updateContentScrollIfNeeded(index);
  return cancel;
 },
 OnWindowShown: function(windowIndex) {
  this.EnsureContent(windowIndex, false);
  this.EnsureIFrameHeightAdjusted(windowIndex);
  if(this.GetAdaptiveModalMode(windowIndex))
   this.ChangeFooterFixed(windowIndex);
  else {
   var isMaximized = this.GetIsMaximized(windowIndex);
   if(isMaximized || this.HasAnyScrollBars(windowIndex))
    this.NormalizeWindowSize(windowIndex, isMaximized);
  }
  this.RaiseShown(windowIndex);
  var loadingElementsWillNotBeShown = !this.lpTimers[windowIndex] || this.lpTimers[windowIndex] < 0;
  if(this.InWindowCallback(windowIndex) && loadingElementsWillNotBeShown) {
   this.ShowWindowLoadingElementsInternal(windowIndex);
  }
  if(this.GetAdaptiveModalMode(windowIndex))
   this.UpdateAdaptiveMinHeight(windowIndex);
  aspxGetPopupControlCollection().RefreshModalRenderInIe(); 
 },
 RefreshModalRenderInIe: function(index) {
  var windowElement = this.GetWindowElement(index),
   zoom = windowElement.style.zoom;
  windowElement.style.zoom = "1";
  window.setTimeout(function() {
   windowElement.style.zoom = zoom;
  }, 100);
 },
 SetWrapperScrollVisible: function(index, visible) {
  if(!this.GetAdaptiveModalMode(index)) return;
  var modalWrapper = this.GetModalWrapperElement(index);
  if(visible) {
   ASPx.Attr.RestoreStyleAttribute(modalWrapper, "overflow-x");
   ASPx.Attr.RestoreStyleAttribute(modalWrapper, "overflow-y");
  } else {
   if(this.modalVerticalAlign === ModalAlign.WindowBottom && this.GetWindowElement(index).offsetHeight <= window.innerHeight)
    ASPx.Attr.ChangeStyleAttribute(modalWrapper, "overflow-y", "hidden");
   if(this.modalHorizontalAlign === ModalAlign.WindowRight)
    ASPx.Attr.ChangeStyleAttribute(modalWrapper, "overflow-x", "hidden");
  }
 },
 GetDragCorrection: function(index, element, isX) {
  if(this.adaptivityEnabled) {
   var offset = isX ? element.offsetLeft : element.offsetTop;
   offset -= ASPx.PxToInt(element.style[isX ? "left" : "top"]);
   return ASPx.GetPositionElementOffset(this.GetModalWrapperElement(index), isX) + offset;
  } else
   return ASPxClientPopupControlBase.prototype.GetDragCorrection.call(this, index, element, isX);
 },
 GetSlideAnimationDuration: function(index) {
  return !this.GetAdaptiveModalMode(index) ? ASPxClientPopupControlBase.prototype.GetSlideAnimationDuration.call(this, index) : 300;
 },
 GetSlideOffsetCoefficient: function(index) {
  return !this.GetAdaptiveModalMode(index) ? ASPxClientPopupControlBase.prototype.GetSlideOffsetCoefficient.call(this, index) : 0.25;
 },
 InitDivPosForShowSlideAnimation: function(index, animationDivElement, clientX, clientY, onAnimStopCallString) {
  if(!this.GetAdaptiveModalMode(index))
   ASPxClientPopupControlBase.prototype.InitDivPosForShowSlideAnimation.call(this, index, animationDivElement, clientX, clientY, onAnimStopCallString);
  else
   ASPx.PopupUtils.InitAnimationProperties(animationDivElement, onAnimStopCallString);
 },
 BeforeAnySlideAnimation: function(index) {
  this.FixateFooter(index, false, 0);
  this.FixateHeader(index, false, 0);
  this.SetWrapperScrollVisible(index, false);
 },
 StartSlideAnimation: function(animationDivElement, index, horizontalPopupPosition, verticalPopupPosition) {
  if(this.adaptivityEnabled) {
   this.LockWrapperScrollEvent();
   this.BeforeAnySlideAnimation(index);
  }
  ASPxClientPopupControlBase.prototype.StartSlideAnimation.call(this, animationDivElement, index, horizontalPopupPosition, verticalPopupPosition);
 },
 DoHideWindowWithSlideAnimation: function(index, closeReason) {
  if(this.adaptivityEnabled)
   this.BeforeAnySlideAnimation(index);
  ASPxClientPopupControlBase.prototype.DoHideWindowWithSlideAnimation.call(this, index, closeReason);
 },
 UpdatePositionAfterCallback: function(windowIndex) {
  if(this.adaptivityEnabled)
   this.TryAutoUpdatePosition(windowIndex);
  else if(this.contentLoadingMode === LoadContentViaCallback.OnFirstShow && this.InternalIsWindowVisible(windowIndex))
   this.UpdateWindowPositionInternal(windowIndex, this.GetPopupElement(windowIndex, this.GetLastShownPopupElementIndex(windowIndex)));
 },
 CreateLoadingDiv: function(parentElement, offsetElement, windowIndex) {
  if(typeof (windowIndex) != "undefined") { 
   var loadingDiv = ASPxClientControl.prototype.CreateLoadingDiv.call(this, parentElement, offsetElement);
   loadingDiv.id += windowIndex;
   return loadingDiv;
  }
 },
 CreateLoadingPanelWithAbsolutePosition: function(parentElement, offsetElement, windowIndex) {
  if(typeof (windowIndex) != "undefined") { 
   var loadingPanel = ASPxClientControl.prototype.CreateLoadingPanelWithAbsolutePosition.call(this, parentElement, offsetElement);
   loadingPanel.id += windowIndex;
   return loadingPanel;
  }
 },
 PerformWindowCallback: function(window, parameter, onSuccess) {
  ASPxClientPopupControlBase.prototype.PerformWindowCallback.call(this, window, parameter, onSuccess);
 },
 SetIframeVisibleForDragging: function(index, visible) {
  var iframeElement = this.GetWindowContentIFrameElement(index);
  if(ASPx.Browser.IE || ASPx.Browser.Edge) {
   if(ASPx.Browser.Edge || ASPx.Browser.Version >= 11)
    iframeElement.style.pointerEvents = visible ? "" : "none";
   else {
    if(visible)
     this.RemoveIframeCoverDiv(iframeElement, index);
    else
     this.CreateIframeCoverDiv(iframeElement, index);
   }
  }
  ASPx.SetElementVisibility(iframeElement, visible);
 },
 OnResizeStop: function(evt, index, cursor, resizePanel) {
  ASPxClientPopupControlBase.prototype.OnResizeStop.call(this, evt, index, cursor, resizePanel);
  if(this.IsResizeAllowed(index))
   this.SetWindowCachedSize(index, this.GetClientWindowWidth(index), this.GetClientWindowHeight(index));
  this.updateContentScrollIfNeeded(index);
 },
 OnMouseDownModalElement: function(evt, index) {
  aspxGetPopupControlCollection().DoHideAllWindows(ASPx.Evt.GetEventSource(evt), "", false, ASPxClientPopupControlCloseReason.OuterMouseClick, evt.offsetX);
  this.SetIsPopuped(index, true);
 },
 IsRaiseAfterResizingLocked: function() {
  return this.CollapseExecuting() || this.MaximizationExecuting();
 },
 GetContentElementChildren: function(index, contentElement) {
  var cache = this.GetResizeSessionCache();
  if(!cache.contentElementChildren || !cache.contentElementChildren[index]) {
   cache.contentElementChildren = [];
   cache.contentElementChildren[index] = contentElement.getElementsByTagName("*");
  }
  return cache.contentElementChildren[index];
 },
 GetContentElementChildrenScroll: function(index, contentElementChildren) {
  var cache = this.GetResizeSessionCache();
  if(!cache.contentElementChildrenScroll || !cache.contentElementChildrenScroll[index]) {
   cache.contentElementChildrenScroll = [];
   cache.contentElementChildrenScroll[index] = [];
   for(var i = 0, len = contentElementChildren.length; i < len; i++) {
    var child = contentElementChildren[i];
    if(!!child.scrollLeft || !!child.scrollTop)
     cache.contentElementChildrenScroll[index].push([i, child.scrollLeft, child.scrollTop]);
   }
  }
  return cache.contentElementChildrenScroll[index];
 },
 GetElementBordersAndPaddings: function(index, element, leftRight) {
  var cache = this.GetResizeSessionCache();
  if(!cache.elementBordersAndPaddings || !cache.elementBordersAndPaddings[index]) {
   cache.elementBordersAndPaddings = [];
   var style = ASPx.GetCurrentStyle(element);
   cache.elementBordersAndPaddings[index] = {
    leftRight: this.getLeftRightBordersAndPaddingsSummaryValue(element, style),
    topBottom: this.getTopBottomBordersAndPaddingsSummaryValue(element, style)
   };
  }
  return leftRight ? cache.elementBordersAndPaddings[index].leftRight : cache.elementBordersAndPaddings[index].topBottom;
 },
 GetHeaderFooterHeight: function(index) {
  var cache = this.GetResizeSessionCache();
  if(!cache.headerFooterHeight || !cache.headerFooterHeight[index]) {
   cache.headerFooterHeight = [];
   cache.headerFooterHeight[index] = this.GetHeaderFooterHeightCore(index);
  }
  return cache.headerFooterHeight[index];
 },
 getContentElementDisplay: function(correctContentElementSize, contentUrl) {
  return correctContentElementSize || contentUrl ? "block" : "table-cell";
 },
 SetContentWrapperHeightLite: function(index, actualHeight, windowElem, contentWrapper) {
  if(!windowElem.style.height || ASPx.IsPercentageSize(windowElem.style.height))
   return;
  var borderOwner = this.GetWindowBorderOwnerElement(windowElem);
  var height = borderOwner == windowElem ? actualHeight : actualHeight - (borderOwner ? ASPx.GetTopBottomBordersAndPaddingsSummaryValue(borderOwner) : 0);
  height -= this.GetHeaderFooterHeight(index);
  if(height > 0)
   contentWrapper.style.height = height + "px";
 },
 SetWindowScrollDivSize: function(scrollDiv, index, dimension) {
  var windowClientTable = this.GetWindowClientTable(index);
  var headerElement = this.GetWindowHeaderElement(index);
  var height = windowClientTable.offsetHeight;
  if(headerElement)
   height -= headerElement.offsetHeight;
  height -= this.GetWindowFooterHeightLite(index);
  if(dimension == 'height' || dimension == 'both')
   ASPx.SetOffsetHeight(scrollDiv, height);
  if(dimension == 'width' || dimension == 'both') {
   var width = windowClientTable.offsetWidth;
   var contentElement = this.GetWindowContentElement(index);
   width -= this.getLeftRightBordersAndPaddingsSummaryValue(scrollDiv) + ASPx.GetHorizontalBordersWidth(contentElement);
   if(width > -1)
    scrollDiv.style.width = width + "px";
  }
  scrollDiv.style.marginRight = "0px";
 },
 AdjustIFrameHeight: function(index, iframe) {
  ASPxClientPopupControlBase.prototype.AdjustIFrameHeight.call(this, index, iframe);
  if(!this.InternalIsWindowVisible(index) || !iframe || this.GetAdaptiveModalMode(index)) return;
  this.SetIframeAdjustingPostponed(index, false);
  var content = this.GetContentContainer(index);
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  iframe.style.verticalAlign = "text-bottom";
  var iframeHeight = contentWrapper.offsetHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(content);
  if(iframeHeight >= 0)
   iframe.style.height = iframeHeight + "px";
 },
 OnPinButtonClick: function(index) {
  var value = this.GetIsPinned(index);
  this.SetPinCore(index, !value);
 },
 SetPinCore: function(index, value) {
  if(this.GetIsPinned(index) != value) {
   this.SetIsPinned(index, value);
   this.HoldPosition(index, value);
   this.UpdateWindowsStateCookie();
   this.OnPinned(index, value);
  }
 },
 OnPinned: function(index, pinned) {
  this.RaisePinnedChanged(index, pinned);
 },
 HoldPosition: function(index, hold, element) {
  if(hold) {
   element = element || this.GetWindowElement(index);
   if(!element) return;
   var x = ASPx.GetAbsoluteX(element);
   var y = ASPx.GetAbsoluteY(element);
   scrollX = ASPx.GetDocumentScrollLeft();
   scrollY = ASPx.GetDocumentScrollTop();
   this.SetPinPosX(index, x - scrollX);
   this.SetPinPosY(index, y - scrollY);
  }
  this.UpdateHeaderButtonSelected(index, "GetWindowPinButton", hold);
  this.CheckHeaderCursor(index);
 },
 GetBodyWidth: function() {
  return aspxGetPopupControlCollection().GetSavedBodyWidth();
 },
 GetBodyHeight: function() {
  return aspxGetPopupControlCollection().GetSavedBodyHeight();
 },
 GetIsOutFromViewPort: function(index) {
  var element = this.GetWindowElement(index);
  if(!element) return false;
  var pinXTarget = this.GetPinPosX(index);
  var pinYTarget = this.GetPinPosY(index);
  var popupWindowWidth = this.GetClientWindowWidth(index);
  var docClientWidth = ASPx.GetDocumentClientWidth();
  var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
  var popupWindowHeight = this.GetClientWindowHeight(index);
  var docClientHeight = ASPx.GetDocumentClientHeight();
  var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
  return (rightOutOffset > 0 || bottomOutOffset > 0);
 },
 needToHidePinnedOutFromViewPort: function(index) {
  return this.GetIsPinned(index) && this.GetIsOutFromViewPort(index);
 },
 AdjustPinPositionWhileScroll: function(index) {
  var element = this.GetWindowElement(index);
  if(!element) return;
  var x = ASPx.GetAbsoluteX(element);
  var y = ASPx.GetAbsoluteY(element);
  var scrollX = ASPx.GetDocumentScrollLeft();
  var scrollY = ASPx.GetDocumentScrollTop();
  var pinX = x - scrollX;
  var pinY = y - scrollY;
  var pinXTarget = this.GetPinPosX(index);
  var pinYTarget = this.GetPinPosY(index);
  if((pinX != pinXTarget) || (pinY != pinYTarget)) {
   this.lockScroll++;
   var xNew = pinXTarget + scrollX;
   var yNew = pinYTarget + scrollY;
   var bodyWidth = this.GetBodyWidth();
   var bodyHeight = this.GetBodyHeight();
   var popupWindowWidth = this.GetClientWindowWidth(index);
   var docClientWidth = ASPx.GetDocumentClientWidth();
   var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
   var popupWindowHeight = this.GetClientWindowHeight(index);
   var docClientHeight = ASPx.GetDocumentClientHeight();
   var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
   var cancelScrollX = false;
   if(xNew + (popupWindowWidth - rightOutOffset) > bodyWidth) {
    xNew -= (xNew + (popupWindowWidth - rightOutOffset) - bodyWidth);
    cancelScrollX = true;
   }
   var cancelScrollY = false;
   if(yNew + (popupWindowHeight - bottomOutOffset) > bodyHeight) {
    yNew -= (yNew + (popupWindowHeight - bottomOutOffset) - bodyHeight);
    cancelScrollY = true;
   }
   xNew = ASPx.PrepareClientPosForElement(xNew, element, true);
   yNew = ASPx.PrepareClientPosForElement(yNew, element, false);
   this.SetWindowPos(index, element, xNew, yNew);
   if(cancelScrollX) {
    var scrollLeftMax = bodyWidth - ASPx.GetDocumentClientWidth();
    if((rightOutOffset > 0) && (scrollX > scrollLeftMax)) {
     this.lockScroll++;
     ASPx.SetDocumentScrollLeft(scrollLeftMax);
     this.lockScroll--;
    }
   }
   if(cancelScrollY) {
    var scrollTopMax = bodyHeight - ASPx.GetDocumentClientHeight();
    if((bottomOutOffset > 0) && (scrollY > scrollTopMax)) {
     this.lockScroll++;
     ASPx.SetDocumentScrollTop(scrollTopMax);
     this.lockScroll--;
    }
   }
   this.lockScroll--;
  }
 },
 OnCollapseButtonClick: function(index) {
  this.SetCollapsedCore(index, !this.GetIsCollapsed(index));
 },
 SetCollapsedCore: function(index, minimization) {
  if(this.GetIsCollapsed(index) == minimization) return;
  this.DoCollapse(index, minimization);
  this.OnCollapsed(index, minimization);
 },
 DoCollapse: function(index, minimization) {
  if(this.GetIsCollapsed(index) == minimization) return;
  this.StartCollapse();
  if(minimization) {
   var cachedWidth = this.GetClientWindowWidth(index);
   var cachedHeight = this.GetClientWindowHeight(index);
   var shouldUpdateRestoredSize = this.ShoulUpdatedRestoredWindowSizeOnCollapse(index);
   var width = this.GetMainWindowWidth(index, !shouldUpdateRestoredSize);
   var height = this.GetMainWindowHeight(index, !shouldUpdateRestoredSize);
   this.SetWindowSizeByIndex(index, width, 0);
   this.SetWindowContentVisible(index, false);
   this.SetWindowFooterVisible(index, false);
   this.ResetWindowHeight(index);
   this.SetIsCollapsed(index, minimization);
   this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
   if(shouldUpdateRestoredSize)
    this.UpdateRestoredWindowSize(index, width, height);
  }
  else {
   if(this.MaximizationExecuting()) {
    var element = this.GetWindowElement(index);
    if(element) {
     element.style.left = ASPx.GetDocumentScrollLeft();
     element.style.top = ASPx.GetDocumentScrollTop();
    }
   }
   this.SetWindowContentVisible(index, true);
   this.SetWindowFooterVisible(index, true);
   this.SetIsCollapsed(index, minimization);
   if(this.GetIsMaximized(index)) {
    var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup();
    var documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
    this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
   } else {
    var restoredWindowData = this.GetRestoredWindowData(index);
    this.SetWindowSizeByIndex(index, restoredWindowData.width, restoredWindowData.height);
   }
   ASPx.GetControlCollection().AdjustControls(this.GetWindowElement(index));
  }
  this.UpdateHeaderButtonSelected(index, "GetWindowCollapseButton", minimization);
  this.EndCollapse();
  this.UpdateWindowsStateCookie();
 },
 ResetWindowHeight: function(index) {
  var element = this.GetWindowElement(index);
  if(element)
   element.style.height = "";
 },
 ShoulUpdatedRestoredWindowSizeOnCollapse: function(index) {
  return !this.GetIsMaximized(index);
 },
 OnCollapsed: function(index, value) {
  if(value)
   this.RaiseCollapsed(index);
  else
   this.RaiseExpanded(index);
  this.RaiseAfterResizing(index);
 },
 OnMaximizeButtonClick: function(index) {
  this.SetMaximizedCore(index, !this.GetIsMaximized(index));
 },
 SetMaximizedCore: function(index, maximization) {
  if(this.GetIsMaximized(index) == maximization) return;
  this.DoMaximize(index, maximization);
  this.OnMaximizedChanged(index, maximization);
 },
 GetMaximizedPosition: function(element, isX) {
  if(ASPx.Browser.WebKitTouchUI)
   return ASPx.PrepareClientPosForElement(0, element, isX);
  return ASPx.PrepareClientPosForElement(isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop(), element, isX);
 },
 PerformMaximaze: function (index, maximization, element) {
  if (this.hideBodyScrollWhenMaximized)
   ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
  if (this.GetIsCollapsed(index))
   this.DoCollapse(index, false);
  var cachedWidth = this.GetClientWindowWidth(index);
  var cachedHeight = this.GetClientWindowHeight(index);
  var restoredWindowData = this.GetInitRestoredWindowData(index);
  var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup();
  var documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
  var windowClientTable = this.GetWindowClientTable(index);
  var windowClientTableParent = windowClientTable.parentNode;
  childStyle = ASPx.GetCurrentStyle(windowClientTableParent);
  var left = this.GetMaximizedPosition(element, true);
  var top = this.GetMaximizedPosition(element, false);
  this.SetWindowPos(index, element, left, top);
  this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
  this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
  this.SetRestoredWindowData(index, restoredWindowData);
  this.SetIsMaximized(index, maximization);
 },
 PerformMinimize: function (index, maximization, element) {
  var restoredWindowData = this.GetRestoredWindowData(index);
  var width = restoredWindowData.width || this.GetMainWindowWidth(index);
  var height = restoredWindowData.height || this.GetMainWindowHeight(index);
  this.SetIsMaximized(index, maximization);
  var left = ASPx.PrepareClientPosForElement(restoredWindowData.left, element, true);
  var top = ASPx.PrepareClientPosForElement(restoredWindowData.top, element, false);
  this.SetWindowPos(index, element, left, top);
  this.SetWindowSizeByIndex(index, width, height);
  if (this.GetIsCollapsed(index)) {
   this.SetIsCollapsed(index, false);
   this.UpdateRestoredWindowSizeLock();
   this.DoCollapse(index, true);
   this.UpdateRestoredWindowSizeUnlock();
  }
  if (this.hideBodyScrollWhenMaximized)
   ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
 },
 DoMaximize: function(index, maximization) {
  if(this.GetIsMaximized(index) == maximization) return;
  var element = this.GetWindowElement(index);
  if(!element) return;
  this.StartMaximization();
  if(maximization)
   this.PerformMaximaze(index, maximization, element);
  else
   this.PerformMinimize(index, maximization, element);
  if(this.GetIsPinned(index))
   this.HoldPosition(index, true, element);
  this.UpdateHeaderButtonSelected(index, "GetWindowMaximizeButton", maximization);
  this.EndMaximization();
  this.UpdateWindowsStateCookie();
  this.CheckHeaderCursor(index);
 },
 OnMaximizedChanged: function(index, value) {
  if(value)
   this.RaiseMaximized(index);
  else
   this.RaiseRestoredAfterMaximized(index);
  this.RaiseAfterResizing(index);
 },
 GetInitRestoredWindowData: function(index) {
  var restoredWindowData = this.GetRestoredWindowData(index);
  restoredWindowData.left = this.GetCurrentLeft(index);
  restoredWindowData.top = this.GetCurrentTop(index);
  restoredWindowData.width = this.GetMainWindowWidth(index);
  restoredWindowData.height = this.GetMainWindowHeight(index);
  return restoredWindowData;
 },
 getDocumentDimensions: function(index) {
  var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup(),
   documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
  return { width: documentClientWidth, height: documentClientHeight };
 }, 
 UpdateMaximizedWindowSizeOnResize: function(index) {
  this.StartUpdateMaximizedWindowSizeOnResize();
  var dimensions = this.getDocumentDimensions(index);
  if(this.GetIsCollapsed(index)) dimensions.height = 0;
  this.SetWindowSizeByIndex(index, dimensions.width, dimensions.height);
  if(this.GetIsCollapsed(index)) {
   this.CorrectCollapsedSize(index);
  }
  window.setTimeout(function() { this.SetMaximizedWindowSizeAfterOnResize(index); }.aspxBind(this), 0);
  this.EndUpdateMaximizedWindowSizeOnResize();
 },
 SetMaximizedWindowSizeAfterOnResize: function(index) {
  this.StartUpdateMaximizedWindowSizeOnResize();
  var dimensions = this.getDocumentDimensions(index);
  windowWidthCurrent = this.GetMainWindowWidth(index, true);
  windowHeightCurrent = this.GetMainWindowHeight(index, true);
  if(this.GetIsCollapsed(index))
   dimensions.height = 0;
  if(dimensions.width != windowWidthCurrent || dimensions.height != windowHeightCurrent) {
   this.SetWindowSizeByIndex(index, dimensions.width, dimensions.height);
   if(this.GetIsCollapsed(index)) {
    this.CorrectCollapsedSize(index);
   }
  }
  this.EndUpdateMaximizedWindowSizeOnResize();
 },
 CorrectCollapsedSize: function(index) {
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  if(contentWrapper && ASPx.IsElementVisible(contentWrapper))
   contentWrapper.style.display = 'none';
 },
 UpdateHeaderButtonSelected: function(index, methodGetWindowButton, flagSelected) {
  if(typeof (ASPx.GetStateController) != "undefined") {
   button = this[methodGetWindowButton](index);
   var method = flagSelected ? "SelectElementBySrcElement" : "DeselectElementBySrcElement";
   ASPx.GetStateController()[method](button);
  }
 },
 CheckHeaderCursor: function(index) {
  if(!this.allowDragging) return;
  var dragElement = this.GetDragElement(index);
  if(!dragElement) return;
  var styleCursor = dragElement.style.cursor;
  var isPinned = this.GetIsPinned(index);
  var isMaximized = this.GetIsMaximized(index);
  if((isPinned || isMaximized) && styleCursor != "default")
   dragElement.style.cursor = "default";
  else if(!isPinned && !isMaximized && styleCursor != "move")
   dragElement.style.cursor = "move";
 },
 StartCollapse: function() {
  this.collapseExecutingLockCount++;
 },
 EndCollapse: function() {
  this.collapseExecutingLockCount--;
 },
 CollapseExecuting: function() {
  return this.collapseExecutingLockCount > 0;
 },
 StartMaximization: function() {
  this.maximizationExecutingLockCount++;
 },
 EndMaximization: function() {
  this.maximizationExecutingLockCount--;
 },
 MaximizationExecuting: function() {
  return this.maximizationExecutingLockCount > 0;
 },
 StartUpdateMaximizedWindowSizeOnResize: function() {
  this.browserResizingForMaxWindowLockCount++;
 },
 EndUpdateMaximizedWindowSizeOnResize: function() {
  this.browserResizingForMaxWindowLockCount--;
 },
 ResizingForMaxWindowLocked: function() {
  return this.browserResizingForMaxWindowLockCount > 0;
 },
 UpdateRestoredWindowSizeLock: function() {
  this.updateRestoredWindowSizeLockCount++;
 },
 UpdateRestoredWindowSizeUnlock: function() {
  this.updateRestoredWindowSizeLockCount--;
 },
 UpdateRestoredWindowSizeLocked: function() {
  return this.updateRestoredWindowSizeLockCount > 0;
 },
 UpdateRestoredWindowSize: function(index, width, height) {
  if(!this.UpdateRestoredWindowSizeLocked()) {
   restoredMinWindowData = this.GetRestoredWindowData(index);
   restoredMinWindowData.width = width;
   restoredMinWindowData.height = height;
   this.SetRestoredWindowData(index, restoredMinWindowData);
  }
 },
 GetWindowsState: function() {
  var state = ASPxClientPopupControlBase.prototype.GetWindowsState.call(this);
  for(var i = 0; i < this.GetWindowCountCore() ; i++) {
   state += this.GetWindowState(i);
   if(i < this.GetWindowCountCore() - 1) state += ";";
  }
  return state;
 },
 CreateWindows: function(windowsNames) {
  for(var i = 0; i < windowsNames.length; i++) {
   var window = new ASPxClientPopupWindow(this, i, windowsNames[i]);
   this.windows.push(window);
  }
 },
 RaiseCloseButtonClick: function(index) {
  ASPxClientPopupControlBase.prototype.RaiseCloseButtonClick.call(this, index);
 },
 RaisePinnedChanged: function(index, pinned) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.PinnedChanged.IsEmpty()) {
   var args = new ASPxClientPopupWindowPinnedChangedEventArgs(window, pinned);
   this.PinnedChanged.FireEvent(this, args);
  }
 },
 RaiseCollapsed: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Collapsed);
 },
 RaiseExpanded: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Expanded);
 },
 RaiseMaximized: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Maximized);
 },
 RaiseRestoredAfterMaximized: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.RestoredAfterMaximized);
 },
 GetContentWidth: function() {
  return this.GetWindowContentWidth(null);
 },
 GetContentHeight: function() {
  return this.GetWindowContentHeight(null);
 },
 SetSize: function(width, height) {
  ASPxClientPopupControlBase.prototype.SetSize.call(this, width, height);
 },
 GetWindowDimension: function(window, isWidth, forceFromCache) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowDimensionByIndex(index, isWidth, forceFromCache);
 },
 GetWindowContentDimension: function(window, isWidth) {
  var index = (window != null) ? window.index : -1,
   contentElem = this.GetWindowContentElement(index),
   dimensionHolder = contentElem.parentNode,
   paddingsHolder = contentElem;
  return isWidth ?
  (dimensionHolder.offsetWidth - this.getLeftRightBordersAndPaddingsSummaryValue(paddingsHolder)) :
  (dimensionHolder.offsetHeight - this.getTopBottomBordersAndPaddingsSummaryValue(paddingsHolder));
 },
 GetWindowContentWidth: function(window) {
  return this.GetWindowContentDimension(window, true);
 },
 GetWindowContentHeight: function(window) {
  return this.GetWindowContentDimension(window, false);
 },
 GetWindowHeight: function(window) {
  return this.GetWindowDimension(window, false);
 },
 GetWindowWidth: function(window) {
  return this.GetWindowDimension(window, true);
 },
 SetWindowSize: function(window, width, height) {
  return ASPxClientPopupControlBase.prototype.SetWindowSize.call(this, window, width, height);
 },
 GetContentHTML: function() {
  return this.GetContentHtml();
 },
 SetContentHTML: function(html) {
  this.SetContentHtml(html);
 },
 SetWindowPopupElementID: function(window, popupElementId) {
  var index = (window != null) ? window.index : -1;
  this.SetPopupElementIDByIndex(index, popupElementId);
 },
 SetPopupElementID: function(popupElementId) {
  this.SetPopupElementIDByIndex(-1, popupElementId);
 },
 GetCurrentPopupElementIndex: function() {
  return this.GetWindowCurrentPopupElementIndexByWindowIndex(-1);
 },
 GetWindowCurrentPopupElementIndex: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowCurrentPopupElementIndexByWindowIndex(index);
 },
 GetCurrentPopupElement: function() {
  return this.GetWindowCurrentPopupElementByIndex(-1);
 },
 GetWindowCurrentPopupElement: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowCurrentPopupElementByIndex(index);
 },
 ShowAtPos: function(x, y) {
  this.ShowWindowAtPos(null, Math.round(x), Math.round(y));
 },
 BringToFront: function() {
  this.BringWindowToFront(null);
 },
 IsWindowVisible: function(window) {
  return ASPxClientPopupControlBase.prototype.IsWindowVisible.call(this, window);
 },
 GetWindow: function(index) {
  return ASPxClientPopupControlBase.prototype.GetWindow.call(this, index);
 },
 GetWindowByName: function(name) {
  for(var i = 0; i < this.windows.length; i++)
   if(this.windows[i].name == name) return this.windows[i];
  return null;
 },
 GetWindowCount: function() {
  return this.GetWindowCountCore();
 },
 ShowWindow: function(window, popupElementIndex) {
  var index = (window != null) ? window.index : -1;
  this.ShowWindowByIndex(index, popupElementIndex);
 },
 ShowWindowAtElement: function(window, htmlElement) {
  var index = (window != null) ? window.index : -1;
  this.ShowWindowAtElementByIndex(index, htmlElement);
 },
 ShowWindowAtElementByID: function(window, id) {
  var htmlElement = document.getElementById(id);
  this.ShowWindowAtElement(window, htmlElement);
 },
 ShowWindowAtPos: function(window, x, y) {
  if(!this.isInitialized)
   return;
  var index = (window != null) ? window.index : -1;
  this.DoShowWindowCore(index, x, y, -1, false, true);
 },
 BringWindowToFront: function(window) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetWindowElement(index);
  aspxGetPopupControlCollection().ActivateWindowElement(element, undefined, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
 },
 HideWindow: function(window) {
  ASPxClientPopupControlBase.prototype.HideWindow.call(this, window);
 },
 GetWindowContentHTML: function(window) {
  return this.GetWindowContentHtml(window);
 },
 SetWindowContentHTML: function(window, html) {
  this.SetWindowContentHtml(window, html);
 },
 GetWindowContentHtml: function(window) {
  return ASPxClientPopupControlBase.prototype.GetWindowContentHtml.call(this, window);
 },
 SetWindowContentHtml: function(window, html, useAnimation) {
  ASPxClientPopupControlBase.prototype.SetWindowContentHtml.call(this, window, html, useAnimation);
 },
 AfterSetWindowContentHtml: function(index, contentContainer, useAnimation) {
  if(this.GetAdaptiveModalMode(index))
   this.TryAutoUpdatePosition(index);
  else if(this.InternalIsWindowVisible(index))
   this.RecalculateWindowSize(index);
  ASPxClientPopupControlBase.prototype.AfterSetWindowContentHtml.call(this, index, contentContainer, useAnimation);
  this.UpdateScrollbar(index);
 },
 UpdateAlignment: function(index) {
  if(this.GetIsDragged(index)) return;
  var element = this.GetWindowElement(index),
   wrapperStyle = getComputedStyle(this.GetModalWrapperElement(index)),
   top = ASPxClientPopupControl.AligmentCalculator.CalculateTopMargin(this.modalVerticalAlign, element.offsetHeight, this.GetDefaultVerticalOffset()),
   left = ASPxClientPopupControl.AligmentCalculator.CalculateLeftRightMargin(this.modalHorizontalAlign, ModalAlign.WindowLeft, wrapperStyle.paddingLeft),
   right = ASPxClientPopupControl.AligmentCalculator.CalculateLeftRightMargin(this.modalHorizontalAlign, ModalAlign.WindowRight, wrapperStyle.paddingRight);
  ASPx.SetStyles(element, {
   marginTop: top,
   marginLeft: left,
   marginRight: right
  });
 },
 GetOverlayElement: function(index) {
  return this.GetWindowModalElement(index);
 },
 GetModalWrapperElement: function(index) {
  if(!this.adaptivityEnabled) return null;
  var windowElement = this.GetWindowElement(index);
  return !!windowElement ? windowElement.parentNode : null;
 },
 GetWindowHeightWithoutContent: function(index) {
  var element = this.GetWindowElement(index),
   borderOwner = this.GetWindowBorderOwnerElement(element);
  return this.GetHeaderFooterHeightCore(index) + ASPx.GetVerticalBordersWidth(borderOwner);
 },
 StretchVertically: function() {
  this.StretchVerticallyByIndex(-1, true);
 },
 WindowStretchVertically: function(window) {
  var index = (window != null) ? window.index : -1;
  this.StretchVerticallyByIndex(index, true);
 },
 StretchVerticallyByIndex: function(index, value) {
  if(this.GetStretchVerticallyByIndex(index) !== value) {
   this.SetPropertyValue(index, "stretchVertically", value);
   var oldMinHeight = !!this.GetModalMinHeight(index) ? this.GetModalMinHeight(index) : 0;
   this.SetPropertyValue(index, "modalMinHeight", value ? "100vh" : this.minHeightBackup);
   this.minHeightBackup = oldMinHeight;
   this.UpdateHeightDimensions(index);
  }
 },
 SetAdaptiveMinWidth: function(minWidth) {
  this.SetAdaptiveMinWidthByIndex(-1, minWidth);
 },
 SetWindowAdaptiveMinWidth: function(window, minWidth) {
  var index = (window != null) ? window.index : -1;
  this.SetAdaptiveMinWidthByIndex(index, minWidth);
 },
 SetAdaptiveMaxWidth: function(maxWidth) {
  this.SetAdaptiveMaxWidthByIndex(-1, maxWidth);
 },
 SetWindowAdaptiveMaxWidth: function(window, maxWidth) {
  var index = (window != null) ? window.index : -1;
  this.SetAdaptiveMaxWidthByIndex(index, maxWidth);
 },
 SetAdaptiveMinHeight: function(minHeight) {
  this.SetAdaptiveMinHeightByIndex(-1, minHeight);
 },
 SetWindowAdaptiveMinHeight: function(window, minHeight) {
  var index = (window != null) ? window.index : -1;
  this.SetAdaptiveMinHeightByIndex(index, minHeight);
 },
 SetAdaptiveMaxHeight: function(maxHeight) {
  this.SetAdaptiveMaxHeightByIndex(-1, maxHeight);
 },
 SetWindowAdaptiveMaxHeight: function(window, maxHeight) {
  var index = (window != null) ? window.index : -1;
  this.SetAdaptiveMaxHeightByIndex(index, maxHeight);
 },
 SetAdaptiveHeightDimension: function(index, propertyName, value) {
  value = this.ConvertDimensionValueToString(value);
  value = value.indexOf("%") > -1 ? value.replace("%", "vh") : value;
  var margins = 0;
  if(this.stretchVertically && propertyName === "minHeight")
   margins = ASPx.GetTopBottomMargins(this.GetWindowElement(index));
  var additionalHeight = this.GetWindowHeightWithoutContent(index) + margins,
   contentElement = this.GetWindowContentElement(index);
  contentElement.style[propertyName] = "calc(" + value + " - " + additionalHeight + "px)";
  var iframe = this.GetWindowContentIFrameElement(index);
  if(!!contentElement.style.minHeight) {
   if(!iframe)
    contentElement.style.height = "auto";
   if(!!iframe || contentElement.offsetHeight <= ASPx.PxToInt(getComputedStyle(contentElement).minHeight) || this.HasAnyScrollBars(index))
    contentElement.style.height = "1px";
  }
  if(!!iframe) {
   iframe.style.verticalAlign = "text-bottom";
   iframe.style.height = "100%";
  }
 },
 ConvertDimensionValueToString: function(value) {
  if(typeof value === "number")
   return value + "px";
  if(typeof value === "string")
   return value;
 },
 CanBeClosedByClickOnElement: function(index, srcElement, posX, id) {
  return ASPxClientPopupControlBase.prototype.CanBeClosedByClickOnElement.call(this, index, srcElement, posX, id) &&
   (!this.GetAdaptiveModalMode(index) || srcElement != this.GetModalWrapperElement(index) || posX < srcElement.offsetWidth - ASPx.GetVerticalScrollBarWidth());
 },
 SetWindowDisplay: function(index, value) {
  ASPxClientPopupControlBase.prototype.SetWindowDisplay.call(this, index, value);
  if(this.adaptivityEnabled) {
   var wrapper = this.GetModalWrapperElement(index);
   ASPx.SetElementDisplay(wrapper, value);
  }
 },
 HaveSpecialDivForAnimation: function() {
  return ASPxClientPopupControlBase.prototype.HaveSpecialDivForAnimation.call(this) || this.adaptivityEnabled;
 },
 WindowIsModal: function(index) {
  return ASPxClientPopupControlBase.prototype.WindowIsModal.call(this, index) || this.GetAdaptiveModalMode(index);
 },
 RecalculateWindowSize: function(index) {
  var window = this.GetWindowElement(index);
  var displayAfterSetSize = window.style.display;
  this.SetClientWindowSizeCoreLite(index, this.GetWindowWidthInternal(index), this.GetWindowHeightInternal(index), this.GetIsCollapsed(index));
  window.style.display = displayAfterSetSize;
  if(this.HasAnyScrollBars(index))
   this.NormalizeWindowSize(index, this.GetIsMaximized(index));
 },
 GetWindowContentIFrame: function(window) {
  return ASPxClientPopupControlBase.prototype.GetWindowContentIFrame.call(this, window);
 },
 GetWindowContentUrl: function(window) {
  return ASPxClientPopupControlBase.prototype.GetWindowContentUrl.call(this, window);
 },
 SetWindowContentUrl: function(window, url) {
  ASPxClientPopupControlBase.prototype.SetWindowContentUrl.call(this, window, url);
 },
 RefreshDimensionsAfterCreateIframe: function(index) {
  if(ASPx.IsElementVisible(this.GetWindowElement(index), true)) {
   var windowWidth = this.GetWindowDimensionByIndex(index, true, false);
   var windowHeight = this.GetWindowDimensionByIndex(index, false, false);
   this.SetClientWindowSizeCoreLite(index, windowWidth, windowHeight);
  }
 },
 GetPinned: function() {
  return this.GetIsPinned(-1);
 },
 SetPinned: function(value) {
  this.SetPinCore(-1, value);
 },
 GetWindowPinned: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsPinned(index);
 },
 SetWindowPinned: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetPinCore(index, value);
 },
 GetMaximized: function() {
  return this.GetIsMaximized(-1);
 },
 SetMaximized: function(value) {
  this.SetMaximizedCore(-1, value);
 },
 GetWindowMaximized: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsMaximized(index);
 },
 SetWindowMaximized: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetMaximizedCore(index, value);
 },
 GetCollapsed: function() {
  return this.GetIsCollapsed(-1);
 },
 SetCollapsed: function(value) {
  this.SetCollapsedCore(-1, value);
 },
 GetWindowCollapsed: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsCollapsed(index);
 },
 SetWindowCollapsed: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetCollapsedCore(index, value);
 },
 RefreshWindowContentUrl: function(window) {
  ASPxClientPopupControlBase.prototype.RefreshWindowContentUrl.call(this, window);
 },
 SetWindowContentVisible: function(index, visible) {
  var contentElement = this.GetWindowContentWrapperElement(index);
  if(contentElement)
   this.SetWindowPartVisibleCore(contentElement, "DXPopupWindowContentDisplay", visible);
 },
 SetWindowFooterVisible: function(index, visible) {
  var footerElement = this.GetWindowFooterElement(index);
  if(footerElement)
   this.SetWindowPartVisibleCore(footerElement, "DXPopupWindowFooterDisplay", visible);
 },
 SetWindowPartVisibleCore: function(partElement, displayCacheName, visible) {
  var nothingChanged = ASPx.IsElementVisible(partElement) && visible;
  if(nothingChanged) return;
  if(!(ASPx.IsExists(partElement[displayCacheName])))
   partElement[displayCacheName] = partElement.style.display;
  partElement.style.display = visible ? partElement[displayCacheName] : 'none';
 },
 UpdatePosition: function() {
  this.UpdatePositionAtElement(this.GetPopupElement(-1, this.GetLastShownPopupElementIndex(-1)));
 },
 UpdatePositionAtElement: function(popupElement) {
  ASPxClientPopupControlBase.prototype.UpdatePositionAtElement.call(this, popupElement);
 },
 UpdateWindowPosition: function(window) {
  var index = (window != null) ? window.index : -1;
  this.UpdateWindowPositionAtElement(window, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
 },
 UpdateWindowPositionAtElement: function(window, popupElement) {
  ASPxClientPopupControlBase.prototype.UpdateWindowPositionAtElement.call(this, window, popupElement);
 },
 UpdateWindowPositionInternal: function(index, popupElement) {
  if(this.GetAdaptiveModalMode(index)) {
   this.TryAutoUpdatePosition(index);
   return;
  }
  if(!ASPxClientPopupControlBase.prototype.UpdateWindowPositionInternal.call(this, index, popupElement))
   this.DoShowWindowAtPos(index, ASPx.InvalidDimension, ASPx.InvalidDimension, this.GetLastShownPopupElementIndex(index), false, false);
 },
 UpdateMode: function(index) {
  if(!this.adaptivityEnabled) return;
  var currentMode = this.GetAdaptiveModalMode(index),
   newMode = this.NeedAdaptiveModalMode(index);
  if(currentMode != newMode) {
   this.SetAdaptiveModalMode(index, newMode);
   this.ShowWindowByIndex(-1);
   this.RaiseAdaptiveModeChanged();
  }
 },
 RaiseAdaptiveModeChanged: function() {
  if(!this.AdaptiveModeChanged.IsEmpty()) {
   var args = new ASPxClientEventArgs();
   this.AdaptiveModeChanged.FireEvent(this, args);
  }
 },
 TryAutoUpdatePosition: function(index) {
  this.UpdateMode(index);
  ASPxClientPopupControlBase.prototype.TryAutoUpdatePosition.call(this, index);
  if(this.GetAdaptiveModalMode(index)) {
   this.CorrectScrollPositionOnAndroid(index, false);
   this.ResetWebkitScrolling(this.GetModalWrapperElement(index), 100);
   this.UpdateHeightDimensions(index);
   this.ChangeHeaderFixed(index);
   this.UpdateAlignment(index);
   this.ChangeFooterFixed(index);
   if(this.GetIsDragged(index) &&
    ASPxClientPopupControl.WindowResizeHelper.AdjustModalOnWindowResize(this.GetWindowElement(index)))
    this.SetIsDragged(index, false);
  }
  if(this.GetIsMaximized(index)) {
   this.CorrectScrollPositionOnAndroid(index, true);
   this.UpdateMaximizedWindowSizeOnResize(index);
  }
 },
 CorrectScrollPositionOnAndroid: function(index, checkElementIsInPopup) {
  if(ASPx.Browser.AndroidMobilePlatform) {
   var activeElement = this.GetActiveElementIncludingIframes();
   if(activeElement && (activeElement.tagName === "INPUT" || activeElement.tagName === "TEXTAREA") &&
    (!checkElementIsInPopup || this.GetWindowElement(index).contains(activeElement)))
    window.setTimeout(function() {
     if(activeElement.scrollIntoViewIfNeeded)
      activeElement.scrollIntoViewIfNeeded();
    }, 100);
  }
 },
 GetActiveElementIncludingIframes: function(document) {
  document = document || window.document;
  if(document.body === document.activeElement || document.activeElement.tagName === "IFRAME") {
   var iframes = document.getElementsByTagName("iframe");
   for(var i = 0; i < iframes.length; i++) {
    var iFrameDocument = null;
    try {
     iFrameDocument = iframes[i].contentWindow.document;
    }
    catch(e) {  }
    if(iFrameDocument !== null) {
     var focused = this.GetActiveElementIncludingIframes(iframes[i].contentWindow.document);
     if(focused !== false) {
      return focused;
     }
    }
   }
  } else 
   return document.activeElement;
  return false;
 },
 OnModalWrapperScroll: function(e, index) {
  if(!this.GetAdaptiveModalMode(index) || this.IsWrapperScrollEventLocked()) return;
  this.ChangeHeaderFixed(index);
  this.ChangeFooterFixed(index);
 },
 OnModalWrapperTouchStart: function(e) {
  this.touchStartY = e.touches[0].clientY;
 },
 OnModalWrapperTouchMove: function (e, index) {
  if(e.touches.length > 1)
   return;
  var preventScroll = this.RequirePreventScrollForAdaptiveMode(e, index);
  if(preventScroll)
   ASPx.Evt.PreventEvent(e);
  this.touchStartY = e.touches[0].clientY;
 },
 RequirePreventScrollForAdaptiveMode: function(e, index) {
  var modalWrapper = this.GetModalWrapperElement(index),
   zoom = modalWrapper.offsetWidth / window.innerWidth,
   activeElement = document.activeElement,
   activeTyping = !!activeElement && (activeElement["type"] === "text" || activeElement["type"] === "textarea"); 
  if(zoom !== 1 || activeTyping)
   return false;
  var currentY = e.touches[0].clientY,
   preventScroll = currentY > this.touchStartY && modalWrapper.scrollTop === 0 ||
    currentY < this.touchStartY && modalWrapper.scrollTop + modalWrapper.clientHeight >= modalWrapper.scrollHeight;
  if(!preventScroll)
   return false;
  var targetElement = ASPx.Evt.GetEventSource(e),
   contentWrapper = this.GetWindowContentWrapperElement(index);
  while(targetElement && targetElement !== contentWrapper && targetElement.tagName !== 'BODY') {
   if(this.ElementHasScroll(targetElement))
    return false;
   targetElement = targetElement.parentNode;
  }
  return true;
 },
 ElementHasScroll: function(elem) {
  var style = window.getComputedStyle(elem);
  return ["overflow", "overflow-x", "overflow-y"].some(function(prop) {
   return ASPx.Data.ArrayContains(["scroll","auto"], style[prop]);
  });
 },
 GetFixedHeaderMaxBottom: function(index) {
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  return ASPx.GetAbsolutePositionY(contentWrapper) + contentWrapper.offsetHeight;
 },
 GetFixedFooterMaxTop: function(index) {
  var header = this.GetWindowHeaderElement(index),
   contentWrapper = this.GetWindowContentWrapperElement(index),
   headerBottom = !!header ? ASPx.GetAbsolutePositionY(header) + header.offsetHeight : ASPx.GetAbsolutePositionY(contentWrapper);
  return window.innerHeight - headerBottom;
 },
 ChangeHeaderFixed: function(index) {
  if(!this.GetFixedHeader(index)) return;
  var element = this.GetWindowElement(index),
   modalWrapper = this.GetModalWrapperElement(index),
   isHeaderPartiallyHidden = modalWrapper.scrollTop > element.offsetTop,
   maxBottom = isHeaderPartiallyHidden ? this.GetFixedHeaderMaxBottom(index) : 0;
  this.FixateHeader(index, isHeaderPartiallyHidden, maxBottom);
 },
 ChangeFooterFixed: function(index) {
  if(!this.GetFixedFooter(index) || !this.GetWindowFooterElement(index)) return;
  var element = this.GetWindowElement(index),
   modalWrapper = this.GetModalWrapperElement(index),
   isFooterPartiallyHidden = element.offsetTop + element.offsetHeight - modalWrapper.scrollTop > window.innerHeight,
   maxTop = isFooterPartiallyHidden ? this.GetFixedFooterMaxTop(index) : 0;
  this.FixateFooter(index, isFooterPartiallyHidden, maxTop);
 },
 ChangeHeaderFooterFixed: function(index, elementToFix, isFixed, fixedClassName, offsetName, maxPos) {
  if(!elementToFix) return;
  var element = this.GetWindowElement(index),
   contentWrapper = this.GetWindowContentWrapperElement(index),
   changeClassNameFunc = isFixed ? ASPx.AddClassNameToElement : ASPx.RemoveClassNameFromElement,
   elementToFixHeight = elementToFix.offsetHeight;
  if(isFixed) {
   var borderOwner = this.GetWindowBorderOwnerElement(element),
    width = ASPx.GetClearClientWidth(borderOwner);
   ASPx.SetOffsetWidth(elementToFix, width);
   elementToFix.style[offsetName] = maxPos < elementToFixHeight ? maxPos - elementToFixHeight + "px" : "";
  } else
   elementToFix.style.width = "";
  contentWrapper.style["margin-" + offsetName] = isFixed ? elementToFixHeight + "px" : 0;
  changeClassNameFunc(elementToFix, fixedClassName);
 },
 FixateFooter: function(index, isFixed, maxTop) {
  this.ChangeHeaderFooterFixed(index, this.GetWindowFooterElement(index), isFixed, "dxFixedFooter", "bottom", maxTop);
 },
 FixateHeader: function(index, isFixed, maxBottom) {
  this.ChangeHeaderFooterFixed(index, this.GetWindowHeaderElement(index), isFixed, "dxFixedHeader", "top", maxBottom);
 },
 LockWrapperScrollEvent: function() {
  this.wrapperScrollEventLocked = true;
 },
 UnlockWrapperScrollEventEvent: function() {
  this.wrapperScrollEventLocked = false;
 },
 IsWrapperScrollEventLocked: function() {
  return this.wrapperScrollEventLocked;
 },
 ResetScroll: function(index) {
  if(!this.GetAdaptiveModalMode(index)) return;
  this.LockWrapperScrollEvent();
  this.GetModalWrapperElement(index).scrollTop = 0;
  this.UnlockWrapperScrollEventEvent();
 },
 AdjustModalElementBounds: function(element) {
  if(!ASPx.IsExistsElement(element)) return;
  ASPx.SetStyles(element, {
   left: 0,
   top: 0,
   right: 0,
   bottom: 0,
   width: "",
   height: ""
  });
 },
 RefreshPopupElementConnection: function() {
  ASPxClientPopupControlBase.prototype.RefreshPopupElementConnection.call(this);
 }
});
ASPxClientPopupControl.AligmentCalculator = (function() {
 function CalculateTopMargin(verticalAlign, elementHeight, defaultOffset) {
  if(verticalAlign === ModalAlign.WindowTop)
   return "";
  if(elementHeight < window.innerHeight) {
   var freeSpace = window.innerHeight - elementHeight;
   switch(verticalAlign) {
    case ModalAlign.WindowCenter:
     return freeSpace / 2;
    case ModalAlign.WindowBottom:
     return freeSpace - defaultOffset;
   }
  }
  return "";
 }
 function CalculateLeftRightMargin(horizontalAlign, forAligmenment, wrapperPadding) {
  if(horizontalAlign === forAligmenment) {
   if(ASPx.PxToInt(wrapperPadding) !== 0)
    return 0;
   return 10;
  }
  return "";
 }
 return {
  CalculateTopMargin: CalculateTopMargin,
  CalculateLeftRightMargin: CalculateLeftRightMargin
 };
})();
ASPxClientPopupControl.Animation = (function() {
 function GetVerticalDirection(verticalAlign, horizontalAlign) {
  switch(verticalAlign) {
   case ModalAlign.WindowTop:
    return -1;
   case ModalAlign.WindowCenter:
    if(horizontalAlign === ModalAlign.WindowCenter)
     return -1;
    return 0;
   case ModalAlign.WindowBottom:
    return 1;
  }
 }
 function GetHorizontalDirection(horizontalAlign) {
  switch(horizontalAlign) {
   case ModalAlign.WindowLeft:
    return -1;
   case ModalAlign.WindowCenter:
    return 0;
   case ModalAlign.WindowRight:
    return 1;
  }
 }
 function NeedFadeAnimation(horizontalAlign, verticalAlign, animationType, popupHorizontalAlign, popupVerticalAlign, adaptiveModalMode) {
  if(animationType === ASPxClientPopupControlBase.AnimationType.Auto) {
   if(adaptiveModalMode)
    return horizontalAlign === ModalAlign.WindowCenter && verticalAlign === ModalAlign.WindowCenter;
   else
    return popupHorizontalAlign === ASPx.PopupUtils.WindowCenterAlignIndicator && popupVerticalAlign === ASPx.PopupUtils.WindowCenterAlignIndicator;
  }
  return false;
 }
 return {
  GetVerticalDirection: GetVerticalDirection,
  GetHorizontalDirection: GetHorizontalDirection,
  NeedFadeAnimation: NeedFadeAnimation
 };
})();
ASPxClientPopupControl.WindowResizeHelper = (function() {
 var previousInnerWidth = 0,
  previousMargin = 0;
 function AdjustModalOnWindowResize(element) {
  var offsetLeft = element.offsetLeft,
   offsetWidth = element.offsetWidth,
   windowWidth = window.innerWidth,
   expectedLeft = windowWidth / 2 - offsetWidth / 2,
   toTheRightOfCenter = offsetLeft > expectedLeft,
   dw = windowWidth - previousInnerWidth,
   computedStyle = getComputedStyle(element),
   left = ASPx.PxToFloat(computedStyle.left),
   currentMargin = ASPx.PxToFloat(computedStyle.marginLeft),
   dm = currentMargin - previousMargin,
   newLeft = left - dm;
  if(toTheRightOfCenter)
   newLeft += dw;
  ASPx.SetStyles(element, { left: newLeft + "px" });
  if(Math.abs(offsetLeft - expectedLeft) <= 10 || dw < 0 && toTheRightOfCenter !== (element.offsetLeft > expectedLeft)) {
   ASPx.SetStyles(element, { left: "" });
   ASPx.Attr.RestoreStyleAttribute(element, "top");
   ASPx.Attr.RestoreStyleAttribute(element, "margin-top");
   return true;
  }
  previousMargin = currentMargin;
  previousInnerWidth = windowWidth;
  return false;
 }
 function Initialize(element) {
  previousInnerWidth = window.innerWidth;
  ASPx.Attr.ChangeStyleAttribute(element, "top", element.offsetTop + "px");
  ASPx.Attr.ChangeStyleAttribute(element, "margin-top", "0");
  previousMargin = ASPx.PxToFloat(getComputedStyle(element).marginLeft);
 }
 return {
  Initialize: Initialize,
  AdjustModalOnWindowResize: AdjustModalOnWindowResize
 };
})();
ASPxClientPopupControl.Cast = ASPxClientControl.Cast;
ASPxClientPopupControl.GetPopupControlCollection = function() {
 return aspxGetPopupControlCollection();
};
var ASPxClientPopupWindow = ASPx.CreateClass(null, {
 constructor: function(popupControl, index, name) {
  this.popupControl = popupControl;
  this.index = index;
  this.name = name;
 },
 GetHeaderImageUrl: function() {
  return this.popupControl.GetWindowHeaderImageUrl(this.index);
 },
 SetHeaderImageUrl: function(value) {
  this.popupControl.SetWindowHeaderImageUrl(this.index, value);
 },
 GetFooterImageUrl: function() {
  return this.popupControl.GetWindowFooterImageUrl(this.index);
 },
 SetFooterImageUrl: function(value) {
  this.popupControl.SetWindowFooterImageUrl(this.index, value);
 },
 GetHeaderNavigateUrl: function() {
  return this.popupControl.GetWindowHeaderNavigateUrl(this.index);
 },
 SetHeaderNavigateUrl: function(value) {
  this.popupControl.SetWindowHeaderNavigateUrl(this.index, value);
 },
 GetFooterNavigateUrl: function() {
  return this.popupControl.GetWindowFooterNavigateUrl(this.index);
 },
 SetFooterNavigateUrl: function(value) {
  this.popupControl.SetWindowFooterNavigateUrl(this.index, value);
 },
 GetHeaderText: function() {
  return this.popupControl.GetWindowHeaderText(this.index);
 },
 SetHeaderText: function(value) {
  this.popupControl.SetWindowHeaderText(this.index, value);
 },
 GetFooterText: function() {
  return this.popupControl.GetWindowFooterText(this.index);
 },
 SetFooterText: function(value) {
  this.popupControl.SetWindowFooterText(this.index, value);
 }
});
var ASPxClientPopupWindowEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(window) {
  this.constructor.prototype.constructor.call(this);
  this.window = window;
 }
});
var ASPxClientPopupWindowCancelEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(window, closeReason) {
  this.constructor.prototype.constructor.call(this);
  this.window = window;
  this.closeReason = closeReason;
 }
});
var ASPxClientPopupWindowCloseUpEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function(window, closeReason) {
  this.constructor.prototype.constructor.call(this, window);
  this.closeReason = closeReason;
 }
});
var ASPxClientPopupWindowResizeEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function(window, resizeState) {
  this.constructor.prototype.constructor.call(this, window);
  this.resizeState = resizeState;
 }
});
var ASPxClientPopupWindowPinnedChangedEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function(window, pinned) {
  this.constructor.prototype.constructor.call(this, window);
  this.pinned = pinned;
 }
});
var ASPxClientPopupControlCollection = ASPx.CreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.draggingControl = null;
  this.draggingWindowIndex = -1;
  this.gragXOffset = 0;
  this.gragYOffset = 0;
  this.visibleModalElements = [];
  this.visiblePopupWindowIds = [];
  this.windowResizeByBodyScrollVisibilityChangingLockCount = 0;
  this.savedBodyWidth = 0;
  this.savedBodyHeight = 0;
  this.overControl = null;
  this.overWindowIndex = -1;
  this.overXPos = ASPx.InvalidPosition;
  this.overYPos = ASPx.InvalidPosition;
  this.appearTimerID = -1;
  this.disappearTimerID = -1;
  this.scrollEventLockCount = 0;
  this.currentActiveWindowElement = null;
  this.resizeControl = null;
  this.resizeIndex = -2;
  this.resizeCursor = "";
  this.resizePanel = null;
  this.selectBanned = false;
  this.pcWindowsAreRestrictedByDocumentWindow = true;
  this.docScrollLeft = -1;
  this.docScrollTop = -1;
  this.EnsureSaveScrollState();
 },
 GetCollectionType: function(){
  return "Popup";
 },
 Remove: function(popupControl) {
  for(var i = this.visibleModalElements.length - 1; i >= 0; i--) {
   var modalElement = this.visibleModalElements[i];
   if(modalElement && modalElement.DXModalPopupControl === popupControl)
    this.UnregisterVisibleModalElement(modalElement);
  }
  for(var j = this.visiblePopupWindowIds.length - 1; j >= 0; j--) {
   var id = this.visiblePopupWindowIds[j];
   if(!ASPx.IsExists(id)) continue;
   var popupWindow = this.GetPopupWindowFromID(id);
   if(popupWindow.popupControl === popupControl) {
    var windowElement = popupControl.GetWindowElement(popupWindow.windowIndex);
    if(windowElement)
     this.UnregisterVisibleWindow(windowElement);
    else
     ASPx.Data.ArrayRemove(this.visiblePopupWindowIds, id);
   }
  }
  ASPxClientControlCollection.prototype.Remove.call(this, popupControl);
 },
 EnsureSaveScrollState: function() {
  if(ASPx.documentLoaded && this.docScrollLeft < 0 && this.docScrollTop < 0)
   this.SaveScrollState();
 },
 GetPopupWindowFromID: function(id) {
  var pos = id.lastIndexOf(ASPx.PCWIdSuffix);
  var name = id.substring(0, pos);
  var index = id.substr(pos + ASPx.PCWIdSuffix.length);
  var popupControl = aspxGetPopupControlCollection().Get(name);
  return { popupControl: popupControl, windowIndex: index };
 },
 DoHideAllWindows: function(srcElement, excptId, applyToAll, closeReason, posX) {
  for(var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
   var id = this.visiblePopupWindowIds[i];
   if(id == excptId) continue;
   var popupWindow = this.GetPopupWindowFromID(id),
    windowIndex = popupWindow.windowIndex,
    popupControl = popupWindow.popupControl;
   if(!popupControl.CanBeClosedByClickOnElement(windowIndex, srcElement, posX, id)) continue;
   if(popupControl != null) {
    var popupWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(popupControl.GetWindowElement(windowIndex));
    var isPopupHigherSrcElement = ASPx.PopupUtils.IsHigher(popupWindowZIndexArray, ASPx.PopupUtils.GetElementZIndexArray(srcElement)) || !popupControl.HasDefaultWindow();
    var windowCloseAction = popupControl.GetWindowCloseAction(windowIndex);
    if ((windowCloseAction != "CloseButton" && windowCloseAction != "None") && isPopupHigherSrcElement || applyToAll)
     popupControl.DoHideWindow(parseInt(windowIndex), false, closeReason);
   }
  }
 },
 RefreshModalRenderInIe: function() {
  if(ASPx.Browser.IE && ASPx.Browser.Version === 11 && this.visibleModalElements.length > 0) {
   var topModalWindow = this.GetTopModalWindow();
   if(topModalWindow) {
    var popupWindow = this.GetPopupWindowFromID(topModalWindow.id),
     windowIndex = popupWindow.windowIndex,
     popupControl = popupWindow.popupControl;
    if(popupControl)
     popupControl.RefreshModalRenderInIe(windowIndex);
   }
  }
 },
 DoShowAtCurrentPos: function(name, index, popupElementIndex, evtClone) {
  var pc = this.Get(name);
  if(pc != null && !pc.InternalIsWindowVisible(index))
   pc.DoShowWindowCore(index, this.overXPos, this.overYPos, popupElementIndex, true, true, evtClone, ASPxClientPopupControlCloseReason.MouseOut);
 },
 WindowZIndexWasInitialized: function(zIndex, pcZIndex) {
  return pcZIndex <= zIndex;
 },
 ActivateWindowElement: function(element, evt, popupType, defZIndex, zIndex) {
  var maxZIndex = this.GetMaxZIndex(popupType, defZIndex),
   topZIndex = this.WindowZIndexWasInitialized(maxZIndex, zIndex) ? parseInt(maxZIndex) : zIndex;
  if(this.WindowZIndexWasInitialized(element.style.zIndex, zIndex) && element.style.zIndex != topZIndex) {
   this.DeleteWindowFromZIndexOrder(element);
  }
  if(!this.WindowZIndexWasInitialized(element.style.zIndex, zIndex))
   topZIndex += 2;
  var popupWindow = this.GetPopupWindowFromID(element.id);
  popupWindow.popupControl.SetWindowElementZIndex(element, topZIndex);
  var pcWElementEventSource = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupWindowElement);
  if(!evt || (evt && pcWElementEventSource == element)) { 
   if(this.GetCurrentActiveWindowElement() != element) {
    this.RefreshTabIndexes(false);
    this.SaveCurrentActiveWindowElement(element);
   }
  }
 },
 RefreshTabIndexes: function(forceRecalculate) {
  var topModalWindow = this.GetTopModalWindow();
  if(topModalWindow != null || forceRecalculate) {
   var topModalWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(topModalWindow);
   this.CalculateTabIndexes(topModalWindowZIndexArray);
  }
 },
 ElementHasTabIndex: function(element) {
  return ASPx.IsExists(ASPx.Attr.GetAttribute(element, "tabindex"));
 },
 IsElementCanBeActive: function(element) { 
  return element.tagName === "INPUT" || element.tagName === "A" ||
   element.tagName === "BUTTON" || element.tagName === "TEXTAREA" ||
   element.tagName === "SELECT" || this.ElementHasTabIndex(element);
 },
 GetCanBeActiveElements: function() { 
  var elements = document.getElementsByTagName("*"),
   canBeActiveElements = [];
  for(var i = 0; i < elements.length; i++) {
   if(this.IsElementCanBeActive(elements[i]))
    canBeActiveElements.push(elements[i]);
  }
  return canBeActiveElements;
 },
 GetEditableDivs: function(){
  if(document.querySelectorAll)
   return document.querySelectorAll("div[contenteditable=true]");
  var editableDivs = [ ];
  var allDivs = document.getElementsByTagName("DIV");
  for(var i = 0; i < allDivs.length; i++){
   var div = allDivs[i];
   if(div.getAttribute("contenteditable") == 'true')
    editableDivs.push(div);
  }
  return editableDivs;
 },
 CalculateTabIndexes: function(topModalWindowZIndexArray) {
  var elements = this.GetCanBeActiveElements();
  for(var i = 0; i < elements.length; i++) {
   var currentElementZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(elements[i]),
    manager = ASPx.ControlTabIndexManager.getInstance(),
    tabIndexManagerGroupId = "pcCollection";
   if(ASPx.PopupUtils.IsHigher(currentElementZIndexArray, topModalWindowZIndexArray))
    manager.restoreTabIndexAttribute(elements[i], tabIndexManagerGroupId);
   else
    manager.changeTabIndexAttribute(elements[i], tabIndexManagerGroupId);
  }
 },
 PopupWindowIsModalByVisibleIndex: function(visiblePopupWindowIndex) {
  return this.PopupWindowIsModalByID(this.visiblePopupWindowIds[visiblePopupWindowIndex]);
 },
 PopupWindowIsModalByID: function(windowElementID) {
  var popupWindow = this.GetPopupWindowFromID(windowElementID);
  return popupWindow.popupControl.WindowIsModal(popupWindow.windowIndex);
 },
 SaveCurrentActiveWindowElement: function(windowElement) {
  this.currentActiveWindowElement = windowElement;
 },
 SkipCurrentActiveWindowElement: function(element) {
  if(element == this.GetCurrentActiveWindowElement())
   this.SaveCurrentActiveWindowElement(null);
 },
 GetCurrentActiveWindowElement: function() {
  return this.currentActiveWindowElement;
 },
 GetMaxZIndex: function (type, defaultZIndex) {
  var maxZIndex = defaultZIndex;
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var id = this.visiblePopupWindowIds[i];
   if(type !== undefined && this.GetPopupWindowFromID(id).popupControl.GetPopupType() !== type)
    continue;
   var currentWindow = ASPx.GetElementById(id);
   if(!!currentWindow && ASPx.IsElementVisible(currentWindow) && currentWindow.style && currentWindow.style.zIndex > maxZIndex)
    maxZIndex = currentWindow.style.zIndex;
  }
  return maxZIndex;
 },
 GetTopModalWindow: function() {
  return this.GetTopWindow(true);
 },
 GetTopWindow: function(onlyModal) {
  var topWindow = null;
  var topWindowZIndexArray = null;
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var currentWindow = ASPx.GetElementById(this.visiblePopupWindowIds[i]);
   if(onlyModal && !this.PopupWindowIsModalByVisibleIndex(i))
    continue;
   if(ASPx.IsElementVisible(currentWindow)) {
    var currentWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(currentWindow);
    if(topWindow == null || ASPx.PopupUtils.IsHigher(currentWindowZIndexArray, topWindowZIndexArray)) {
     topWindow = currentWindow;
     topWindowZIndexArray = currentWindowZIndexArray;
    }
   }
  }
  return topWindow;
 },
 DeleteWindowFromZIndexOrder: function(element) {
  for(var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
   var windowElement = ASPx.GetElementById(this.visiblePopupWindowIds[i]);
   if(!windowElement)
    ASPx.Data.ArrayRemoveAt(this.visiblePopupWindowIds, i);
   else if(windowElement.style.zIndex > element.style.zIndex) {
    var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
    popupWindow.popupControl.SetWindowElementZIndex(windowElement, windowElement.style.zIndex - 2);
   }
  }
 },
 AdjustModalElementsBounds: function() {
  for(var i = 0; i < this.visibleModalElements.length; i++)
   this.visibleModalElements[i].DXModalPopupControl.AdjustModalElementBounds(this.visibleModalElements[i]);
 },
 ClearAppearTimer: function() {
  this.appearTimerID = ASPx.Timer.ClearTimer(this.appearTimerID);
 },
 ClearDisappearTimer: function() {
  this.disappearTimerID = ASPx.Timer.ClearTimer(this.disappearTimerID);
 },
 IsAppearTimerActive: function() {
  return this.appearTimerID > -1;
 },
 IsDisappearTimerActive: function() {
  return this.disappearTimerID > -1;
 },
 SetAppearTimer: function(name, index, popupElementIndex, timeout, evt) {
  var evtClone = ASPx.CloneObject(evt);
  this.appearTimerID = window.setTimeout(function() {
   aspxGetPopupControlCollection().DoShowAtCurrentPos(name, index, popupElementIndex, evtClone);
  }, timeout);
 },
 SetDisappearTimer: function(name, index, timeout) {
  this.disappearTimerID = window.setTimeout(function() {
   aspxGetPopupControlCollection().OnPWDisappearTimer(name, index);
  }, timeout);
 },
 GetDocScrollDifference: function() {
  return new _aspxScrollDifference(ASPx.GetDocumentScrollLeft() - this.docScrollLeft, ASPx.GetDocumentScrollTop() - this.docScrollTop);
 },
 IsDocScrolled: function(scroll) {
  return scroll.horizontal != 0 || scroll.vertical != 0;
 },
 SaveScrollState: function() {
  this.docScrollLeft = ASPx.GetDocumentScrollLeft();
  this.docScrollTop = ASPx.GetDocumentScrollTop();
 },
 InitDragObject: function(control, index, x, y, xClientCorrection, yClientCorrection) {
  this.draggingControl = control;
  this.draggingWindowIndex = index;
  this.gragXOffset = x;
  this.gragYOffset = y;
  this.xClientCorrection = xClientCorrection;
  this.yClientCorrection = yClientCorrection;
  this.SetDocumentSelectionBan(true);
 },
 InitOverObject: function(control, index, evt) {
  this.overControl = control;
  this.overWindowIndex = index;
  if(evt)
   this.SaveCurrentMouseOverPos(evt);
 },
 InitResizeObject: function(control, index, cursor, resizePanel) {
  this.resizeControl = control;
  this.resizeIndex = index;
  this.resizeCursor = cursor;
  this.resizePanel = resizePanel;
  this.SetDocumentSelectionBan(true);
 },
 SetDocumentSelectionBan: function(value) {
  if(this.selectBanned === value)
   return;
  this.selectBanned = value;
  if(ASPx.Browser.WebKitFamily) {
   if(value) {
    if(!this.webkitUserSelectBackup && document.body.style.webkitUserSelect)
     this.webkitUserSelectBackup = document.body.style.webkitUserSelect;
    document.body.style.webkitUserSelect = "none";
   } else {
    if(this.webkitUserSelectBackup) {
     document.body.style.webkitUserSelect = this.webkitUserSelectBackup;
     delete this.webkitUserSelectBackup;
    } else
     document.body.style.webkitUserSelect = "auto";
   }
  }
 },
 IsResizeInint: function() {
  return this.resizeControl != null;
 },
 ClearDragObject: function() {
  this.draggingControl = null;
  this.draggingWindowIndex = -1;
  this.gragXOffset = 0;
  this.gragYOffset = 0;
  this.SetDocumentSelectionBan(this.resizeControl != null);
 },
 ClearResizeObject: function() {
  this.resizeControl = null;
  this.resizeIndex = -2;
  this.resizeCursor = "";
  this.SetDocumentSelectionBan(this.draggingControl != null);
  this.resizePanel.parentNode.removeChild(this.resizePanel);
 },
 Drag: function(evt) {
  if(ASPx.tableColumnResizing || ASPx.currentDragHelper || !ASPx.Evt.IsLeftButtonPressed(evt)) return;
  var x = ASPx.Evt.GetEventX(evt);
  var y = ASPx.Evt.GetEventY(evt);
  if(this.pcWindowsAreRestrictedByDocumentWindow && ASPx.PopupUtils.CoordinatesInDocumentRect(x, y)) {
   x += this.gragXOffset;
   y += this.gragYOffset;
   this.draggingControl.OnDrag(this.draggingWindowIndex, x, y, this.xClientCorrection, this.yClientCorrection, evt);
   if(ASPx.Browser.WebKitTouchUI)
    ASPx.Evt.PreventEvent(evt);
  }
 },
 DragStop: function() {
  this.draggingControl.OnDragStop(this.draggingWindowIndex);
  this.ClearDragObject();
 },
 ResizeStop: function(evt) {
  this.resizeControl.OnResizeStop(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
  aspxGetPopupControlCollection().ClearResizeObject();
 },
 setIframesMouseMoveEnabled: function(enabled) {
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if(popupControl) {
    var iframe = popupControl.GetWindowContentIFrameElement(popupWindow.windowIndex);
    if(iframe) {
     iframe.style.pointerEvents = enabled ? "" : "none";
     if(ASPx.Browser.IE && ASPx.Browser.MajorVersion < 11) {
      if(enabled)
       popupControl.RemoveIframeCoverDiv(iframe, popupWindow.windowIndex);
      else
       popupControl.CreateIframeCoverDiv(iframe, popupWindow.windowIndex);
     }
    }
   }
  }
 },
 OnPWMouseMove: function(evt, name, index) {
  if(this.draggingControl == null &&
   this.overControl == null &&
   this.resizeControl == null) {
   var pc = aspxGetPopupControlCollection().Get(name);
   if(pc != null) pc.OnMouseMove(evt, index);
  }
 },
 OnPWMouseOver: function(evt) {
  if(!this.overControl || this.draggingControl) return;
  if(this.IsOverPopupWindow(evt))
   this.ClearDisappearTimer();
 },
 IsOverPopupWindow: function(evt) {
  return ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement) != null;
 },
 OnDocumentKeyDown: function(evt) {
  var windowElement = this.GetTopWindow(false);
  if(windowElement) {
   var window = this.GetPopupWindowFromID(windowElement.id);
   if(window.popupControl);
    window.popupControl.OnDocumentKeyDown(evt, windowElement);
  }
 },
 OnDocumentMouseDown: function(evt) {
  var popupElement = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
  var excptId = popupElement == null ? "" :
   popupElement.DXPopupElementControl.GetWindowElementId(popupElement.DXPopupWindowIndex);
  this.OnMouseDownCore(evt, excptId);
 },
 OnMouseDown: function(evt) {
  this.OnMouseDownCore(evt, "");
 },
 OnMouseDownCore: function(evt, excptId) {
  var srcElement = ASPx.Evt.GetEventSource(evt);
  this.DoHideAllWindows(srcElement, excptId, false, ASPxClientPopupControlCloseReason.OuterMouseClick, ASPx.Evt.GetEventX(evt));
  aspxGetPopupControlCollection().ClearAppearTimer();
 },
 OnMouseMove: function (evt) {
  if(ASPx.Browser.WebKitTouchUI && ASPx.TouchUIHelper.isGesture)
   return;
  if(this.draggingControl != null) {
   this.Drag(evt);
  }
  else if(this.overControl != null) {
   this.OnMouseOver(evt);
  }
  else if(this.resizeControl != null) {
   if(ASPx.Browser.IE && !ASPx.Evt.IsLeftButtonPressed(evt))
    this.ResizeStop(evt);
   else
    this.resizeControl.OnResize(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
  }
 },
 OnMouseOver: function(evt) {
  var element = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement);
  var curPopupElement = this.overControl.GetWindowCurrentPopupElementByIndex(this.overWindowIndex);
  var popup = element != null ? element.DXPopupElementControl : null;
  var isPopupActionMouseOver = popup && popup.GetWindowPopupAction(this.overWindowIndex) == 'MouseOver';
  var isCurPopupElement = element !== null && element === curPopupElement;
  var isCurPopupWindow = element != null && element.id === this.overControl.GetWindowElementId(this.overWindowIndex);
  var isCurPopupElementOrCurPopupWindow = isCurPopupElement || isCurPopupWindow || isPopupActionMouseOver;
  if(isCurPopupElementOrCurPopupWindow) {
   var clearTimer = true;
   popup = element.DXPopupElementControl;
   if(popup && popup.GetLastShownPopupElementIndex(element.DXPopupWindowIndex) != element.DXPopupElementIndex)
    clearTimer = false;
   if(clearTimer)
    this.ClearDisappearTimer();
   this.SaveCurrentMouseOverPos(evt);
   return;
  }
  this.OnMouseOut();
 },
 OnMouseOut: function(evt) {
  if(!this.overControl || this.draggingControl) return;
  this.ClearAppearTimer();
  var windowCloseAction = this.overControl.GetWindowCloseAction(this.overWindowIndex);
  if(windowCloseAction == "MouseOut" && this.overControl.InternalIsWindowVisible(this.overWindowIndex)) {
   if(!this.IsDisappearTimerActive() && this.IsDisappearAllowedByMouseOut(evt))
    this.SetDisappearTimer(this.overControl.name, this.overWindowIndex, this.overControl.disappearAfter);
  }
  else
   this.OverStop();
 },
 IsDisappearAllowedByMouseOut: function(evt) {
  return ASPx.Browser.Firefox || ASPx.Browser.Chrome ? !this.IsOverPopupWindow(evt) : true;  
 },
 OnMouseUp: function(evt) {
  if(this.draggingControl != null)
   this.DragStop();
  if(this.resizeControl != null)
   this.ResizeStop(evt);
 },
 OnResize: function(evt) {
  this.AutoUpdateElementsPosition();
  this.AdjustModalElementsBounds();
 },
 OnScroll: function(evt) {
  if(this.scrollEventLockCount > 0)
   return;
  var scroll = this.GetDocScrollDifference();
  if(this.IsDocScrolled(scroll)) { 
   this.CorrectPositionAtScroll(scroll);
   this.AdjustModalElementsBounds();
   this.SaveScrollState();
  }
  this.CalculateDocumentDimensionsWithoutPinnedWindows(evt);
  this.FireScrollEventToWindows(evt);
 },
 GetSavedBodyWidth: function() {
  if(this.savedBodyWidth == 0)
   this.CalculateDocumentDimensionsWithoutPinnedWindows();
  return this.savedBodyWidth;
 },
 GetSavedBodyHeight: function() {
  if(this.savedBodyHeight == 0)
   this.CalculateDocumentDimensionsWithoutPinnedWindows();
  return this.savedBodyHeight;
 },
 HidePinnedPopupsThatOutFromViewPort: function() {
  var popupsToRestoreVisible = [];
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if(!popupControl.needToHidePinnedOutFromViewPort(popupWindow.windowIndex))
    continue;
   var element = popupControl.GetWindowElement(popupWindow.windowIndex);
   if(!element) continue;
   var restoreData = {};
   restoreData.element = element;
   restoreData.display = element.style.display;
   element.style.display = "none";
   popupsToRestoreVisible.push(restoreData);
  }
  return popupsToRestoreVisible;
 },
 RestorePinnedPopupsThatOutFromViewPort: function(popupsToRestoreVisible) {
  if(popupsToRestoreVisible.length > 0) {
   for(var i = 0; i < popupsToRestoreVisible.length; i++) {
    var restoreData = popupsToRestoreVisible[i];
    restoreData.element.style.display = restoreData.display;
   }
  }
 },
 CalculateDocumentDimensionsWithoutPinnedWindows: function(evt) { 
  var popupsToRestoreVisible = [];
  var needToHideRestorePopupsThatOutFromViewPort = !!evt && ASPx.Evt.GetEventSource(evt) == document;
  if(needToHideRestorePopupsThatOutFromViewPort)
   popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
  this.savedBodyWidth = ASPx.GetDocumentWidth();
  this.savedBodyHeight = ASPx.GetDocumentHeight();
  if(needToHideRestorePopupsThatOutFromViewPort)
   this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
 },
 FireScrollEventToWindows: function(evt) {
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   popupControl.OnScroll(evt, popupWindow.windowIndex);
  }
 },
 CalculateDocumentDimensionsWithoutPinnedWindowsOldIE: function(onCalculateFinished, evt) {  
  var popupsToRestoreVisible = [];
  var needToHideRestorePopupsThatOutFromViewPort = !!evt && ASPx.Evt.GetEventSource(evt) == document;
  if(needToHideRestorePopupsThatOutFromViewPort)
   popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
  this.scrollEventLockCount++;
  window.setTimeout(function() {
   this.savedBodyWidth = ASPx.GetDocumentWidth();
   this.savedBodyHeight = ASPx.GetDocumentHeight();
   if(needToHideRestorePopupsThatOutFromViewPort)
    this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
   if(onCalculateFinished)
    window.setTimeout(function() { onCalculateFinished(); }.aspxBind(this), 0);
   this.scrollEventLockCount--;
  }.aspxBind(this), 0);
 },
 FireScrollEventToWindowsOldIE: function(evt) {
  this.scrollEventLockCount++;
  this.FireScrollEventToWindows(evt);
  this.scrollEventLockCount--;
 },
 LockScrollEvent: function() {
  this.scrollEventLockCount++;
 },
 UnlockScrollEvent: function() {
  this.scrollEventLockCount--;
 },
 CorrectPositionAtScroll: function(scroll) {
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if(popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex)) {
    if(popupControl.GetAutoUpdatePosition(popupWindow.windowIndex))
     popupWindow.popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
   }
  }
 },
 OnSelectStart: function() {
  return !this.selectBanned;
 },
 OverStop: function() {
  this.overControl = null;
  this.overWindowIndex = -1;
 },
 OnPWDisappearTimer: function(name, index) {
  var pc = this.Get(name);
  if(pc != null) {
   if(!pc.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.MouseOut))
    this.OverStop();
   this.ClearDisappearTimer();
  }
 },
 SaveCurrentMouseOverPos: function(evt) {
  this.overXPos = ASPx.Evt.GetEventX(evt);
  this.overYPos = ASPx.Evt.GetEventY(evt);
 },
 RegisterVisibleModalElement: function(element) {
  if(ASPx.Data.ArrayIndexOf(this.visibleModalElements, element) == -1)
   this.visibleModalElements.push(element);
 },
 UnregisterVisibleModalElement: function(element) {
  ASPx.Data.ArrayRemove(this.visibleModalElements, element);
 },
 RegisterVisibleWindow: function(element, popupControl, index) {
  if(ASPx.Data.ArrayIndexOf(this.visiblePopupWindowIds, element.id) == -1) {
   this.visiblePopupWindowIds.push(element.id);
   if(popupControl && popupControl.GetWindowCloseAction(index) == "MouseOut")
    aspxGetPopupControlCollection().InitOverObject(popupControl, index, null);
   this.OnRegisteredVisibleWindow(element);
  }
 },
 OnRegisteredVisibleWindow: function(element) {
  var elementIndex = ASPx.Data.ArrayIndexOf(this.visiblePopupWindowIds, element.id);
  if(this.PopupWindowIsModalByVisibleIndex(elementIndex))
   ASPx.PopupUtils.RemoveFocus(element);
 },
 UnregisterVisibleWindow: function(element) {
  this.DeleteWindowFromZIndexOrder(element);
  ASPx.Data.ArrayRemove(this.visiblePopupWindowIds, element.id);
  var forceRecalculate = this.PopupWindowIsModalByID(element.id);
  this.RefreshTabIndexes(forceRecalculate);
  this.SkipCurrentActiveWindowElement(element);
 },
 AutoUpdateElementsPosition: function() {
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if(popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex))
    popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
  }
 },
 LockWindowResizeByBodyScrollVisibilityChanging: function() {
  this.windowResizeByBodyScrollVisibilityChangingLockCount++;
 },
 UnlockWindowResizeByBodyScrollVisibilityChanging: function() {
  this.windowResizeByBodyScrollVisibilityChangingLockCount--;
 },
 WindowResizeByBodyScrollVisibilityChangingLocked: function() {
  return this.windowResizeByBodyScrollVisibilityChangingLockCount > 0;
 },
 HideAllWindows: function() {
  this.DoHideAllWindows(null, "", true, ASPxClientPopupControlCloseReason.API, 0);
 }
});
var ASPxClientPopupControlResizeState = {
 Resized: 0,
 Collapsed: 1,
 Expanded: 2,
 Maximized: 3,
 RestoredAfterMaximized: 4
};
var ASPxClientPopupControlCloseReason = {
 API: "API",
 CloseButton: "CloseButton",
 OuterMouseClick: "OuterMouseClick",
 MouseOut: "MouseOut",
 Escape: "Escape"
};
var popupControlCollection = null;
function aspxGetPopupControlCollection() {
 if(popupControlCollection == null)
  popupControlCollection = new ASPxClientPopupControlCollection();
 return popupControlCollection;
}
function _aspxScrollDifference(horizontal, vertical) {
 this.horizontal = horizontal;
 this.vertical = vertical;
}
function aspxPWEMOver(evt) {
 aspxGetPopupControlCollection().OnPWMouseOver(evt);
}
ASPx.PWHMDown = function(evt) {
 return ASPx.Evt.CancelBubble(evt);
};
ASPx.PWCBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnCloseButtonClick");
};
ASPx.PWPBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnPinButtonClick");
};
ASPx.PWRBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnRefreshButtonClick");
};
ASPx.PWMNBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnCollapseButtonClick");
};
ASPx.PWMXBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnMaximizeButtonClick");
};
ASPx.PWDGMDown = function (evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 return ASPx.PWMDown(evt, name, index, pc.IsDraggingAllowed(index));
};
ASPx.PWGripMDown = function(evt, name, index) {
 aspxPWMDownCore(evt, name, index, false);
 return ASPx.PWHMDown(evt);
};
ASPx.PWMMove = function(evt, name, index) {
 aspxGetPopupControlCollection().OnPWMouseMove(evt, name, index);
};
ASPx.PWMDown = function(evt, name, index, isWindowContentDraggingAllowed) { 
 var pointOnScrollBar = false;
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc && pc.GetEnableContentScrolling(index)) {
  var rtl = pc.rtl && (ASPx.Browser.IE || ASPx.Browser.Firefox || ASPx.Browser.Opera);
  pointOnScrollBar = aspxPointOnElementScrollBar(pc.GetContentContainer(index), evt.clientX, evt.clientY, rtl);
 }
 aspxPWMDownCore(evt, name, index, isWindowContentDraggingAllowed, pointOnScrollBar);
 if(isWindowContentDraggingAllowed) { 
  aspxGetPopupControlCollection().OnDocumentMouseDown(evt); 
  if(typeof (ASPx.GetDropDownCollection) == "function")
   ASPx.GetDropDownCollection().OnDocumentMouseDown(evt); 
  if(!pointOnScrollBar) {
   if(!ASPx.Browser.WebKitTouchUI && ASPx.Evt.GetEventSource(evt).tagName == "IMG") 
    ASPx.Evt.PreventEvent(evt);
  }
 }
};
function aspxPWMDownCore(evt, name, index, isDraggingAllowed, pointOnScrollBar) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) {
  pc.OnActivate(index, evt);
  pc.OnMouseDown(evt, index, isDraggingAllowed, pointOnScrollBar);
 }
}
function aspxPWMEMDown(evt) {
 var internalScrollableModalDiv = ASPx.Browser.AndroidDefaultBrowser ? ASPx.Evt.GetEventSource(evt) : null;
 var modalDiv = internalScrollableModalDiv ? internalScrollableModalDiv.parentNode : ASPx.Evt.GetEventSource(evt);
 if(modalDiv != null) 
  modalDiv.DXModalPopupControl.OnMouseDownModalElement(evt, modalDiv.DXModalPopupWindowIndex);
}
function aspxPEMEvent(evt) {
 var element = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
 if(element != null) {
  var popupControl = element.DXPopupElementControl;
  var index = element.DXPopupWindowIndex;
  if(evt.type == "mousedown") {
   popupControl.SetIsPopuped(index, popupControl.InternalIsWindowVisible(index));
   aspxGetPopupControlCollection().OnMouseDown(evt);
  }
  else {
   var windowPopupAction = popupControl.GetWindowPopupAction(element.DXPopupWindowIndex);
   var leftMouseButtonAction = windowPopupAction == "LeftMouseClick" && ASPx.Evt.IsLeftButtonPressed(evt);
   var isAccessibleKeyboardAction = popupControl.accessibilityCompliant && ASPx.Evt.IsActionKeyPressed(evt);
   var rightMouseButtonAction = windowPopupAction == "RightMouseClick" && !ASPx.Evt.IsLeftButtonPressed(evt);
   if(leftMouseButtonAction || rightMouseButtonAction || isAccessibleKeyboardAction) {
    if(rightMouseButtonAction)
     ASPx.PopupUtils.PreventContextMenu(evt);
    var windowCloseAction = popupControl.GetWindowCloseAction(index);
    var isPopuped = popupControl.GetIsPopuped(index);
    var isNewPopupElement = popupControl.GetLastShownPopupElementIndex(index) != element.DXPopupElementIndex;
    if(isPopuped && isNewPopupElement) {
     popupControl.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.OuterMouseClick);
     aspxGetPopupControlCollection().ClearDisappearTimer();
     isPopuped = false;
    }
    if(!(isPopuped && windowCloseAction == "OuterMouseClick")) {
     popupControl.DoShowWindow(index, element.DXPopupElementIndex, evt);
    }
    if(windowCloseAction == "MouseOut")
     aspxGetPopupControlCollection().InitOverObject(popupControl, element.DXPopupWindowIndex, evt);
    return false;
   }
  }
 }
}
ASPx.PopupElementMouseEvent = aspxPEMEvent;
function aspxPointOnElementScrollBar(element, x, y, rtl) {
 var scrollWidth = ASPx.GetVerticalScrollBarWidth();
 var hasHorizontalScroll = element.scrollWidth > element.clientWidth;
 var hasVerticalScroll = element.scrollHeight > element.clientHeight;
 var ceilX = rtl ? ASPx.GetAbsoluteX(element) + scrollWidth :
  ASPx.GetAbsoluteX(element) + (element.offsetWidth - ASPx.GetHorizontalBordersWidth(element));
 var ceilY = ASPx.GetAbsoluteY(element) + (element.offsetHeight - ASPx.GetVerticalBordersWidth(element));
 return (hasVerticalScroll && x >= ceilX - scrollWidth && x <= ceilX) ||
   (hasHorizontalScroll && y >= ceilY - scrollWidth && y <= ceilY);
}
ASPx.PCAStop = function(name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnAnimationStop(index);
};
ASPx.PCIframeLoad = function(evt) {
 var srcElement = ASPx.Evt.GetEventSource(evt);
 if(srcElement) {
  var pcName = srcElement.popupControlName;
  var pcWndIndex = srcElement.pcWndIndex;
  if(pcName) {
   var pc = aspxGetPopupControlCollection().Get(pcName);
   if(pc) pc.OnIFrameLoad(pcWndIndex);
  }
 }
};
function aspxTestPopupWindowElement(element) {
 return !!element.DXPopupWindowElement;
}
function aspxTestPopupControlElement(element) {
 return element.DXPopupElementControl && ASPx.IsExists(element.DXPopupWindowIndex);
}
function aspxTestPopupControlOverElement(element) {
 var collection = aspxGetPopupControlCollection();
 var popupControl = collection.overControl;
 var index = collection.overWindowIndex;
 var windowId = popupControl.GetWindowElementId(index);
 if(element.id == windowId)
  return true;
 var popupElements = popupControl.GetPopupElementList(index);
 for(var i = 0; i < popupElements.length; i++)
  if(popupElements[i] == element)
   return true;
 return false;
}
ASPx.Evt.AttachEventToDocument("keydown", function(evt) {
 aspxGetPopupControlCollection().OnDocumentKeyDown(evt);
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseDownEventName, function(evt) {
 aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function(evt) {
 return aspxGetPopupControlCollection().OnMouseUp(evt);
});
ASPx.Evt.AttachEventToElement(window, ASPx.TouchUIHelper.touchMouseMoveEventName, function(evt) {
 if(typeof(aspxGetPopupControlCollection) != "undefined")
  aspxGetPopupControlCollection().OnMouseMove(evt);
}, false, !ASPx.Browser.WebKitTouchUI);
ASPx.Evt.AttachEventToDocument("mouseout", function(evt) {
 if(typeof (aspxGetPopupControlCollection) != "undefined")
  aspxGetPopupControlCollection().OnMouseOut(evt);
});
ASPx.Evt.AttachEventToElement(window, ASPx.Browser.MacOSMobilePlatform ? "orientationchange" : "resize", function(evt) {
 aspxGetPopupControlCollection().OnResize(evt);
});
ASPx.Evt.AttachEventToElement(window, "scroll", function(evt) {
 aspxGetPopupControlCollection().OnScroll(evt);
});
ASPx.Evt.AttachEventToDocument("selectstart", function(evt) {
 var ret = aspxGetPopupControlCollection().OnSelectStart(evt);
 if(!ret) return false; 
});
var currViewPortSize = null,
 viewPortSizeInterval = null;
function getViewPortSize() {
 return { 
  w: window.innerWidth, 
  h: window.innerHeight,
  x: window.pageXOffset,
  y: window.pageYOffset
 }; 
}
function ensureViewPortSizeInterval() {
 if(!!viewPortSizeInterval) return;
 viewPortSizeInterval = setInterval(function() {
  var size = getViewPortSize();
  if(currViewPortSize && (size.w != currViewPortSize.w || size.h != currViewPortSize.h || size.x != currViewPortSize.x || size.y != currViewPortSize.y)) {
   var controlCollection = aspxGetPopupControlCollection();
   controlCollection.ForEachControl(function(popupControl) {
    if(popupControl.GetCanScrollViewPort(-1) && popupControl.IsVisible()) {
     popupControl.updateContentScrollIfNeeded(-1);
     popupControl.UpdatePosition();
    }
   });
  }
  currViewPortSize = size;
 }, 50);
}
window.ASPxClientPopupControlBase = ASPxClientPopupControlBase;
window.ASPxClientPopupControl = ASPxClientPopupControl;
window.ASPxClientPopupWindow = ASPxClientPopupWindow;
window.ASPxClientPopupWindowEventArgs = ASPxClientPopupWindowEventArgs;
window.ASPxClientPopupWindowCancelEventArgs = ASPxClientPopupWindowCancelEventArgs;
window.ASPxClientPopupWindowResizeEventArgs = ASPxClientPopupWindowResizeEventArgs;
window.ASPxClientPopupWindowPinnedChangedEventArgs = ASPxClientPopupWindowPinnedChangedEventArgs;
window.ASPxClientPopupControlCollection = ASPxClientPopupControlCollection;
window.ASPxClientPopupControlResizeState = ASPxClientPopupControlResizeState;
window.ASPxClientPopupControlCloseReason = ASPxClientPopupControlCloseReason;
ASPx.GetPopupControlCollection = aspxGetPopupControlCollection;
ASPx.PopupControlCssClasses = PopupControlCssClasses;
})();

(function() {
ASPx.activeCalendar = null;
ASPx.calendarMsPerDay = 86400000;
var calendarWeekCount = 6;
var viewsContainerClassName = "dxeCVC";
var emptyDateCellClassName = "dxeEmptyDC";
var ASPxClientCalendar = ASPx.CreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.SelectionChanging = new ASPxClientEvent();
  this.SelectionChanged = new ASPxClientEvent();
  this.VisibleMonthChanged = new ASPxClientEvent();
  this.CustomDisabledDate = new ASPxClientEvent();
  this.CellClick = new ASPxClientEvent();
  this.isMouseDown = false;  
  this.forceMouseDown = false;
  this.supportGestures = true;
  this.swipeGestureStated = false;
  this.updateAnimationProcessing = false;
  this.selection = new ASPxClientCalendarSelection();
  this.selectionTransaction = null;  
  this.selectionStartDate = null;
  this.selectionPrevStartDate = null;
  this.lastSelectedDate = null;
  this.selectionCtrl = false;
  this.selectionByWeeks = false;  
  this.titleFormatter = null;
  this.updateAnimationLockCount = 0;
  this.forceUpdate = false;
  this.needToSetCursor = true;
  this.visibleDate = new Date();
  this.visibleDates = {};
  this.selectedNavigationDates = {};
  this.firstDayOfWeek = 0;    
  this.columns = 1;
  this.rows = 1;
  this.switchToSingleMonthAtWindowInnerWidth = 0;
  this.enableFast = true;
  this.showFastPopup = false;
  this.pickerType = ASPx.DatePickerType.Days;
  this.maxViewType = ASPx.DatePickerType.Decades;
  this.initialViewType = ASPx.DatePickerType.Days;
  this.enableFastNavInlineAnimation = true;
  this.enableMulti = false;
  this.customDraw = false;  
  this.showWeekNumbers = true;
  this.showDayHeaders = true;
  this.isDateEditCalendar = false;
  this.sharedParameters = new ASPx.CalendarSharedParameters();
  this.visibleDateColumnOffset = 0;
  this.enableDaysViewPeriodNavigation = true;
  this.enableMonthsYearsViewPeriodNavigation = true;
  this.accessibilityHelper = null;
  this.sizingConfig.allowSetHeight = false;
  this.isDateChangingByKeyboard = false;
  this.MainElementClick = new ASPxClientEvent();
 },
 SetData: function(data){
  ASPxClientEdit.prototype.SetData.call(this, data);
  if(data.selection)
   this.selection.AddArray(data.selection);
  if(data.sharedParameters)
   this.SetProperties(data.sharedParameters, this.sharedParameters);
 },
 SetProperties: function(properties, obj) {
  ASPxClientEdit.prototype.SetProperties.call(this, properties, obj);
  this.selection.SetPickerType(this.pickerType);
 },
 Initialize: function() {
  this.selectionTransaction = new ASPxClientCalendarSelectionTransaction(this);
  this.selectionPrevStartDate = this.selection.GetFirstDate();
  ASPxClientEdit.prototype.Initialize.call(this);
  var mainElement = this.GetMainElement();
  ASPx.Evt.PreventElementDragAndSelect(mainElement, false, false);
  if(ASPx.Browser.Opera && !ASPx.Browser.WebKitFamily)
   ASPx.Selection.SetElementAsUnselectable(mainElement, true, true);
  this.EnsureTodayStyle();
  if(this.accessibilityCompliant)
   this.accessibilityHelper = new AccessibilityHelperCalendar(this);
 },
 InlineInitialize: function() {
  this.customDraw = this.sharedParameters.calendarCustomDraw;
  for(var i = this.pickerType; i <= this.maxViewType; i++) {
   this.visibleDates[i] = this.visibleDate;
   this.selectedNavigationDates[i] = this.visibleDate;
  }
  this.currentViewType = this.pickerType;
  this.CreateViews();
  if(this.NeedFastNavigation())
   this.InitializeFastNavigation();
  this.InitSpecialKeyboardHandling();
  if(this.isSlideCallbackAnimationEnabled() && !this.isSwipeGesturesEnabled() && typeof(ASPx.AnimationHelper) != "undefined")
   ASPx.AnimationHelper.getSlideAnimationContainer(this.GetCallbackAnimationElement(), true, false);
  ASPxClientEdit.prototype.InlineInitialize.call(this);
  if(!this.CustomDisabledDate.IsEmpty())
   this.Update();
  this.SetInitialVisibleDate();
  this.CreateAdaptivityCssRules();
  if(!this.isDateEditCalendar)
   this.SwitchToInitialView();
 },
 SwitchToInitialView: function() {
  if(this.pickerType !== this.initialViewType)
   this.SwitchToGreaterView(0, 0, this.initialViewType, true);
 },
 AddActiveViewHoverStateItems: function() {
  var activeViews = this.GetActiveViews();
  for(var key in activeViews) {
   if(activeViews.hasOwnProperty(key)) {
    var view = activeViews[key];
    view.AddHoverStateItems();
   }
  }
 },
 RemoveActiveViewHoverStateItems: function() {
  var activeViews = this.GetActiveViews();
  for(var key in activeViews) {
   if(activeViews.hasOwnProperty(key)) {
    var view = activeViews[key];
    view.RemoveHoverStateItems();
   }
  }
 },
 NeedFastNavigation: function() {
  return this.showFastPopup;
 },
 InitializeFastNavigation: function() {
  this.fastNavigation = this.CreateFastNavigation();
 },
 InitializeEvents: function() { 
  ASPxClientEdit.prototype.InitializeEvents.call(this);
  var clear = this.GetClearButton();
  if(clear)
   ASPx.Evt.AttachEventToElement(clear, "click", this.OnClearClick.bind(this));
  var today = this.GetTodayButton();
  if(today)
   ASPx.Evt.AttachEventToElement(today, "click", this.OnTodayClick.bind(this));
  if(this.isDateEditCalendar) {
   var ok = this.GetTimeSectionOkButton();
   if(ok)
    ASPx.Evt.AttachEventToElement(ok, "click", this.OnOkClick.bind(this));
   var cancel = this.GetTimeSectionCancelButton();
   if(cancel)
    ASPx.Evt.AttachEventToElement(cancel, "click", this.OnCancelClick.bind(this));
  }
 },
 CreateAdaptivityCssRules: function() {
  if (this.switchToSingleMonthAtWindowInnerWidth <= 0)
   return;
  var styleSheet = ASPx.GetCurrentStyleSheet();
  if (!styleSheet || !styleSheet.insertRule) return;
  var lastColumn = this.columns - 1;
  var rule =
  "@media all and (max-width: " + this.switchToSingleMonthAtWindowInnerWidth + "px) { " +
   "#" + this.name + ".dxeCVC > tbody > tr > td:not(.view-visible):not(#" + this.name + "_F) > * { display: none; }" +
   "#" + this.name + " .dxeCVC > tbody > tr > td:not(.view-visible):not(#" + this.name + "_F) > * { display: none; }" +
   ".view-visible #" + this.name + "_" + this.GetArrowButtonID("M", true, "0x0") + "," +
   ".view-visible #" + this.name + "_" + this.GetArrowButtonID("M", false, "0x" + lastColumn) + "," +
   ".view-visible #" + this.name + "_" + this.GetArrowButtonID("Y", true, "0x0") + "," +
   ".view-visible #" + this.name + "_" + this.GetArrowButtonID("Y", false, "0x" + lastColumn) + "," +
   ".view-visible #" + this.name + "_" + this.GetArrowButtonID("TP", true, "0x0") + "," +
   ".view-visible #" + this.name + "_" + this.GetArrowButtonID("TP", false, "0x" + lastColumn) +
    " { visibility: visible!important; } " +
   "}";
  styleSheet.insertRule(rule, styleSheet.cssRules.length);
 },
 OnNavigationImageClick: function(offset, isVisibleInAdaptiveOnly) {
  if(!isVisibleInAdaptiveOnly || (this.switchToSingleMonthAtWindowInnerWidth > 0 && window.innerWidth <= this.switchToSingleMonthAtWindowInnerWidth))
   this.OnShiftMonth(offset);
 },
 SetInitialVisibleDate: function() {
  this.initialVisibleDate = this.GetVisibleDate();
 },
 EnsureTodayStyle: function() {
  if(!ASPxClientCalendar.AreDatesEqual(this.serverCurrentDate, new Date())) {
   var activeViews = this.GetActiveViews();
   for(var key in activeViews) {
    if(activeViews.hasOwnProperty(key)) {
     var view = activeViews[key];
     view.EnsureTodayStyle();
    }
   }
  }
 },
 CreateFastNavigation: function() {
  return new ASPxClientCalendarFastNavigation(this);
 },
 GetCalendarRowElements: function() {
  if(!this.viewsContainer) {
   var mainElement = this.GetMainElement();
   var mainElementIsViewsContainer = ASPx.ElementHasCssClass(this.GetMainElement(), viewsContainerClassName);
   this.viewsContainer = mainElementIsViewsContainer ? mainElement : ASPx.GetNodeByClassName(mainElement, viewsContainerClassName);
  }
  return this.viewsContainer.rows;
 },
 GetCalendarViewCellElements: function(rowElement) {
  return rowElement.cells;
 },
 GetMonthTable: function(viewIdPostfix) {
  return this.GetChildElement("mt" + viewIdPostfix);
 },
 GetYearCell: function(viewIdPostfix) {
  return this.GetChildElement("yc" + viewIdPostfix);
 },
 GetYearCellChildArea: function(viewIdPostfix) {
  return this.GetChildElement("yt" + viewIdPostfix);
 },
 GetMonthCell: function(viewIdPostfix) {
  return this.GetChildElement("mc" + viewIdPostfix);
 },
 GetViewCell: function(viewIdPostfix) {
  if (this.switchToSingleMonthAtWindowInnerWidth <= 0)
   throw new Error("Not Implemented");
  return this.GetChildElement("v" + viewIdPostfix);
 },
 GetFastNavHeader: function(viewIdPostfix) {
  return this.GetChildElement("FNH" + viewIdPostfix);
 },
 GetFastNavHeaderTextElement: function(viewIdPostfix) {
  return this.GetChildElement("yt" + viewIdPostfix);
 },
 GetArrowButton: function(type, isNext, viewID) {
  return this.GetChildElement(this.GetArrowButtonID(type, isNext, viewID));
 },
 GetArrowButtonID: function(type, isNext, viewID) {
  var id = (isNext ? "N" : "P") + type.toUpperCase() + "C";
  if(this.IsMultiView() && viewID === undefined)
   id += "_0x" + (isNext ? this.columns - 1 : 0);
  else if (viewID)
   id += "_" + viewID;
  return id + "Img";
 },
 SetMonthTableCellContent: function(cell, content, isWeekNumber) {
  cell.innerHTML = content;
 },
 FindInputElement: function() {
  return this.accessibilityCompliant ? this.GetAccessibilityAssistantElement() : this.GetChildElement("KBS");
 },
 GetAccessibilityActiveElements: function() {
  return this.accessibilityCompliant ? [this.accessibilityHelper.GetActiveElement()] : [this.GetInputElement()];
 },
 GetClearButton: function() {
  return this.GetChildElement("BC");
 },
 GetTodayButton: function() {
  return this.GetChildElement("BT");
 },
 GetTimeSectionOkButton: function() {
  return this.GetChildElement("BO");
 },
 GetTimeSectionCancelButton: function() {
  return this.GetChildElement("BCN");
 },
 GetFooter: function() {
  return this.GetChildElement("F");
 },
 GetValue: function() {
  return this.selection.GetFirstDate();
 },
 GetValueString: function() {
  var value = this.GetValue();
  return value == null ? null : ASPx.DateUtils.GetInvariantDateString(value);
 },
 SetValue: function(date) {  
  if(date) {
   date = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(date);
   date = ASPxClientCalendar.GetCorrectedDate(date, this.pickerType);
   this.SetVisibleDate(date);
  }
  this.SetSelectedDate(date);
 },
 GetViewKey: function(row, column) {
  return row + "x" + column;
 },
 GetView: function(row, column, viewType) {
  if(!ASPx.IsExists(viewType))
   return this.GetActiveView(row, column);
  var key = this.GetViewKey(row, column);
  return this.GetViewByKey(viewType, key);
 },
 GetViewByKey: function(viewType, key) {
  return this.views[viewType][key];
 },
 GetActiveView: function(row, column) {
  var key = this.GetViewKey(row, column);
  return this.GetActiveViews()[key];
 },
 GetActiveViews: function() {
  return this.GetViews(this.currentViewType);
 },
 GetViews: function(viewType) {
  return this.views[viewType];
 },
 CreateViews: function() {
  this.views = { };
  var key;
  for(var i = this.pickerType; i <= this.maxViewType; i++) {
   if(i == this.pickerType)
    this.visibleDates[i] = this.visibleDate;
   this.views[i] = {};
   for(var row = 0 ; row < this.rows; row++) {
    for(var col = 0; col < this.columns; col++) {
     key = this.GetViewKey(row, col);
     var view = this.CreateView(i, row, col);
     view.Initialize();
     this.views[i][key] = view;
    }
   }
  }
  if (this.switchToSingleMonthAtWindowInnerWidth)
   this.GetActiveViews()["0x0"].EnsureVisible(true);
 },
 CreateView: function(viewType, row, column) {
  switch(viewType) {
   case ASPx.DatePickerType.Days:
    return new ASPxClientCalendarDaysView(this, row, column);
   case ASPx.DatePickerType.Months:
    return new ASPxClientCalendarMonthsView(this, row, column);
   case ASPx.DatePickerType.Years:
    return new ASPxClientCalendarYearsView(this, row, column);
   case ASPx.DatePickerType.Decades:
    return new ASPxClientCalendarDecadesView(this, row, column);
  }
 },
 ChangeView: function(newViewType, disableAnimation) {
  var needChangeMonthYearCellVisibility = this.currentViewType == ASPx.DatePickerType.Days || newViewType == ASPx.DatePickerType.Days;
  var needUpdateHoverStateItems = this.NeedUpdateHoverStateItemsOnViewChanging(this.currentViewType, newViewType);
  if(needUpdateHoverStateItems)
   this.RemoveActiveViewHoverStateItems();
  this.currentViewType = newViewType;
  if(needUpdateHoverStateItems)
   this.AddActiveViewHoverStateItems();
  if(needChangeMonthYearCellVisibility)
   this.ChangeMonthYearCellVisibility(newViewType == ASPx.DatePickerType.Days);
  if(this.enableFastNavInlineAnimation && !disableAnimation)
   this.PerformActiveViewAnimation();
  this.Update();
  ASPx.SetElementDisplay(this.GetClearButton(), !this.IsInlineFastNavigationActive());
 },
 NeedUpdateHoverStateItemsOnViewChanging: function(oldViewType, newViewType) {
  return this.pickerType !== ASPx.DatePickerType.Days && (oldViewType === this.pickerType || newViewType === this.pickerType);
 },
 PerformActiveViewAnimation: function() {
  var activeViews = this.GetActiveViews();
  for(var key in activeViews) {
   if(activeViews.hasOwnProperty(key)) {
    var view = activeViews[key];
    ASPx.AnimationHelper.fadeIn(view.GetMainElement());
   }
  }
 },
 ChangeMonthYearCellVisibility: function(showMonthCell) {
  var activeViews = this.GetActiveViews();
  for(var key in activeViews) {
   if(activeViews.hasOwnProperty(key)) {
    this.ChangeViewMonthYearCellVisibility(key, showMonthCell);
   }
  }
  var spacers = ASPx.GetNodesByClassName(this.GetMainElement(), "dxeCHS");
  spacers.forEach(function(spacer) { this.SetElementVisible(spacer, showMonthCell); }.aspxBind(this));
 },
 ChangeViewMonthYearCellVisibility: function(key, showMonthCell) {
  var monthView = this.GetViewByKey(ASPx.DatePickerType.Days, key);
  var yearView = this.GetViewByKey(ASPx.DatePickerType.Months, key);
  var monthViewMainElement = monthView.GetMainElement();
  var yearViewMainElement = yearView.GetMainElement();
  if(!showMonthCell) {
   yearViewMainElement.style.width = monthViewMainElement.offsetWidth + "px";
   yearViewMainElement.style.height = monthViewMainElement.offsetHeight + "px";
  }
  this.SetElementVisible(monthViewMainElement, showMonthCell);
  this.SetElementVisible(yearViewMainElement, !showMonthCell);
  this.SetViewMainElementParentsVisibility(monthViewMainElement, yearViewMainElement, showMonthCell);
  var monthViewNavigationCells = monthView.GetNavigationCells();
  var yearViewNavigationCells = yearView.GetNavigationCells();
  for(var i = 0; i < monthViewNavigationCells.length; i++)
   if(monthViewNavigationCells[i])
    this.SetElementVisible(monthViewNavigationCells[i], showMonthCell);
  for(var i = 0; i < yearViewNavigationCells.length; i++)
   if(yearViewNavigationCells[i])
    this.SetElementVisible(yearViewNavigationCells[i], !showMonthCell);
 },
 SetViewMainElementParentsVisibility: function(monthViewMainElement, yearViewMainElement, showMonthCell) {
  this.SetElementVisible(monthViewMainElement.parentNode, showMonthCell);
  this.SetElementVisible(yearViewMainElement.parentNode, !showMonthCell);
 },
 SetElementVisible: function(element, visible) {
  ASPx.SetElementDisplay(element, visible);
 },
 IsFastNavigationActive: function() {
  return this.IsPopupFastNavigationActive() || this.IsInlineFastNavigationActive();
 },
 IsPopupFastNavigationActive: function() {
  return this.fastNavigation && this.fastNavigation.IsActive();
 },
 IsInlineFastNavigationActive: function() {
  return this.currentViewType != this.pickerType;
 },
 IsDateSelected: function(date) {
  return this.selection.Contains(date);
 },
 IsDateVisible: function(date) {
  var startDate = ASPxClientCalendar.CloneDate(this.GetActiveView(0, 0).visibleDate);
  startDate.setDate(1);  
  var endDate = this.GetActiveView(this.rows - 1, this.columns - 1).GetMaxVisibleDate();
  return (date >= startDate) && (date < endDate);
 },
 IsDateWeekend: function(date) {
  var day = date.getDay();
  return day == 0 || day == 6;
 },
 IsCustomDisabledDatesViaCallback: function(){
  return (this.callBack && this.IsCustomDisabledDateEventEmpty() && this.sharedParameters.disabledDates.length > 0);
 },
 HasCallback: function () {
  if (this.isDateEditCalendar)
   return this.customDraw;
  else
   return this.callBack;
 },
 IsCustomDisabledDateEventEmpty: function() {
  if(this.isDateEditCalendar)
   return ASPxClientDateEdit.active == null || ASPxClientDateEdit.active.CalendarCustomDisabledDate.IsEmpty();
  return this.CustomDisabledDate.IsEmpty();
 },
 IsDateDisabled: function(date) {
  return ASPxClientCalendarDateDisabledHelper.IsDateDisabled(this.sharedParameters, date, function(d) { return this.OnCustomDisabledDate(d); }.aspxBind(this), this.currentViewType, this.pickerType);
 },
 IsMultiView: function() {
  return this.columns > 1 || this.rows > 1;
 },
 AddCallbackCustomDisabledDates: function(dates) {
  var callbackCustomDisabledDates = eval(dates);
  for(var i = 0; i < callbackCustomDisabledDates.length; i++) {
   var contains = false;
   var date = callbackCustomDisabledDates[i];
   var correctedDate = ASPxClientCalendar.GetCorrectedDate(date, this.pickerType);
   for(var j = 0; j < this.sharedParameters.disabledDates.length; j++) {
    var disabledDate = this.sharedParameters.disabledDates[j];
    if(disabledDate.getDate() == correctedDate.getDate() &&
     disabledDate.getMonth() == correctedDate.getMonth() &&
     disabledDate.getFullYear() == correctedDate.getFullYear()) {
     contains = true;
     break;
    }
   }
   if(!contains)
    this.sharedParameters.disabledDates.push(correctedDate);
  }
 },
 ShowLoadingPanel: function(){
  this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, this.GetLoadingPanelOffsetElement(this.GetMainElement()));
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainElement().parentNode, this.GetMainElement());
 },
 GetCallbackAnimationElement: function() {
  return !this.IsMultiView() ? this.GetActiveView(0, 0).GetAnimatedElement() : this.GetMainElement();
 },
 CanHandleGesture: function(evt) {
  if(!this.AllowShiftVisiblePeriod())
   return false;
  var source = ASPx.Evt.GetEventSource(evt);
  var element = !this.IsMultiView() ? this.GetActiveView(0, 0).GetMainElement() : this.GetMainElement();
  return ASPx.GetIsParent(element, source);
 },
 AllowStartGesture: function() {
  return ASPxClientControl.prototype.AllowStartGesture.call(this) && (!this.enableMulti || !this.selectionTransaction.isActive) && !this.updateAnimationProcessing;
 },
 StartGesture: function() {
  this.swipeGestureStated = true;
 },
 AllowExecuteGesture: function(value) {
  return true;
 },
 ExecuteGesture: function(value, count) {
  if(!count) count = 1;
  this.OnShiftMonth((value > 0 ? -1 : 1) * count);
 }, 
 Update: function() {
  if(this.customDraw && !this.clientUpdate && !this.IsInlineFastNavigationActive()) {
   if(!this.isDateEditCalendar)
    this.UpdateFromServer();
   else if (this.sharedParameters.currentDateEdit != null)
    this.sharedParameters.currentDateEdit.CreateUpdateCallback();
  }
  else {
   if(this.IsAnimationEnabled() && !this.forceUpdatingOnMouseOver)
    this.StartBeforeUpdateAnimation();
   else
    this.UpdateInternal();
  }
 },
 UpdateFromServer: function() {
  if(this.callBack) {
   this.ShowLoadingElements();
   this.CreateCallback(this.sharedParameters.GetUpdateCallbackParameters());
  }
  else {
   this.SendPostBack("");
  }
 },
 UpdateInternal: function() {
  if(this.NeedCalculateSelectionOnUpdating())
   this.selection.Clear();
  var activeViews = this.GetActiveViews();
  for(var key in activeViews) {
   if(activeViews.hasOwnProperty(key)) {
    var view = activeViews[key];
    if(!view.isASPxClientCalendarView) continue;
    view.Update();
    if (this.switchToSingleMonthAtWindowInnerWidth)
     view.EnsureVisible(view.GetIndex() === this.visibleDateColumnOffset);
   }
  }
  if(this.IsAnimationEnabled() && !this.forceUpdatingOnMouseOver)
   this.StartAfterUpdateAnimation();
 },
 IsAnimationEnabled: function() {
  return (this.isSlideCallbackAnimationEnabled() || this.enableCallbackAnimation) && !this.IsUpdateAnimationLocked();
 },
 LockUpdateAnimation: function() {
  this.updateAnimationLockCount++;
 },
 UnlockUpdateAnimation: function() {
  this.updateAnimationLockCount--;
 },
 IsUpdateAnimationLocked: function() {
  return this.updateAnimationLockCount > 0;
 },
 StartBeforeUpdateAnimation: function() {
  this.updateAnimationProcessing = true;
  var element = this.GetCallbackAnimationElement();
  if(this.isSlideCallbackAnimationEnabled() && this.slideAnimationDirection) 
   ASPx.AnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeforeUpdateAnimation.aspxBind(this), ASPx.AnimationEngineType.JS, this.rtl);
  else if(this.enableCallbackAnimation) 
   ASPx.AnimationHelper.fadeOut(element, this.FinishBeforeUpdateAnimation.aspxBind(this));
  else
   this.FinishBeforeUpdateAnimation();
 },
 FinishBeforeUpdateAnimation: function() {
  this.UpdateInternal();
 },
 StartAfterUpdateAnimation: function() {
  var element = this.GetCallbackAnimationElement();
  if (this.isSlideCallbackAnimationEnabled() && this.slideAnimationDirection)
   ASPx.AnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishAfterUpdateAnimation.aspxBind(this), ASPx.AnimationEngineType.JS, this.rtl);
  else if(this.enableCallbackAnimation) 
   ASPx.AnimationHelper.fadeIn(element, this.FinishAfterUpdateAnimation.aspxBind(this));
  else
   this.FinishAfterUpdateAnimation();
 },
 FinishAfterUpdateAnimation: function() {
  this.updateAnimationProcessing = false;
  this.slideAnimationDirection = null;
  this.CheckRepeatGesture();
 },
 ApplySelectionByDiff: function(selection, save) {
  var toShow = [ ];
  var toHide = [ ];
  var dates =  selection.GetDates();
  var oldDates = this.selection.GetDates();
  var selectionEdges = this.sharedParameters.dateRangeMode ? ASPx.Data.ArrayGetIntegerEdgeValues(dates) : null;
  var oldSelectionEdges = this.sharedParameters.dateRangeMode ? ASPx.Data.ArrayGetIntegerEdgeValues(oldDates) : null;
  var date;
  for(var i = 0; i < dates.length; i++) {
   date = dates[i];
   var isEdgeDateInSelection = selectionEdges
    && ASPxClientCalendar.IsFirstDateEqualToAnyOther(dates[i], selectionEdges.start, selectionEdges.end);
   var isEdgeDateInOldSelection = oldSelectionEdges
    && ASPxClientCalendar.IsFirstDateEqualToAnyOther(dates[i], oldSelectionEdges.start, oldSelectionEdges.end);
   if (!this.selection.Contains(date)
    || isEdgeDateInSelection && !isEdgeDateInOldSelection
    || !isEdgeDateInSelection && isEdgeDateInOldSelection)
    toShow.push(date);
  }
  for(var i = 0; i < oldDates.length; i++) {
   date = oldDates[i];
   if(!selection.Contains(date))
    toHide.push(date);
  }
  var activeViews = this.GetActiveViews();
  for(var key in activeViews) {
   if(activeViews.hasOwnProperty(key)) {
    var view = activeViews[key];
    if(!view.isASPxClientCalendarView) continue;
    view.UpdateSelection(toHide, false, selectionEdges);
    view.UpdateSelection(toShow, true, selectionEdges);
   }
  }
  this.selection.Assign(selection);
  if(this.accessibilityCompliant)
   this.accessibilityHelper.PronounceDates(dates);
 },
 GetDayInRangeClassName: function() {
  return ASPxClientCalendarView.DayInRangeClassName;
 },
 NeedApplySelectionToDayInRange: function() {
  return true;
 },
 ImportEtalonStyle: function(info, suffix) {
  var cell = this.GetEtalonStyleCell(suffix);
  if(ASPx.IsExistsElement(cell))
   info.Import(cell);   
 },
 GetEtalonStyleCell: function(name) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.name + "_EC_" + name);
 },
 CanApplyDayCellStyle: function(suffix, isCurrentMonthDay) {
  return true;
 },
 UpdateStateObject: function() {
  var stateObject = { };
  var visibleDate = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(this.visibleDate);
  visibleDate = ASPxClientCalendar.GetCorrectedDate(visibleDate, this.pickerType);
  var initialVisibleDate = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(this.initialVisibleDate);
  initialVisibleDate = ASPxClientCalendar.GetCorrectedDate(initialVisibleDate, this.pickerType);
  stateObject.visibleDate = ASPx.DateUtils.GetInvariantDateString(visibleDate);
  stateObject.initialVisibleDate = ASPx.DateUtils.GetInvariantDateString(initialVisibleDate);
  stateObject.selectedDates = [];
  if(this.selection.count > 0) {
   var dates = this.selection.GetDates();
   for(var i = 0; i < dates.length; i++)
    stateObject.selectedDates.push(ASPx.DateUtils.GetInvariantDateString(dates[i]));
  }
  this.UpdateStateObjectWithObject(stateObject);
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID;
 },
 FormatDates: function(dates, separator) {
  var result = "";
  for(var i = 0; i < dates.length; i++) {
   if(result.length > 0)
    result += separator;
   result += ASPx.DateUtils.GetInvariantDateString(dates[i]);     
  }
  return result;
 },
 InitializeKeyHandlers: function() {
  this.AddKeyDownHandler(ASPx.Key.Enter, "OnEnterDown");
  this.AddKeyDownHandler(ASPx.Key.Esc, "OnEscape");
  this.AddKeyDownHandler(ASPx.Key.PageUp, "OnPageUp");
  this.AddKeyDownHandler(ASPx.Key.PageDown, "OnPageDown");
  this.AddKeyDownHandler(ASPx.Key.End, "OnEndKeyDown");
  this.AddKeyDownHandler(ASPx.Key.Home, "OnHomeKeyDown");
  this.AddKeyDownHandler(ASPx.Key.Left, this.rtl ? "OnArrowRight" : "OnArrowLeft");
  this.AddKeyDownHandler(ASPx.Key.Right, this.rtl ? "OnArrowLeft" : "OnArrowRight");
  this.AddKeyDownHandler(ASPx.Key.Up, "OnArrowUp");
  this.AddKeyDownHandler(ASPx.Key.Down, "OnArrowDown");
  this.AddKeyPressHandler(ASPx.Key.Enter, "OnEnterPressed");
 },
 OnArrowUp: function(evt) {
  if(this.IsPopupFastNavigationActive())
   this.fastNavigation.OnArrowUp(evt);
  else if(!this.GetReadOnly() || this.IsInlineFastNavigationActive()) {
   var newDate;
   if(!this.IsInlineFastNavigationActive()) {
    newDate = this.GetNearestDayForToday();
    if(this.lastSelectedDate)
     newDate = this.currentViewType == ASPx.DatePickerType.Days ? ASPxClientCalendar.GetPrevWeekDate(this.lastSelectedDate) : this.GetNearestDateFromUp(this.lastSelectedDate);
   }
   else
    newDate = this.GetNearestDateFromUp(this.selectedNavigationDates[this.currentViewType]);
   if(!ASPxClientCalendarDateDisabledHelper.IsDateWithinBoundaries(newDate))
    return true;
   if(this.CorrectVisibleMonth(newDate, false))
    this.DoKeyboardSelection(newDate, evt.shiftKey, "up");
  }
  return true;
 }, 
 OnArrowDown: function(evt) {
  if(this.IsPopupFastNavigationActive())
   this.fastNavigation.OnArrowDown(evt);
  else if(!this.GetReadOnly() || this.IsInlineFastNavigationActive()) {
   var newDate;
   if(!this.IsInlineFastNavigationActive()) {
    newDate = this.GetNearestDayForToday();
    if(this.lastSelectedDate)
     newDate = this.currentViewType == ASPx.DatePickerType.Days ? ASPxClientCalendar.GetNextWeekDate(this.lastSelectedDate) : this.GetNearestDateFromDown(this.lastSelectedDate);
   }
   else
    newDate = this.GetNearestDateFromDown(this.selectedNavigationDates[this.currentViewType]);
   if(this.CorrectVisibleMonth(newDate, true))
    this.DoKeyboardSelection(newDate, evt.shiftKey, "down");
  }
  return true;
 }, 
 OnArrowLeft: function(evt) {
  if(this.IsPopupFastNavigationActive())
   this.fastNavigation.OnArrowLeft(evt);
  else if(!this.GetReadOnly() || this.IsInlineFastNavigationActive()) {
   var newDate;
   if(!this.IsInlineFastNavigationActive()) {
    newDate = this.GetNearestDayForToday();
    if(this.lastSelectedDate)
     newDate = this.currentViewType == ASPx.DatePickerType.Days ? ASPxClientCalendar.GetYesterDate(this.lastSelectedDate) : this.GetNearestDateFromLeft(this.lastSelectedDate);
   }
   else
    newDate = this.GetNearestDateFromLeft(this.selectedNavigationDates[this.currentViewType]);
   if(!ASPxClientCalendarDateDisabledHelper.IsDateWithinBoundaries(newDate))
    return true;
   if(this.CorrectVisibleMonth(newDate, false))
    this.DoKeyboardSelection(newDate, evt.shiftKey, "left");
  }
  return true;
 }, 
 OnArrowRight: function(evt) {
  if(this.IsPopupFastNavigationActive())
   this.fastNavigation.OnArrowRight(evt);
  else if(!this.GetReadOnly() || this.IsInlineFastNavigationActive()) {
   var newDate;
   if(!this.IsInlineFastNavigationActive()) {
    newDate = this.GetNearestDayForToday();
    if(this.lastSelectedDate)
     newDate = this.currentViewType == ASPx.DatePickerType.Days ? ASPxClientCalendar.GetTomorrowDate(this.lastSelectedDate) : this.GetNearestDateFromRight(this.lastSelectedDate);
   }
   else
    newDate = this.GetNearestDateFromRight(this.selectedNavigationDates[this.currentViewType]);
   if(this.CorrectVisibleMonth(newDate, true))
    this.DoKeyboardSelection(newDate, evt.shiftKey, "right");
  }
  return true;
 }, 
 OnCallback: function(result){
  var rowElements = this.GetCalendarRowElements();
  for(var rowIndex = 0; rowIndex < this.rows; rowIndex++) {
   var viewCellElements = this.GetCalendarViewCellElements(rowElements[rowIndex]);
   for(var cellIndex = 0; cellIndex < this.columns; cellIndex++)
    ASPx.SetInnerHtml(viewCellElements[cellIndex], result[rowIndex * this.columns + cellIndex]);
  }
  if(this.sharedParameters.hasCustomDisabledDatesViaCallback) {
    this.AddCallbackCustomDisabledDates(result[result.length - 1]);
  }
  this.CreateViews();
  this.InitializeGestures();
  this.InitializeEnabled();
  if(!this.isDateEditCalendar)
   this.SetFocus();
  if(!this.sharedParameters.calendarCustomDraw)
   this.UpdateInternal();
  this.EnsureTodayStyle();
  this.SetInitialVisibleDate();
 }, 
 OnPageUp: function(evt) {
  if(this.IsPopupFastNavigationActive())
   this.fastNavigation.OnPageUp(evt);
  else if(!this.GetReadOnly() || this.IsInlineFastNavigationActive()) {
   var newDate;
   if(this.IsInlineFastNavigationActive())
    newDate = this.GetPageUpPageDownResultDate(true, evt.ctrlKey, this.selectedNavigationDates[this.currentViewType]);
   else if(this.lastSelectedDate)
    newDate = this.GetPageUpPageDownResultDate(true, evt.ctrlKey, this.lastSelectedDate);
   else
    newDate = this.GetNearestDayForToday();
   if(!ASPxClientCalendarDateDisabledHelper.IsDateWithinBoundaries(newDate))
    return true;
   if(this.CorrectVisibleMonth(newDate, false))
    this.DoKeyboardSelection(newDate, false, "left");
  }
  return true; 
 },
 OnPageDown: function(evt) {
  if(this.IsPopupFastNavigationActive())
   this.fastNavigation.OnPageDown(evt);
  else if(!this.GetReadOnly() || this.IsInlineFastNavigationActive()) {
   var newDate;
   if(this.IsInlineFastNavigationActive())
    newDate = this.GetPageUpPageDownResultDate(false, evt.ctrlKey, this.selectedNavigationDates[this.currentViewType]);
   else if(this.lastSelectedDate)
    newDate = this.GetPageUpPageDownResultDate(false, evt.ctrlKey, this.lastSelectedDate);
   else
    newDate = this.GetNearestDayForToday();
   if(!ASPxClientCalendarDateDisabledHelper.IsDateWithinBoundaries(newDate))
    return true;
   if(this.CorrectVisibleMonth(newDate, true))
    this.DoKeyboardSelection(newDate, false, "right");
  }
  return true;
 },
 OnEndKeyDown: function(evt) {
  if(!this.GetReadOnly() && !this.IsPopupFastNavigationActive() || this.IsInlineFastNavigationActive()) {
   var currentDate;
   if(this.IsInlineFastNavigationActive())
    currentDate = this.selectedNavigationDates[this.currentViewType];
   else
    currentDate = this.lastSelectedDate ?
     ASPxClientCalendar.CloneDate(this.lastSelectedDate) : this.GetNearestDayForToday();
   var newDate;
   if(this.currentViewType == ASPx.DatePickerType.Days)
    newDate = ASPxClientCalendar.GetLastDayInMonthDate(currentDate);
   if(this.currentViewType == ASPx.DatePickerType.Months)
    newDate = new Date(currentDate.getFullYear(), 11, 1);
   if(this.currentViewType == ASPx.DatePickerType.Years)
    newDate = new Date(ASPxClientCalendar.GetDecadeStartYear(currentDate.getFullYear()) + 9, 0, 1);
   if(this.currentViewType == ASPx.DatePickerType.Decades)
    newDate = new Date(ASPxClientCalendar.GetCenturyStartYear(currentDate.getFullYear()) + 90, 0, 1);
   if(this.CorrectVisibleMonth(newDate, true))
    this.DoKeyboardSelection(newDate, evt.shiftKey, "left");
  }
  return true;
 },
 OnHomeKeyDown: function(evt) {
  if(!this.GetReadOnly() && !this.IsPopupFastNavigationActive() || this.IsInlineFastNavigationActive()) {
   var currentDate;
   if(this.IsInlineFastNavigationActive())
    currentDate = this.selectedNavigationDates[this.currentViewType];
   else
    currentDate = this.lastSelectedDate ?
     ASPxClientCalendar.CloneDate(this.lastSelectedDate) : this.GetNearestDayForToday();
   var newDate;
   if(this.currentViewType == ASPx.DatePickerType.Days)
    newDate = ASPxClientCalendar.GetFirstDayInMonthDate(currentDate);
   if(this.currentViewType == ASPx.DatePickerType.Months)
    newDate = new Date(currentDate.getFullYear(), 0, 1);
   if(this.currentViewType == ASPx.DatePickerType.Years)
    newDate = new Date(ASPxClientCalendar.GetDecadeStartYear(currentDate.getFullYear()), 0, 1);
   if(this.currentViewType == ASPx.DatePickerType.Decades)
    newDate = new Date(ASPxClientCalendar.GetCenturyStartYear(currentDate.getFullYear()), 0, 1);
   if(this.CorrectVisibleMonth(newDate, false))
    this.DoKeyboardSelection(newDate, evt.shiftKey, "right");
  }
  return true;
 },
 GetPageUpPageDownResultDate: function(isPageUp, ctrlKey, currentDate) {
  var getNeighbourMonthDateAction = isPageUp ? ASPxClientCalendar.GetPrevMonthDate : ASPxClientCalendar.GetNextMonthDate;
  var getNeighbourYearDateAction = isPageUp ? ASPxClientCalendar.GetPrevYearDate : ASPxClientCalendar.GetNextYearDate;
  var offsetYearSign = isPageUp ? -1 : 1;
  if(this.currentViewType == ASPx.DatePickerType.Days)
   return ctrlKey ? getNeighbourYearDateAction(currentDate) : getNeighbourMonthDateAction(currentDate);
  if(this.currentViewType == ASPx.DatePickerType.Months)
   return ASPxClientCalendar.GetDateWithYearOffset(currentDate, offsetYearSign);
  if(this.currentViewType == ASPx.DatePickerType.Years)
   return ASPxClientCalendar.GetDateWithYearOffset(currentDate, offsetYearSign * 10);
  if(this.currentViewType == ASPx.DatePickerType.Decades)
   return ASPxClientCalendar.GetDateWithYearOffset(currentDate, offsetYearSign * 100);
 },
 OnEnterDown: function() {
  var isPopupFastNavActive = this.IsPopupFastNavigationActive();
  var isInlineFastNavActive = this.IsInlineFastNavigationActive();
  if(isPopupFastNavActive || isInlineFastNavActive) {
   if(isPopupFastNavActive)
    this.fastNavigation.ApplyChanges();
   else {
    var selectedNavigationDate = this.selectedNavigationDates[this.currentViewType];
    this.SwitchToLessView();
    this.RaiseCellClick(selectedNavigationDate);
   }
   return true;
  }
  return false;
 },
 OnEnterPressed: function() {
  return true;
 },
 OnEscape: function() {
  this.CancelFastNavigation();
  return true;
 },
 CancelFastNavigation: function() {
  var isPopupFastNavActive = this.IsPopupFastNavigationActive();
  var isInlineFastNavActive = this.IsInlineFastNavigationActive();
  if(isPopupFastNavActive || isInlineFastNavActive) {
   if(isPopupFastNavActive)
    this.fastNavigation.CancelChanges();
   else
    this.ChangeView(this.currentViewType - 1);
  }
  if(!this.IsInlineFastNavigationActive())
   this.OnMainElementClick();
 },
 OnShiftMonth: function(offset, keepVisibleInSingleMode) {
  if(offset) {
   var date = this.GetNewVisibleDateByOffset(offset);
   if(this.IsInlineFastNavigationActive())
    this.selectedNavigationDates[this.currentViewType] = this.GetNewSelectedNavigationDateByOffset(offset);
   this.OnVisibleMonthChanged(date);
   if (keepVisibleInSingleMode)
    this.visibleDateColumnOffset = Math.min(Math.abs(offset), this.columns - 1);
  }
 },
 GetNewVisibleDateByOffset: function(offset) {
  return this.GetNewVisibleOrSelectedNavigationDateByOffset(this.visibleDates[this.currentViewType], offset);
 },
 GetNewSelectedNavigationDateByOffset: function(offset) {
  return this.GetNewVisibleOrSelectedNavigationDateByOffset(this.selectedNavigationDates[this.currentViewType], offset);
 },
 GetNewVisibleOrSelectedNavigationDateByOffset: function(currentDate, offset) {
  var date = ASPxClientCalendar.CloneDate(currentDate);
  if(this.currentViewType == ASPx.DatePickerType.Days)
   return ASPxClientCalendar.AddMonths(date, offset);
  if(this.currentViewType == ASPx.DatePickerType.Months)
   return ASPxClientCalendar.AddYears(date, offset);
  if(this.currentViewType == ASPx.DatePickerType.Years)
   return ASPxClientCalendar.AddYears(date, offset * 10);
  if(this.currentViewType == ASPx.DatePickerType.Decades)
   return ASPxClientCalendar.AddYears(date, offset * 100);
 },
 OnDayMouseDown: function(date, shift, ctrl, byWeeks) {
  if(!this.IsInlineFastNavigationActive())
   this.OnPickerViewMouseDown(date, shift, ctrl, byWeeks);
  else {
   this.selectedNavigationDates[this.currentViewType] = date;
   this.SwitchToLessView();
  }
  this.RaiseCellClick(date);
 },
 OnPickerViewMouseDown: function(date, shift, ctrl, byWeeks) {
  this.isMouseDown = true;
  this.selectionByWeeks = byWeeks;
  if(!this.enableMulti && this.isSwipeGesturesEnabled())
   return;
  this.selectionTransaction.Start();
  if(this.enableMulti) {
   if(ctrl) {
    this.selectionCtrl = true;
    this.selectionTransaction.CopyFromBackup();
   } else
    this.selectionCtrl = false;
   if(shift && this.selectionPrevStartDate) {
    this.selectionStartDate = this.selectionPrevStartDate;         
    this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
    if(byWeeks)
     this.selectionTransaction.selection.AddWeek(date);
   } else {
    this.selectionStartDate = date;
    this.selectionPrevStartDate = date;
    if(byWeeks)
     this.selectionTransaction.selection.AddWeek(date);
    else
     this.selectionTransaction.selection.Add(date);
   }
  } 
  else 
   this.selectionTransaction.selection.Add(date);
  if(!ASPxClientCalendarDateDisabledHelper.IsDateWithinBoundaries(date))
   this.selectionTransaction.CopyFromBackup();
  if(this.enableMulti)
   this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
  this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
 },
 OnDayMouseOver: function(date) {
  if(this.IsInlineFastNavigationActive())
   return;
  if (!this.sharedParameters.DaysSelectingOnMouseOver.IsEmpty()) {
   var args = new ASPxDaysSelectingOnMouseOverEventArgs(date);
   this.sharedParameters.DaysSelectingOnMouseOver.FireEvent(this, args);
   if (args.cancel)
    return;
   this.selectionStartDate = args.selectionStartDate;
   date = args.overDate;
  }
  if (!this.enableMulti && this.isSwipeGesturesEnabled() && !this.sharedParameters.dateRangeMode)
   return;
  if (this.enableMulti || this.sharedParameters.dateRangeMode) {
   if(this.selectionCtrl)
    this.selectionTransaction.CopyFromBackup();
   else
    this.selectionTransaction.selection.Clear();
   if(this.sharedParameters.dateRangeMode)
    this.CalculateRangeSelectionOnMouseOver(date);
   else
    this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
   if(this.selectionByWeeks) {
    this.selectionTransaction.selection.AddWeek(date);
    this.selectionTransaction.selection.AddWeek(this.selectionStartDate);
   }
  } 
  else {
   this.selectionTransaction.selection.Clear();
   this.selectionTransaction.selection.Add(date);
  }
  if (this.enableMulti || this.sharedParameters.dateRangeMode)
   this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
  this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
  if (this.updateDayStylesTwiceOnMouseOver)
   this.ForceUpdateOnMouseOver();
 },
 ForceUpdateOnMouseOver: function() {
  this.forceUpdatingOnMouseOver = true;
  try {
   this.Update();
  }
  finally {
   this.forceUpdatingOnMouseOver = false;
  }
 },
 CalculateRangeSelectionOnMouseOver: function(overDate) {
  var selectedRangeRestrictions = {
   start: ASPxClientCalendar.GetMinDate(this.selectionStartDate, overDate),
   end: ASPxClientCalendar.GetMaxDate(this.selectionStartDate, overDate)
  };
  var visibleRangeRestrictions = this.GetVisibleRangeRestrictions();
  ASPxClientCalendar.AddSelectedRangeVisiblePartToSelection(this.selectionTransaction.selection, selectedRangeRestrictions, visibleRangeRestrictions);
 },
 RaiseVisibleDaysMouseOut: function() {
  if (!this.sharedParameters.VisibleDaysMouseOut.IsEmpty())
   this.sharedParameters.VisibleDaysMouseOut.FireEvent(this);
 },
 OnDayMouseUp: function(date) {
  if(this.IsInlineFastNavigationActive())
   return;
  if(!ASPx.Browser.IE && this.isMouseDown)
   this.OnMainElementClick();
  this.isMouseDown = false;
  if(!this.enableMulti && this.isSwipeGesturesEnabled() && this.swipeGestureStated)
   this.swipeGestureStated = false;
  if(this.enableMulti) {
   if(this.selectionCtrl && this.selectionTransaction.backup.Contains(date) &&
    ASPxClientCalendar.AreDatesEqual(date, this.selectionStartDate)) {
    if(this.selectionByWeeks)
     this.selectionTransaction.selection.RemoveWeek(date);
    else
     this.selectionTransaction.selection.Remove(date);
   }
  }
  else if(this.sharedParameters.dateRangeMode) {
   this.selectionTransaction.selection.Clear();
   this.selectionTransaction.selection.Add(date);
  }
  else if(this.isSwipeGesturesEnabled() && !this.swipeGestureStated) {
   this.selectionTransaction.selection.Add(date);
   if(!ASPxClientCalendarDateDisabledHelper.IsDateWithinBoundaries(date))
    this.selectionTransaction.CopyFromBackup();
   this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
  }
  this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
  this.OnSelectionChanging();
 },
 GetTodayDate: function() {
  var parentSchedulerTodayDate = this.GetParentSchedulerTodayDate();
  if(parentSchedulerTodayDate)
   return parentSchedulerTodayDate;
  var now = new Date();
  var correctedNowDate = ASPxClientCalendar.GetCorrectedDate(now, this.pickerType);
  return new Date(correctedNowDate.getFullYear(), correctedNowDate.getMonth(), correctedNowDate.getDate());
 },
 GetParentSchedulerTodayDate: function() {
  return this.actualTodayDate;
 },
 EnsureHideFastNavigation: function() {
  if(this.fastNavigation)
   this.fastNavigation.Hide();
  else if(this.IsInlineFastNavigationActive())
   this.ChangeView(this.pickerType);
 },
 OnTodayClick: function() {
  this.EnsureHideFastNavigation();
  var todayDate = this.GetTodayDate();
  if(ASPxClientCalendarDateDisabledHelper.IsDateInRange(this.sharedParameters, todayDate)) {
   if(!this.IsDateDisabled(todayDate)) {
    this.selectionTransaction.Start();
    this.selectionTransaction.selection.Add(todayDate);
    this.lastSelectedDate = ASPxClientCalendar.CloneDate(todayDate);
    this.OnSelectionChanging();
   }
   if(!ASPxClientCalendar.AreDatesOfSamePeriod(todayDate, this.visibleDate, this.currentViewType))
    this.OnVisibleMonthChanged(todayDate);  
  }
 },
 OnClearClick: function() {
  if(this.isDateEditCalendar && ASPxClientDateEdit.active)
   ASPxClientDateEdit.active.OnTimeSectionClearClick();
  else {
   this.selectionTransaction.Start();
   this.OnSelectionChanging();
   this.selectionStartDate = null;
   this.selectionPrevStartDate = null;    
   this.ResetLastSelectedDate();
  }
 },
 OnOkClick: function() {
  var edit = ASPxClientDateEdit.active;
  if(edit)
   edit.OnApplyButtonClick();
 },
 OnCancelClick: function() {
  var edit = ASPxClientDateEdit.active;
  if(edit)
   edit.OnTimeSectionCancelClick();
 },
 ResetLastSelectedDate: function() {
  this.lastSelectedDate = null;
 },
 OnSelectMonth: function(row, column) {  
  var txn = this.selectionTransaction;
  txn.Start();
  var date = ASPxClientCalendar.CloneDate(this.GetActiveView(row, column).visibleDate);
  date.setDate(1);
  do {  
   if(ASPxClientCalendarDateDisabledHelper.IsDateInRange(this.sharedParameters, date) &&
    !this.IsDateDisabled(date))
    txn.selection.Add(date);
   date = ASPxClientCalendar.AddDays(date, 1);
  } while(date.getDate() > 1);
  this.OnSelectionChanging();
 },
 OnTitleClick: function(row, column) {
  if(!this.AllowProcessTitleClick())
   return;
  if(this.showFastPopup)
   this.ShowPopupFastNavigation(row, column);
  else
   this.SwitchToGreaterView(row, column);
 },
 SwitchToGreaterView: function(row, column, newViewType, disableAnimation) {
  newViewType = newViewType || this.currentViewType + 1;
  this.visibleDates[newViewType] = this.GetGreaterViewVisibleDate(newViewType, row, column);
  this.selectedNavigationDates[newViewType] = this.GetGreaterViewSelectedNavigationDate(newViewType, row, column);
  this.ChangeView(newViewType, disableAnimation);
 },
 SwitchToLessView: function() {
  var newViewType = this.currentViewType - 1;
  var selectedDate = this.selectedNavigationDates[this.currentViewType];
  this.visibleDates[newViewType] = this.GetLessViewVisibleDate(newViewType, selectedDate);
  var isSwitchedToPickerView = newViewType == this.pickerType;
  var oldVisibleDate = ASPxClientCalendar.CloneDate(this.visibleDate);
  if(isSwitchedToPickerView)
   this.visibleDate = this.visibleDates[newViewType];
  else
   this.selectedNavigationDates[newViewType] = selectedDate;
  this.ChangeView(newViewType);
  if(isSwitchedToPickerView && !ASPxClientCalendar.AreDatesOfSamePeriod(this.visibleDate, oldVisibleDate, this.pickerType))
   this.OnVisibleMonthChanged(this.visibleDate, oldVisibleDate, true);
 },
 GetViewByDate: function(date) {
  var activeViews = this.GetActiveViews();
  for(var key in activeViews) {
   if(activeViews.hasOwnProperty(key)) {
    var view = activeViews[key];
    if(view.IsDateVisible(date))
     return view;
   }
  }
 },
 GetGreaterViewVisibleDate: function(greaterViewType, currentRow, currentColumn) {
  var currentViewVisibleYear = this.GetActiveView(currentRow, currentColumn).visibleDate.getFullYear();
  var greaterViewTypeCurrentView = this.GetView(currentRow, currentColumn, greaterViewType);
  var greaterViewTypeCurrentViewVisibleYearOffset = greaterViewTypeCurrentView.GetVisibleDateOffsetInfo().year;
  var greaterViewTypeCurrentViewVisibleYear;
  if(greaterViewType == ASPx.DatePickerType.Months)
   greaterViewTypeCurrentViewVisibleYear = currentViewVisibleYear;
  if(greaterViewType == ASPx.DatePickerType.Years)
   greaterViewTypeCurrentViewVisibleYear = ASPxClientCalendar.GetDecadeStartYear(currentViewVisibleYear);
  if(greaterViewType == ASPx.DatePickerType.Decades)
   greaterViewTypeCurrentViewVisibleYear = ASPxClientCalendar.GetCenturyStartYear(currentViewVisibleYear);
  return new Date(greaterViewTypeCurrentViewVisibleYear - greaterViewTypeCurrentViewVisibleYearOffset, 0, 1);
 },
 GetGreaterViewSelectedNavigationDate: function(greaterViewType, currentRow, currentColumn) {
  var currentViewVisibleDate = this.GetActiveView(currentRow, currentColumn).visibleDate;
  var currentViewVisibleYear = currentViewVisibleDate.getFullYear();
  var currentViewVisibleMonth = currentViewVisibleDate.getMonth();
  var resultYear = greaterViewType != ASPx.DatePickerType.Decades ? currentViewVisibleYear : ASPxClientCalendar.GetDecadeStartYear(currentViewVisibleYear);
  var resultMonth = greaterViewType == ASPx.DatePickerType.Months ? currentViewVisibleMonth : 0;
  return new Date(resultYear, resultMonth, 1);
 },
 GetLessViewVisibleDate: function(lessViewType, currentSelectedNavigationDate) {
  var result = null;
  var currentView = this.GetViewByDate(currentSelectedNavigationDate);
  var prevViewVisibleDateOffsetInfo = this.GetView(currentView.row, currentView.column, lessViewType).GetVisibleDateOffsetInfo();
  if(lessViewType == ASPx.DatePickerType.Days) {
   result = new Date(currentSelectedNavigationDate.getFullYear(), currentSelectedNavigationDate.getMonth(), 1);
   result = ASPxClientCalendar.AddMonths(result, (-1) * prevViewVisibleDateOffsetInfo.month);
  }
  else
   result = new Date(currentSelectedNavigationDate.getFullYear() - prevViewVisibleDateOffsetInfo.year, 0, 1);
  return result;
 },
 ShowPopupFastNavigation: function(row, column) {
  this.fastNavigation.activeView = this.GetActiveView(row, column);
  this.fastNavigation.Show();
 },
 AllowProcessTitleClick: function() {
  return this.showFastPopup || this.enableFast && this.currentViewType < this.maxViewType;
 },
 OnMainElementClick: function(mouseEvt) {
  this.MainElementClick.FireEvent(this, mouseEvt);
 },
 OnSelectionChanging: function() {
  if(!this.SelectionChanging.IsEmpty()){
   var args = new ASPxClientCalendarSelectionEventArgs(false, this.selectionTransaction.selection);
   this.SelectionChanging.FireEvent(this, args);  
  }
  var changed = this.selectionTransaction.IsChanged();
  this.selectionTransaction.Commit();
  if(changed)
   this.OnValueChanged();  
 },
 OnVisibleMonthChanged: function(date, oldDate, skipVisibleDateUpdating) {
  oldDate = oldDate || this.visibleDate;
  var offsetInternal = this.currentViewType == ASPx.DatePickerType.Days ? ASPxClientCalendar.GetOffsetInMonths(oldDate, date) : 0;
  if(!skipVisibleDateUpdating)
   this.SetVisibleDateInternal(date);
  var processOnServer = this.currentViewType == ASPx.DatePickerType.Days ? this.RaiseVisibleMonthChanged(offsetInternal) : this.autoPostBack;
  if(processOnServer && !this.customDraw && !this.IsInlineFastNavigationActive())
   this.SendPostBackInternal("");
 },
 OnSelectionCancelled: function() {
  this.isMouseDown = false;  
  this.selectionTransaction.Rollback();
 },
 OnCustomDisabledDate: function(date) {
  return this.RaiseCustomDisabledDate(date);
 },
 RaiseCustomDisabledDate: function(date) {
  var args = new ASPxClientCalendarCustomDisabledDateEventArgs(date);
  this.CustomDisabledDate.FireEvent(this, args);
  return args;
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseSelectionChanged(processOnServer);
  return processOnServer;
 },
 SetVisibleDate: function(date) {
  this.EnsureHideFastNavigation(); 
  this.SetVisibleDateInternal(date);
 }, 
 SetVisibleDateInternal: function(date) {
  var old = this.visibleDates[this.currentViewType];
  date = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(date);
  date = ASPxClientCalendar.GetCorrectedDate(date, this.pickerType);
  this.visibleDates[this.currentViewType] = date;
  if(!this.IsInlineFastNavigationActive())
   this.visibleDate = date;
  var leftDir = this.rtl ? ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION : ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION;
  var rightDir = this.rtl ? ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION : ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION;
  this.slideAnimationDirection = this.IsAnimationEnabled() ? ((old < this.visibleDates[this.currentViewType]) ? rightDir : leftDir) : null;
  if(!ASPxClientCalendar.AreDatesOfSamePeriod(date, old, this.currentViewType) || this.forceUpdate) {
   this.forceUpdate = false;
   this.Update(); 
  }
 },
 SetSelectedDate: function(date) {
  date = ASPxClientCalendar.GetCorrectedDate(date, this.pickerType);
  this.EnsureHideFastNavigation();
  if(ASPxClientCalendarDateDisabledHelper.IsDateInRange(this.sharedParameters, date) &&
   !this.IsDateDisabled(date)) {
   var selection = new ASPxClientCalendarSelection();
   selection.SetPickerType(this.pickerType);
   if(date != null) {
    selection.Add(date);
    this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
   }
   this.ApplySelectionByDiff(selection, true);
  }
 },
 AllowShiftVisiblePeriod: function() {
  return this.currentViewType == ASPx.DatePickerType.Days ?
   this.enableDaysViewPeriodNavigation : this.enableMonthsYearsViewPeriodNavigation;
 },
 CorrectVisibleMonth: function(newDate, isForwardDirection) {
  var offset = this.GetOffsetInCurrentViewTypePeriods(this.visibleDates[this.currentViewType], newDate);
  if(this.IsMultiView() && offset != 0) {
   var view = isForwardDirection ? this.GetActiveView(this.rows - 1, this.columns - 1) : 
            this.GetActiveView(0, 0);
   offset = this.IsDateVisible(newDate) ? 0 :
       this.GetOffsetInCurrentViewTypePeriods(view.visibleDate, newDate);
  }
  if(!this.IsInlineFastNavigationActive() && (!ASPxClientCalendarDateDisabledHelper.IsDateInRange(this.sharedParameters, newDate) ||
   this.IsDateDisabled(newDate)))
   offset = 0;
  var result = offset == 0 || this.AllowShiftVisiblePeriod();
  if(offset != 0 && this.AllowShiftVisiblePeriod())
   this.OnShiftMonth(offset);
  return result;
 },
 GetOffsetInCurrentViewTypePeriods: function(visibleDate, newDate) {
  return ASPxClientCalendar.GetOffsetInPeriods(visibleDate, newDate, this.currentViewType);
 },
 DoKeyboardSelection: function(date, shift, direction) {
  if(!this.IsInlineFastNavigationActive())
   this.DoKeyboardSelectionOnPickerView(date, shift, direction);
  else {
   var activeViews = this.GetActiveViews();
   for(var key in activeViews) {
    if(!activeViews.hasOwnProperty(key)) continue;
    var view = activeViews[key];
    view.UpdateSelection(this.selectedNavigationDates[this.currentViewType], false);
    view.UpdateSelection(date, true);
   }
   this.selectedNavigationDates[this.currentViewType] = date;
  }
 },
 DoKeyboardSelectionOnPickerView: function(date, shift, direction) {
  if(ASPxClientCalendarDateDisabledHelper.IsDateInRange(this.sharedParameters, date)) {
   this.isDateChangingByKeyboard = true;
   var existDate = this.IsDateDisabled(date) ? this.GetNearestDayForDate(date, direction) : date;
   if(existDate != null) {
    this.selectionTransaction.Start();
    if(this.enableMulti && shift && this.selectionStartDate) {
     this.selectionTransaction.selection.AddRange(this.selectionStartDate, existDate);
     this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
    } else {
     this.selectionTransaction.selection.Add(existDate);
     this.selectionStartDate = existDate;
    }
    this.lastSelectedDate = ASPxClientCalendar.CloneDate(existDate);
    this.OnSelectionChanging();
   }
   this.isDateChangingByKeyboard = false;
  }
 },
 RemoveDisabledDatesFromSelection: function(selection) {
  var selectedDates = selection.GetDates();
  for(var i = 0; i < selectedDates.length; i++) {
   if(this.IsDateDisabled(selectedDates[i]))
    selection.Remove(selectedDates[i]);
  }
 },
 GetNearestDayForToday: function() {
  var todayDate = this.GetTodayDate();
  if(this.sharedParameters.minDate && !ASPxClientCalendarDateDisabledHelper.IsDateInRange(this.sharedParameters, todayDate))
   todayDate = ASPxClientCalendar.CloneDate(this.IsDateDisabled(this.sharedParameters.minDate) ? this.GetNearestDayForDate(this.sharedParameters.minDate, "left") : this.sharedParameters.minDate);
  return todayDate;
 },
 GetNearestDayForDate: function(date, direction) {
  var nearestDate = null;
  var nextDate = date;
  while(nearestDate == null) {
   switch(direction) {
    case "up":
     nextDate = this.GetNearestDateFromUp(nextDate);
     break;
    case "down":
     nextDate = this.GetNearestDateFromDown(nextDate);
     break;
    case "left":
     nextDate = this.GetNearestDateFromLeft(nextDate);
     break;
    case "right":
     nextDate = this.GetNearestDateFromRight(nextDate);
     break;
   }
   var isForbiddenDate = !ASPxClientCalendarDateDisabledHelper.IsDateInRange(this.sharedParameters, nextDate) || this.IsDateDisabled(nextDate);
   nearestDate = isForbiddenDate ? null : nextDate;
  }
  return nearestDate;
 },
 GetNearestDateFromUp: function(date) {
  if(this.currentViewType == ASPx.DatePickerType.Days)
   return new Date(date.getTime() - (7 * 24 * 60 * 60 * 1000));
  if(this.currentViewType == ASPx.DatePickerType.Months) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddMonths(newDate, -4);
   return newDate;
  }
  if(this.currentViewType == ASPx.DatePickerType.Years) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddYears(newDate, -4);
   return newDate;
  }
  if(this.currentViewType == ASPx.DatePickerType.Decades) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddYears(newDate, -40);
   return newDate;
  }
 },
 GetNearestDateFromDown: function(date) {
  if(this.currentViewType == ASPx.DatePickerType.Days)
   return new Date(date.getTime() + (7 * 24 * 60 * 60 * 1000));
  if(this.currentViewType == ASPx.DatePickerType.Months) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddMonths(newDate, 4);
   return newDate;
  }
  if(this.currentViewType == ASPx.DatePickerType.Years) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddYears(newDate, 4);
   return newDate;
  }
  if(this.currentViewType == ASPx.DatePickerType.Decades) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddYears(newDate, 40);
   return newDate;
  }
 },
 GetNearestDateFromLeft: function(date) {
  if(this.currentViewType == ASPx.DatePickerType.Days)
   return new Date(date.getTime() - (1 * 24 * 60 * 60 * 1000));
  if(this.currentViewType == ASPx.DatePickerType.Months) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddMonths(newDate, -1);
   return newDate;
  }
  if(this.currentViewType == ASPx.DatePickerType.Years) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddYears(newDate, -1);
   return newDate;
  }
  if(this.currentViewType == ASPx.DatePickerType.Decades) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddYears(newDate, -10);
   return newDate;
  }
 },
 GetNearestDateFromRight: function(date) {
  if(this.currentViewType == ASPx.DatePickerType.Days)
   return new Date(date.getTime() + (1 * 24 * 60 * 60 * 1000));
  if(this.currentViewType == ASPx.DatePickerType.Months) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddMonths(newDate, 1);
   return newDate;
  }
  if(this.currentViewType == ASPx.DatePickerType.Years) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddYears(newDate, 1);
   return newDate;
  }
  if(this.currentViewType == ASPx.DatePickerType.Decades) {
   var newDate = new Date(date.getTime());
   newDate = ASPxClientCalendar.AddYears(newDate, 10);
   return newDate;
  }
 },
 UseDelayedSpecialFocus: function() { 
  return true;
 },
 GetDelayedSpecialFocusTriggers: function() {
  var list = ASPxClientEdit.prototype.GetDelayedSpecialFocusTriggers.call(this);
  if(this.fastNavigation && this.showFastPopup)
   list.push(this.fastNavigation.GetPopupWindowElement());
  return list;
 },
 GetSelectedDate: function() {
  return this.GetValue();
 },
 GetVisibleDate: function() {
  return this.visibleDate;
 },
 SelectDate: function(date) {
  if(date) {
   date = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(date);
   this.selection.Add(date);
   this.Update();
  }
 },
 GetVisibleRangeRestrictions: function() {
  return {
   start: this.GetActiveView(0, 0).GetVisibleRangeRestrictions().start,
   end: this.GetActiveView(this.rows - 1, this.columns - 1).GetVisibleRangeRestrictions().end
  };
 },
 NeedCalculateSelectionOnUpdating: function() {
  return this.sharedParameters.dateRangeMode && this.selection.startDate && this.selection.endDate && !this.forceUpdatingOnMouseOver;
 },
 SelectRange: function(start, end) {
  if(start && end) {
   start = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(start);
   end = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(end);
   if(this.sharedParameters.dateRangeMode)
    this.selection.SetRestrictions(start, end);
   else
    this.selection.AddRange(start, end);
   this.Update();
  }
 },
 DeselectDate: function(date) {
  if(date) {
   this.selection.Remove(date);
   this.Update(); 
  }
 },
 DeselectRange: function(start, end) {
  if(start && end) {
   this.selection.RemoveRange(start, end);
   this.Update();
  }
 },
 ClearSelection: function() {
  this.selection.Clear();
  if(this.sharedParameters.dateRangeMode)
   this.selection.ResetRestrictions();
  this.Update();
 },
 GetSelectedDates: function() {
  return this.selection.GetDates();
 },
 RaiseSelectionChangedInternal: function(processOnServer) {
  if(!this.sharedParameters.CalendarSelectionChangedInternal.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.sharedParameters.CalendarSelectionChangedInternal.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseSelectionChanged: function(processOnServer) {
  processOnServer = this.RaiseSelectionChangedInternal(processOnServer);
  if(!this.SelectionChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);  
   this.SelectionChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseVisibleMonthChanged: function(offsetInternal) {
  var processOnServer = this.autoPostBack;
  if(!this.VisibleMonthChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   args.offsetInternal = offsetInternal;
   this.VisibleMonthChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseCellClick: function(date) {
  if(!this.CellClick.IsEmpty()) {
   var args = new ASPxClientCalendarCellClickEventArgs(date);
   this.CellClick.FireEvent(this, args);
  }
 },
 SetReadOnlyInternal: function(readOnly) {
  ASPxClientEdit.prototype.SetReadOnlyInternal.call(this, readOnly);
  this.ChangeReadOnlyAttributes(readOnly);
  var footer = this.GetFooter();
  if(footer)
   footer.style.display = readOnly ? "none" : "";
 },
 ChangeEnabledAttributes: function(enabled) {
  ASPx.Attr.ChangeDocumentEventsMethod(enabled)("mouseup", aspxCalDocMouseUp);
  ASPx.Attr.ChangeEventsMethod(enabled)(this.GetMainElement(), "click", ASPxClientCalendar.AnonymousHandlers.MainElementClick(this.name));
  var inputElement = this.GetInputElement();
  if(inputElement) {
   this.ChangeSpecialInputEnabledAttributes(inputElement, ASPx.Attr.ChangeEventsMethod(enabled));
   if(!this.accessibilityCompliant) {
    var changeMethod = enabled ? ASPx.Attr.RestoreTabIndexAttribute : ASPx.Attr.SaveTabIndexAttributeAndReset;
    changeMethod(inputElement);
   }
  }
  var btnElement = this.GetTodayButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, this.GetChangeButtonEnabledAttributesMethod(enabled));
  btnElement = this.GetClearButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, this.GetChangeButtonEnabledAttributesMethod(enabled));
  for(var i = this.pickerType; i <= this.maxViewType; i++) {
   var views = this.GetViews(i);
   for(var key in views) {
    if(views.hasOwnProperty(key)) {
     var view = views[key];
     if(!view.isASPxClientCalendarView) continue;
     view.ChangeEnabledAttributes(enabled);
     view.ChangeEditableAttributesOnChangeEnabledState(enabled);
    }
   }
  }
 },
 ChangeReadOnlyAttributes: function(readOnly) {
  if(!this.GetEnabled())
   return;
  for(var i = this.pickerType; i <= this.maxViewType; i++) {
   var views = this.GetViews(i);
   for(var key in views) {
    if(views.hasOwnProperty(key)) {
     var view = views[key];
     if(!view.isASPxClientCalendarView) continue;
     view.ChangeEditableAttributesOnChangeReadOnlyState(readOnly);
    }
   }
  }  
 },
 ChangeEnabledStateItems: function(enabled){
  ASPx.GetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  var btnElement = this.GetTodayButton();
  if(btnElement)
   ASPx.GetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetClearButton();
  if(btnElement)
   ASPx.GetStateController().SetElementEnabled(btnElement, enabled);
  this.EnsureHideFastNavigation();
  for(var i = this.pickerType; i <= this.maxViewType; i++) {
   var views = this.GetViews(i);
   for(var key in views) {
    if(views.hasOwnProperty(key)) {
     var view = views[key];
     if(!view.isASPxClientCalendarView) continue;
     view.ChangeEnabledStateItems(enabled);
    }
   }
  }
  this.UpdateInternal();   
 },
 ChangeButtonEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "ondblclick");
 },
 GetChangeButtonEnabledAttributesMethod: function(enabled) {
  return ASPx.Attr.ChangeAttributesMethod(enabled);
 },
 GetMinDate: function() {
  return this.sharedParameters.minDate;
 },
 SetMinDate: function(date) {
  date = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(date);
  date = ASPxClientCalendar.GetCorrectedDate(date, this.pickerType);
  this.sharedParameters.minDate = date;
  this.Update();
 },
 GetMaxDate: function() {
  return this.sharedParameters.maxDate;
 },
 SetMaxDate: function(date) {
  date = ASPxClientCalendarDateDisabledHelper.GetCorrectedDate(date);
  date = ASPxClientCalendar.GetCorrectedDate(date, this.pickerType);
  this.sharedParameters.maxDate = date;
  this.Update();
 },
 CheckDateEnabled: function(date){
  return !this.IsDateDisabled(date);
 },
 CanMouseDown: function(evt, date){
  if(!evt) return false;
  return ASPx.Evt.IsLeftButtonPressed(evt) && (!this.IsDateDisabled(date) || this.IsInlineFastNavigationActive());
 },
 CanMouseOver: function(date) {
  if(this.IsInlineFastNavigationActive())
   return false;
  if(this.forceMouseDown || this.isMouseDown || this.sharedParameters.dateRangeMode)
   return !this.IsDateDisabled(date);
  return false;
 },
 OnAssociatedLabelClick: function(evt) {
  ASPxClientCalendar.prototype.OnDelayedSpecialFocusMouseDown.call(this, evt);
 }
});
ASPxClientCalendar.Cast = ASPxClientControl.Cast;
var AccessibilityHelperCalendar = ASPx.CreateClass(ASPx.AccessibilityHelperBase, {
 constructor: function(calendar) {
  this.constructor.prototype.constructor.call(this, calendar);
  this.control.GotFocus.AddHandler(function() { this.PronounceDates(this.control.GetSelectedDates(), true); }.aspxBind(this));
  this.control.LostFocus.AddHandler(function() { 
   setTimeout(function() { this.changeActivityAttributes(this.getMainElement(), { "aria-activedescendant": "" }); }.aspxBind(this), 200); 
  }.aspxBind(this));
  this.pickerType = calendar.pickerType;
 },
 PronounceDates: function(dates, useDescriptionText) {
  var datesText = this.getDatesText(dates);
  var dateEditInput = null;
  var activeItemArgs = null;
  var inactiveItemArgs = null;
  if(this.control.isDateEditCalendar) {
   var dateEdit = this.control.sharedParameters.currentDateEdit;
   if(dateEdit)
    dateEditInput = dateEdit.GetInputElement();
   activeItemArgs = {
    "role"    : "option",
    "aria-selected" : true
   };
   inactiveItemArgs = {
    "role"    : "",
    "aria-selected" : ""
   };
  }
  if(!this.control.isDateEditCalendar && useDescriptionText) 
   datesText = ASPx.AccessibilitySR.CalendarDescription + " " + datesText;
  this.PronounceMessage(datesText, activeItemArgs, inactiveItemArgs, null, dateEditInput);
 },
 getDatesText: function(dates) {
  var datesText = "";
  if(dates.length == 0)
   datesText = this.control.isDateEditCalendar ? ASPx.AccessibilitySR.CalendarDescription : ASPx.AccessibilitySR.BlankEditorText;
  else {
   dates.sort(function(x, y) { return x.valueOf() - y.valueOf(); });
   var ranges = this.getDateRanges(dates);
   datesText = this.getRangesText(ranges);
  }
  return datesText;
 },
 GetActiveElement: function(inputIsMainElement) {
  var activeElement = ASPx.AccessibilityHelperBase.prototype.GetActiveElement.call(this, inputIsMainElement);
  var mainElement = inputIsMainElement ? this.control.GetInputElement() : this.getMainElement();
  return activeElement == mainElement ? null : activeElement;
 },
 getRangesText: function(ranges) {
  var dateText = "";
  var hasMultiSelect = ranges.length > 1 || ranges.length === 1 && ranges[0].count > 1;
  if(hasMultiSelect)
   dateText = ASPx.AccessibilitySR.CalendarMultiSelectText;
  var rangesLength = ranges.length;
  var rangeDatesTextArray = [ ];
  for(var i = 0; i < rangesLength; i++)
   rangeDatesTextArray.push(this.getRangeText(ranges[i]));
  return dateText + rangeDatesTextArray.join(', ');
 },
 getRangeText: function(range) {
  var rangeFormatString = ASPx.AccessibilitySR.CalendarRangeFormatString;
  var startDateString = this.getDateString(range.start);
  if(range.count === 1)
   return startDateString;
  var endDateString = this.getDateString(ASPxClientCalendar.GetDateByOffset(range.start, range.count - 1, this.pickerType));
  return ASPx.Str.ApplyReplacement(rangeFormatString, [["{0}", startDateString], ["{1}", endDateString]]);
 },
 getDateString: function(date) {
  var dateStringArray = [ ];
  dateStringArray.push(ASPx.CultureInfo.dayNames[date.getDay()]);
  dateStringArray.push(ASPx.CultureInfo.monthNames[date.getMonth()]);
  dateStringArray.push(date.getDate());
  dateStringArray.push(date.getFullYear());
  return dateStringArray.join(' ');
 },
 getDateRanges: function(dates) {
  var ranges = [ ];
  var start = null;
  var end = null;
  for(var i = 0; i < dates.length; i++) {
   var d1 = dates[i];
   var d2 = i < dates.length ? dates[i + 1] : d1;
   if(!start)
    start = end = d1;
   if(this.isNeibourDates(d1, d2)) {
    end = d2;
   } else {
    ranges.push({ start: start, count: ASPxClientCalendar.GetPeriodsInRange(start, end, this.pickerType) });
    start = end = null;
   }
  }
  return ranges;
 },
 isNeibourDates: function(date1, date2) {
  var nextDate = ASPxClientCalendar.GetNextDate(date1, this.pickerType);
  return ASPxClientCalendar.AreDatesEqual(nextDate, date2);
 }
});
var ASPxClientCalendarCustomDisabledDateEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(date) {
  this.constructor.prototype.constructor.call(this);
  this.date = date;
  this.isDisabled = false;
 }
});
ASPxClientCalendar.AnonymousHandlers = { 
 MainElementClick: function(name) {
  return function(e) {
   var cal = ASPx.GetControlCollection().Get(name);
   if(cal)
    cal.OnMainElementClick(e);
  };
 },
 SelectMonth: function(name, row, column) {
  return function() {
   var cal = ASPx.GetControlCollection().Get(name);
   if(cal)
    cal.OnSelectMonth(row, column);
  };
 },
 NavigationButtonClick: function(name, offset, isVisibleInAdaptiveOnly) {
  return function() {
   var cal = ASPx.GetControlCollection().Get(name);
   if(cal)
    cal.OnNavigationImageClick(offset, isVisibleInAdaptiveOnly);
  };
 },
 TitleClick: function(name, row, column) {
  return function() {
   var cal = ASPx.GetControlCollection().Get(name);
   if(cal)
    cal.OnTitleClick(row, column);
  };
 },
 DayMouseEvent: function(name, row, column, index, byWeeks) {
  return function(e) {
   var cal = ASPx.GetControlCollection().Get(name);
   if(!cal)
    return;
   var view = cal.GetActiveView(row, column);
   if(!view.isNavigationView && cal.GetReadOnly())
    return;
   var date = view.GetDateByIndex(index);
   if(byWeeks)
    date = ASPxClientCalendar.AddDays(date, cal.firstDayOfWeek - date.getDay());
   var allowed = ASPxClientCalendarDateDisabledHelper.IsDateInRange(cal.sharedParameters, date) && (view.IsDateVisible(date) || byWeeks);
   if(view.isNavigationView)
    allowed = view.IsDateVisible(date);
   switch(e.type) {
    case "mousedown":
     if(allowed && cal.CanMouseDown(e, date)) {
      var ctrl = e.ctrlKey || ASPx.Browser.MacOSPlatform && e.metaKey;
      cal.OnDayMouseDown(date, e.shiftKey, ctrl, byWeeks);
     }
     break;
    case "mouseover":
     if(allowed && cal.CanMouseOver(date)) {
      if(cal.forceMouseDown)
       cal.OnDayMouseDown(date, false, false, false);
      else if (cal.isMouseDown || cal.sharedParameters.dateRangeMode)
       cal.OnDayMouseOver(date);
     }
     break;
    case "mouseup":
     if(cal.isMouseDown && !view.isNavigationView) {
      if(allowed && !cal.IsDateDisabled(date))
       cal.OnDayMouseUp(date);
      else
       cal.OnSelectionCancelled();
     }
     break;
    case "mouseout":
     if(cal.sharedParameters.dateRangeMode && !view.isNavigationView) {
      var isAllowedOverDate = false;
      var overCell = ASPx.Evt.GetEventRelatedTarget(e, false);
      var overCellIndex = view.GetDayCellIndex(overCell);
      if (ASPx.IsExists(overCellIndex)) {
       var overDate = view.GetDateByIndex(overCellIndex);
       isAllowedOverDate = overDate && ASPxClientCalendarDateDisabledHelper.IsDateInRange(cal.sharedParameters, overDate) && view.IsDateVisible(overDate) && !cal.IsDateDisabled(overDate);
      }
      if (!isAllowedOverDate) {
       cal.RaiseVisibleDaysMouseOut();
      }
     }
     break;
   }     
  };
 },
 FastNavMonthClick: function(name, month) {
  return function() {
   var cal = ASPx.GetControlCollection().Get(name);
   if(cal) {
    cal.fastNavigation.OnMonthClick(month);
   }
  };
 },
 FastNavYearClick: function(name, index) {
  return function() {
   var cal = ASPx.GetControlCollection().Get(name);
   if(cal)
    cal.fastNavigation.OnYearClick(index);
  };
 }
};
ASPxClientCalendar.GetMinDate = function(date1, date2) {
 return date1 < date2 ? date1 : date2;
};
ASPxClientCalendar.GetMaxDate = function(date1, date2) {
 return date1 > date2 ? date1 : date2;
};
ASPxClientCalendar.AddSelectedRangeVisiblePartToSelection = function(selection, selectedRangeRestrictions, visibleRangeRestrictions) {
 selection.Add(selectedRangeRestrictions.start);
 selection.Add(selectedRangeRestrictions.end);
 var bothRangeRestrictsLessThanVisibleStartDate = selectedRangeRestrictions.start < visibleRangeRestrictions.start
  && selectedRangeRestrictions.end < visibleRangeRestrictions.start;
 var bothRangeRestrictsGreaterThanVisibleEndDate = selectedRangeRestrictions.start > visibleRangeRestrictions.end
  && selectedRangeRestrictions.end > visibleRangeRestrictions.end;
 var rangeHasVisiblePart = !bothRangeRestrictsLessThanVisibleStartDate && !bothRangeRestrictsGreaterThanVisibleEndDate;
 if(rangeHasVisiblePart) {
  var requiredSelectionStart = ASPxClientCalendar.GetMaxDate(selectedRangeRestrictions.start, visibleRangeRestrictions.start);
  var requiredSelectionEnd = ASPxClientCalendar.GetMinDate(selectedRangeRestrictions.end, visibleRangeRestrictions.end);
  selection.AddRange(requiredSelectionStart, requiredSelectionEnd);
 }
};
ASPxClientCalendar.AreDatesEqual = function(date1, date2) {
 if(date1 == date2)  
  return true;
 if(!date1 || !date2)
  return false;
 return date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate();
};
ASPxClientCalendar.IsFirstDateEqualToAnyOther = function () {
 var actualDate = arguments[0];
 for (var i = 1; i < arguments.length; i++)
  if (ASPxClientCalendar.AreDatesEqual(actualDate, arguments[i]))
   return true;
 return false;
};
ASPxClientCalendar.AreDatesOfSameMonth = function(date1, date2) {
 if(!date1 || !date2)
  return false;
 return date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth();
};
ASPxClientCalendar.AreDatesOfSameYear = function(date1, date2) {
 if(!date1 || !date2)
  return false;
 return date1.getFullYear() == date2.getFullYear();
};
ASPxClientCalendar.AreDatesOfSameDecade = function(date1, date2) {
 if(!date1 || !date2)
  return false;
 return ASPxClientCalendar.GetDecadeStartYear(date1.getFullYear()) == ASPxClientCalendar.GetDecadeStartYear(date2.getFullYear());
};
ASPxClientCalendar.AreDatesOfSameCentury = function(date1, date2) {
 if(!date1 || !date2)
  return false;
 return ASPxClientCalendar.GetCenturyStartYear(date1.getFullYear()) == ASPxClientCalendar.GetCenturyStartYear(date2.getFullYear());
};
ASPxClientCalendar.AreDatesOfSamePeriod = function(date1, date2, viewType) {
 if(viewType == ASPx.DatePickerType.Days)
  return ASPxClientCalendar.AreDatesOfSameMonth(date1, date2);
 if(viewType == ASPx.DatePickerType.Months)
  return ASPxClientCalendar.AreDatesOfSameYear(date1, date2);
 if(viewType == ASPx.DatePickerType.Years)
  return ASPxClientCalendar.AreDatesOfSameDecade(date1, date2);
 if(viewType == ASPx.DatePickerType.Decades)
  return ASPxClientCalendar.AreDatesOfSameCentury(date1, date2);
};
ASPxClientCalendar.GetUTCTime = function(date) {
 return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
};
ASPxClientCalendar.GetFirstDayOfYear = function(date) {
 return new Date(date.getFullYear(), 0, 1);  
};
ASPxClientCalendar.GetDayOfYear = function(date) {
 var ms = ASPxClientCalendar.GetUTCTime(date) - 
  ASPxClientCalendar.GetUTCTime(ASPxClientCalendar.GetFirstDayOfYear(date));
 return 1 + Math.floor(ms / ASPx.calendarMsPerDay);
};
ASPxClientCalendar.GetISO8601WeekOfYear = function(date) {
 var firstDate = new Date(date.getFullYear(), 0, 1);
 var firstDayOfWeek = firstDate.getDay();
 if(firstDayOfWeek == 0)
  firstDayOfWeek = 7;
 var daysInFirstWeek = 8 - firstDayOfWeek;
 var lastDate = new Date(date.getFullYear(), 11, 31);   
 var lastDayOfWeek = lastDate.getDay();
 if(lastDayOfWeek == 0)
  lastDayOfWeek = 7;
 var fullWeeks = Math.ceil((ASPxClientCalendar.GetDayOfYear(date) - daysInFirstWeek) / 7);
 var result = fullWeeks;   
 if(daysInFirstWeek > 3)
  result++;
 var isThursday = firstDayOfWeek == 4 || lastDayOfWeek == 4;
 if(result > 52 && !isThursday)
  result = 1;
 if(result == 0)
  return ASPxClientCalendar.GetISO8601WeekOfYear(new Date(date.getFullYear() - 1, 11, 31));
 return result;
};
ASPxClientCalendar.GetNextWeekDate = function(date) {
 var ret = new Date(date.getTime()); 
 var newDay = date.getDate() + 7;
 ret.setDate(newDay);
 return ret;
};
ASPxClientCalendar.GetPrevWeekDate = function(date) {
 var ret = new Date(date.getTime());
 var newDay = date.getDate() - 7;
 ret.setDate(newDay);
 return ret;
};
ASPxClientCalendar.GetYesterDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(ret.getDate() - 1);
 return ret;
};
ASPxClientCalendar.GetTomorrowDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(ret.getDate() + 1);
 return ret;
};
ASPxClientCalendar.GetNextMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInNextMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth() + 1, ret.getFullYear());
 if(ret.getDate() > maxDateInNextMonth)
  ret.setDate(maxDateInNextMonth);
 ret.setMonth(ret.getMonth() + 1);
 return ret;
};
ASPxClientCalendar.GetNextYearDate = function(date) {
 return ASPxClientCalendar.GetDateWithYearOffset(date, 1);
};
ASPxClientCalendar.GetDateWithYearOffset = function(date, offset) {
 var ret = new Date(date.getTime());
 var maxDateInPrevYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear() + offset);
 if(ret.getDate() > maxDateInPrevYearMonth)
  ret.setDate(maxDateInPrevYearMonth);
 ret.setFullYear(ret.getFullYear() + offset);
 return ret;
};
ASPxClientCalendar.GetPrevMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInPrevMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth() - 1, ret.getFullYear());
 if(ret.getDate() > maxDateInPrevMonth)
  ret.setDate(maxDateInPrevMonth);
 ret.setMonth(ret.getMonth() - 1);
 return ret;
};
ASPxClientCalendar.GetPrevYearDate = function(date) {
 return ASPxClientCalendar.GetDateWithYearOffset(date, -1);
};
ASPxClientCalendar.GetFirstDayInMonthDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(1);
 return ret;
};
ASPxClientCalendar.GetLastDayInMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear());
 ret.setDate(maxDateInYearMonth);
 return ret;
};
ASPxClientCalendar.AddDays = function(startDate, dayCount) {
 var date = ASPxClientCalendar.CloneDate(startDate);
 var dayDiff = 0;
 var hourInc = 3600000;
 if(dayCount < 0)
  hourInc = -1 * hourInc;
 dayCount = Math.abs(dayCount);
 while(true) {
  if(dayDiff == dayCount && startDate.getHours() == date.getHours())
   return date;
  if(dayDiff > dayCount) {
   date.setTime(-1 * hourInc + date.getTime());
   return date;
  }
  var day = date.getDate();
  date.setTime(hourInc + date.getTime());
  if(day != date.getDate())
   dayDiff++;
 }
 return date;
};
ASPxClientCalendar.AddMonths = function(date, count) {
 var newDate = ASPxClientCalendar.CloneDate(date);
 newDate.setMonth(count + newDate.getMonth());
 ASPx.DateUtils.FixTimezoneGap(date, newDate);
 if(newDate.getDate() < date.getDate())
  newDate = ASPxClientCalendar.AddDays(newDate, -newDate.getDate()); 
 return newDate;
};
ASPxClientCalendar.AddYears = function(date, count) {
 var newDate = ASPxClientCalendar.CloneDate(date);
 newDate.setFullYear(count + newDate.getFullYear());
 ASPx.DateUtils.FixTimezoneGap(date, newDate);
 return newDate;
};
ASPxClientCalendar.GetNextDate = function(date, viewType) {
 return ASPxClientCalendar.GetDateByOffset(date, 1, viewType);
};
ASPxClientCalendar.GetDateByOffset = function(date, offset, viewType) {
 if(viewType == ASPx.DatePickerType.Days)
  return ASPxClientCalendar.AddDays(date, offset);
 if(viewType == ASPx.DatePickerType.Months)
  return ASPxClientCalendar.AddMonths(date, offset);
 if(viewType == ASPx.DatePickerType.Years)
  return ASPxClientCalendar.AddYears(date, offset);
 if(viewType == ASPx.DatePickerType.Decades)
  return ASPxClientCalendar.AddYears(date, offset * 10);
};
ASPxClientCalendar.CloneDate = function(date) {
 var cloned = new Date();
 cloned.setTime(date.getTime());
 return cloned;
};
ASPxClientCalendar.GetDecadeStartYear = function(year) {
 return ASPx.DateUtils.GetDecadeStartYear(year);
};
ASPxClientCalendar.GetCenturyStartYear = function(year) {
 return ASPx.DateUtils.GetCenturyStartYear(year);
};
ASPxClientCalendar.GetDaysInRange = function(start, end) {
 return 1 + (ASPxClientCalendar.GetUTCTime(end) - ASPxClientCalendar.GetUTCTime(start)) / ASPx.calendarMsPerDay;
};
ASPxClientCalendar.GetDaysInMonth = function(month, year) {
 var d = new Date(year, month + 1, 0);
 return d.getDate();
};
ASPxClientCalendar.GetOffsetInMonths = function(start, end) {
 return end.getMonth() - start.getMonth() + 12 * (end.getFullYear() - start.getFullYear());
};
ASPxClientCalendar.GetOffsetInYears = function(start, end) {
 return end.getFullYear() - start.getFullYear();
};
ASPxClientCalendar.GetOffsetInDecades = function(start, end) {
 return (ASPxClientCalendar.GetDecadeStartYear(end.getFullYear()) - ASPxClientCalendar.GetDecadeStartYear(start.getFullYear())) / 10;
};
ASPxClientCalendar.GetOffsetInCenturies = function(start, end) {
 return (ASPxClientCalendar.GetCenturyStartYear(end.getFullYear()) - ASPxClientCalendar.GetCenturyStartYear(start.getFullYear())) / 100;
};
ASPxClientCalendar.GetOffsetInPeriods = function(start, end, viewType) {
 if(viewType == ASPx.DatePickerType.Days)
  return ASPxClientCalendar.GetOffsetInMonths(start, end);
 if(viewType == ASPx.DatePickerType.Months)
  return ASPxClientCalendar.GetOffsetInYears(start, end);
 if(viewType == ASPx.DatePickerType.Years)
  return ASPxClientCalendar.GetOffsetInDecades(start, end);
 if(viewType == ASPx.DatePickerType.Decades)
  return ASPxClientCalendar.GetOffsetInCenturies(start, end);
};
ASPxClientCalendar.GetPeriodsInRange = function(start, end, pickerType) {
 if(pickerType == ASPx.DatePickerType.Days)
  return ASPxClientCalendar.GetDaysInRange(start, end);
 if(pickerType == ASPx.DatePickerType.Months)
  return ASPxClientCalendar.GetOffsetInMonths(start, end) + 1;
 if(pickerType == ASPx.DatePickerType.Years)
  return ASPxClientCalendar.GetOffsetInYears(start, end) + 1;
 if(pickerType == ASPx.DatePickerType.Decades)
  return ASPxClientCalendar.GetOffsetInDecades(start, end) + 1;
};
ASPxClientCalendar.GetCorrectedDate = function(date, viewType) {
 return ASPx.DateUtils.CorrectDateByPickerType(date, viewType);
};
var ASPxClientCalendarDateDisabledHelper = {
 MinDate: new Date(100, 0, 1, 0, 0, 0, 0),
 MaxDate: new Date(9999, 11, 31, 23, 59, 59, 999),
 GetUpperLimitDate: function() {
  return this.MaxDate;
 },
 GetLowerLimitDate: function() {
  return this.MinDate;
 },
 IsDateWithinBoundaries: function(date) {
  return date >= this.GetLowerLimitDate() && date <= this.GetUpperLimitDate();
 },
 GetCorrectedDate: function(date) {
  if(!date)
   return null;
  if(this.IsDateWithinBoundaries(date))
   return date;
  else
   return date > this.GetUpperLimitDate() ? this.GetUpperLimitDate() : this.GetLowerLimitDate();
 },
 IsDateInRange: function(sharedParameters, date) {
  return date == null ||
   ((sharedParameters.minDate == null || this.IsDateFitToMinDate(sharedParameters, date)) &&
    (sharedParameters.maxDate == null || this.IsDateFitToMaxDate(sharedParameters, date)) &&
    this.IsDateWithinBoundaries(date));
 },
 IsDateFitToMinDate: function(sharedParameters, date) {
  var minDate = sharedParameters.minDate;
  return date >= new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate());
 },
 IsDateFitToMaxDate: function(sharedParameters, date) {
  var maxDate = sharedParameters.maxDate;
  return date <= new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 23, 59, 59, 999);
 },
 IsDateDisabled: function(sharedParameters, date, OnCustomDisabledDate, viewType, pickerType) {
  if(viewType !== pickerType)
   return false;
  if(date != null) {
   var length = sharedParameters.disabledDates.length;
   var correctedDate = ASPxClientCalendar.CloneDate(date);
   if(length > 0 && date != null) {
    correctedDate = ASPxClientCalendar.GetCorrectedDate(date, pickerType);
    for(var i = 0; i < length; i++) {
     var disabledDate = sharedParameters.disabledDates[i];
     if(disabledDate.getDate() == correctedDate.getDate() &&
      disabledDate.getMonth() == correctedDate.getMonth() &&
      disabledDate.getFullYear() == correctedDate.getFullYear())
      return true;
    }
   }
   if(OnCustomDisabledDate(correctedDate).isDisabled)
    return true;
  }
  return false;
 }
};
var ASPxClientCalendarSelection = ASPx.CreateClass(null, {
 constructor: function() {
  this.dates = { };
  this.count = 0;
  this.pickerType = ASPx.DatePickerType.Days;
 },
 SetPickerType: function(pickerType) {
  this.pickerType = pickerType;
 },
 Assign: function(source) {
  this.Clear();
  for(var key in source.dates) {
   if(source.dates.hasOwnProperty(key)) {
    var item = source.dates[key];
    if(item.constructor != Date) continue;
    this.Add(item);
   }
  }
 },
 Clear: function() {
  if(this.count > 0) {
   this.dates = { };
   this.count = 0;
  }
 },
 Equals: function(selection) {
  if(this.count != selection.count)
   return false;
  for(var key in this.dates) {
   if(this.dates.hasOwnProperty(key)) {
    if(this.dates[key].constructor != Date) continue;
    if(!selection.ContainsKey(key))
     return false;
   }
  }
  return true;
 },
 Contains: function(date) {
  var key = this.GetKey(this.GetCorrectedDate(date));
  return this.ContainsKey(key);
 },
 ContainsKey: function(key) {
  return !!this.dates[key];
 },
 GetCorrectedDate: function(date) {
  return ASPxClientCalendar.GetCorrectedDate(date, this.pickerType);
 },
 GetCorrectedYear: function(date) {
  var year = date.getFullYear();
  return this.pickerType != ASPx.DatePickerType.Decades ? year : ASPxClientCalendar.GetDecadeStartYear(year);
 },
 GetCorrectedMonth: function(date) {
  return this.pickerType < ASPx.DatePickerType.Years ? date.getMonth() : 0;
 },
 GetCorrectedDay: function(date) {
  return this.pickerType == ASPx.DatePickerType.Days ? date.getDate() : 1;
 },
 Add: function(date) {
  var correctedDate = this.GetCorrectedDate(date);
  var key = this.GetKey(correctedDate);
  if(!this.ContainsKey(key)) {
   this.dates[key] = ASPxClientCalendar.CloneDate(correctedDate);
   this.count++;
  }
 },
 AddArray: function(dates) {
  for(var i = 0; i < dates.length; i++)
   this.Add(dates[i]);
 },
 AddRange: function(start, end) {
  var correctedStart = this.GetCorrectedDate(start);
  var correctedEnd = this.GetCorrectedDate(end);
  if(correctedEnd < correctedStart) {
   this.AddRange(correctedEnd, correctedStart);
   return;
  }
  var date = ASPxClientCalendar.CloneDate(correctedStart);
  while(date <= correctedEnd) {
   this.Add(date);
   date = ASPxClientCalendar.GetNextDate(date, this.pickerType);
  }
 },
 AddWeek: function(startDate) {
  this.AddRange(startDate, ASPxClientCalendar.AddDays(startDate, 6));
 },
 SetRestrictions: function(start, end) {
  this.startDate = this.GetCorrectedDate(ASPxClientCalendar.CloneDate(start));
  this.endDate = this.GetCorrectedDate(ASPxClientCalendar.CloneDate(end));
 },
 ResetRestrictions: function() {
  this.startDate = null;
  this.endDate = null;
 },
 Remove: function(date) {
  var correctedDate = this.GetCorrectedDate(date);
  var key = this.GetKey(correctedDate);
  if(this.ContainsKey(key)) {
   delete this.dates[key];
   this.count--;
  }
 },
 RemoveArray: function(dates) {
  for(var i = 0; i < dates.length; i++)
   this.Remove(dates[i]);
 },
 RemoveRange: function(start, end) {
  var correctedStart = this.GetCorrectedDate(start);
  var correctedEnd = this.GetCorrectedDate(end);
  if(correctedEnd < correctedStart) {
   this.RemoveRange(correctedEnd, correctedStart);
   return;
  }
  var date = ASPxClientCalendar.CloneDate(correctedStart);
  while(date <= correctedEnd) {
   this.Remove(date);
   date = ASPxClientCalendar.GetNextDate(date, this.pickerType);
  }
 },
 RemoveWeek: function(startDate) {
  this.RemoveRange(startDate, ASPxClientCalendar.AddDays(startDate, 6));
 },
 GetDates: function() {
  var result = [ ];
  for(var key in this.dates) {
   if(this.dates.hasOwnProperty(key)) {
    var item = this.dates[key];
    if(item.constructor != Date) continue;
    result.push(ASPxClientCalendar.CloneDate(item));
   }
  }
  return result;  
 },
 GetFirstDate: function() {
  if(this.count == 0)
   return null;
  for(var key in this.dates) {
   if(this.dates.hasOwnProperty(key)) {
    var item = this.dates[key];
    if(item.constructor != Date) continue;
    return ASPxClientCalendar.CloneDate(item);
   }
  }
  return null;
 },
 GetKey: function(date) {  
  return ASPx.DateUtils.GetInvariantDateString(date);
 }
});
var ASPxClientCalendarSelectionTransaction = ASPx.CreateClass(null, {
 constructor: function(calendar) {
  this.calendar = calendar;
  this.isActive = false;
  this.backup = new ASPxClientCalendarSelection();
  this.selection = new ASPxClientCalendarSelection();
  this.backup.SetPickerType(calendar.pickerType);
  this.selection.SetPickerType(calendar.pickerType);
 },
 Start: function() {
  if(this.isActive)
   this.Rollback();
  this.backup.Assign(this.calendar.selection);
  this.selection.Clear();
  this.isActive = true;
  ASPx.activeCalendar = this.calendar;
 },
 Commit: function() {  
  this.calendar.ApplySelectionByDiff(this.selection, true);
  this.Reset();
 },
 Rollback: function() {
  this.calendar.ApplySelectionByDiff(this.backup);  
  this.Reset();
 },
 Reset: function() {
  this.backup.Clear();
  this.selection.Clear();
  this.isActive = false;
  ASPx.activeCalendar = null;
 },
 CopyFromBackup: function() {
  this.selection.Assign(this.backup);
 },
 IsChanged: function() {
  return !this.backup.Equals(this.selection);
 }
});
var ASPxClientCalendarView = ASPx.CreateClass(null, {
 constructor: function(calendar, row, column) {
  this.row = row;
  this.column = column;
  this.calendar = calendar;
  this.isASPxClientCalendarView = true;
  var temp = column + row;
  this.isLowBoundary = temp == 0;
  this.isHighBoundary = temp == calendar.rows + calendar.columns - 2;
  this.isLastViewInFirstRow = row == 0 && column == calendar.columns - 1;
  this.visibleDate = null;
  this.startDate = null;
  this.dayFunctions = {};
  this.dayStyleCache = {};
  this.dayCellCache = {};
  this.navButtonFunctions = {};
  this.titleFunction = null;
  this.isNavigationView = this.GetViewType() > this.calendar.pickerType;
  this.isFirstNavigationView = this.GetViewType() === ASPx.DatePickerType.Months;
  this.isLastNavigationView = this.GetViewType() === this.calendar.maxViewType;
 },
 Initialize: function() {
  if(!this.isNavigationView || this.isFirstNavigationView) {
   this.UpdateDate();
   this.AddHoverStateItems();
   if(!this.isNavigationView) {
    this.UpdateTitle();
    this.EnsureSelection();
    this.MakeDisabledStateItems();
   }
  }
 },
 GetDateFunctionsHash: function(selectWeeks) {
  return this.dayFunctions;
 },
 GetViewCell: function() {
  return this.calendar.GetViewCell(this.calendar.IsMultiView() ? this.GetIDPostfix() : "");
 },
 GetIndex: function() {
  return this.row * this.calendar.columns + this.column;
 },
 GetTitleCell: function() {
  return this.GetChildElement("TC");
 },
 GetTitleElement: function() {
  return this.GetChildElement("T") || this.GetTitleCell();
 },
 EnsureVisible: function(visible) {
  if(this.calendar.switchToSingleMonthAtWindowInnerWidth <= 0) return;
  var cell = this.GetViewCell();
  ASPx.ToggleClassNameToElement(cell, "view-visible", visible);
 },
 AttachCancelSelect: function(method, element) {
  method(element, "mouseup", aspxCalCancelSelect);
 },
 IsValidIndex: function(index) {
  return index >= 0 && index <= this.GetMaxIndex();
 },
 GetIDPostfix: function() {
  return "_" + this.row.toString() + "x" + this.column.toString();
 },
 GetChildElement: function(postfix) {
  if(this.calendar.IsMultiView())
   postfix += this.GetIDPostfix();
  return this.calendar.GetChildElement(postfix);
 },
 AttachDayMouseEvents: function(method, cell, handler) {
  var types = ["down", "up", "over", "out"];
  for(var i = 0; i < types.length; i++)
   method(cell, "mouse" + types[i], handler);
 },
 GetDayMouseEventFunction: function(index, selectWeeks) {
  var hash = this.GetDateFunctionsHash(selectWeeks);
  if(!hash[index])
   hash[index] = ASPxClientCalendar.AnonymousHandlers.DayMouseEvent(this.calendar.name, this.row, this.column, index, selectWeeks);
  return hash[index];
 },
 GetNavButtonFunction: function(buttonID, offset, isVisibleInAdaptiveOnly) {
  if(!this.navButtonFunctions[buttonID])
   this.navButtonFunctions[buttonID] = ASPxClientCalendar.AnonymousHandlers.NavigationButtonClick(this.calendar.name, offset, isVisibleInAdaptiveOnly);
  return this.navButtonFunctions[buttonID];
 },
 GetTitleFunction: function() {
  if(!this.titleFunction)
   this.titleFunction = ASPxClientCalendar.AnonymousHandlers.TitleClick(this.calendar.name, this.row, this.column);
  return this.titleFunction;
 },
 UpdateDate: function() {
  this.visibleDate = this.GetCurrentVisibleDate();
  var date = ASPxClientCalendar.CloneDate(this.visibleDate);
  date.setDate(1);
  this.UpdateNavigationCells(date);
  this.startDate = this.GetCurrentStartDate(date);
 },
 UpdateTitle: function() {
  var el = this.GetTitleElement();
  if(!el) return;
  el.innerHTML = this.GetTitleText();
  el.style.cursor = this.isLastNavigationView && !this.calendar.showFastPopup ? "default" : ASPx.GetPointerCursor();
 },
 GetActualTodayDate: function() {
  if(!this.calendar || !this.calendar.actualTodayDate)
   return ASPxClientCalendar.GetCorrectedDate(new Date(), this.GetViewType());
  return this.calendar.actualTodayDate;
 },
 IsDateVisible: function(date) {
  var result = !this.calendar.IsMultiView() || !this.IsDateOtherPeriod(date);
  if(!result) {
   result = result || this.isLowBoundary && date <= this.visibleDate ||
    this.isHighBoundary && date >= this.visibleDate;
  }
  return result;
 },
 GetDayCell: function(index) {
  if(ASPx.IsExistsElement(this.dayCellCache[index]))
   return this.dayCellCache[index];
  var dateContainer = this.GetDateCellContainer();
  var colIndex = this.GetDateCellColIndex(index);
  var rowIndex = this.GetDateCellRowIndex(index);
  var cell = dateContainer.rows[rowIndex].cells[colIndex];
  this.dayCellCache[index] = cell;
  return cell;
 },
 GetDayCellIndex: function(cell) {
  var currentDate = ASPxClientCalendar.CloneDate(this.startDate);
  var maxIndex = this.GetMaxIndex();
  var currentIndex = 0;
  do {
   currentIndex = this.GetIndexByDate(currentDate);
   if(this.GetDayCell(currentIndex) === cell)
    return currentIndex;
   currentDate = this.GetNextDate(currentDate);
  }
  while(currentIndex < maxIndex);
  return null;
 },
 ChangeTitleElementEnabledAttributes: function(element, method) {
  method(element, "cursor");
 },
 RemoveDayCellStyle: function(cell, suffix) {
  var info = new ASPxClientCalendarStyleInfo();
  this.calendar.ImportEtalonStyle(info, suffix);
  info.Remove(cell);
 },
 ApplySelectionToCell: function(index, showSelection, applyDateInRangeStyle) {
  var cell = this.GetDayCell(index);
  var info;
  if(showSelection) {
   if(this.GetStateController())
    this.GetStateController().DoClearHoverState(cell);
   if(!this.dayStyleCache[index]) {
    var backup = new ASPxClientCalendarStyleInfo();
    backup.Import(cell);
    this.dayStyleCache[index] = backup;
    info = backup.Clone();
   } else
    info = this.dayStyleCache[index].Clone();
   if(!applyDateInRangeStyle || this.calendar.NeedApplySelectionToDayInRange())
    this.calendar.ImportEtalonStyle(info, this.GetCellSelectedStyleName());
  } else
   info = this.dayStyleCache[index];
  info.Apply(cell);
  if(applyDateInRangeStyle) {
   if(showSelection)
    ASPx.AddClassNameToElement(cell, this.calendar.GetDayInRangeClassName());
   else
    ASPx.RemoveClassNameFromElement(cell, this.calendar.GetDayInRangeClassName());
  }
 },
 UpdateSelection: function(dates, showSelection, totalSelectionEdges) {
  if(ASPx.Ident.IsArray(dates))
   for(var i = 0; i < dates.length; i++)
    this.UpdateDateSelection(dates[i], showSelection, totalSelectionEdges);
  else
   this.UpdateDateSelection(dates, showSelection, totalSelectionEdges);
 },
 UpdateDateSelection: function(date, showSelection, totalSelectionEdges) {
  var index = this.GetIndexByDate(date);
  if(!this.IsValidIndex(index) || !this.IsDateVisible(date))
   return;
  var applyDateInRangeStyle = totalSelectionEdges
   && !ASPxClientCalendar.IsFirstDateEqualToAnyOther(date, totalSelectionEdges.start, totalSelectionEdges.end);
  this.ApplySelectionToCell(index, showSelection, applyDateInRangeStyle);
 },
 EnsureSelection: function() {
  var selection = this.calendar.selection;
  var selectedRangeRestrictions = null;
  if(!this.isNavigationView) {
   selectedRangeRestrictions = this.calendar.sharedParameters.dateRangeMode ? ASPx.Data.ArrayGetIntegerEdgeValues(selection.GetDates()) : null;
   if(this.calendar.NeedCalculateSelectionOnUpdating()) {
    selectedRangeRestrictions.start = ASPxClientCalendar.CloneDate(selection.startDate);
    selectedRangeRestrictions.end = ASPxClientCalendar.CloneDate(selection.endDate);
    var visibleRangeRestrictions = this.GetVisibleRangeRestrictions();
    ASPxClientCalendar.AddSelectedRangeVisiblePartToSelection(selection, selectedRangeRestrictions, visibleRangeRestrictions);
   }
  }
  var selectedDates = !this.isNavigationView ? selection.GetDates() : this.calendar.selectedNavigationDates[this.GetViewType()];
  this.UpdateSelection(selectedDates, true, selectedRangeRestrictions);
 },
 Update: function() {
  this.dayStyleCache = {};
  this.UpdateDate();
  this.UpdateDateCellHtml();
  this.UpdateTitle();
  this.EnsureSelection();
 },
 GetVisibleRangeRestrictions: function() {
  return {
   start: this.GetDateByIndex(0),
   end: this.GetDateByIndex(this.GetMaxIndex())
  };
 },
 GetMaxVisibleDate: function() {
  return this.GetVisibleRangeRestrictions().end;
 },
 ChangeButtonEnabledAttributes: function(element, method) {
  method(element, "onclick");
  method(element, "ondblclick");
 },
 AddHeaderDisabledStateItem: function(element) {
  var cell = this.calendar.GetEtalonStyleCell("DD");
  if(cell)
   ASPx.GetStateController().AddDisabledItem(element.id, cell.className, cell.style.cssText, null, null, null);
 },
 ApplyDayCellStyle: function(cell, date) {
  cell.style.cursor = "";
  var cal = this.calendar;
  var info = new ASPxClientCalendarStyleInfo();
  var needPointer = false;
  var readOnly = cal.GetReadOnly();
  cal.ImportEtalonStyle(info, this.GetCellStyleName());
  var isDateDisabled = false;
  if(this.IsDateVisible(date)) {
   var isCurrentMonthDate = !this.IsDateOtherPeriod(date);
   if(cal.IsDateWeekend(date) && cal.CanApplyDayCellStyle("DW", isCurrentMonthDate) && this.SupportsWeekendStyle())
    cal.ImportEtalonStyle(info, "DW");
   if(!isCurrentMonthDate)
    cal.ImportEtalonStyle(info, this.GetCellOtherPeriodStyleName());
   if(!ASPxClientCalendarDateDisabledHelper.IsDateInRange(cal.sharedParameters, date)
    && cal.CanApplyDayCellStyle(this.GetCellOutOfRangeStyleName(), isCurrentMonthDate) && !this.isNavigationView)
    cal.ImportEtalonStyle(info, this.GetCellOutOfRangeStyleName());
   if(cal.IsDateDisabled(date) && cal.CanApplyDayCellStyle(this.GetCellDisabledStyleName(), isCurrentMonthDate) && !this.isNavigationView) {
    cal.ImportEtalonStyle(info, this.GetCellDisabledStyleName());
    isDateDisabled = true;
   }
   if(ASPxClientCalendar.AreDatesEqual(this.GetActualTodayDate(), date) && cal.CanApplyDayCellStyle("DT", isCurrentMonthDate) && !this.isNavigationView)
    cal.ImportEtalonStyle(info, "DT");
   if(!cal.clientEnabled && cal.CanApplyDayCellStyle("DD", isCurrentMonthDate) && !this.isNavigationView)
    cal.ImportEtalonStyle(info, "DD");
   else if(!cal.enableMulti && !isDateDisabled && !readOnly || this.isNavigationView)
    needPointer = true;
  } else
   info.AddClassName(emptyDateCellClassName);
  info.Apply(cell);
  if(needPointer && cal.needToSetCursor)
   ASPx.SetPointerCursor(cell);
 },
 EnsureTodayStyle: function() {
  var serverCurrentDateIndex = this.GetIndexByDate(this.calendar.serverCurrentDate);
  var clientCurrentDateIndex = this.GetIndexByDate(new Date());
  if(this.IsValidIndex(serverCurrentDateIndex))
   this.RemoveDayCellStyle(this.GetDayCell(serverCurrentDateIndex), "DT");
  if(this.IsValidIndex(clientCurrentDateIndex))
   this.ApplyDayCellStyle(this.GetDayCell(clientCurrentDateIndex), new Date());
  this.dayStyleCache[serverCurrentDateIndex] = null;
  this.dayStyleCache[clientCurrentDateIndex] = null;
  this.EnsureSelection();
 },
 GetHeaderCellElements: function() {
  var result = [
   this.GetTitleCell(),
   this.GetTitleElement()
  ];
  var navigationCells = this.GetNavigationCells();
  for(var i = 0; i < navigationCells.length; i++)
   if(navigationCells[i])
    result.push(navigationCells[i]);
  return result;
 },
 SetHeaderCellsEnabled: function(enabled) {
  var headerCellElements = this.GetHeaderCellElements();
  for(var i = 0; i < headerCellElements.length; i++)
   if(headerCellElements[i])
    ASPx.GetStateController().SetElementEnabled(headerCellElements[i], enabled);
 },
 MakeDisabledStateItems: function() {
  if(this.isNavigationView)
   return;
  var element = this.GetTitleCell();
  if(element)
   this.AddHeaderDisabledStateItem(element);
  var element = this.GetTitleElement();
  if(element)
   this.AddHeaderDisabledStateItem(element);
 },
 ChangeEnabledStateItems: function(enabled) {
  this.SetHeaderCellsEnabled(enabled);
  if(enabled)
   this.AddHoverStateItems();
  else
   this.RemoveHoverStateItems();
 },
 ChangeEnabledAttributes: function(enabled) {
  var element = this.GetTitleElement();
  if(element)
   this.ChangeTitleElementEnabledAttributes(element, ASPx.Attr.ChangeStyleAttributesMethod(enabled));
 },
 ChangeEditableAttributesOnChangeEnabledState: function(enabled) {
  if(!this.calendar.enabled)
   return;
  var eventMethod = ASPx.Attr.ChangeEventsMethod(enabled);
  if(!this.isNavigationView)
   this.AttachTitleMouseEvents(eventMethod);
  if(!this.isNavigationView || this.isFirstNavigationView) {
   this.AttachNavigationMouseEvents(eventMethod);
   if(this.AllowAttachDetachDateEventsOnChangeEnabled())
    this.AttachDateMouseEvents(eventMethod, ASPx.Attr.InitiallyChangeStyleAttributesMethod(enabled));
  }
 },
 ChangeEditableAttributesOnChangeReadOnlyState: function(readOnly) {
  if(!this.calendar.enabled)
   return;
  if(this.AllowAttachDetachDateEventsOnChangeReadOnly()) {
   var eventMethod = ASPx.Attr.ChangeEventsMethod(!readOnly);
   this.AttachDateMouseEvents(eventMethod, ASPx.Attr.InitiallyChangeStyleAttributesMethod(!readOnly));
  }
 },
 GetNextDate: function(date) {
  return ASPxClientCalendar.GetNextDate(date, this.GetViewType());
 },
 AttachTitleMouseEvents: function(eventMethod) {
  var title = this.GetTitleElement();
  if(title)
   eventMethod(title, "click", this.GetTitleFunction());
 },
 AttachNavigationMouseEvents: function(eventMethod) {
  var navigationCells = this.GetNavigationCells();
  for(var i = 0; i < navigationCells.length; i++)
   if(this.NeedToAttachNavigationEvent(navigationCells[i])) {
    var navigationCellImage = this.GetNavigationCellImage(navigationCells[i]);
    var offset = this.GetNavigationCellOffset(navigationCells[i]);
    var isVisibleInAdaptiveOnly = this.IsVisibleInAdaptiveModeNavigationCell(navigationCells[i]);
    this.AttachNavigationImageEvent(navigationCellImage || navigationCells[i], eventMethod, offset, isVisibleInAdaptiveOnly);
   }
 },
 NeedToAttachNavigationEvent: function(navigationCell) {
  if(!ASPx.IsExists(navigationCell))
   return false;
  return this.IsDefaultVisibleNavigationCell(navigationCell) || this.IsVisibleInAdaptiveModeNavigationCell(navigationCell);
 },
 IsDefaultVisibleNavigationCell: function(navigationCell) {
  return this.IsPrevNavCell(navigationCell) && this.isLowBoundary
   || this.IsNextNavCell(navigationCell) && this.isLastViewInFirstRow;
 },
 IsVisibleInAdaptiveModeNavigationCell: function(navigationCell) {
  return this.calendar.IsMultiView()
   && (this.IsNextNavCell(navigationCell) && this.isLowBoundary && !this.isLastViewInFirstRow
   || this.IsPrevNavCell(navigationCell) && this.isLastViewInFirstRow && !this.isLowBoundary);
 },
 GetNavigationCellImage: function(navigationCell) {
  return ASPx.GetChildByTagName(navigationCell, "IMG");
 },
 AttachNavigationImageEvent: function(navigationCellImage, eventMethod, offset, isVisibleInAdaptiveOnly) {
  eventMethod(navigationCellImage, "click", this.GetNavButtonFunction(navigationCellImage.id, offset, isVisibleInAdaptiveOnly));
 },
 GetDateCells: function() {
  if(!this.dateCells)
   this.dateCells = this.GetMainElement().querySelectorAll(this.GetDateCellSelector());
  return this.dateCells;
 },
 GetStateController: function() {
  return typeof (ASPx.GetStateController) != "undefined" ? ASPx.GetStateController() : null;
 },
 AddHoverStateItems: function() {
  var stateController = this.GetStateController();
  if(!stateController)
   return;
  var hoverStyleInfo = new ASPxClientCalendarStyleInfo();
  this.calendar.ImportEtalonStyle(hoverStyleInfo, this.GetCellHoverStyleName());
  var dateCells = this.GetDateCells();
  for(var i = 0; i < dateCells.length; i++) {
   var cell = dateCells[i];
   if(!cell.id)
    cell.id = this.GetDateCellID(i);
   stateController.ClearCache(cell, ASPx.HoverItemKind);
   stateController.AddHoverItem(cell.id, [hoverStyleInfo.className], [hoverStyleInfo.cssText], null, null, null);
  }
 },
 RemoveHoverStateItems: function() {
  var stateController = this.GetStateController();
  if(!stateController)
   return;
  var dateCells = this.GetDateCells();
  for(var i = 0; i < dateCells.length; i++) {
   var cell = dateCells[i];
   if(!cell.id)
    cell.id = this.GetDateCellID(i);
   stateController.RemoveHoverItem(cell.id);
   stateController.ClearCache(cell, ASPx.HoverItemKind);
  }
 },
 GetDateCellID: function(cellIndex) { return this.GetMainElement().id + "_" + cellIndex; },
 GetNavigationCells: function() { throw "Not Implemented"; },
 GetNavigationCellOffset: function(navigationCell) { throw "Not Implemented"; },
 GetTitleText: function() { throw "Not Implemented"; },
 IsDateOtherPeriod: function(date) { throw "Not Implemented"; },
 GetCurrentVisibleDate: function() { throw "Not Implemented"; },
 GetCurrentStartDate: function() { throw "Not Implemented"; },
 UpdateNavigationCells: function(date) { throw "Not Implemented"; },
 GetDateByIndex: function(index) { throw "Not Implemented"; },
 GetIndexByDate: function(date) { throw "Not Implemented"; },
 GetDateCellContainer: function() { throw "Not Implemented"; },
 GetMainElement: function() { throw "Not Implemented"; },
 GetAnimatedElement: function() { throw "Not Implemented"; },
 GetDateCellColIndex: function(index) { throw "Not Implemented"; },
 GetDateCellRowIndex: function(index) { throw "Not Implemented"; },
 UpdateDateCellHtml: function(date) { throw "Not Implemented"; },
 SupportsWeekendStyle: function(date) { throw "Not Implemented"; },
 AttachDateMouseEvents: function(eventMethod, styleMethod) { throw "Not Implemented"; },
 GetVisibleDateOffsetInfo: function() { throw "Not Implemented"; },
 GetViewType: function() { throw "Not Implemented"; },
 AllowAttachDetachDateEventsOnChangeEnabled: function() { throw "Not Implemented"; },
 AllowAttachDetachDateEventsOnChangeReadOnly: function() { throw "Not Implemented"; },
 IsPrevNavCell: function(navigationCell) { throw "Not Implemented"; },
 IsNextNavCell: function(navigationCell) { throw "Not Implemented"; },
 GetCellStyleName: function() { throw "Not Implemented"; },
 GetCellSelectedStyleName: function() { throw "Not Implemented"; },
 GetCellHoverStyleName: function() { throw "Not Implemented"; },
 GetCellOtherPeriodStyleName: function() { throw "Not Implemented"; },
 GetCellOutOfRangeStyleName: function() { throw "Not Implemented"; },
 GetCellDisabledStyleName: function() { throw "Not Implemented"; },
 GetDateCellSelector: function() { throw "Not Implemented"; },
});
var ASPxClientCalendarDaysView = ASPx.CreateClass(ASPxClientCalendarView, {
 constructor: function(calendar, row, column) {
  this.constructor.prototype.constructor.call(this, calendar, row, column);
  this.dayFunctionsWithWeekSelection = {};
 },
 AttachDateMouseEvents: function(eventMethod, styleMethod) {
  var index;
  var cell;
  if(this.calendar.showDayHeaders) {
   var headCells = this.GetMonthTable().rows[0].cells;
   var dayNameIndex = 0;
   if(this.calendar.showWeekNumbers) {
    dayNameIndex++;
    cell = headCells[0];
    if(this.calendar.enableMulti) {
     eventMethod(cell, "click", ASPxClientCalendar.AnonymousHandlers.SelectMonth(this.calendar.name, this.row, this.column));
     if(this.calendar.needToSetCursor)
      styleMethod(cell, "cursor", ASPx.GetPointerCursor());
    }
    this.AttachCancelSelect(eventMethod, cell);
   }
   for(var j = 0; j < 7; j++)
    this.AttachCancelSelect(eventMethod, headCells[dayNameIndex++]);
  }
  for(var i = 0; i < calendarWeekCount; i++) {
   if(this.calendar.showWeekNumbers) {
    cell = this.GetWeekNumberCell(i);
    if(this.calendar.enableMulti)
     this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(7 * i, true));
    else
     this.AttachCancelSelect(eventMethod, cell);
   }
   var date;
   for(var j = 0; j < 7; j++) {
    index = i * 7 + j;
    cell = this.GetDayCell(index);
    date = this.GetDateByIndex(index);
    var cal = this.calendar;
    if(!this.calendar.enableMulti && this.IsDateVisible(date) &&
     ASPxClientCalendarDateDisabledHelper.IsDateInRange(cal.sharedParameters, date) &&
     !cal.IsDateDisabled(date)) {
     if(this.calendar.needToSetCursor && (!cell.style.cursor || cell.style.cursor == ASPx.GetPointerCursor()))
      styleMethod(cell, "cursor", ASPx.GetPointerCursor());
    }
    this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(index, false));
   }
  }
 },
 GetDateFunctionsHash: function(selectWeeks) {
  return selectWeeks ? this.dayFunctionsWithWeekSelection : this.dayFunctions;
 },
 UpdateNavigationCells: function(date) {
  var prevYearCell = this.GetPrevYearCell();
  var prevMonthCell = this.GetPrevMonthCell();
  var isEnabledDate = date.getFullYear() > 100;
  if(prevYearCell && ASPx.GetElementVisibility(prevYearCell) != isEnabledDate) {
   ASPx.SetElementVisibility(prevYearCell, isEnabledDate);
  }
  if(prevMonthCell) {
   var isEnabledDate = isEnabledDate || (date.getFullYear() == 100 && date.getMonth() > 0);
   if(ASPx.GetElementVisibility(prevMonthCell) != isEnabledDate)
    ASPx.SetElementVisibility(prevMonthCell, isEnabledDate);
  }
  var nextYearCell = this.GetNextYearCell();
  var nextMonthCell = this.GetNextMonthCell();
  isEnabledDate = date.getFullYear() < 9999;
  if(nextYearCell && ASPx.GetElementVisibility(nextYearCell) != isEnabledDate) {
   ASPx.SetElementVisibility(nextYearCell, isEnabledDate);
  }
  if(nextMonthCell) {
   var isEnabledDate = isEnabledDate || (date.getFullYear() == 9999 && date.getMonth() < 11);
   if(ASPx.GetElementVisibility(nextMonthCell) != isEnabledDate)
    ASPx.SetElementVisibility(nextMonthCell, isEnabledDate);
  }
 },
 IsPrevNavCell: function(navigationCell) {
  return navigationCell == this.GetPrevMonthCell() || navigationCell == this.GetPrevYearCell();
 },
 IsNextNavCell: function(navigationCell) {
  return navigationCell == this.GetNextMonthCell() || navigationCell == this.GetNextYearCell();
 },
 GetNavigationCellOffset: function(navigationCell) {
  if(navigationCell == this.GetPrevYearCell())
   return -12;
  if(navigationCell == this.GetPrevMonthCell())
   return -1;
  if(navigationCell == this.GetNextMonthCell())
   return 1;
  if(navigationCell == this.GetNextYearCell())
   return 12;
  return 0;
 },
 GetCurrentVisibleDate: function() {
  return ASPxClientCalendar.AddMonths(this.calendar.visibleDates[this.GetViewType()], this.GetIndex());
 },
 GetCurrentStartDate: function(visibleDate) {
  var offset = visibleDate.getDay() - this.calendar.firstDayOfWeek;
  if(offset < 0)
   offset += 7;
  return ASPxClientCalendar.AddDays(visibleDate, -offset);
 },
 GetDateByIndex: function(index) {
  return ASPxClientCalendar.AddDays(this.startDate, index);
 },
 GetIndexByDate: function(date) {
  return ASPxClientCalendar.GetDaysInRange(this.startDate, date) - 1;
 },
 IsDateOtherPeriod: function(date) {
  if(date == null)
   return false;
  return date.getMonth() != this.visibleDate.getMonth() ||
   date.getFullYear() != this.visibleDate.getFullYear();
 },
 GetDateCellColIndex: function(index) {
  var result = index % 7;
  if(this.calendar.showWeekNumbers)
   result++;
  return result;
 },
 GetDateCellRowIndex: function(index) {
  var result = (index - index % 7) / 7;
  if(this.calendar.showDayHeaders)
   result++;
  return result;
 },
 GetMaxIndex: function() {
  return 7 * calendarWeekCount - 1;
 },
 GetMaxVisibleDate: function() {
  var result = ASPxClientCalendar.CloneDate(this.visibleDate);
  result.setDate(ASPxClientCalendar.GetDaysInMonth(result.getMonth(), result.getFullYear()));
  return result;
 },
 GetDateCellContainer: function() {
  return this.GetMonthTable();
 },
 GetMainElement: function() {
  return this.GetMonthCell();
 },
 GetAnimatedElement: function() {
  return this.GetMonthTable();
 },
 GetMonthTable: function() {
  return this.calendar.GetMonthTable(this.calendar.IsMultiView() ? this.GetIDPostfix() : "");
 },
 GetMonthCell: function() {
  return this.calendar.GetMonthCell(this.calendar.IsMultiView() ? this.GetIDPostfix() : "");
 },
 GetWeekNumberCell: function(index) {
  if(this.calendar.showDayHeaders)
   index++;
  return this.GetMonthTable().rows[index].cells[0];
 },
 GetPrevYearCell: function() {
  return this.GetChildElement("PYC");
 },
 GetPrevMonthCell: function() {
  return this.GetChildElement("PMC");
 },
 GetNextMonthCell: function() {
  return this.GetChildElement("NMC");
 },
 GetNextYearCell: function() {
  return this.GetChildElement("NYC");
 },
 UpdateDateCellHtml: function() {
  var date = ASPxClientCalendar.CloneDate(this.startDate);
  var offset = this.calendar.firstDayOfWeek - 1;
  if(offset < 0)
   offset += 7;
  var weekNumber = ASPxClientCalendar.GetISO8601WeekOfYear(ASPxClientCalendar.AddDays(date, offset));
  var cell;
  for(var i = 0; i < calendarWeekCount; i++) {
   if(this.calendar.showWeekNumbers)
    this.calendar.SetMonthTableCellContent(this.GetWeekNumberCell(i), (weekNumber < 10 ? "0" : "") + weekNumber.toString(), true);
   for(var j = 0; j < 7; j++) {
    cell = this.GetDayCell(i * 7 + j);
    this.calendar.SetMonthTableCellContent(cell, this.IsDateVisible(date) ? date.getDate() : "&nbsp;");
    this.ApplyDayCellStyle(cell, date);
    date = this.GetNextDate(date);
   }
   if(++weekNumber > 52)
    weekNumber = ASPxClientCalendar.GetISO8601WeekOfYear(ASPxClientCalendar.AddDays(date, offset));
  }
 },
 GetTitleText: function() {
  if(!this.titleFormatter) {
   this.titleFormatter = new ASPx.DateFormatter();
   this.titleFormatter.SetFormatString(this.calendar.rtl ? "MMMM yyyy" : ASPx.CultureInfo.yearMonth);
  }
  return this.titleFormatter.Format(this.visibleDate);
 },
 SupportsWeekendStyle: function(date) {
  return true;
 },
 MakeDisabledStateItems: function() {
  var cells = this.GetAuxCells();
  for(var i = 0; i < cells.length; i++)
   this.AddAuxDisabledStateItem(cells[i], this.GetAuxId(i));
  ASPxClientCalendarView.prototype.MakeDisabledStateItems.call(this);
 },
 ChangeEnabledStateItems: function(enabled) {
  this.SetAuxCellsEnabled(enabled);
  ASPxClientCalendarView.prototype.ChangeEnabledStateItems.call(this, enabled);
 },
 SetAuxCellsEnabled: function(enabled) {
  var cells = this.GetAuxCells();
  for(var i = 0; i < cells.length; i++)
   ASPx.GetStateController().SetElementEnabled(cells[i], enabled);
 },
 GetNavigationCells: function() {
  return [
   this.GetPrevYearCell(),
   this.GetPrevMonthCell(),
   this.GetNextMonthCell(),
   this.GetNextYearCell()
  ];
 },
 GetAuxCells: function() {
  if(this.auxCells == null) {
   this.auxCells = [];
   var table = this.GetMonthTable();
   for(var i = 0; i < table.rows.length; i++) {
    var row = table.rows[i];
    if(i == 0 && this.calendar.showDayHeaders) {
     for(var j = 0; j < row.cells.length; j++)
      this.auxCells.push(row.cells[j]);
    }
    if(i > 0 && this.calendar.showWeekNumbers)
     this.auxCells.push(row.cells[0]);
   }
  }
  return this.auxCells;
 },
 GetAuxId: function(index) {
  return this.calendar.name + "_AUX_" + this.row + "_" + this.column + "_" + index;
 },
 AddAuxDisabledStateItem: function(element, id) {
  var cell = this.calendar.GetEtalonStyleCell("DD");
  if(cell) {
   element.id = id;
   ASPx.GetStateController().AddDisabledItem(id, cell.className, cell.style.cssText, null, null, null);
  }
 },
 GetVisibleDateOffsetInfo: function() {
  return {
   month: this.GetIndex(),
   year: 0
  };
 },
 GetViewType: function() { return ASPx.DatePickerType.Days; },
 AllowAttachDetachDateEventsOnChangeEnabled: function() {
  return !this.calendar.GetReadOnly();
 },
 AllowAttachDetachDateEventsOnChangeReadOnly: function() {
  return this.calendar.clientEnabled;
 },
 GetCellStyleName: function() { return "D"; },
 GetCellSelectedStyleName: function() { return "DS"; },
 GetCellHoverStyleName: function() { return "DH"; },
 GetCellOtherPeriodStyleName: function() { return "DA"; },
 GetCellOutOfRangeStyleName: function() { return "DO"; },
 GetCellDisabledStyleName: function() { return "DDD"; },
 GetDateCellSelector: function() { return "td[class*=\"dxeCalendarDay\"]"; },
});
ASPxClientCalendarView.DayInRangeClassName = "dxeDayInRange";
var ASPxClientCalendarLargeTimePeriodView = ASPx.CreateClass(ASPxClientCalendarView, {
 constructor: function(calendar, row, column) {
  this.constructor.prototype.constructor.call(this, calendar, row, column);
  if(calendar.fastNavRollbackTexts && this.isNavigationView)
   this.headerRollbackText = calendar.fastNavRollbackTexts[this.GetViewType() - 1];
 },
 GetMaxIndex: function() {
  return 11;
 },
 GetPrevTimePeriodCell: function() {
  return this.GetChildElement("PTPC");
 },
 GetNextTimePeriodCell: function() {
  return this.GetChildElement("NTPC");
 },
 Update: function() {
  ASPxClientCalendarView.prototype.Update.call(this);
  this.UpdateFastNavHeader();
 },
 UpdateFastNavHeader: function() {
  var fastNavHeader = this.GetFastNavHeader();
  if(fastNavHeader) {
   ASPx.SetElementDisplay(fastNavHeader, this.isNavigationView);
   if(this.isNavigationView) {
    var textElement = this.GetFastNavHeaderTextElement();
    if(textElement)
     ASPx.SetInnerHtml(textElement, this.headerRollbackText);
   }
  }
 },
 UpdateNavigationCells: function(date) {
  var prevPeriodCell = this.GetPrevTimePeriodCell();
  var isEnabledDate = date.getFullYear() > 100;
  if(prevPeriodCell && ASPx.GetElementVisibility(prevPeriodCell) != isEnabledDate) {
   ASPx.SetElementVisibility(prevPeriodCell, isEnabledDate);
  }
  var nextPeriodCell = this.GetNextTimePeriodCell();
  isEnabledDate = date.getFullYear() < 9999;
  if(nextPeriodCell && ASPx.GetElementVisibility(nextPeriodCell) != isEnabledDate) {
   ASPx.SetElementVisibility(nextPeriodCell, isEnabledDate);
  }
 },
 IsPrevNavCell: function(navigationCell) {
  return navigationCell == this.GetPrevTimePeriodCell();
 },
 IsNextNavCell: function(navigationCell) {
  return navigationCell == this.GetNextTimePeriodCell();
 },
 GetNavigationCellOffset: function(navigationCell) {
  if(navigationCell == this.GetPrevTimePeriodCell())
   return -1;
  if(navigationCell == this.GetNextTimePeriodCell())
   return 1;
  return 0;
 },
 GetYearCell: function() {
  return this.calendar.GetYearCell(this.calendar.IsMultiView() ? this.GetIDPostfix() : "");
 },
 GetFastNavHeader: function() {
  return this.calendar.GetFastNavHeader(this.calendar.IsMultiView() ? this.GetIDPostfix() : "");
 },
 GetFastNavHeaderTextElement: function() {
  var idPostfix = this.calendar.IsMultiView() ? this.GetIDPostfix() : "";
  idPostfix += "_rt";
  return this.calendar.GetFastNavHeaderTextElement(idPostfix);
 },
 GetAnimatedElement: function() {
  return this.GetYearCell();
 },
 SupportsWeekendStyle: function(date) {
  return false;
 },
 GetNavigationCells: function() {
  return [
   this.GetPrevTimePeriodCell(),
   this.GetNextTimePeriodCell()
  ];
 },
 GetDateCellContainer: function() {
  var idPostfix = this.calendar.IsMultiView() ? this.GetIDPostfix() : "";
  idPostfix += "_n";
  return this.calendar.GetYearCellChildArea(idPostfix);
 },
 GetDateCellColIndex: function(index) {
  return index % 4;
 },
 GetDateCellRowIndex: function(index) {
  return (index - index % 4) / 4;
 },
 GetMainElement: function() {
  return this.GetYearCell();
 },
 ChangeEnabledStateItems: function(enabled) {
  if(!this.isNavigationView)
   ASPxClientCalendarView.prototype.ChangeEnabledStateItems.call(this, enabled);
 },
 ChangeEnabledAttributes: function(enabled) {
  if(!this.isNavigationView)
   ASPxClientCalendarView.prototype.ChangeEnabledAttributes.call(this, enabled);
 },
 AttachDateMouseEvents: function(eventMethod, styleMethod) {
  var index;
  var date;
  for(var index = 0; index <= this.GetMaxIndex() ; index++) {
   cell = this.GetDayCell(index);
   date = this.GetDateByIndex(index);
   var cal = this.calendar;
   if(!this.isNavigationView && !this.calendar.enableMulti && this.IsDateVisible(date) &&
    ASPxClientCalendarDateDisabledHelper.IsDateInRange(cal.sharedParameters, date) &&
    !cal.IsDateDisabled(date)) {
    if(this.calendar.needToSetCursor && (!cell.style.cursor || cell.style.cursor == ASPx.GetPointerCursor()))
     styleMethod(cell, "cursor", ASPx.GetPointerCursor());
   }
   this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(index, false));
  }
 },
 AllowAttachDetachDateEventsOnChangeEnabled: function() {
  return true;
 },
 AllowAttachDetachDateEventsOnChangeReadOnly: function() {
  return false;
 },
 GetCellStyleName: function() { return this.isNavigationView ? "FNI" : "MY"; },
 GetCellHoverStyleName: function() { return this.isNavigationView ? "FNIH" : "MYH"; },
 GetCellSelectedStyleName: function() { return this.isNavigationView ? "FNIS" : "MYS"; },
 GetCellOtherPeriodStyleName: function() { return this.isNavigationView ? "FNIA" : "MYA"; },
 GetCellOutOfRangeStyleName: function() { return "MYO"; },
 GetCellDisabledStyleName: function() { return "MYDD"; },
 GetDateCellSelector: function() { return "td[class*=\"dxeCalendarFastNavItemArea\"] td[class*=\"dxeCalendarFastNavItem\"]"; }
});
var ASPxClientCalendarMonthsView = ASPx.CreateClass(ASPxClientCalendarLargeTimePeriodView, {
 constructor: function(calendar, row, column) {
  this.constructor.prototype.constructor.call(this, calendar, row, column);
 },
 GetTitleText: function() {
  return this.startDate.getFullYear();
 },
 IsDateOtherPeriod: function(date) {
  return date.getFullYear() != this.visibleDate.getFullYear();
 },
 GetCurrentVisibleDate: function() {
  return ASPxClientCalendar.AddYears(this.calendar.visibleDates[this.GetViewType()], this.GetIndex());
 },
 GetCurrentStartDate: function(visibleDate) {
  return new Date(visibleDate.getFullYear(), 0, 1);
 },
 GetDateByIndex: function(index) {
  return ASPxClientCalendar.AddMonths(this.startDate, index);
 },
 GetIndexByDate: function(date) {
  return date.getMonth() + 12 * (date.getFullYear() - this.startDate.getFullYear());
 },
 UpdateDateCellHtml: function() {
  var date = ASPxClientCalendar.CloneDate(this.startDate);
  var cell;
  for(var i = 0; i <= this.GetMaxIndex(); i++) {
   cell = this.GetDayCell(i);
   cell.innerHTML = ASPx.CultureInfo.abbrMonthNames[i];
   this.ApplyDayCellStyle(cell, date);
   date = this.GetNextDate(date);
  }
 },
 GetVisibleDateOffsetInfo: function() {
  return {
   month: 0,
   year: this.GetIndex()
  };
 },
 GetViewType: function() { return ASPx.DatePickerType.Months; },
});
var ASPxClientCalendarYearsView = ASPx.CreateClass(ASPxClientCalendarLargeTimePeriodView, {
 constructor: function(calendar, row, column) {
  this.constructor.prototype.constructor.call(this, calendar, row, column);
 },
 GetTitleText: function() {
  var startYear = this.startDate.getFullYear();
  return ASPx.DateUtils.GetYearRangeFormatString(startYear + 1, 10);
 },
 IsDateOtherPeriod: function(date) {
  return date != null && ASPxClientCalendar.GetDecadeStartYear(date.getFullYear()) !== ASPxClientCalendar.GetDecadeStartYear(this.visibleDate.getFullYear());
 },
 GetCurrentVisibleDate: function() {
  return ASPxClientCalendar.AddYears(this.calendar.visibleDates[this.GetViewType()], this.GetIndex() * 10);
 },
 GetCurrentStartDate: function(visibleDate) {
  var decadeStartYear = ASPxClientCalendar.GetDecadeStartYear(visibleDate.getFullYear());
  return new Date(decadeStartYear - 1, 0, 1);
 },
 GetDateByIndex: function(index) {
  return ASPxClientCalendar.AddYears(this.startDate, index);
 },
 GetIndexByDate: function(date) {
  return date.getFullYear() - this.startDate.getFullYear();
 },
 UpdateDateCellHtml: function() {
  var date = ASPxClientCalendar.CloneDate(this.startDate);
  var cell;
  for(var i = 0; i <= this.GetMaxIndex(); i++) {
   cell = this.GetDayCell(i);
   cell.innerHTML = this.IsDateVisible(date) ? date.getFullYear() : "";
   this.ApplyDayCellStyle(cell, date);
   date = this.GetNextDate(date);
  }
 },
 GetVisibleDateOffsetInfo: function() {
  return {
   month: 0,
   year: this.GetIndex() * 10
  };
 },
 GetViewType: function() { return ASPx.DatePickerType.Years; },
});
var ASPxClientCalendarDecadesView = ASPx.CreateClass(ASPxClientCalendarLargeTimePeriodView, {
 constructor: function(calendar, row, column) {
  this.constructor.prototype.constructor.call(this, calendar, row, column);
 },
 GetTitleText: function() {
  var startYear = this.startDate.getFullYear();
  return ASPx.DateUtils.GetYearRangeFormatString(startYear + 10, 100);
 },
 IsDateOtherPeriod: function(date) {
  return date != null && ASPxClientCalendar.GetCenturyStartYear(date.getFullYear()) !== ASPxClientCalendar.GetCenturyStartYear(this.visibleDate.getFullYear());
 },
 GetCurrentVisibleDate: function() {
  return ASPxClientCalendar.AddYears(this.calendar.visibleDates[this.GetViewType()], this.GetIndex() * 100);
 },
 GetCurrentStartDate: function(visibleDate) {
  var centuryStartYear = ASPxClientCalendar.GetCenturyStartYear(visibleDate.getFullYear());
  return new Date(centuryStartYear - 10, 0, 1);
 },
 GetDateByIndex: function(index) {
  return ASPxClientCalendar.AddYears(this.startDate, index * 10);
 },
 GetIndexByDate: function(date) {
  return Math.floor((date.getFullYear() - this.startDate.getFullYear()) / 10);
 },
 UpdateDateCellHtml: function() {
  var date = ASPxClientCalendar.CloneDate(this.startDate);
  var cell;
  for(var i = 0; i <= this.GetMaxIndex() ; i++) {
   cell = this.GetDayCell(i);
   var dateYear = date.getFullYear();
   cell.innerHTML = this.IsDateVisible(date) ? ASPx.DateUtils.GetYearRangeFormatString(dateYear, 10) : "";
   this.ApplyDayCellStyle(cell, date);
   date = this.GetNextDate(date);
  }
 },
 GetVisibleDateOffsetInfo: function() {
  return {
   month: 0,
   year: this.GetIndex() * 100
  };
 },
 GetViewType: function() { return ASPx.DatePickerType.Decades; },
});
var ASPxClientCalendarFastNavigation = ASPx.CreateClass(null, {
 constructor: function(calendar) {
  this.calendar = calendar;
  this.activeMonth = -1;
  this.activeYear = -1;
  this.startYear = -1;
  this.activeView = null;
  this.partialId = "FNP";
  this.InitializeUI();
 },
 InitializeUI: function() {
  var item;
  var prefix = this.GetId();
  for(var m = 0; m < 12; m++) {
   item = this.GetMonthItem(m);
   if(!ASPx.IsExistsElement(item))
    break;
   item.id = prefix + "_M" + m;
   ASPx.Evt.AttachEventToElement(item, "click", ASPxClientCalendar.AnonymousHandlers.FastNavMonthClick(this.calendar.name, m));
  }
  for(var i = 0; i < 10; i++) {
   item = this.GetYearItem(i);
   if(!ASPx.IsExistsElement(item))
    break;
   item.id = prefix + "_Y" + i;
   ASPx.Evt.AttachEventToElement(item, "click", ASPxClientCalendar.AnonymousHandlers.FastNavYearClick(this.calendar.name, i));
  }
  ASPx.Evt.AttachEventToElement(this.GetPopupWindowElement(), "click", ASPxClientCalendar.AnonymousHandlers.MainElementClick(this.calendar.name));
  this.InitializePopup();
 },
 InitializePopup: function() {
  var popup = this.GetPopup();
  if(popup)
   popup.CloseUp.AddHandler(function(s, e) { this.Hide(); }.aspxBind(this));
 },
 IsActive: function() {
  return this.GetPopup().IsVisible();
 },
 Show: function() {
  this.Prepare();
  this.GetPopup().ShowAtElement(this.activeView.GetTitleElement());
 },
 Hide: function() {
  this.GetPopup().Hide();
 },
 SetMonth: function(month) {
  if(month != this.activeMonth) {
   var prevCell = this.GetMonthItem(this.activeMonth);
   var cell = this.GetMonthItem(month);
   if(ASPx.IsExistsElement(prevCell))
    this.ApplyItemStyle(prevCell, false, "M");
   this.ApplyItemStyle(cell, true, "M");
   this.activeMonth = month;
  }
 },
 ShiftMonth: function(offset) {
  var month = (this.activeMonth + offset) % 12;
  month = (month < 0) ? month + 12 : month;
  this.SetMonth(month);
 },
 SetYear: function(year) {
  var startYear = Math.floor(year / 10) * 10;
  this.SetStartYear(startYear);
  this.SetYearIndex(year - startYear);
 },
 SetYearIndex: function(index) {
  var prevIndex = this.activeYear - this.startYear;
  if(index != prevIndex) {
   var prevCell = this.GetYearItem(prevIndex);
   if(ASPx.IsExistsElement(prevCell))
    this.ApplyItemStyle(prevCell, false, "Y");
   var cell = this.GetYearItem(index);
   this.ApplyItemStyle(cell, true, "Y");
   this.activeYear = index + this.startYear;
  }
 },
 SetStartYear: function(year) {
  if(this.startYear == year) return;
  this.startYear = year;
  this.PrepareYearList();
 },
 ShiftYear: function(offset) {
  if(this.activeYear + offset > 99 && this.activeYear + offset < 9999)
   this.SetYear(this.activeYear + offset);
 },
 ShiftStartYear: function(offset) {
  this.SetStartYear(this.startYear + offset);
 },
 ApplyChanges: function() {
  this.Hide();
  var offset = this.calendar.GetOffsetInCurrentViewTypePeriods(this.calendar.visibleDate, new Date(this.activeYear, this.activeMonth, 1));
  offset -= this.activeView.GetIndex();
  if(offset != 0) {
   var date = this.calendar.GetNewVisibleDateByOffset(offset);
   this.calendar.OnVisibleMonthChanged(date);
  }
  this.calendar.OnMainElementClick();
 },
 CancelChanges: function() {
  this.Hide();
 },
 Prepare: function() {
  var date = this.activeView.visibleDate;
  this.activeYear = date.getFullYear();
  this.activeMonth = date.getMonth();
  this.startYear = ASPxClientCalendar.GetDecadeStartYear(this.activeYear);
  this.PrepareMonthList();
  this.PrepareYearList();
 },
 PrepareMonthList: function() {
  var item;
  for(var month = 0; month < 12; month++) {
   item = this.GetMonthItem(month);
   if(item == null)
    return;
   this.ApplyItemStyle(item, month == this.activeMonth, "M");
  }
 },
 PrepareYearList: function() {
  var year = this.startYear;
  var item;
  for(var index = 0; index < 10; index++) {
   item = this.GetYearItem(index);
   if(item == null)
    return;
   item.innerHTML = year;
   this.ApplyItemStyle(item, year == this.activeYear, "Y");
   year++;
  }
  this.PreparePreviousYearListCell();
  this.PrepareNextYearListCell();
 },
 PreparePreviousYearListCell: function() {
  var yearListTable = this.GetChildElement("y");
  if(!ASPx.IsExistsElement(yearListTable))
   return;
  var isEnabledDate = this.startYear > 100;
  var prevYearListCell = yearListTable.rows[0].cells[0];
  var isPrevYearListCellVisible = ASPx.GetElementVisibility(prevYearListCell);
  if(isPrevYearListCellVisible != isEnabledDate)
   ASPx.SetElementVisibility(prevYearListCell, isEnabledDate);
 },
 PrepareNextYearListCell: function() {
  var yearListTable = this.GetChildElement("y");
  if(!ASPx.IsExistsElement(yearListTable))
   return;
  var firstYearListRow = yearListTable.rows[0];
  var nextYearListCell = firstYearListRow.cells[firstYearListRow.cells.length - 1];
  var isLastYear = this.startYear + 9 == 9999;
  ASPx.SetElementVisibility(nextYearListCell, !isLastYear);
 },
 GetMonthItem: function(month) {
  var t = this.GetChildElement("m");
  if(!ASPx.IsExistsElement(t))
   return null;
  var colIndex = month % 4;
  var rowIndex = (month - colIndex) / 4;
  return t.rows[rowIndex].cells[colIndex];
 },
 GetYearItem: function(index) {
  var t = this.GetChildElement("y");
  if(!ASPx.IsExistsElement(t) || index < 0 || index > 9)
   return null;
  var colIndex = index % 5;
  var rowIndex = (index - colIndex) / 5;
  if(rowIndex == 0)
   colIndex++;
  return t.rows[rowIndex].cells[colIndex];
 },
 GetPopup: function() {
  return ASPx.GetControlCollection().Get(this.GetId());
 },
 GetPopupWindowElement: function() {
  return this.GetPopup().GetWindowElement(-1);
 },
 ApplyItemStyle: function(item, isSelected, type) {
  var info = new ASPxClientCalendarStyleInfo();
  this.calendar.ImportEtalonStyle(info, "FN" + type);
  if(isSelected)
   this.calendar.ImportEtalonStyle(info, "FN" + type + "S");
  info.Apply(item);
 },
 GetChildElement: function(postfix) {
  return ASPx.CacheHelper.GetCachedElementById(this.calendar, this.calendar.name + "_" + this.partialId + "_" + postfix);
 },
 GetId: function() {
  return this.calendar.name + "_" + this.partialId;
 },
 OnArrowUp: function(evt) {
  if(evt.shiftKey)
   this.ShiftMonth(-4);
  else
   this.ShiftYear(-5);
 },
 OnArrowDown: function(evt) {
  if(!evt.shiftKey)
   this.ShiftYear(5);
  else
   this.ShiftMonth(4);
 },
 OnArrowLeft: function(evt) {
  if(evt.shiftKey)
   this.ShiftMonth(-1);
  else
   this.ShiftYear(-1);
 },
 OnArrowRight: function(evt) {
  if(!evt.shiftKey)
   this.ShiftYear(1);
  else
   this.ShiftMonth(1);
 },
 OnPageUp: function(evt) {
  this.ShiftYear(-10);
 },
 OnPageDown: function(evt) {
  this.ShiftYear(10);
 },
 OnEnter: function() {
  this.ApplyChanges();
 },
 OnMonthClick: function(month) {
  this.SetMonth(month);
 },
 OnYearClick: function(index) {
  this.SetYearIndex(index);
 },
 OnYearShuffle: function(offset) {
  this.ShiftStartYear(offset);
 }
});
ASPx.ASPxClientCalendarFastNavigation = ASPxClientCalendarFastNavigation;
var ASPxClientCalendarStyleInfo = ASPx.CreateClass(null, {
 constructor: function() {
  this.className = "";
  this.cssText = "";
 },
 Clone: function() {
  var clone = new ASPxClientCalendarStyleInfo();
  clone.className = this.className;
  clone.cssText = this.cssText;
  return clone;
 },
 Apply: function(element) {
  if(element.className != this.className)
   element.className = this.className;
  if(element._style != this.cssText) {
   element.style.cssText = this.cssText; 
   element._style = this.cssText; 
  } 
 },
 Remove: function(element) {
  ASPx.RemoveClassNameFromElement(element, this.className);
  var styleRules = this.cssText.split(";");
  for(var i = 0; i < styleRules.length; i++) {
   var styleRule = styleRules[i];
   if(styleRule && element.style.cssText.indexOf(styleRule) !== -1)
    element.style.cssText = element.style.cssText.replace(styleRule, "");
  }
  element.style.cssText = element.style.cssText.replace(new RegExp(";+"), ";");
 },
 Import: function(element) {
  if(element.className.length > 0)
   this.AddClassName(element.className);
  var cssText = element.style.cssText;
  if(cssText.length > 0) {
   var pos = cssText.length - 1;
   while(pos > -1 && cssText.charAt(pos) == " ")
    --pos;
   if(cssText.charAt(pos) != ";")
    cssText += ";";
   this.cssText += cssText;
  }
 },
 AddClassName: function(className) {
  if(this.className.length > 1)
   this.className += " ";
  this.className += className;
 },
});
var ASPxClientCalendarSelectionEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, selection){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.selection = selection;
 }
});
var ASPxDaysSelectingOnMouseOverEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function (overDate) {
  this.constructor.prototype.constructor.call(this);
  this.overDate = overDate;
 }
});
var ASPxClientCalendarCellClickEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(date) {
  this.constructor.prototype.constructor.call(this);
  this.date = date;
 }
});
function aspxCalDocMouseUp(evt) {
 var target = ASPx.Evt.GetEventSource(evt);
 if(ASPx.activeCalendar != null && ASPx.IsExistsElement(target)) {
  ASPx.activeCalendar.forceMouseDown = false;
  if(ASPx.activeCalendar.isMouseDown) {
   var activeViews = ASPx.activeCalendar.GetActiveViews();
   for(var key in activeViews) {
    if(activeViews.hasOwnProperty(key)) {
     var view = activeViews[key];
     if(!view.isASPxClientCalendarView || view.isNavigationView) continue;
     var monthCell = view.GetDateCellContainer();
     var parent = target.parentNode;
     while(ASPx.IsExistsElement(parent)) {
      if(parent == monthCell)
       return;
      parent = parent.parentNode;
     }
    }
   }
   ASPx.activeCalendar.OnSelectionCancelled();   
  }
  ASPx.activeCalendar = null;
 }
}
function aspxCalCancelSelect() {
 if(ASPx.activeCalendar != null) {
  ASPx.activeCalendar.forceMouseDown = false;
  ASPx.activeCalendar.OnSelectionCancelled();  
 }
}
ASPx.CalFNYShuffle = function(name, offset) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null)
  edit.fastNavigation.OnYearShuffle(offset);
};
ASPx.CalFNBClick = function(name, action) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) {
  switch(action) {
   case "ok":
    if(edit.fastNavigation)
     edit.fastNavigation.ApplyChanges();
    break;
   case "cancel":
    edit.CancelFastNavigation();
    break;
  }    
 }
};
window.ASPxClientCalendar = ASPxClientCalendar;
window.ASPxClientCalendarCustomDisabledDateEventArgs = ASPxClientCalendarCustomDisabledDateEventArgs;
window.ASPxClientCalendarSelection = ASPxClientCalendarSelection;
window.ASPxClientCalendarDateDisabledHelper = ASPxClientCalendarDateDisabledHelper;
window.ASPxClientCalendarStyleInfo = ASPxClientCalendarStyleInfo;
window.ASPxClientCalendarSelectionEventArgs = ASPxClientCalendarSelectionEventArgs;
})();

(function() {
var ASPxClientButton = ASPx.CreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientButton = true;
  this.allowFocus = true;
  this.autoPostBackFunction = null;
  this.causesValidation = true;
  this.checked = false;
  this.clickLocked = false;
  this.groupName = "";
  this.focusElementSelected = false;
  this.pressed = false;
  this.useSubmitBehavior = true;
  this.validationGroup = "";
  this.validationContainerID = null;
  this.validateInvisibleEditors = false;
  this.originalWidth = null;
  this.originalHeight = null;
  this.needUpdateBounds = true;
  this.isTextEmpty = false;
  this.CheckedChanged = new ASPxClientEvent();
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.Click = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  var mainElement = this.GetMainElement();
  this.originalWidth = mainElement.style.width;
  this.originalHeight = mainElement.style.height;
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeElementIDs();
  this.InitializeEvents();
  this.InitializeEnabled();
  this.InitializeChecked();
  if(this.IsLink())
   this.InitializeLink();
  this.PreventButtonImageDragging();
  this.EnsureBoundsAdjusted();
 },
 InitializeElementIDs: function(){
  var mainElement = this.GetMainElement();
  var contentElement = ASPx.GetNodeByTagName(mainElement, "DIV", 0);
  if(contentElement) contentElement.id = this.name + "_CD";
  var imageElement = ASPx.GetNodeByTagName(mainElement, "IMG", 0);
  if(imageElement) imageElement.id = this.name + "Img";
 },
 InitializeEnabled: function(){
  this.SetEnabledInternal(this.clientEnabled, true);
 },
 InitializeChecked: function(){
  this.SetCheckedInternal(this.checked, true);
 },
 InitializeLink: function(){
  var mainElement = this.GetMainElement();
  if(this.enabled)
   mainElement.href = "javascript:;";
  if(!this.allowFocus)
   mainElement.style.outline = 0;
  if(!this.GetTextContainer())
   mainElement.style.fontSize = "0pt";
 },
 InitializeEvents: function(){
  if(!this.isNative && !this.IsLink()) {
   var element = this.GetInternalButton();
   if(element)
    element.onfocus = null;
   var textControl = this.GetTextControl();
   if(textControl) {
    if(ASPx.Browser.IE)
     ASPx.Evt.AttachEventToElement(textControl, "mouseup", ASPx.Selection.Clear);
    ASPx.Evt.PreventElementDragAndSelect(textControl, false);
   }    
  }
  this.onClick = function(evt) {
   var processOnServer = ASPx.BClick(this.name, evt);
   if(!processOnServer)
    ASPx.Evt.PreventEvent(evt);
   return processOnServer;
  }.aspxBind(this);
  this.onImageMoseDown = function() { var el = ASPx.GetFocusedElement(); if(el) el.blur(); };
  this.onGotFocus = function() { this.OnFocus(); }.aspxBind(this);
  this.onLostFocus = function() { this.OnLostFocus(); }.aspxBind(this);
  this.onKeyUp = function(evt) { this.OnKeyUp(evt); }.aspxBind(this);
  this.onKeyDown = function(evt) { this.OnKeyDown(evt); }.aspxBind(this); 
  if(!this.isNative && !this.IsLink())
   this.InitializeNativeHandlers();
 },
 InitializeNativeHandlers: function() {
  this.AttachNativeHandlerToMainElement("focus", "SetFocus");
  this.AttachNativeHandlerToMainElement("click", "DoClick");
 },
 EnsureBoundsAdjusted: function() {
  var mainElement = this.GetMainElement();
  this.needUpdateBounds = ASPx.GetCurrentStyle(mainElement).display === "block";
  if(this.needUpdateBounds) 
   mainElement.className = mainElement.className.replace("dxbTSys", "");
 },
 AdjustControlCore: function () {
  if(this.isNative || this.IsLink()) return;
  var buttonImage = this.GetButtonImage();  
  if(buttonImage && buttonImage.offsetHeight === 0 && buttonImage.offsetWidth === 0)
   buttonImage.onload = function() { this.UpdateSize(); }.aspxBind(this);
  else
   this.UpdateSize();
  this.UpdateVerticalAlign();
 },
 UpdateSize: function() {
  if(this.needUpdateBounds) {
   this.UpdateWidth();
   this.UpdateHeight();
  } else
   this.CorrectWrappedText(this.GetContentDiv, "Text", true);
 },
 UpdateVerticalAlign: function() {
  var contentElement = this.GetContentDiv();
  var verticalAlign = this.GetMainElement().style.verticalAlign;
  if(ASPx.IsExistsElement(contentElement) && verticalAlign)
   contentElement.style.verticalAlign = verticalAlign;
 },
 UpdateHeight: function(){
  if(this.isNative || this.IsLink() || this.originalHeight === null || ASPx.IsPercentageSize(this.originalHeight)) return;
  var height;
  var mainElement = this.GetMainElement();
  var contentDiv = this.GetContentDiv();
  var borderAndPadding = ASPx.GetTopBottomBordersAndPaddingsSummaryValue(mainElement);
  var contentHasExcessiveHeight = contentDiv.offsetHeight > mainElement.offsetHeight - borderAndPadding;
  var needSetAutoHeight = !this.originalHeight || (ASPx.Browser.Safari && contentHasExcessiveHeight);
  if(needSetAutoHeight) {
   mainElement.style.height = "";
   height = mainElement.offsetHeight - borderAndPadding;
  }
  else
   height = (ASPx.PxToInt(this.originalHeight) - borderAndPadding);
  if(height){
   mainElement.style.height = height + "px";
   if(contentDiv && contentDiv.offsetHeight > 0){
    var contentDivCurrentStyle = ASPx.GetCurrentStyle(contentDiv);
    var paddingTop = parseInt(contentDivCurrentStyle.paddingTop) || 0;
    var paddingBottom = parseInt(contentDivCurrentStyle.paddingBottom) || 0;
    var clientHeightDiff = height - contentDiv.offsetHeight;
    var verticalAlign = ASPx.GetCurrentStyle(mainElement).verticalAlign;
    if(verticalAlign == "top")
     paddingBottom = paddingBottom + clientHeightDiff;
    else if(verticalAlign == "bottom")
     paddingTop = paddingTop + clientHeightDiff;
    else {
     var halfClientHeightDiff = Math.floor(clientHeightDiff / 2);
     paddingTop = paddingTop + halfClientHeightDiff;
     paddingBottom = paddingBottom + (clientHeightDiff - halfClientHeightDiff);
    }
    contentDiv.style.paddingTop = (paddingTop > 0 ? paddingTop : 0) + "px";
    contentDiv.style.paddingBottom = (paddingBottom > 0 ? paddingBottom : 0) + "px";
   }
  }
 },
 UpdateWidth: function(){
  if(this.isNative || this.IsLink() || this.originalWidth === null) return;
  if(!ASPx.IsPercentageSize(this.originalWidth)) {
   var mainElement = this.GetMainElement();
   var borderAndPadding = ASPx.GetLeftRightBordersAndPaddingsSummaryValue(mainElement);
   if(this.originalWidth && ASPx.IsTextWrapped(this.GetTextContainer()))
    mainElement.style.width = (ASPx.PxToInt(this.originalWidth) - borderAndPadding) + "px";
   else
    mainElement.style.width = "auto";
   var width = mainElement.offsetWidth - borderAndPadding;
   if(this.originalWidth && width < ASPx.PxToInt(this.originalWidth) - borderAndPadding) 
    width = ASPx.PxToInt(this.originalWidth) - borderAndPadding;
   if(width)
    mainElement.style.width = (width > 0 ? width : 0)  + "px";
  }
  this.CorrectWrappedText(this.GetContentDiv, "Text", true);
 },
 GetAdjustedSizes: function() {
  var sizes = ASPxClientControl.prototype.GetAdjustedSizes.call(this);
  var image = this.GetButtonImage();
  if(image) {
   sizes.imageWidth = image.offsetWidth;
   sizes.imageHeight = image.offsetHeight;
  }
  return sizes;
 },
 PreventButtonImageDragging: function() {
  ASPx.Evt.PreventImageDragging(this.GetButtonImage());
 },
 AttachNativeHandlerToMainElement: function(handlerName, correspondingMethodName) {
  var mainElement = this.GetMainElement();
  if(!ASPx.IsExistsElement(mainElement))
   return;
  mainElement[handlerName] = function() { _aspxBCallButtonMethod(this.name, correspondingMethodName); }.aspxBind(this);
 },
 GetContentDiv: function(){
  return this.GetChildElement("CD");
 },       
 GetButtonImage: function(){
  return ASPx.CacheHelper.GetCachedElement(this, "buttonImage", 
   function() { 
    return ASPx.GetNodeByTagName(this.GetMainElement(), "IMG", 0); 
   });
 },
 GetInternalButton: function() {
  return ASPx.CacheHelper.GetCachedElement(this, "internalButton", 
   function() { 
    return this.isNative || this.IsLink() ? this.GetMainElement() : ASPx.GetNodeByTagName(this.GetMainElement(), "INPUT", 0);
   });
 },
 GetTextContainer: function() {
  return ASPx.CacheHelper.GetCachedElement(this, "textContainer", 
   function() { 
    if(this.isNative)
     return this.GetMainElement();
    else{
     var textElement = this.IsLink() ? this.GetMainElement() : this.GetContentDiv();
     return this.accessibilityCompliant ? ASPx.GetElementById(this.name + "_BTC") : ASPx.GetNodeByTagName(textElement, "SPAN", 0);
    }
   });
 },
 GetTextControl: function(){
  return ASPx.CacheHelper.GetCachedElement(this, "textControl", 
   function() { 
    var element = ASPx.GetParentByTagName(this.GetContentDiv(), "DIV");
    if(!ASPx.IsExistsElement(element) || (element.id == this.name))
     element = this.GetContentDiv();
    return element;
   });
 },
 IsLink: function(){
  if (this.GetMainElement())
   return this.GetMainElement().tagName === "A";
  return false;
 },   
 IsHovered: function(){
  var hoverElement = this.GetMainElement();
  return ASPx.GetStateController().currentHoverItemName == hoverElement.id;
 },   
 SetEnabledInternal: function(enabled, initialization) {
  if(!this.enabled)
   return;
  if(!initialization || !enabled)
   this.ChangeEnabledStateItems(enabled);
  this.ChangeEnabledAttributes(enabled);
 },
 ChangeEnabledAttributes: function(enabled) {
  var element = this.GetInternalButton();
  if(element) {
   if(this.IsLink()){
    var method = ASPx.Attr.ChangeAttributesMethod(enabled);
    var link = this.GetMainElement();
    method(link, "href");
    if(this.accessibilityCompliant)
     ASPx.Attr.SetOrRemoveAttribute(link, ASPx.Attr.GetTabIndexAttributeName(), enabled ? null : "0");
   } else
    element.disabled = !enabled;
  }
  this.ChangeEnabledEventsAttributes(ASPx.Attr.ChangeEventsMethod(enabled));
 },
 ChangeEnabledEventsAttributes: function(method) {
  var element = this.GetMainElement();
  method(element, "click", this.onClick);
  if(this.allowFocus){
   if(!this.isNative && !this.IsLink()) 
    element = this.GetInternalButton();
   if(element) {
    method(element, "focus", this.onGotFocus);
    method(element, "blur", this.onLostFocus);
    if(!this.isNative && !this.IsLink()){
     method(element, "keyup", this.onKeyUp);
     method(element, "blur", this.onKeyUp);
     method(element, "keydown", this.onKeyDown);
    }
   }
   if(ASPx.Browser.Firefox){
    var image = this.GetButtonImage();
    if(image)
     method(image, "mousedown", this.onImageMoseDown); 
   }
  }
 },
 ChangeEnabledStateItems: function(enabled){
  if(this.isNative) return;
  ASPx.GetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  this.UpdateFocusedStyle();
 },
 RequiredPreventDoublePostback: function(){
  return ASPx.Browser.Firefox && !this.isNative; 
 },
 OnFocus: function() {
  if(!this.allowFocus)
   return false;
  this.focused = true;
  if(this.isInitialized)
   this.RaiseFocus();
  this.UpdateFocusedStyle();
 },  
 OnLostFocus: function() {
  if(!this.allowFocus)
   return false;
  this.focused = false;
  if(this.isInitialized)
   this.RaiseLostFocus();
  this.UpdateFocusedStyle();
 },
 CauseValidation: function() {
  if(this.causesValidation && ASPx.Ident.scripts.ASPxClientEdit)
   return this.validationContainerID != null ?
    ASPxClientEdit.ValidateEditorsInContainerById(this.validationContainerID, this.validationGroup, this.validateInvisibleEditors) :
    ASPxClientEdit.ValidateGroup(this.validationGroup, this.validateInvisibleEditors);
  else
   return true;
 },
 OnClick: function(evt) {
  if(this.clickLocked) return true;
  if(this.checked && this.groupName != "" && this.GetCheckedGroupList().length > 1) return;
  this.SetFocus();
  var isValid = this.CauseValidation();
  var processOnServer = this.autoPostBack;
  if(this.groupName != "") {
   if(this.GetCheckedGroupList().length == 1)
    this.SetCheckedInternal(!this.checked, false);
   else {
    this.SetCheckedInternal(true, false);
    this.ClearButtonGroupChecked(true);
   }
   processOnServer = this.RaiseCheckedChanged();
   if(processOnServer && isValid)
    this.SendPostBack("CheckedChanged");
  }
  var params = this.RaiseClick();
  if(evt && params.cancelEventAndBubble)
   ASPx.Evt.PreventEventAndBubble(evt);
  if(params.processOnServer && isValid)
   return this.ProcessClick();
  return false;
 },
 ProcessClick: function() {
  var requiredPreventDoublePostback = this.RequiredPreventDoublePostback();
  var postponePostback = ASPx.Browser.AndroidMobilePlatform; 
  if(requiredPreventDoublePostback || postponePostback)
   window.setTimeout(function() { _aspxBCallButtonMethod(this.name, "SendPostBack", "Click"); }.aspxBind(this), 0); 
  else
   this.SendPostBack("Click");
  return !requiredPreventDoublePostback;
 },
 OnKeyUp: function(evt) {
  if(!this.pressed)
   return;
  this.pressed = false;
  ASPx.GetStateController().OnKeyUpOnElement(evt);
 },
 OnKeyDown: function(evt) {
  if(evt.keyCode == ASPx.Key.Enter || evt.keyCode == ASPx.Key.Space)
   this.SetPressed();
 },
 GetCheckedGroupList: function(){
  var result = [ ];
  ASPx.GetControlCollection().ForEachControl(function(control) {
   if(ASPx.Ident.IsASPxClientButton(control) && (control.groupName == this.groupName) && !control.IsDOMDisposed())
    result.push(control);
  }, this);
  return result;
 },
 ClearButtonGroupChecked: function(raiseCheckedChanged){
  var list = this.GetCheckedGroupList();
  for(var i = 0; i < list.length; i ++){
   if(list[i] != this && list[i].checked) {
    list[i].SetCheckedInternal(false, false);
    if(raiseCheckedChanged)
     list[i].RaiseCheckedChanged();
   }
  }
 },
 ApplyCheckedStyle: function(){
  var stateController = ASPx.GetStateController();
  if(this.IsHovered()) 
   stateController.SetCurrentHoverElement(null);  
  stateController.SelectElementBySrcElement(this.GetMainElement());
 }, 
 ApplyUncheckedStyle: function(){
  var stateController = ASPx.GetStateController();
  if(this.IsHovered()) 
   stateController.SetCurrentHoverElement(null);
  stateController.DeselectElementBySrcElement(this.GetMainElement());
 },  
 SetCheckedInternal: function(checked, initialization){
  if(initialization && checked || (this.checked != checked)){
   this.checked = checked;
   if(checked)
    this.ApplyCheckedStyle();
   else
    this.ApplyUncheckedStyle();
  }
 },
 UpdateStateObject: function(){
  if(this.groupName != "")
   this.UpdateStateObjectWithObject({ checked: this.checked });
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID + "$State";
 },
 ApplyPressedStyle: function(){
  ASPx.GetStateController().OnMouseDownOnElement(this.GetMainElement());
 },
 ApplyUnpressedStyle: function(){ 
  ASPx.GetStateController().OnMouseUpOnElement(this.GetMainElement());
 },
 SetPressed: function(){
  this.pressed = true;
  this.ApplyPressedStyle();
 }, 
 SetUnpressed: function(){
  this.pressed = false;
  this.ApplyUnpressedStyle();
 },
 SetFocus: function(){
  if(!this.allowFocus || this.focused)
   return;
  var element = this.GetInternalButton();
  if(element) {
   var hiddenInternalButtonRequiresVisibilityToGetFocused = ASPx.Browser.WebKitFamily  && !this.isNative  && !this.IsLink();
   if(hiddenInternalButtonRequiresVisibilityToGetFocused)
    ASPxClientButton.MakeHiddenElementFocusable(element);
   if(ASPx.IsFocusable(element) && ASPx.GetActiveElement() != element)
    element.focus();
   if(hiddenInternalButtonRequiresVisibilityToGetFocused)
    ASPxClientButton.RestoreHiddenElementAppearance(element);
  }
 },
 ApplyFocusedStyle: function(){
  if(this.focusElementSelected) return;
  if(typeof(ASPx.GetStateController) != "undefined")
   ASPx.GetStateController().SelectElementBySrcElement(this.GetContentDiv());
  this.focusElementSelected = true;
 },
 ApplyUnfocusedStyle: function(){ 
  if(!this.focusElementSelected) return;
  if(typeof(ASPx.GetStateController) != "undefined")
   ASPx.GetStateController().DeselectElementBySrcElement(this.GetContentDiv());
  this.focusElementSelected = false;
 },
 UpdateFocusedStyle: function(){
  if(this.isNative || this.IsLink()) return;
  if(this.enabled && this.clientEnabled && this.allowFocus && this.focused)
   this.ApplyFocusedStyle();
  else
   this.ApplyUnfocusedStyle();
 },
 SendPostBack: function(postBackArg){
  if(!this.enabled || !this.clientEnabled)
   return;
  var arg = postBackArg || "";
  if(this.autoPostBackFunction)
   this.autoPostBackFunction(arg);
  else if(!this.useSubmitBehavior || this.IsLink())
   ASPxClientControl.prototype.SendPostBack.call(this, arg);
  if(this.useSubmitBehavior && !this.isNative) 
   this.ClickInternalButton();
 },
 ClickInternalButton: function(){
  var element = this.GetInternalButton();
  if(element) {
   this.clickLocked = true;
   if(ASPx.Browser.NetscapeFamily)
    this.CreateUniqueIDCarrier(); 
   var postHandler = ASPx.GetPostHandler();
   postHandler.SetLastSubmitElementName(element.name);
   ASPx.Evt.DoElementClick(element);
   postHandler.SetLastSubmitElementName(null);
   if(ASPx.Browser.NetscapeFamily)
    this.RemoveUniqueIDCarrier(); 
   this.clickLocked = false;
  }
 },
 CreateUniqueIDCarrier: function() {
  var name = this.uniqueID;
  var id = this.GetUniqueIDCarrierID();
  var field = ASPx.CreateHiddenField(name, id);
  var form = this.GetParentForm();
  if(form) form.appendChild(field);
 },
 RemoveUniqueIDCarrier: function() {
  var field = document.getElementById(this.GetUniqueIDCarrierID());
  if(field)
   field.parentNode.removeChild(field);
 },
 GetUniqueIDCarrierID: function() {
  return this.uniqueID + "_UIDC";
 },
 DoClick: function(){
  if(!this.enabled || !this.clientEnabled)
   return;
  var button = (this.isNative || this.IsLink()) ? this.GetMainElement() : this.GetInternalButton();
  if(button)
   ASPx.Evt.DoElementClick(button);
  else 
   this.OnClick();   
 },
 GetChecked: function(){
  return this.checked;
 },
 SetChecked: function(checked){
  this.SetCheckedInternal(checked, false);
  this.ClearButtonGroupChecked(false);
 },
 GetText: function(){
  if(!this.isTextEmpty)
   return this.isNative ? this.GetTextContainer().value : this.GetTextContainer().innerHTML;
  return "";
 },
 SetText: function(text){
  this.isTextEmpty = (text == null || text == "");
  var textContainer = this.GetTextContainer();
  if(textContainer){
   if(this.isNative)
    textContainer.value = (text != null) ? text : "";
   else {
    var value = this.isTextEmpty ? "&nbsp;" : text;
      textContainer.innerHTML = value;
    var element = this.GetInternalButton();
    if(element)
     element.value = value;
    if(this.clientVisible && ASPx.Browser.IE && ASPx.Browser.Version >= 9) 
     ASPx.SetElementDisplay(this.GetMainElement(), true);
   }
   this.UpdateSize();
  }
 },
 GetImageUrl: function(){
  var img = this.GetButtonImage();
  return img ?  img.src : "";
 },
 SetImageUrl: function(url){
  var img = this.GetButtonImage();
  if(img) {
   img.src = url;
   this.UpdateSize();
  }
 },
 SetEnabled: function(enabled){
  if(this.clientEnabled != enabled) {
   if(!enabled && this.focused)
    this.OnLostFocus();
   this.clientEnabled = enabled;
   this.SetEnabledInternal(enabled, false);
  }
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 Focus: function(){
  this.SetFocus();
 },
 RaiseCheckedChanged: function(){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("CheckedChanged");
  if(!this.CheckedChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseFocus: function(){
  if(!this.GotFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.GotFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  if(!this.LostFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.LostFocus.FireEvent(this, args);
  }
 },
 RaiseClick: function() {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("Click");
  var cancelEventAndBubble = false;
  if(!this.Click.IsEmpty()) {
   var args = new ASPxClientButtonClickEventArgs(processOnServer, cancelEventAndBubble);
   this.Click.FireEvent(this, args);
   cancelEventAndBubble = args.cancelEventAndBubble;
   processOnServer = args.processOnServer;
  }
  return {
   processOnServer: processOnServer,
   cancelEventAndBubble: cancelEventAndBubble
  };
 }
});
ASPxClientButton.Cast = ASPxClientControl.Cast;
var ASPxClientButtonClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, cancelEventAndBubble) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.cancelEventAndBubble = cancelEventAndBubble;
 }
});
ASPxClientButton.MakeHiddenElementFocusable = function(element) {
 element.__dxHiddenElementState = {
  parentDisplay: element.parentNode.style.display,
  height: element.style.height,
  width: element.style.width
 };
 element.parentNode.style.display = "block";
 element.style.height = "1px";
 element.style.width = "1px";
};
ASPxClientButton.RestoreHiddenElementAppearance = function(element) {
 var state = element.__dxHiddenElementState;
 element.parentNode.style.display = state.parentDisplay;
 element.style.height = state.height;
 element.style.width = state.width;
 delete element.__dxHiddenElementState;
};
ASPx.Ident.IsASPxClientButton = function(obj) {
 return !!obj.isASPxClientButton;
};
function _aspxBCallButtonMethod(name, methodName, arg) {
 var button = ASPx.GetControlCollection().Get(name); 
 if(button != null)
  button[methodName](arg);
}
ASPx.BClick = function(name, evt) {
 var button = ASPx.GetControlCollection().Get(name); 
 if(button != null)
  return button.OnClick(evt);
};
window.ASPxClientButton = ASPxClientButton;
})();

